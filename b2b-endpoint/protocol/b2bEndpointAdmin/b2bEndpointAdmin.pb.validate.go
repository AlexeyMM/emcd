// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/proto/b2bEndpointAdmin.proto

package b2bEndpointAdmin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SecretMultiError, or nil if none found.
func (m *Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastUsed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "LastUsed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "LastUsed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUsed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretValidationError{
				field:  "LastUsed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SecretMultiError(errors)
	}

	return nil
}

// SecretMultiError is an error wrapping multiple validation errors returned by
// Secret.ValidateAll() if the designated constraints aren't met.
type SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMultiError) AllErrors() []error { return m }

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

// Validate checks the field values on AddClientRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddClientRequestMultiError, or nil if none found.
func (m *AddClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return AddClientRequestMultiError(errors)
	}

	return nil
}

// AddClientRequestMultiError is an error wrapping multiple validation errors
// returned by AddClientRequest.ValidateAll() if the designated constraints
// aren't met.
type AddClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddClientRequestMultiError) AllErrors() []error { return m }

// AddClientRequestValidationError is the validation error returned by
// AddClientRequest.Validate if the designated constraints aren't met.
type AddClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddClientRequestValidationError) ErrorName() string { return "AddClientRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddClientRequestValidationError{}

// Validate checks the field values on AddClientResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddClientResponseMultiError, or nil if none found.
func (m *AddClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddClientResponseMultiError(errors)
	}

	return nil
}

// AddClientResponseMultiError is an error wrapping multiple validation errors
// returned by AddClientResponse.ValidateAll() if the designated constraints
// aren't met.
type AddClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddClientResponseMultiError) AllErrors() []error { return m }

// AddClientResponseValidationError is the validation error returned by
// AddClientResponse.Validate if the designated constraints aren't met.
type AddClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddClientResponseValidationError) ErrorName() string {
	return "AddClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddClientResponseValidationError{}

// Validate checks the field values on GenerateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateKeyRequestMultiError, or nil if none found.
func (m *GenerateKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if len(errors) > 0 {
		return GenerateKeyRequestMultiError(errors)
	}

	return nil
}

// GenerateKeyRequestMultiError is an error wrapping multiple validation errors
// returned by GenerateKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type GenerateKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateKeyRequestMultiError) AllErrors() []error { return m }

// GenerateKeyRequestValidationError is the validation error returned by
// GenerateKeyRequest.Validate if the designated constraints aren't met.
type GenerateKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateKeyRequestValidationError) ErrorName() string {
	return "GenerateKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateKeyRequestValidationError{}

// Validate checks the field values on GenerateKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateKeyResponseMultiError, or nil if none found.
func (m *GenerateKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	if len(errors) > 0 {
		return GenerateKeyResponseMultiError(errors)
	}

	return nil
}

// GenerateKeyResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateKeyResponseMultiError) AllErrors() []error { return m }

// GenerateKeyResponseValidationError is the validation error returned by
// GenerateKeyResponse.Validate if the designated constraints aren't met.
type GenerateKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateKeyResponseValidationError) ErrorName() string {
	return "GenerateKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateKeyResponseValidationError{}

// Validate checks the field values on GetActiveKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActiveKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActiveKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActiveKeysRequestMultiError, or nil if none found.
func (m *GetActiveKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActiveKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if len(errors) > 0 {
		return GetActiveKeysRequestMultiError(errors)
	}

	return nil
}

// GetActiveKeysRequestMultiError is an error wrapping multiple validation
// errors returned by GetActiveKeysRequest.ValidateAll() if the designated
// constraints aren't met.
type GetActiveKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActiveKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActiveKeysRequestMultiError) AllErrors() []error { return m }

// GetActiveKeysRequestValidationError is the validation error returned by
// GetActiveKeysRequest.Validate if the designated constraints aren't met.
type GetActiveKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActiveKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActiveKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActiveKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActiveKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActiveKeysRequestValidationError) ErrorName() string {
	return "GetActiveKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActiveKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActiveKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActiveKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActiveKeysRequestValidationError{}

// Validate checks the field values on GetActiveKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActiveKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActiveKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActiveKeysResponseMultiError, or nil if none found.
func (m *GetActiveKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActiveKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActiveKeysResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActiveKeysResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActiveKeysResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActiveKeysResponseMultiError(errors)
	}

	return nil
}

// GetActiveKeysResponseMultiError is an error wrapping multiple validation
// errors returned by GetActiveKeysResponse.ValidateAll() if the designated
// constraints aren't met.
type GetActiveKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActiveKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActiveKeysResponseMultiError) AllErrors() []error { return m }

// GetActiveKeysResponseValidationError is the validation error returned by
// GetActiveKeysResponse.Validate if the designated constraints aren't met.
type GetActiveKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActiveKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActiveKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActiveKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActiveKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActiveKeysResponseValidationError) ErrorName() string {
	return "GetActiveKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActiveKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActiveKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActiveKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActiveKeysResponseValidationError{}

// Validate checks the field values on DeactivateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeactivateKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateKeyRequestMultiError, or nil if none found.
func (m *DeactivateKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return DeactivateKeyRequestMultiError(errors)
	}

	return nil
}

// DeactivateKeyRequestMultiError is an error wrapping multiple validation
// errors returned by DeactivateKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeactivateKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateKeyRequestMultiError) AllErrors() []error { return m }

// DeactivateKeyRequestValidationError is the validation error returned by
// DeactivateKeyRequest.Validate if the designated constraints aren't met.
type DeactivateKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateKeyRequestValidationError) ErrorName() string {
	return "DeactivateKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateKeyRequestValidationError{}

// Validate checks the field values on DeactivateKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeactivateKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateKeyResponseMultiError, or nil if none found.
func (m *DeactivateKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeactivateKeyResponseMultiError(errors)
	}

	return nil
}

// DeactivateKeyResponseMultiError is an error wrapping multiple validation
// errors returned by DeactivateKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeactivateKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateKeyResponseMultiError) AllErrors() []error { return m }

// DeactivateKeyResponseValidationError is the validation error returned by
// DeactivateKeyResponse.Validate if the designated constraints aren't met.
type DeactivateKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateKeyResponseValidationError) ErrorName() string {
	return "DeactivateKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateKeyResponseValidationError{}

// Validate checks the field values on DeactivateAllKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeactivateAllKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateAllKeysRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateAllKeysRequestMultiError, or nil if none found.
func (m *DeactivateAllKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateAllKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if len(errors) > 0 {
		return DeactivateAllKeysRequestMultiError(errors)
	}

	return nil
}

// DeactivateAllKeysRequestMultiError is an error wrapping multiple validation
// errors returned by DeactivateAllKeysRequest.ValidateAll() if the designated
// constraints aren't met.
type DeactivateAllKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateAllKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateAllKeysRequestMultiError) AllErrors() []error { return m }

// DeactivateAllKeysRequestValidationError is the validation error returned by
// DeactivateAllKeysRequest.Validate if the designated constraints aren't met.
type DeactivateAllKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateAllKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateAllKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateAllKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateAllKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateAllKeysRequestValidationError) ErrorName() string {
	return "DeactivateAllKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateAllKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateAllKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateAllKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateAllKeysRequestValidationError{}

// Validate checks the field values on DeactivateAllKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeactivateAllKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateAllKeysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateAllKeysResponseMultiError, or nil if none found.
func (m *DeactivateAllKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateAllKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeactivateAllKeysResponseMultiError(errors)
	}

	return nil
}

// DeactivateAllKeysResponseMultiError is an error wrapping multiple validation
// errors returned by DeactivateAllKeysResponse.ValidateAll() if the
// designated constraints aren't met.
type DeactivateAllKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateAllKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateAllKeysResponseMultiError) AllErrors() []error { return m }

// DeactivateAllKeysResponseValidationError is the validation error returned by
// DeactivateAllKeysResponse.Validate if the designated constraints aren't met.
type DeactivateAllKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateAllKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateAllKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateAllKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateAllKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateAllKeysResponseValidationError) ErrorName() string {
	return "DeactivateAllKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateAllKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateAllKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateAllKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateAllKeysResponseValidationError{}

// Validate checks the field values on AddIPsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddIPsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIPsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddIPsRequestMultiError, or
// nil if none found.
func (m *AddIPsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIPsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return AddIPsRequestMultiError(errors)
	}

	return nil
}

// AddIPsRequestMultiError is an error wrapping multiple validation errors
// returned by AddIPsRequest.ValidateAll() if the designated constraints
// aren't met.
type AddIPsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIPsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIPsRequestMultiError) AllErrors() []error { return m }

// AddIPsRequestValidationError is the validation error returned by
// AddIPsRequest.Validate if the designated constraints aren't met.
type AddIPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIPsRequestValidationError) ErrorName() string { return "AddIPsRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddIPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIPsRequestValidationError{}

// Validate checks the field values on AddIPsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddIPsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIPsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddIPsResponseMultiError,
// or nil if none found.
func (m *AddIPsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIPsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddIPsResponseMultiError(errors)
	}

	return nil
}

// AddIPsResponseMultiError is an error wrapping multiple validation errors
// returned by AddIPsResponse.ValidateAll() if the designated constraints
// aren't met.
type AddIPsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIPsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIPsResponseMultiError) AllErrors() []error { return m }

// AddIPsResponseValidationError is the validation error returned by
// AddIPsResponse.Validate if the designated constraints aren't met.
type AddIPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIPsResponseValidationError) ErrorName() string { return "AddIPsResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddIPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIPsResponseValidationError{}

// Validate checks the field values on GetIPsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetIPsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIPsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetIPsRequestMultiError, or
// nil if none found.
func (m *GetIPsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIPsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return GetIPsRequestMultiError(errors)
	}

	return nil
}

// GetIPsRequestMultiError is an error wrapping multiple validation errors
// returned by GetIPsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetIPsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIPsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIPsRequestMultiError) AllErrors() []error { return m }

// GetIPsRequestValidationError is the validation error returned by
// GetIPsRequest.Validate if the designated constraints aren't met.
type GetIPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIPsRequestValidationError) ErrorName() string { return "GetIPsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetIPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIPsRequestValidationError{}

// Validate checks the field values on GetIPsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetIPsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIPsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetIPsResponseMultiError,
// or nil if none found.
func (m *GetIPsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIPsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetIPsResponseMultiError(errors)
	}

	return nil
}

// GetIPsResponseMultiError is an error wrapping multiple validation errors
// returned by GetIPsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetIPsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIPsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIPsResponseMultiError) AllErrors() []error { return m }

// GetIPsResponseValidationError is the validation error returned by
// GetIPsResponse.Validate if the designated constraints aren't met.
type GetIPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIPsResponseValidationError) ErrorName() string { return "GetIPsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetIPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIPsResponseValidationError{}

// Validate checks the field values on DeleteIPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteIPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIPRequestMultiError, or nil if none found.
func (m *DeleteIPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	// no validation rules for Ip

	if len(errors) > 0 {
		return DeleteIPRequestMultiError(errors)
	}

	return nil
}

// DeleteIPRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteIPRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteIPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIPRequestMultiError) AllErrors() []error { return m }

// DeleteIPRequestValidationError is the validation error returned by
// DeleteIPRequest.Validate if the designated constraints aren't met.
type DeleteIPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIPRequestValidationError) ErrorName() string { return "DeleteIPRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteIPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIPRequestValidationError{}

// Validate checks the field values on DeleteIPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteIPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIPResponseMultiError, or nil if none found.
func (m *DeleteIPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteIPResponseMultiError(errors)
	}

	return nil
}

// DeleteIPResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteIPResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteIPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIPResponseMultiError) AllErrors() []error { return m }

// DeleteIPResponseValidationError is the validation error returned by
// DeleteIPResponse.Validate if the designated constraints aren't met.
type DeleteIPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIPResponseValidationError) ErrorName() string { return "DeleteIPResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteIPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIPResponseValidationError{}

// Validate checks the field values on DeleteAllIPsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAllIPsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAllIPsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAllIPsRequestMultiError, or nil if none found.
func (m *DeleteAllIPsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllIPsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return DeleteAllIPsRequestMultiError(errors)
	}

	return nil
}

// DeleteAllIPsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAllIPsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAllIPsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllIPsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllIPsRequestMultiError) AllErrors() []error { return m }

// DeleteAllIPsRequestValidationError is the validation error returned by
// DeleteAllIPsRequest.Validate if the designated constraints aren't met.
type DeleteAllIPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllIPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllIPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllIPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllIPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllIPsRequestValidationError) ErrorName() string {
	return "DeleteAllIPsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAllIPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllIPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllIPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllIPsRequestValidationError{}

// Validate checks the field values on DeleteAllIPsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAllIPsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAllIPsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAllIPsResponseMultiError, or nil if none found.
func (m *DeleteAllIPsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllIPsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAllIPsResponseMultiError(errors)
	}

	return nil
}

// DeleteAllIPsResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAllIPsResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAllIPsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllIPsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllIPsResponseMultiError) AllErrors() []error { return m }

// DeleteAllIPsResponseValidationError is the validation error returned by
// DeleteAllIPsResponse.Validate if the designated constraints aren't met.
type DeleteAllIPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllIPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllIPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllIPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllIPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllIPsResponseValidationError) ErrorName() string {
	return "DeleteAllIPsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAllIPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllIPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllIPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllIPsResponseValidationError{}
