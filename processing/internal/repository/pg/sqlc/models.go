// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"

	uuid "github.com/google/uuid"
	decimal "github.com/shopspring/decimal"
)

type InvoiceStatus string

const (
	InvoiceStatusWaitingForDeposit   InvoiceStatus = "waiting_for_deposit"
	InvoiceStatusPaymentConfirmation InvoiceStatus = "payment_confirmation"
	InvoiceStatusPartiallyPaid       InvoiceStatus = "partially_paid"
	InvoiceStatusPaymentAccepted     InvoiceStatus = "payment_accepted"
	InvoiceStatusFinished            InvoiceStatus = "finished"
	InvoiceStatusExpired             InvoiceStatus = "expired"
	InvoiceStatusCancelled           InvoiceStatus = "cancelled"
)

func (e *InvoiceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvoiceStatus(s)
	case string:
		*e = InvoiceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InvoiceStatus: %T", src)
	}
	return nil
}

type NullInvoiceStatus struct {
	InvoiceStatus InvoiceStatus
	Valid         bool // Valid is true if InvoiceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvoiceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.InvoiceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvoiceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvoiceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvoiceStatus), nil
}

type TransactionConfirmationStatus string

const (
	TransactionConfirmationStatusConfirming TransactionConfirmationStatus = "confirming"
	TransactionConfirmationStatusConfirmed  TransactionConfirmationStatus = "confirmed"
)

func (e *TransactionConfirmationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionConfirmationStatus(s)
	case string:
		*e = TransactionConfirmationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionConfirmationStatus: %T", src)
	}
	return nil
}

type NullTransactionConfirmationStatus struct {
	TransactionConfirmationStatus TransactionConfirmationStatus
	Valid                         bool // Valid is true if TransactionConfirmationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionConfirmationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionConfirmationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionConfirmationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionConfirmationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionConfirmationStatus), nil
}

type DepositAddress struct {
	Address    string    `db:"address"`
	NetworkID  string    `db:"network_id"`
	MerchantID uuid.UUID `db:"merchant_id"`
	Available  bool      `db:"available"`
}

type Invoice struct {
	ID              uuid.UUID       `db:"id"`
	MerchantID      uuid.UUID       `db:"merchant_id"`
	CoinID          string          `db:"coin_id"`
	NetworkID       string          `db:"network_id"`
	DepositAddress  string          `db:"deposit_address"`
	Amount          decimal.Decimal `db:"amount"`
	BuyerFee        decimal.Decimal `db:"buyer_fee"`
	MerchantFee     decimal.Decimal `db:"merchant_fee"`
	Title           string          `db:"title"`
	Description     string          `db:"description"`
	CheckoutUrl     string          `db:"checkout_url"`
	Status          InvoiceStatus   `db:"status"`
	ExpiresAt       time.Time       `db:"expires_at"`
	ExternalID      string          `db:"external_id"`
	BuyerEmail      string          `db:"buyer_email"`
	RequiredPayment decimal.Decimal `db:"required_payment"`
	CreatedAt       time.Time       `db:"created_at"`
	FinishedAt      *time.Time      `db:"finished_at"`
}

type InvoiceForm struct {
	ID          uuid.UUID        `db:"id"`
	MerchantID  uuid.UUID        `db:"merchant_id"`
	CoinID      *string          `db:"coin_id"`
	NetworkID   *string          `db:"network_id"`
	Amount      *decimal.Decimal `db:"amount"`
	Title       *string          `db:"title"`
	Description *string          `db:"description"`
	BuyerEmail  *string          `db:"buyer_email"`
	CheckoutUrl string           `db:"checkout_url"`
	ExternalID  *string          `db:"external_id"`
	ExpiresAt   *time.Time       `db:"expires_at"`
}

type InvoiceTransaction struct {
	Hash               string                        `db:"hash"`
	InvoiceID          uuid.UUID                     `db:"invoice_id"`
	Amount             decimal.Decimal               `db:"amount"`
	ReceivedAddress    string                        `db:"received_address"`
	ConfirmationStatus TransactionConfirmationStatus `db:"confirmation_status"`
	CreatedAt          time.Time                     `db:"created_at"`
}

type Merchant struct {
	ID uuid.UUID `db:"id"`
}

type MerchantTariff struct {
	MerchantID uuid.UUID       `db:"merchant_id"`
	UpperFee   decimal.Decimal `db:"upper_fee"`
	LowerFee   decimal.Decimal `db:"lower_fee"`
	MinPay     decimal.Decimal `db:"min_pay"`
	MaxPay     decimal.Decimal `db:"max_pay"`
}
