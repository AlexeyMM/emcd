// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: merchant.sql

package sqlc

import (
	"context"

	uuid "github.com/google/uuid"
	decimal "github.com/shopspring/decimal"
)

const GetMerchantWithTariff = `-- name: GetMerchantWithTariff :one
select m.id, mt.upper_fee, mt.lower_fee, mt.min_pay, mt.max_pay
from merchant m
         join public.merchant_tariff mt on m.id = mt.merchant_id
where m.id = $1
`

type GetMerchantWithTariffRow struct {
	ID       uuid.UUID       `db:"id"`
	UpperFee decimal.Decimal `db:"upper_fee"`
	LowerFee decimal.Decimal `db:"lower_fee"`
	MinPay   decimal.Decimal `db:"min_pay"`
	MaxPay   decimal.Decimal `db:"max_pay"`
}

func (q *Queries) GetMerchantWithTariff(ctx context.Context, id uuid.UUID) (GetMerchantWithTariffRow, error) {
	row := q.db.QueryRow(ctx, GetMerchantWithTariff, id)
	var i GetMerchantWithTariffRow
	err := row.Scan(
		&i.ID,
		&i.UpperFee,
		&i.LowerFee,
		&i.MinPay,
		&i.MaxPay,
	)
	return i, err
}

const SaveMerchantID = `-- name: SaveMerchantID :exec
insert into merchant (id)
values ($1)
on conflict do nothing
`

func (q *Queries) SaveMerchantID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, SaveMerchantID, id)
	return err
}

const SaveMerchantTariff = `-- name: SaveMerchantTariff :exec
insert into merchant_tariff (merchant_id, upper_fee, lower_fee, min_pay, max_pay)
values ($1, $2, $3, $4, $5)
on conflict (merchant_id) do update set upper_fee = excluded.upper_fee,
                                        lower_fee = excluded.lower_fee,
                                        min_pay   = excluded.min_pay,
                                        max_pay   = excluded.max_pay
`

type SaveMerchantTariffParams struct {
	MerchantID uuid.UUID       `db:"merchant_id"`
	UpperFee   decimal.Decimal `db:"upper_fee"`
	LowerFee   decimal.Decimal `db:"lower_fee"`
	MinPay     decimal.Decimal `db:"min_pay"`
	MaxPay     decimal.Decimal `db:"max_pay"`
}

func (q *Queries) SaveMerchantTariff(ctx context.Context, arg *SaveMerchantTariffParams) error {
	_, err := q.db.Exec(ctx, SaveMerchantTariff,
		arg.MerchantID,
		arg.UpperFee,
		arg.LowerFee,
		arg.MinPay,
		arg.MaxPay,
	)
	return err
}
