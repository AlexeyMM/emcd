// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: buyer.proto

package buyerpb

import (
	commonpb "code.emcdtech.com/b2b/processing/protocol/commonpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InvoiceBuyerService_GetInvoice_FullMethodName              = "/buyer.InvoiceBuyerService/GetInvoice"
	InvoiceBuyerService_GetInvoiceForm_FullMethodName          = "/buyer.InvoiceBuyerService/GetInvoiceForm"
	InvoiceBuyerService_SubmitInvoiceForm_FullMethodName       = "/buyer.InvoiceBuyerService/SubmitInvoiceForm"
	InvoiceBuyerService_CalculateInvoicePayment_FullMethodName = "/buyer.InvoiceBuyerService/CalculateInvoicePayment"
)

// InvoiceBuyerServiceClient is the client API for InvoiceBuyerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceBuyerServiceClient interface {
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*commonpb.Invoice, error)
	GetInvoiceForm(ctx context.Context, in *GetInvoiceFormRequest, opts ...grpc.CallOption) (*InvoiceForm, error)
	SubmitInvoiceForm(ctx context.Context, in *InvoiceForm, opts ...grpc.CallOption) (*commonpb.Invoice, error)
	CalculateInvoicePayment(ctx context.Context, in *CalculateInvoicePaymentRequest, opts ...grpc.CallOption) (*CalculateInvoicePaymentResponse, error)
}

type invoiceBuyerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceBuyerServiceClient(cc grpc.ClientConnInterface) InvoiceBuyerServiceClient {
	return &invoiceBuyerServiceClient{cc}
}

func (c *invoiceBuyerServiceClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*commonpb.Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.Invoice)
	err := c.cc.Invoke(ctx, InvoiceBuyerService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceBuyerServiceClient) GetInvoiceForm(ctx context.Context, in *GetInvoiceFormRequest, opts ...grpc.CallOption) (*InvoiceForm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceForm)
	err := c.cc.Invoke(ctx, InvoiceBuyerService_GetInvoiceForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceBuyerServiceClient) SubmitInvoiceForm(ctx context.Context, in *InvoiceForm, opts ...grpc.CallOption) (*commonpb.Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.Invoice)
	err := c.cc.Invoke(ctx, InvoiceBuyerService_SubmitInvoiceForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceBuyerServiceClient) CalculateInvoicePayment(ctx context.Context, in *CalculateInvoicePaymentRequest, opts ...grpc.CallOption) (*CalculateInvoicePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateInvoicePaymentResponse)
	err := c.cc.Invoke(ctx, InvoiceBuyerService_CalculateInvoicePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceBuyerServiceServer is the server API for InvoiceBuyerService service.
// All implementations must embed UnimplementedInvoiceBuyerServiceServer
// for forward compatibility.
type InvoiceBuyerServiceServer interface {
	GetInvoice(context.Context, *GetInvoiceRequest) (*commonpb.Invoice, error)
	GetInvoiceForm(context.Context, *GetInvoiceFormRequest) (*InvoiceForm, error)
	SubmitInvoiceForm(context.Context, *InvoiceForm) (*commonpb.Invoice, error)
	CalculateInvoicePayment(context.Context, *CalculateInvoicePaymentRequest) (*CalculateInvoicePaymentResponse, error)
	mustEmbedUnimplementedInvoiceBuyerServiceServer()
}

// UnimplementedInvoiceBuyerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvoiceBuyerServiceServer struct{}

func (UnimplementedInvoiceBuyerServiceServer) GetInvoice(context.Context, *GetInvoiceRequest) (*commonpb.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedInvoiceBuyerServiceServer) GetInvoiceForm(context.Context, *GetInvoiceFormRequest) (*InvoiceForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceForm not implemented")
}
func (UnimplementedInvoiceBuyerServiceServer) SubmitInvoiceForm(context.Context, *InvoiceForm) (*commonpb.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitInvoiceForm not implemented")
}
func (UnimplementedInvoiceBuyerServiceServer) CalculateInvoicePayment(context.Context, *CalculateInvoicePaymentRequest) (*CalculateInvoicePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateInvoicePayment not implemented")
}
func (UnimplementedInvoiceBuyerServiceServer) mustEmbedUnimplementedInvoiceBuyerServiceServer() {}
func (UnimplementedInvoiceBuyerServiceServer) testEmbeddedByValue()                             {}

// UnsafeInvoiceBuyerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceBuyerServiceServer will
// result in compilation errors.
type UnsafeInvoiceBuyerServiceServer interface {
	mustEmbedUnimplementedInvoiceBuyerServiceServer()
}

func RegisterInvoiceBuyerServiceServer(s grpc.ServiceRegistrar, srv InvoiceBuyerServiceServer) {
	// If the following call pancis, it indicates UnimplementedInvoiceBuyerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvoiceBuyerService_ServiceDesc, srv)
}

func _InvoiceBuyerService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceBuyerServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceBuyerService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceBuyerServiceServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceBuyerService_GetInvoiceForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceBuyerServiceServer).GetInvoiceForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceBuyerService_GetInvoiceForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceBuyerServiceServer).GetInvoiceForm(ctx, req.(*GetInvoiceFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceBuyerService_SubmitInvoiceForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceBuyerServiceServer).SubmitInvoiceForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceBuyerService_SubmitInvoiceForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceBuyerServiceServer).SubmitInvoiceForm(ctx, req.(*InvoiceForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceBuyerService_CalculateInvoicePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateInvoicePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceBuyerServiceServer).CalculateInvoicePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceBuyerService_CalculateInvoicePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceBuyerServiceServer).CalculateInvoicePayment(ctx, req.(*CalculateInvoicePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceBuyerService_ServiceDesc is the grpc.ServiceDesc for InvoiceBuyerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceBuyerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buyer.InvoiceBuyerService",
	HandlerType: (*InvoiceBuyerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvoice",
			Handler:    _InvoiceBuyerService_GetInvoice_Handler,
		},
		{
			MethodName: "GetInvoiceForm",
			Handler:    _InvoiceBuyerService_GetInvoiceForm_Handler,
		},
		{
			MethodName: "SubmitInvoiceForm",
			Handler:    _InvoiceBuyerService_SubmitInvoiceForm_Handler,
		},
		{
			MethodName: "CalculateInvoicePayment",
			Handler:    _InvoiceBuyerService_CalculateInvoicePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buyer.proto",
}
