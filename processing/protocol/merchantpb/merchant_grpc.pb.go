// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: merchant.proto

package merchantpb

import (
	commonpb "code.emcdtech.com/b2b/processing/protocol/commonpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InvoiceMerchantService_CreateInvoice_FullMethodName     = "/merchant.InvoiceMerchantService/CreateInvoice"
	InvoiceMerchantService_CreateInvoiceForm_FullMethodName = "/merchant.InvoiceMerchantService/CreateInvoiceForm"
)

// InvoiceMerchantServiceClient is the client API for InvoiceMerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceMerchantServiceClient interface {
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*commonpb.Invoice, error)
	CreateInvoiceForm(ctx context.Context, in *CreateInvoiceFormRequest, opts ...grpc.CallOption) (*InvoiceForm, error)
}

type invoiceMerchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceMerchantServiceClient(cc grpc.ClientConnInterface) InvoiceMerchantServiceClient {
	return &invoiceMerchantServiceClient{cc}
}

func (c *invoiceMerchantServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*commonpb.Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(commonpb.Invoice)
	err := c.cc.Invoke(ctx, InvoiceMerchantService_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceMerchantServiceClient) CreateInvoiceForm(ctx context.Context, in *CreateInvoiceFormRequest, opts ...grpc.CallOption) (*InvoiceForm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceForm)
	err := c.cc.Invoke(ctx, InvoiceMerchantService_CreateInvoiceForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceMerchantServiceServer is the server API for InvoiceMerchantService service.
// All implementations must embed UnimplementedInvoiceMerchantServiceServer
// for forward compatibility.
type InvoiceMerchantServiceServer interface {
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*commonpb.Invoice, error)
	CreateInvoiceForm(context.Context, *CreateInvoiceFormRequest) (*InvoiceForm, error)
	mustEmbedUnimplementedInvoiceMerchantServiceServer()
}

// UnimplementedInvoiceMerchantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvoiceMerchantServiceServer struct{}

func (UnimplementedInvoiceMerchantServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*commonpb.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedInvoiceMerchantServiceServer) CreateInvoiceForm(context.Context, *CreateInvoiceFormRequest) (*InvoiceForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoiceForm not implemented")
}
func (UnimplementedInvoiceMerchantServiceServer) mustEmbedUnimplementedInvoiceMerchantServiceServer() {
}
func (UnimplementedInvoiceMerchantServiceServer) testEmbeddedByValue() {}

// UnsafeInvoiceMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceMerchantServiceServer will
// result in compilation errors.
type UnsafeInvoiceMerchantServiceServer interface {
	mustEmbedUnimplementedInvoiceMerchantServiceServer()
}

func RegisterInvoiceMerchantServiceServer(s grpc.ServiceRegistrar, srv InvoiceMerchantServiceServer) {
	// If the following call pancis, it indicates UnimplementedInvoiceMerchantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvoiceMerchantService_ServiceDesc, srv)
}

func _InvoiceMerchantService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceMerchantServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceMerchantService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceMerchantServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceMerchantService_CreateInvoiceForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceMerchantServiceServer).CreateInvoiceForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceMerchantService_CreateInvoiceForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceMerchantServiceServer).CreateInvoiceForm(ctx, req.(*CreateInvoiceFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceMerchantService_ServiceDesc is the grpc.ServiceDesc for InvoiceMerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceMerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.InvoiceMerchantService",
	HandlerType: (*InvoiceMerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _InvoiceMerchantService_CreateInvoice_Handler,
		},
		{
			MethodName: "CreateInvoiceForm",
			Handler:    _InvoiceMerchantService_CreateInvoiceForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
