// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protocol/proto/address.proto

package address

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AddressService_GetOrCreateAddress_FullMethodName             = "/address.AddressService/GetOrCreateAddress"
	AddressService_GetAddressByUuid_FullMethodName               = "/address.AddressService/GetAddressByUuid"
	AddressService_GetAddressByStr_FullMethodName                = "/address.AddressService/GetAddressByStr"
	AddressService_GetAddressesByUserUuid_FullMethodName         = "/address.AddressService/GetAddressesByUserUuid"
	AddressService_GetAddressesOldByFilter_FullMethodName        = "/address.AddressService/GetAddressesOldByFilter"
	AddressService_GetAddressesNewByFilter_FullMethodName        = "/address.AddressService/GetAddressesNewByFilter"
	AddressService_CreateOrUpdateDirtyAddress_FullMethodName     = "/address.AddressService/CreateOrUpdateDirtyAddress"
	AddressService_GetDirtyAddressesByFilter_FullMethodName      = "/address.AddressService/GetDirtyAddressesByFilter"
	AddressService_CreateProcessingAddress_FullMethodName        = "/address.AddressService/CreateProcessingAddress"
	AddressService_AddOrUpdatePersonalAddress_FullMethodName     = "/address.AddressService/AddOrUpdatePersonalAddress"
	AddressService_DeletePersonalAddress_FullMethodName          = "/address.AddressService/DeletePersonalAddress"
	AddressService_GetPersonalAddressesByUserUuid_FullMethodName = "/address.AddressService/GetPersonalAddressesByUserUuid"
	AddressService_GetPersonalAddressesByFilter_FullMethodName   = "/address.AddressService/GetPersonalAddressesByFilter"
)

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressServiceClient interface {
	// создать или получить адрес
	GetOrCreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	// Deprecated: Do not use.
	// получить адресс по uuid
	GetAddressByUuid(ctx context.Context, in *AddressUuid, opts ...grpc.CallOption) (*AddressResponse, error)
	// получить адресс по строчному значение
	GetAddressByStr(ctx context.Context, in *AddressStrId, opts ...grpc.CallOption) (*AddressResponse, error)
	// получить адреса по пользователю uuid
	GetAddressesByUserUuid(ctx context.Context, in *UserUuid, opts ...grpc.CallOption) (*AddressMultiResponse, error)
	// получить старые адреса по фильту
	GetAddressesOldByFilter(ctx context.Context, in *AddressOldFilter, opts ...grpc.CallOption) (*AddressMultiResponse, error)
	// получить новые адреса по фильту (is_processing == true, для процессинговых)
	GetAddressesNewByFilter(ctx context.Context, in *AddressNewFilter, opts ...grpc.CallOption) (*AddressMultiResponse, error)
	// установить флаг is_dirty для адреса по строчнму значению
	CreateOrUpdateDirtyAddress(ctx context.Context, in *DirtyAddressForm, opts ...grpc.CallOption) (*DirtyAddressForm, error)
	// получить флаг is_dirty для адресов
	GetDirtyAddressesByFilter(ctx context.Context, in *DirtyAddressFilter, opts ...grpc.CallOption) (*DirtyAddressMultiForm, error)
	// создать процессинговый адрес
	CreateProcessingAddress(ctx context.Context, in *CreateProcessingAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	// добавить или обновить персональный адрес
	AddOrUpdatePersonalAddress(ctx context.Context, in *CreatePersonalAddressRequest, opts ...grpc.CallOption) (*PersonalAddressResponse, error)
	// удалить персональный адрес
	DeletePersonalAddress(ctx context.Context, in *DeletePersonalAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// получить персональные адреса по пользователю uuid
	GetPersonalAddressesByUserUuid(ctx context.Context, in *UserUuid, opts ...grpc.CallOption) (*PersonalAddressMultiResponse, error)
	// получить персональные адреса по фильтру
	GetPersonalAddressesByFilter(ctx context.Context, in *AddressPersonalFilter, opts ...grpc.CallOption) (*PersonalAddressMultiResponse, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) GetOrCreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressService_GetOrCreateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *addressServiceClient) GetAddressByUuid(ctx context.Context, in *AddressUuid, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressService_GetAddressByUuid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAddressByStr(ctx context.Context, in *AddressStrId, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressService_GetAddressByStr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAddressesByUserUuid(ctx context.Context, in *UserUuid, opts ...grpc.CallOption) (*AddressMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressMultiResponse)
	err := c.cc.Invoke(ctx, AddressService_GetAddressesByUserUuid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAddressesOldByFilter(ctx context.Context, in *AddressOldFilter, opts ...grpc.CallOption) (*AddressMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressMultiResponse)
	err := c.cc.Invoke(ctx, AddressService_GetAddressesOldByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAddressesNewByFilter(ctx context.Context, in *AddressNewFilter, opts ...grpc.CallOption) (*AddressMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressMultiResponse)
	err := c.cc.Invoke(ctx, AddressService_GetAddressesNewByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateOrUpdateDirtyAddress(ctx context.Context, in *DirtyAddressForm, opts ...grpc.CallOption) (*DirtyAddressForm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DirtyAddressForm)
	err := c.cc.Invoke(ctx, AddressService_CreateOrUpdateDirtyAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetDirtyAddressesByFilter(ctx context.Context, in *DirtyAddressFilter, opts ...grpc.CallOption) (*DirtyAddressMultiForm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DirtyAddressMultiForm)
	err := c.cc.Invoke(ctx, AddressService_GetDirtyAddressesByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateProcessingAddress(ctx context.Context, in *CreateProcessingAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressService_CreateProcessingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) AddOrUpdatePersonalAddress(ctx context.Context, in *CreatePersonalAddressRequest, opts ...grpc.CallOption) (*PersonalAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalAddressResponse)
	err := c.cc.Invoke(ctx, AddressService_AddOrUpdatePersonalAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) DeletePersonalAddress(ctx context.Context, in *DeletePersonalAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AddressService_DeletePersonalAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetPersonalAddressesByUserUuid(ctx context.Context, in *UserUuid, opts ...grpc.CallOption) (*PersonalAddressMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalAddressMultiResponse)
	err := c.cc.Invoke(ctx, AddressService_GetPersonalAddressesByUserUuid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetPersonalAddressesByFilter(ctx context.Context, in *AddressPersonalFilter, opts ...grpc.CallOption) (*PersonalAddressMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonalAddressMultiResponse)
	err := c.cc.Invoke(ctx, AddressService_GetPersonalAddressesByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
// All implementations must embed UnimplementedAddressServiceServer
// for forward compatibility
type AddressServiceServer interface {
	// создать или получить адрес
	GetOrCreateAddress(context.Context, *CreateAddressRequest) (*AddressResponse, error)
	// Deprecated: Do not use.
	// получить адресс по uuid
	GetAddressByUuid(context.Context, *AddressUuid) (*AddressResponse, error)
	// получить адресс по строчному значение
	GetAddressByStr(context.Context, *AddressStrId) (*AddressResponse, error)
	// получить адреса по пользователю uuid
	GetAddressesByUserUuid(context.Context, *UserUuid) (*AddressMultiResponse, error)
	// получить старые адреса по фильту
	GetAddressesOldByFilter(context.Context, *AddressOldFilter) (*AddressMultiResponse, error)
	// получить новые адреса по фильту (is_processing == true, для процессинговых)
	GetAddressesNewByFilter(context.Context, *AddressNewFilter) (*AddressMultiResponse, error)
	// установить флаг is_dirty для адреса по строчнму значению
	CreateOrUpdateDirtyAddress(context.Context, *DirtyAddressForm) (*DirtyAddressForm, error)
	// получить флаг is_dirty для адресов
	GetDirtyAddressesByFilter(context.Context, *DirtyAddressFilter) (*DirtyAddressMultiForm, error)
	// создать процессинговый адрес
	CreateProcessingAddress(context.Context, *CreateProcessingAddressRequest) (*AddressResponse, error)
	// добавить или обновить персональный адрес
	AddOrUpdatePersonalAddress(context.Context, *CreatePersonalAddressRequest) (*PersonalAddressResponse, error)
	// удалить персональный адрес
	DeletePersonalAddress(context.Context, *DeletePersonalAddressRequest) (*emptypb.Empty, error)
	// получить персональные адреса по пользователю uuid
	GetPersonalAddressesByUserUuid(context.Context, *UserUuid) (*PersonalAddressMultiResponse, error)
	// получить персональные адреса по фильтру
	GetPersonalAddressesByFilter(context.Context, *AddressPersonalFilter) (*PersonalAddressMultiResponse, error)
	mustEmbedUnimplementedAddressServiceServer()
}

// UnimplementedAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServiceServer struct {
}

func (UnimplementedAddressServiceServer) GetOrCreateAddress(context.Context, *CreateAddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateAddress not implemented")
}
func (UnimplementedAddressServiceServer) GetAddressByUuid(context.Context, *AddressUuid) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByUuid not implemented")
}
func (UnimplementedAddressServiceServer) GetAddressByStr(context.Context, *AddressStrId) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByStr not implemented")
}
func (UnimplementedAddressServiceServer) GetAddressesByUserUuid(context.Context, *UserUuid) (*AddressMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressesByUserUuid not implemented")
}
func (UnimplementedAddressServiceServer) GetAddressesOldByFilter(context.Context, *AddressOldFilter) (*AddressMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressesOldByFilter not implemented")
}
func (UnimplementedAddressServiceServer) GetAddressesNewByFilter(context.Context, *AddressNewFilter) (*AddressMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressesNewByFilter not implemented")
}
func (UnimplementedAddressServiceServer) CreateOrUpdateDirtyAddress(context.Context, *DirtyAddressForm) (*DirtyAddressForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateDirtyAddress not implemented")
}
func (UnimplementedAddressServiceServer) GetDirtyAddressesByFilter(context.Context, *DirtyAddressFilter) (*DirtyAddressMultiForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirtyAddressesByFilter not implemented")
}
func (UnimplementedAddressServiceServer) CreateProcessingAddress(context.Context, *CreateProcessingAddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcessingAddress not implemented")
}
func (UnimplementedAddressServiceServer) AddOrUpdatePersonalAddress(context.Context, *CreatePersonalAddressRequest) (*PersonalAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdatePersonalAddress not implemented")
}
func (UnimplementedAddressServiceServer) DeletePersonalAddress(context.Context, *DeletePersonalAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonalAddress not implemented")
}
func (UnimplementedAddressServiceServer) GetPersonalAddressesByUserUuid(context.Context, *UserUuid) (*PersonalAddressMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAddressesByUserUuid not implemented")
}
func (UnimplementedAddressServiceServer) GetPersonalAddressesByFilter(context.Context, *AddressPersonalFilter) (*PersonalAddressMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalAddressesByFilter not implemented")
}
func (UnimplementedAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {}

// UnsafeAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServiceServer will
// result in compilation errors.
type UnsafeAddressServiceServer interface {
	mustEmbedUnimplementedAddressServiceServer()
}

func RegisterAddressServiceServer(s grpc.ServiceRegistrar, srv AddressServiceServer) {
	s.RegisterService(&AddressService_ServiceDesc, srv)
}

func _AddressService_GetOrCreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetOrCreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetOrCreateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetOrCreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddressByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetAddressByUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressByUuid(ctx, req.(*AddressUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddressByStr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressStrId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressByStr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetAddressByStr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressByStr(ctx, req.(*AddressStrId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddressesByUserUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressesByUserUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetAddressesByUserUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressesByUserUuid(ctx, req.(*UserUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddressesOldByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressOldFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressesOldByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetAddressesOldByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressesOldByFilter(ctx, req.(*AddressOldFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddressesNewByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressNewFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressesNewByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetAddressesNewByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressesNewByFilter(ctx, req.(*AddressNewFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateOrUpdateDirtyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirtyAddressForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateOrUpdateDirtyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateOrUpdateDirtyAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateOrUpdateDirtyAddress(ctx, req.(*DirtyAddressForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetDirtyAddressesByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirtyAddressFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetDirtyAddressesByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetDirtyAddressesByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetDirtyAddressesByFilter(ctx, req.(*DirtyAddressFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateProcessingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateProcessingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateProcessingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateProcessingAddress(ctx, req.(*CreateProcessingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_AddOrUpdatePersonalAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonalAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).AddOrUpdatePersonalAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_AddOrUpdatePersonalAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).AddOrUpdatePersonalAddress(ctx, req.(*CreatePersonalAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_DeletePersonalAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).DeletePersonalAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_DeletePersonalAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).DeletePersonalAddress(ctx, req.(*DeletePersonalAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetPersonalAddressesByUserUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetPersonalAddressesByUserUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetPersonalAddressesByUserUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetPersonalAddressesByUserUuid(ctx, req.(*UserUuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetPersonalAddressesByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressPersonalFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetPersonalAddressesByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetPersonalAddressesByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetPersonalAddressesByFilter(ctx, req.(*AddressPersonalFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressService_ServiceDesc is the grpc.ServiceDesc for AddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "address.AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrCreateAddress",
			Handler:    _AddressService_GetOrCreateAddress_Handler,
		},
		{
			MethodName: "GetAddressByUuid",
			Handler:    _AddressService_GetAddressByUuid_Handler,
		},
		{
			MethodName: "GetAddressByStr",
			Handler:    _AddressService_GetAddressByStr_Handler,
		},
		{
			MethodName: "GetAddressesByUserUuid",
			Handler:    _AddressService_GetAddressesByUserUuid_Handler,
		},
		{
			MethodName: "GetAddressesOldByFilter",
			Handler:    _AddressService_GetAddressesOldByFilter_Handler,
		},
		{
			MethodName: "GetAddressesNewByFilter",
			Handler:    _AddressService_GetAddressesNewByFilter_Handler,
		},
		{
			MethodName: "CreateOrUpdateDirtyAddress",
			Handler:    _AddressService_CreateOrUpdateDirtyAddress_Handler,
		},
		{
			MethodName: "GetDirtyAddressesByFilter",
			Handler:    _AddressService_GetDirtyAddressesByFilter_Handler,
		},
		{
			MethodName: "CreateProcessingAddress",
			Handler:    _AddressService_CreateProcessingAddress_Handler,
		},
		{
			MethodName: "AddOrUpdatePersonalAddress",
			Handler:    _AddressService_AddOrUpdatePersonalAddress_Handler,
		},
		{
			MethodName: "DeletePersonalAddress",
			Handler:    _AddressService_DeletePersonalAddress_Handler,
		},
		{
			MethodName: "GetPersonalAddressesByUserUuid",
			Handler:    _AddressService_GetPersonalAddressesByUserUuid_Handler,
		},
		{
			MethodName: "GetPersonalAddressesByFilter",
			Handler:    _AddressService_GetPersonalAddressesByFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/proto/address.proto",
}
