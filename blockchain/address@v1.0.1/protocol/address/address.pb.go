// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: protocol/proto/address.proto

package address

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddressType int32

const (
	// прямая генерация с храннеием приватного ключа в базе ноды
	AddressType_ADDRESS_TYPE_DIRECT AddressType = 0
	// наследованный адрес от мастер ключа
	AddressType_ADDRESS_TYPE_DERIVED AddressType = 1
	// адрес с приватным ключём на блокчейн-ноде без соли (старая схема)
	//
	// Deprecated: Marked as deprecated in protocol/proto/address.proto.
	AddressType_ADDRESS_TYPE_BASED_NONE AddressType = 100
	// адрес с приватным ключём на блокчейн-ноде с доступом через user_id соль (старая схема)
	//
	// Deprecated: Marked as deprecated in protocol/proto/address.proto.
	AddressType_ADDRESS_TYPE_BASED_ID AddressType = 101
	// мемо
	AddressType_ADDRESS_TYPE_MEMO AddressType = 2
)

// Enum value maps for AddressType.
var (
	AddressType_name = map[int32]string{
		0:   "ADDRESS_TYPE_DIRECT",
		1:   "ADDRESS_TYPE_DERIVED",
		100: "ADDRESS_TYPE_BASED_NONE",
		101: "ADDRESS_TYPE_BASED_ID",
		2:   "ADDRESS_TYPE_MEMO",
	}
	AddressType_value = map[string]int32{
		"ADDRESS_TYPE_DIRECT":     0,
		"ADDRESS_TYPE_DERIVED":    1,
		"ADDRESS_TYPE_BASED_NONE": 100,
		"ADDRESS_TYPE_BASED_ID":   101,
		"ADDRESS_TYPE_MEMO":       2,
	}
)

func (x AddressType) Enum() *AddressType {
	p := new(AddressType)
	*p = x
	return p
}

func (x AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_address_proto_enumTypes[0].Descriptor()
}

func (AddressType) Type() protoreflect.EnumType {
	return &file_protocol_proto_address_proto_enumTypes[0]
}

func (x AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressType.Descriptor instead.
func (AddressType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{0}
}

type DirtyAddressForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// сеть
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// флаг is_dirty (проверка AML)
	IsDirty bool `protobuf:"varint,3,opt,name=is_dirty,json=isDirty,proto3" json:"is_dirty,omitempty"`
}

func (x *DirtyAddressForm) Reset() {
	*x = DirtyAddressForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirtyAddressForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirtyAddressForm) ProtoMessage() {}

func (x *DirtyAddressForm) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirtyAddressForm.ProtoReflect.Descriptor instead.
func (*DirtyAddressForm) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{0}
}

func (x *DirtyAddressForm) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DirtyAddressForm) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DirtyAddressForm) GetIsDirty() bool {
	if x != nil {
		return x.IsDirty
	}
	return false
}

type DirtyAddressMultiForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адреса
	Addresses []*DirtyAddressForm `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *DirtyAddressMultiForm) Reset() {
	*x = DirtyAddressMultiForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirtyAddressMultiForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirtyAddressMultiForm) ProtoMessage() {}

func (x *DirtyAddressMultiForm) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirtyAddressMultiForm.ProtoReflect.Descriptor instead.
func (*DirtyAddressMultiForm) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{1}
}

func (x *DirtyAddressMultiForm) GetAddresses() []*DirtyAddressForm {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type CreateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid пользователя
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	// сеть
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// монета (если задана то только старый способ генерации)
	//
	// Deprecated: Marked as deprecated in protocol/proto/address.proto.
	Coin *string `protobuf:"bytes,3,opt,name=coin,proto3,oneof" json:"coin,omitempty"`
}

func (x *CreateAddressRequest) Reset() {
	*x = CreateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressRequest) ProtoMessage() {}

func (x *CreateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAddressRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateAddressRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

// Deprecated: Marked as deprecated in protocol/proto/address.proto.
func (x *CreateAddressRequest) GetCoin() string {
	if x != nil && x.Coin != nil {
		return *x.Coin
	}
	return ""
}

type CreateProcessingAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid пользователя
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	// сеть
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// процессинг uuid
	ProcessingUuid string `protobuf:"bytes,3,opt,name=processing_uuid,json=processingUuid,proto3" json:"processing_uuid,omitempty"`
}

func (x *CreateProcessingAddressRequest) Reset() {
	*x = CreateProcessingAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcessingAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcessingAddressRequest) ProtoMessage() {}

func (x *CreateProcessingAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcessingAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateProcessingAddressRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{3}
}

func (x *CreateProcessingAddressRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateProcessingAddressRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CreateProcessingAddressRequest) GetProcessingUuid() string {
	if x != nil {
		return x.ProcessingUuid
	}
	return ""
}

type CreatePersonalAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// uuid пользователя
	UserUuid string `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	// сеть
	Network string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	// минимальная выплата
	MinPayout *float64 `protobuf:"fixed64,4,opt,name=min_payout,json=minPayout,proto3,oneof" json:"min_payout,omitempty"`
}

func (x *CreatePersonalAddressRequest) Reset() {
	*x = CreatePersonalAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePersonalAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePersonalAddressRequest) ProtoMessage() {}

func (x *CreatePersonalAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePersonalAddressRequest.ProtoReflect.Descriptor instead.
func (*CreatePersonalAddressRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePersonalAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreatePersonalAddressRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreatePersonalAddressRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CreatePersonalAddressRequest) GetMinPayout() float64 {
	if x != nil && x.MinPayout != nil {
		return *x.MinPayout
	}
	return 0
}

type DeletePersonalAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid пользователя
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	// сеть
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *DeletePersonalAddressRequest) Reset() {
	*x = DeletePersonalAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePersonalAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePersonalAddressRequest) ProtoMessage() {}

func (x *DeletePersonalAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePersonalAddressRequest.ProtoReflect.Descriptor instead.
func (*DeletePersonalAddressRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{5}
}

func (x *DeletePersonalAddressRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DeletePersonalAddressRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type AddressUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес uuid
	AddressUuid string `protobuf:"bytes,1,opt,name=address_uuid,json=addressUuid,proto3" json:"address_uuid,omitempty"`
}

func (x *AddressUuid) Reset() {
	*x = AddressUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressUuid) ProtoMessage() {}

func (x *AddressUuid) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressUuid.ProtoReflect.Descriptor instead.
func (*AddressUuid) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{6}
}

func (x *AddressUuid) GetAddressUuid() string {
	if x != nil {
		return x.AddressUuid
	}
	return ""
}

type AddressStrId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AddressStrId) Reset() {
	*x = AddressStrId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressStrId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressStrId) ProtoMessage() {}

func (x *AddressStrId) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressStrId.ProtoReflect.Descriptor instead.
func (*AddressStrId) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{7}
}

func (x *AddressStrId) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UserUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid пользователя
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *UserUuid) Reset() {
	*x = UserUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUuid) ProtoMessage() {}

func (x *UserUuid) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUuid.ProtoReflect.Descriptor instead.
func (*UserUuid) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{8}
}

func (x *UserUuid) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type AddressPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// количество в запросе к бд
	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// сдвиг в запросе к бд
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *AddressPagination) Reset() {
	*x = AddressPagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressPagination) ProtoMessage() {}

func (x *AddressPagination) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressPagination.ProtoReflect.Descriptor instead.
func (*AddressPagination) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{9}
}

func (x *AddressPagination) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AddressPagination) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AddressOldFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес uuid
	AddressUuid *string `protobuf:"bytes,1,opt,name=address_uuid,json=addressUuid,proto3,oneof" json:"address_uuid,omitempty"`
	// адрес строчное значение
	Address *string `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// uuid пользователя
	UserUuid *string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3,oneof" json:"user_uuid,omitempty"`
	// uuid пользователя
	AddressType *AddressType `protobuf:"varint,4,opt,name=address_type,json=addressType,proto3,enum=address.AddressType,oneof" json:"address_type,omitempty"`
	// сеть (для старой len == 1)
	Network *string `protobuf:"bytes,5,opt,name=network,proto3,oneof" json:"network,omitempty"`
	// user_account_id для соли по старой схеме
	UserAccountId *int32 `protobuf:"varint,6,opt,name=user_account_id,json=userAccountId,proto3,oneof" json:"user_account_id,omitempty"`
	// монета (для старой)
	Coin *string `protobuf:"bytes,7,opt,name=coin,proto3,oneof" json:"coin,omitempty"`
	// время создания
	CreatedAtGt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at_gt,json=createdAtGt,proto3,oneof" json:"created_at_gt,omitempty"`
	// пагинация
	Pagination *AddressPagination `protobuf:"bytes,9,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *AddressOldFilter) Reset() {
	*x = AddressOldFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressOldFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressOldFilter) ProtoMessage() {}

func (x *AddressOldFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressOldFilter.ProtoReflect.Descriptor instead.
func (*AddressOldFilter) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{10}
}

func (x *AddressOldFilter) GetAddressUuid() string {
	if x != nil && x.AddressUuid != nil {
		return *x.AddressUuid
	}
	return ""
}

func (x *AddressOldFilter) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *AddressOldFilter) GetUserUuid() string {
	if x != nil && x.UserUuid != nil {
		return *x.UserUuid
	}
	return ""
}

func (x *AddressOldFilter) GetAddressType() AddressType {
	if x != nil && x.AddressType != nil {
		return *x.AddressType
	}
	return AddressType_ADDRESS_TYPE_DIRECT
}

func (x *AddressOldFilter) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *AddressOldFilter) GetUserAccountId() int32 {
	if x != nil && x.UserAccountId != nil {
		return *x.UserAccountId
	}
	return 0
}

func (x *AddressOldFilter) GetCoin() string {
	if x != nil && x.Coin != nil {
		return *x.Coin
	}
	return ""
}

func (x *AddressOldFilter) GetCreatedAtGt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAtGt
	}
	return nil
}

func (x *AddressOldFilter) GetPagination() *AddressPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AddressNewFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес uuid
	AddressUuid *string `protobuf:"bytes,1,opt,name=address_uuid,json=addressUuid,proto3,oneof" json:"address_uuid,omitempty"`
	// адрес строчное значение
	Address *string `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// uuid пользователя
	UserUuid *string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3,oneof" json:"user_uuid,omitempty"`
	// uuid пользователя
	AddressType *AddressType `protobuf:"varint,4,opt,name=address_type,json=addressType,proto3,enum=address.AddressType,oneof" json:"address_type,omitempty"`
	// группа сети (обе схемы)
	NetworkGroup *string `protobuf:"bytes,5,opt,name=network_group,json=networkGroup,proto3,oneof" json:"network_group,omitempty"`
	// флаг процессинговые адресса
	IsProcessing *bool `protobuf:"varint,6,opt,name=is_processing,json=isProcessing,proto3,oneof" json:"is_processing,omitempty"`
	// время создания
	CreatedAtGt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at_gt,json=createdAtGt,proto3,oneof" json:"created_at_gt,omitempty"`
	// пагинация
	Pagination *AddressPagination `protobuf:"bytes,8,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *AddressNewFilter) Reset() {
	*x = AddressNewFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressNewFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressNewFilter) ProtoMessage() {}

func (x *AddressNewFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressNewFilter.ProtoReflect.Descriptor instead.
func (*AddressNewFilter) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{11}
}

func (x *AddressNewFilter) GetAddressUuid() string {
	if x != nil && x.AddressUuid != nil {
		return *x.AddressUuid
	}
	return ""
}

func (x *AddressNewFilter) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *AddressNewFilter) GetUserUuid() string {
	if x != nil && x.UserUuid != nil {
		return *x.UserUuid
	}
	return ""
}

func (x *AddressNewFilter) GetAddressType() AddressType {
	if x != nil && x.AddressType != nil {
		return *x.AddressType
	}
	return AddressType_ADDRESS_TYPE_DIRECT
}

func (x *AddressNewFilter) GetNetworkGroup() string {
	if x != nil && x.NetworkGroup != nil {
		return *x.NetworkGroup
	}
	return ""
}

func (x *AddressNewFilter) GetIsProcessing() bool {
	if x != nil && x.IsProcessing != nil {
		return *x.IsProcessing
	}
	return false
}

func (x *AddressNewFilter) GetCreatedAtGt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAtGt
	}
	return nil
}

func (x *AddressNewFilter) GetPagination() *AddressPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AddressPersonalFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес uuid
	AddressUuid *string `protobuf:"bytes,1,opt,name=address_uuid,json=addressUuid,proto3,oneof" json:"address_uuid,omitempty"`
	// адрес строчное значение
	Address *string `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// uuid пользователя
	UserUuid *string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3,oneof" json:"user_uuid,omitempty"`
	// сеть
	Network *string `protobuf:"bytes,4,opt,name=network,proto3,oneof" json:"network,omitempty"`
	// флаг что удалён
	IsDeleted *bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3,oneof" json:"is_deleted,omitempty"`
	// пагинация
	Pagination *AddressPagination `protobuf:"bytes,6,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *AddressPersonalFilter) Reset() {
	*x = AddressPersonalFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressPersonalFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressPersonalFilter) ProtoMessage() {}

func (x *AddressPersonalFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressPersonalFilter.ProtoReflect.Descriptor instead.
func (*AddressPersonalFilter) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{12}
}

func (x *AddressPersonalFilter) GetAddressUuid() string {
	if x != nil && x.AddressUuid != nil {
		return *x.AddressUuid
	}
	return ""
}

func (x *AddressPersonalFilter) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *AddressPersonalFilter) GetUserUuid() string {
	if x != nil && x.UserUuid != nil {
		return *x.UserUuid
	}
	return ""
}

func (x *AddressPersonalFilter) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *AddressPersonalFilter) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return false
}

func (x *AddressPersonalFilter) GetPagination() *AddressPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DirtyAddressFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес строчное значение
	Address *string `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// сеть
	Network *string `protobuf:"bytes,2,opt,name=network,proto3,oneof" json:"network,omitempty"`
}

func (x *DirtyAddressFilter) Reset() {
	*x = DirtyAddressFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirtyAddressFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirtyAddressFilter) ProtoMessage() {}

func (x *DirtyAddressFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirtyAddressFilter.ProtoReflect.Descriptor instead.
func (*DirtyAddressFilter) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{13}
}

func (x *DirtyAddressFilter) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *DirtyAddressFilter) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

// AddressResponse message:
//
//	CREATE TABLE address_old
//	(
//	id              UUID      NOT NULL, -- uuid identifier
//	address         TEXT      NOT NULL, -- address
//	user_uuid       UUID      NOT NULL, -- user (for tables unification)
//	address_type    int4      NOT NULL, -- type of address generation
//	created_at      TIMESTAMP NOT NULL, -- created date
//
//	network         TEXT      NOT NULL, -- network
//	user_account_id int4      NOT NULL, -- wallets user account id
//	coin            TEXT      NOT NULL, -- coin
//
//	CONSTRAINT address_old_network_user_account_id_idx UNIQUE (network, user_account_id),
//	CONSTRAINT address_old_address_idx UNIQUE (address),
//
//	PRIMARY KEY (id)
//	);
//
//	CREATE TABLE address
//	(
//	id            UUID      NOT NULL, -- uuid identifier
//	address       TEXT      NOT NULL, -- address
//	user_uuid     UUID      NOT NULL, -- user
//	address_type  int4      NOT NULL, -- type of address generation
//	created_at    TIMESTAMP NOT NULL, -- created date
//
//	network_group TEXT      NOT NULL, -- network group local identifier
//
//	CONSTRAINT address_user_uuid_network_group_idx UNIQUE (user_uuid, network_group),
//	CONSTRAINT address_address_idx UNIQUE (address),
//
//	PRIMARY KEY (id)
//	);
//
//	CREATE TABLE address_derived
//	(
//	address_uuid   uuid NOT NULL, -- address uuid
//	network_group  TEXT NOT NULL, -- network group local identifier
//	master_key_id  int4 NOT NULL, -- key id == 0 (reserved column)
//	derived_offset int4 NOT NULL, -- offset of derived address
//
//	CONSTRAINT address_derived_helper_key_offset_network_idx UNIQUE (network_group, master_key_id, derived_offset),
//	CONSTRAINT address_derived_uuid_fk FOREIGN KEY (address_uuid) REFERENCES address (id) ON DELETE CASCADE
//
//	);
//
//	CREATE INDEX address_address_old_address_offset_idx on address_old (user_uuid, network);
//	CREATE INDEX address_address_old_address_idx ON address USING btree (address);
//
//	CREATE INDEX address_address_address_idx ON address USING btree (address);
type AddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес uuid
	AddressUuid string `protobuf:"bytes,1,opt,name=address_uuid,json=addressUuid,proto3" json:"address_uuid,omitempty"`
	// адрес
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// uuid пользователя
	UserUuid string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	// тип генерации
	AddressType AddressType `protobuf:"varint,4,opt,name=address_type,json=addressType,proto3,enum=address.AddressType" json:"address_type,omitempty"`
	// группа сети (обе схемы)
	NetworkGroup string `protobuf:"bytes,5,opt,name=network_group,json=networkGroup,proto3" json:"network_group,omitempty"`
	// группа в зависимости от способа генерации
	//
	// Types that are assignable to Way:
	//
	//	*AddressResponse_OldWay
	//	*AddressResponse_NewWay
	Way isAddressResponse_Way `protobuf_oneof:"way"`
	// дата создания
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AddressResponse) Reset() {
	*x = AddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressResponse) ProtoMessage() {}

func (x *AddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressResponse.ProtoReflect.Descriptor instead.
func (*AddressResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{14}
}

func (x *AddressResponse) GetAddressUuid() string {
	if x != nil {
		return x.AddressUuid
	}
	return ""
}

func (x *AddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressResponse) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddressResponse) GetAddressType() AddressType {
	if x != nil {
		return x.AddressType
	}
	return AddressType_ADDRESS_TYPE_DIRECT
}

func (x *AddressResponse) GetNetworkGroup() string {
	if x != nil {
		return x.NetworkGroup
	}
	return ""
}

func (m *AddressResponse) GetWay() isAddressResponse_Way {
	if m != nil {
		return m.Way
	}
	return nil
}

// Deprecated: Marked as deprecated in protocol/proto/address.proto.
func (x *AddressResponse) GetOldWay() *OldWay {
	if x, ok := x.GetWay().(*AddressResponse_OldWay); ok {
		return x.OldWay
	}
	return nil
}

func (x *AddressResponse) GetNewWay() *NewWay {
	if x, ok := x.GetWay().(*AddressResponse_NewWay); ok {
		return x.NewWay
	}
	return nil
}

func (x *AddressResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type isAddressResponse_Way interface {
	isAddressResponse_Way()
}

type AddressResponse_OldWay struct {
	// Deprecated: Marked as deprecated in protocol/proto/address.proto.
	OldWay *OldWay `protobuf:"bytes,6,opt,name=old_way,json=oldWay,proto3,oneof"`
}

type AddressResponse_NewWay struct {
	NewWay *NewWay `protobuf:"bytes,7,opt,name=new_way,json=newWay,proto3,oneof"`
}

func (*AddressResponse_OldWay) isAddressResponse_Way() {}

func (*AddressResponse_NewWay) isAddressResponse_Way() {}

// Deprecated: Marked as deprecated in protocol/proto/address.proto.
type OldWay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_account_id для соли по старой схеме
	UserAccountId int32 `protobuf:"varint,1,opt,name=user_account_id,json=userAccountId,proto3" json:"user_account_id,omitempty"`
	// сеть (для старой len == 1)
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// монета (для старой)
	Coin string `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *OldWay) Reset() {
	*x = OldWay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OldWay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OldWay) ProtoMessage() {}

func (x *OldWay) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OldWay.ProtoReflect.Descriptor instead.
func (*OldWay) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{15}
}

func (x *OldWay) GetUserAccountId() int32 {
	if x != nil {
		return x.UserAccountId
	}
	return 0
}

func (x *OldWay) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *OldWay) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

type NewWay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ид ключа для наследования
	MasterKeyId *uint32 `protobuf:"varint,1,opt,name=master_key_id,json=masterKeyId,proto3,oneof" json:"master_key_id,omitempty"`
	// офсет, для наследованных адресов
	DerivedOffset *uint32 `protobuf:"varint,2,opt,name=derived_offset,json=derivedOffset,proto3,oneof" json:"derived_offset,omitempty"`
	// сеть (для старой len == 1)
	Networks []string `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
	// процессинговые uuid (для процессингового адреса)
	ProcessingUuid *string `protobuf:"bytes,4,opt,name=processing_uuid,json=processingUuid,proto3,oneof" json:"processing_uuid,omitempty"`
}

func (x *NewWay) Reset() {
	*x = NewWay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWay) ProtoMessage() {}

func (x *NewWay) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWay.ProtoReflect.Descriptor instead.
func (*NewWay) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{16}
}

func (x *NewWay) GetMasterKeyId() uint32 {
	if x != nil && x.MasterKeyId != nil {
		return *x.MasterKeyId
	}
	return 0
}

func (x *NewWay) GetDerivedOffset() uint32 {
	if x != nil && x.DerivedOffset != nil {
		return *x.DerivedOffset
	}
	return 0
}

func (x *NewWay) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *NewWay) GetProcessingUuid() string {
	if x != nil && x.ProcessingUuid != nil {
		return *x.ProcessingUuid
	}
	return ""
}

type AddressMultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адреса
	Addresses []*AddressResponse `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// общее количество при пагинации
	TotalCount *uint64 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
}

func (x *AddressMultiResponse) Reset() {
	*x = AddressMultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressMultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressMultiResponse) ProtoMessage() {}

func (x *AddressMultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressMultiResponse.ProtoReflect.Descriptor instead.
func (*AddressMultiResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{17}
}

func (x *AddressMultiResponse) GetAddresses() []*AddressResponse {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AddressMultiResponse) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type PersonalAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адрес uuid
	AddressUuid string `protobuf:"bytes,1,opt,name=address_uuid,json=addressUuid,proto3" json:"address_uuid,omitempty"`
	// адрес
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// uuid пользователя
	UserUuid string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	// сеть
	Network string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	// минимальаня выплата
	MinPayout float64 `protobuf:"fixed64,5,opt,name=min_payout,json=minPayout,proto3" json:"min_payout,omitempty"`
	// дата создания
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	// дата обновления
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// дата создания
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PersonalAddressResponse) Reset() {
	*x = PersonalAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalAddressResponse) ProtoMessage() {}

func (x *PersonalAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalAddressResponse.ProtoReflect.Descriptor instead.
func (*PersonalAddressResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{18}
}

func (x *PersonalAddressResponse) GetAddressUuid() string {
	if x != nil {
		return x.AddressUuid
	}
	return ""
}

func (x *PersonalAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PersonalAddressResponse) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *PersonalAddressResponse) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *PersonalAddressResponse) GetMinPayout() float64 {
	if x != nil {
		return x.MinPayout
	}
	return 0
}

func (x *PersonalAddressResponse) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PersonalAddressResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PersonalAddressResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type PersonalAddressMultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// адреса
	Addresses []*PersonalAddressResponse `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// общее количество при пагинации
	TotalCount *uint64 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
}

func (x *PersonalAddressMultiResponse) Reset() {
	*x = PersonalAddressMultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_proto_address_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalAddressMultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalAddressMultiResponse) ProtoMessage() {}

func (x *PersonalAddressMultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_address_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalAddressMultiResponse.ProtoReflect.Descriptor instead.
func (*PersonalAddressMultiResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_address_proto_rawDescGZIP(), []int{19}
}

func (x *PersonalAddressMultiResponse) GetAddresses() []*PersonalAddressResponse {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *PersonalAddressMultiResponse) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

var File_protocol_proto_address_proto protoreflect.FileDescriptor

var file_protocol_proto_address_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x74, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x15, 0x44, 0x69, 0x72, 0x74,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x6f, 0x72,
	0x6d, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x44,
	0x69, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x22,
	0x80, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0x55, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x30,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x28, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x27, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xaa, 0x04, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x03, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x07, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x47, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x08, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x67, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x94, 0x04, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e,
	0x65, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x67, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x47, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x07, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x02, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x12, 0x44, 0x69, 0x72, 0x74, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x22, 0xe7, 0x02, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e,
	0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x6c, 0x64, 0x57, 0x61, 0x79,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x79, 0x12, 0x2a,
	0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x77, 0x61, 0x79, 0x22, 0x62, 0x0a, 0x06,
	0x4f, 0x6c, 0x64, 0x57, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x3a, 0x02, 0x18, 0x01,
	0x22, 0xe0, 0x01, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x0d, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x02, 0x0a, 0x17, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x1c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x17, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x64, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0x65, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x10, 0x02, 0x32,
	0xf0, 0x08, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x18, 0x2e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x53, 0x74, 0x72, 0x12, 0x15, 0x2e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x11, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x1d, 0x2e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x6c, 0x64, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4e,
	0x65, 0x77, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x77, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72,
	0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x19, 0x2e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x58, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x44, 0x69, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x69, 0x72,
	0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x6f,
	0x72, 0x6d, 0x12, 0x5c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x5a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x11, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x1a, 0x25, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x25, 0x2e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_address_proto_rawDescOnce sync.Once
	file_protocol_proto_address_proto_rawDescData = file_protocol_proto_address_proto_rawDesc
)

func file_protocol_proto_address_proto_rawDescGZIP() []byte {
	file_protocol_proto_address_proto_rawDescOnce.Do(func() {
		file_protocol_proto_address_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_address_proto_rawDescData)
	})
	return file_protocol_proto_address_proto_rawDescData
}

var file_protocol_proto_address_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protocol_proto_address_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_protocol_proto_address_proto_goTypes = []any{
	(AddressType)(0),                       // 0: address.AddressType
	(*DirtyAddressForm)(nil),               // 1: address.DirtyAddressForm
	(*DirtyAddressMultiForm)(nil),          // 2: address.DirtyAddressMultiForm
	(*CreateAddressRequest)(nil),           // 3: address.CreateAddressRequest
	(*CreateProcessingAddressRequest)(nil), // 4: address.CreateProcessingAddressRequest
	(*CreatePersonalAddressRequest)(nil),   // 5: address.CreatePersonalAddressRequest
	(*DeletePersonalAddressRequest)(nil),   // 6: address.DeletePersonalAddressRequest
	(*AddressUuid)(nil),                    // 7: address.AddressUuid
	(*AddressStrId)(nil),                   // 8: address.AddressStrId
	(*UserUuid)(nil),                       // 9: address.UserUuid
	(*AddressPagination)(nil),              // 10: address.AddressPagination
	(*AddressOldFilter)(nil),               // 11: address.AddressOldFilter
	(*AddressNewFilter)(nil),               // 12: address.AddressNewFilter
	(*AddressPersonalFilter)(nil),          // 13: address.AddressPersonalFilter
	(*DirtyAddressFilter)(nil),             // 14: address.DirtyAddressFilter
	(*AddressResponse)(nil),                // 15: address.AddressResponse
	(*OldWay)(nil),                         // 16: address.OldWay
	(*NewWay)(nil),                         // 17: address.NewWay
	(*AddressMultiResponse)(nil),           // 18: address.AddressMultiResponse
	(*PersonalAddressResponse)(nil),        // 19: address.PersonalAddressResponse
	(*PersonalAddressMultiResponse)(nil),   // 20: address.PersonalAddressMultiResponse
	(*timestamppb.Timestamp)(nil),          // 21: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                  // 22: google.protobuf.Empty
}
var file_protocol_proto_address_proto_depIdxs = []int32{
	1,  // 0: address.DirtyAddressMultiForm.addresses:type_name -> address.DirtyAddressForm
	0,  // 1: address.AddressOldFilter.address_type:type_name -> address.AddressType
	21, // 2: address.AddressOldFilter.created_at_gt:type_name -> google.protobuf.Timestamp
	10, // 3: address.AddressOldFilter.pagination:type_name -> address.AddressPagination
	0,  // 4: address.AddressNewFilter.address_type:type_name -> address.AddressType
	21, // 5: address.AddressNewFilter.created_at_gt:type_name -> google.protobuf.Timestamp
	10, // 6: address.AddressNewFilter.pagination:type_name -> address.AddressPagination
	10, // 7: address.AddressPersonalFilter.pagination:type_name -> address.AddressPagination
	0,  // 8: address.AddressResponse.address_type:type_name -> address.AddressType
	16, // 9: address.AddressResponse.old_way:type_name -> address.OldWay
	17, // 10: address.AddressResponse.new_way:type_name -> address.NewWay
	21, // 11: address.AddressResponse.created_at:type_name -> google.protobuf.Timestamp
	15, // 12: address.AddressMultiResponse.addresses:type_name -> address.AddressResponse
	21, // 13: address.PersonalAddressResponse.deleted_at:type_name -> google.protobuf.Timestamp
	21, // 14: address.PersonalAddressResponse.updated_at:type_name -> google.protobuf.Timestamp
	21, // 15: address.PersonalAddressResponse.created_at:type_name -> google.protobuf.Timestamp
	19, // 16: address.PersonalAddressMultiResponse.addresses:type_name -> address.PersonalAddressResponse
	3,  // 17: address.AddressService.GetOrCreateAddress:input_type -> address.CreateAddressRequest
	7,  // 18: address.AddressService.GetAddressByUuid:input_type -> address.AddressUuid
	8,  // 19: address.AddressService.GetAddressByStr:input_type -> address.AddressStrId
	9,  // 20: address.AddressService.GetAddressesByUserUuid:input_type -> address.UserUuid
	11, // 21: address.AddressService.GetAddressesOldByFilter:input_type -> address.AddressOldFilter
	12, // 22: address.AddressService.GetAddressesNewByFilter:input_type -> address.AddressNewFilter
	1,  // 23: address.AddressService.CreateOrUpdateDirtyAddress:input_type -> address.DirtyAddressForm
	14, // 24: address.AddressService.GetDirtyAddressesByFilter:input_type -> address.DirtyAddressFilter
	4,  // 25: address.AddressService.CreateProcessingAddress:input_type -> address.CreateProcessingAddressRequest
	5,  // 26: address.AddressService.AddOrUpdatePersonalAddress:input_type -> address.CreatePersonalAddressRequest
	6,  // 27: address.AddressService.DeletePersonalAddress:input_type -> address.DeletePersonalAddressRequest
	9,  // 28: address.AddressService.GetPersonalAddressesByUserUuid:input_type -> address.UserUuid
	13, // 29: address.AddressService.GetPersonalAddressesByFilter:input_type -> address.AddressPersonalFilter
	15, // 30: address.AddressService.GetOrCreateAddress:output_type -> address.AddressResponse
	15, // 31: address.AddressService.GetAddressByUuid:output_type -> address.AddressResponse
	15, // 32: address.AddressService.GetAddressByStr:output_type -> address.AddressResponse
	18, // 33: address.AddressService.GetAddressesByUserUuid:output_type -> address.AddressMultiResponse
	18, // 34: address.AddressService.GetAddressesOldByFilter:output_type -> address.AddressMultiResponse
	18, // 35: address.AddressService.GetAddressesNewByFilter:output_type -> address.AddressMultiResponse
	1,  // 36: address.AddressService.CreateOrUpdateDirtyAddress:output_type -> address.DirtyAddressForm
	2,  // 37: address.AddressService.GetDirtyAddressesByFilter:output_type -> address.DirtyAddressMultiForm
	15, // 38: address.AddressService.CreateProcessingAddress:output_type -> address.AddressResponse
	19, // 39: address.AddressService.AddOrUpdatePersonalAddress:output_type -> address.PersonalAddressResponse
	22, // 40: address.AddressService.DeletePersonalAddress:output_type -> google.protobuf.Empty
	20, // 41: address.AddressService.GetPersonalAddressesByUserUuid:output_type -> address.PersonalAddressMultiResponse
	20, // 42: address.AddressService.GetPersonalAddressesByFilter:output_type -> address.PersonalAddressMultiResponse
	30, // [30:43] is the sub-list for method output_type
	17, // [17:30] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_protocol_proto_address_proto_init() }
func file_protocol_proto_address_proto_init() {
	if File_protocol_proto_address_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_proto_address_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DirtyAddressForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DirtyAddressMultiForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateProcessingAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePersonalAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePersonalAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AddressUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AddressStrId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UserUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AddressPagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AddressOldFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AddressNewFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AddressPersonalFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DirtyAddressFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OldWay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*NewWay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AddressMultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PersonalAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_proto_address_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PersonalAddressMultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_proto_address_proto_msgTypes[2].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[4].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[10].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[11].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[12].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[13].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[14].OneofWrappers = []any{
		(*AddressResponse_OldWay)(nil),
		(*AddressResponse_NewWay)(nil),
	}
	file_protocol_proto_address_proto_msgTypes[16].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[17].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[18].OneofWrappers = []any{}
	file_protocol_proto_address_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_address_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_proto_address_proto_goTypes,
		DependencyIndexes: file_protocol_proto_address_proto_depIdxs,
		EnumInfos:         file_protocol_proto_address_proto_enumTypes,
		MessageInfos:      file_protocol_proto_address_proto_msgTypes,
	}.Build()
	File_protocol_proto_address_proto = out.File
	file_protocol_proto_address_proto_rawDesc = nil
	file_protocol_proto_address_proto_goTypes = nil
	file_protocol_proto_address_proto_depIdxs = nil
}
