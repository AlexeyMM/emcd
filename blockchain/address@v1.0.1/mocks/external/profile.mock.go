// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	profile "code.emcdtech.com/emcd/service/profile/protocol/profile"
)

// ProfileServiceClient is an autogenerated mock type for the ProfileServiceClient type
type ProfileServiceClient struct {
	mock.Mock
}

type ProfileServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ProfileServiceClient) EXPECT() *ProfileServiceClient_Expecter {
	return &ProfileServiceClient_Expecter{mock: &_m.Mock}
}

// CancelNoPayJob provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CancelNoPayJob(ctx context.Context, in *profile.CancelNoPayJobRequest, opts ...grpc.CallOption) (*profile.CancelNoPayJobResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelNoPayJob")
	}

	var r0 *profile.CancelNoPayJobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CancelNoPayJobRequest, ...grpc.CallOption) (*profile.CancelNoPayJobResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CancelNoPayJobRequest, ...grpc.CallOption) *profile.CancelNoPayJobResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.CancelNoPayJobResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.CancelNoPayJobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_CancelNoPayJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelNoPayJob'
type ProfileServiceClient_CancelNoPayJob_Call struct {
	*mock.Call
}

// CancelNoPayJob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.CancelNoPayJobRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) CancelNoPayJob(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_CancelNoPayJob_Call {
	return &ProfileServiceClient_CancelNoPayJob_Call{Call: _e.mock.On("CancelNoPayJob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_CancelNoPayJob_Call) Run(run func(ctx context.Context, in *profile.CancelNoPayJobRequest, opts ...grpc.CallOption)) *ProfileServiceClient_CancelNoPayJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.CancelNoPayJobRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_CancelNoPayJob_Call) Return(_a0 *profile.CancelNoPayJobResponse, _a1 error) *ProfileServiceClient_CancelNoPayJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_CancelNoPayJob_Call) RunAndReturn(run func(context.Context, *profile.CancelNoPayJobRequest, ...grpc.CallOption) (*profile.CancelNoPayJobResponse, error)) *ProfileServiceClient_CancelNoPayJob_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeWalletAddress provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) ChangeWalletAddress(ctx context.Context, in *profile.ChangeWalletAddressRequest, opts ...grpc.CallOption) (*profile.ChangeWalletAddressResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeWalletAddress")
	}

	var r0 *profile.ChangeWalletAddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.ChangeWalletAddressRequest, ...grpc.CallOption) (*profile.ChangeWalletAddressResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.ChangeWalletAddressRequest, ...grpc.CallOption) *profile.ChangeWalletAddressResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.ChangeWalletAddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.ChangeWalletAddressRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_ChangeWalletAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeWalletAddress'
type ProfileServiceClient_ChangeWalletAddress_Call struct {
	*mock.Call
}

// ChangeWalletAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.ChangeWalletAddressRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) ChangeWalletAddress(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_ChangeWalletAddress_Call {
	return &ProfileServiceClient_ChangeWalletAddress_Call{Call: _e.mock.On("ChangeWalletAddress",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_ChangeWalletAddress_Call) Run(run func(ctx context.Context, in *profile.ChangeWalletAddressRequest, opts ...grpc.CallOption)) *ProfileServiceClient_ChangeWalletAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.ChangeWalletAddressRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_ChangeWalletAddress_Call) Return(_a0 *profile.ChangeWalletAddressResponse, _a1 error) *ProfileServiceClient_ChangeWalletAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_ChangeWalletAddress_Call) RunAndReturn(run func(context.Context, *profile.ChangeWalletAddressRequest, ...grpc.CallOption) (*profile.ChangeWalletAddressResponse, error)) *ProfileServiceClient_ChangeWalletAddress_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeWalletAddressConfirm provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) ChangeWalletAddressConfirm(ctx context.Context, in *profile.ChangeWalletAddressConfirmRequest, opts ...grpc.CallOption) (*profile.ChangeWalletAddressConfirmResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeWalletAddressConfirm")
	}

	var r0 *profile.ChangeWalletAddressConfirmResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.ChangeWalletAddressConfirmRequest, ...grpc.CallOption) (*profile.ChangeWalletAddressConfirmResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.ChangeWalletAddressConfirmRequest, ...grpc.CallOption) *profile.ChangeWalletAddressConfirmResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.ChangeWalletAddressConfirmResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.ChangeWalletAddressConfirmRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_ChangeWalletAddressConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeWalletAddressConfirm'
type ProfileServiceClient_ChangeWalletAddressConfirm_Call struct {
	*mock.Call
}

// ChangeWalletAddressConfirm is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.ChangeWalletAddressConfirmRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) ChangeWalletAddressConfirm(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_ChangeWalletAddressConfirm_Call {
	return &ProfileServiceClient_ChangeWalletAddressConfirm_Call{Call: _e.mock.On("ChangeWalletAddressConfirm",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_ChangeWalletAddressConfirm_Call) Run(run func(ctx context.Context, in *profile.ChangeWalletAddressConfirmRequest, opts ...grpc.CallOption)) *ProfileServiceClient_ChangeWalletAddressConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.ChangeWalletAddressConfirmRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_ChangeWalletAddressConfirm_Call) Return(_a0 *profile.ChangeWalletAddressConfirmResponse, _a1 error) *ProfileServiceClient_ChangeWalletAddressConfirm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_ChangeWalletAddressConfirm_Call) RunAndReturn(run func(context.Context, *profile.ChangeWalletAddressConfirmRequest, ...grpc.CallOption) (*profile.ChangeWalletAddressConfirmResponse, error)) *ProfileServiceClient_ChangeWalletAddressConfirm_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAppleAccount provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CheckAppleAccount(ctx context.Context, in *profile.CheckAppleAccountRequest, opts ...grpc.CallOption) (*profile.CheckAppleAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckAppleAccount")
	}

	var r0 *profile.CheckAppleAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CheckAppleAccountRequest, ...grpc.CallOption) (*profile.CheckAppleAccountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CheckAppleAccountRequest, ...grpc.CallOption) *profile.CheckAppleAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.CheckAppleAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.CheckAppleAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_CheckAppleAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAppleAccount'
type ProfileServiceClient_CheckAppleAccount_Call struct {
	*mock.Call
}

// CheckAppleAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.CheckAppleAccountRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) CheckAppleAccount(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_CheckAppleAccount_Call {
	return &ProfileServiceClient_CheckAppleAccount_Call{Call: _e.mock.On("CheckAppleAccount",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_CheckAppleAccount_Call) Run(run func(ctx context.Context, in *profile.CheckAppleAccountRequest, opts ...grpc.CallOption)) *ProfileServiceClient_CheckAppleAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.CheckAppleAccountRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_CheckAppleAccount_Call) Return(_a0 *profile.CheckAppleAccountResponse, _a1 error) *ProfileServiceClient_CheckAppleAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_CheckAppleAccount_Call) RunAndReturn(run func(context.Context, *profile.CheckAppleAccountRequest, ...grpc.CallOption) (*profile.CheckAppleAccountResponse, error)) *ProfileServiceClient_CheckAppleAccount_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) Create(ctx context.Context, in *profile.CreateRequest, opts ...grpc.CallOption) (*profile.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *profile.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CreateRequest, ...grpc.CallOption) (*profile.CreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CreateRequest, ...grpc.CallOption) *profile.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.CreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProfileServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.CreateRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) Create(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_Create_Call {
	return &ProfileServiceClient_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_Create_Call) Run(run func(ctx context.Context, in *profile.CreateRequest, opts ...grpc.CallOption)) *ProfileServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.CreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_Create_Call) Return(_a0 *profile.CreateResponse, _a1 error) *ProfileServiceClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_Create_Call) RunAndReturn(run func(context.Context, *profile.CreateRequest, ...grpc.CallOption) (*profile.CreateResponse, error)) *ProfileServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAPIKey provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateAPIKey(ctx context.Context, in *profile.CreateAPIKeyRequest, opts ...grpc.CallOption) (*profile.CreateAPIKeyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIKey")
	}

	var r0 *profile.CreateAPIKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CreateAPIKeyRequest, ...grpc.CallOption) (*profile.CreateAPIKeyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CreateAPIKeyRequest, ...grpc.CallOption) *profile.CreateAPIKeyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.CreateAPIKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.CreateAPIKeyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type ProfileServiceClient_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.CreateAPIKeyRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) CreateAPIKey(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_CreateAPIKey_Call {
	return &ProfileServiceClient_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_CreateAPIKey_Call) Run(run func(ctx context.Context, in *profile.CreateAPIKeyRequest, opts ...grpc.CallOption)) *ProfileServiceClient_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.CreateAPIKeyRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_CreateAPIKey_Call) Return(_a0 *profile.CreateAPIKeyResponse, _a1 error) *ProfileServiceClient_CreateAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_CreateAPIKey_Call) RunAndReturn(run func(context.Context, *profile.CreateAPIKeyRequest, ...grpc.CallOption) (*profile.CreateAPIKeyResponse, error)) *ProfileServiceClient_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateRole(ctx context.Context, in *profile.CreateRoleRequest, opts ...grpc.CallOption) (*profile.CreateRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 *profile.CreateRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CreateRoleRequest, ...grpc.CallOption) (*profile.CreateRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.CreateRoleRequest, ...grpc.CallOption) *profile.CreateRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.CreateRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.CreateRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type ProfileServiceClient_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.CreateRoleRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) CreateRole(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_CreateRole_Call {
	return &ProfileServiceClient_CreateRole_Call{Call: _e.mock.On("CreateRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_CreateRole_Call) Run(run func(ctx context.Context, in *profile.CreateRoleRequest, opts ...grpc.CallOption)) *ProfileServiceClient_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.CreateRoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_CreateRole_Call) Return(_a0 *profile.CreateRoleResponse, _a1 error) *ProfileServiceClient_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_CreateRole_Call) RunAndReturn(run func(context.Context, *profile.CreateRoleRequest, ...grpc.CallOption) (*profile.CreateRoleResponse, error)) *ProfileServiceClient_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAPIKey provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) DeleteAPIKey(ctx context.Context, in *profile.DeleteAPIKeyRequest, opts ...grpc.CallOption) (*profile.DeleteAPIKeyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAPIKey")
	}

	var r0 *profile.DeleteAPIKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.DeleteAPIKeyRequest, ...grpc.CallOption) (*profile.DeleteAPIKeyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.DeleteAPIKeyRequest, ...grpc.CallOption) *profile.DeleteAPIKeyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.DeleteAPIKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.DeleteAPIKeyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_DeleteAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAPIKey'
type ProfileServiceClient_DeleteAPIKey_Call struct {
	*mock.Call
}

// DeleteAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.DeleteAPIKeyRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) DeleteAPIKey(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_DeleteAPIKey_Call {
	return &ProfileServiceClient_DeleteAPIKey_Call{Call: _e.mock.On("DeleteAPIKey",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_DeleteAPIKey_Call) Run(run func(ctx context.Context, in *profile.DeleteAPIKeyRequest, opts ...grpc.CallOption)) *ProfileServiceClient_DeleteAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.DeleteAPIKeyRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_DeleteAPIKey_Call) Return(_a0 *profile.DeleteAPIKeyResponse, _a1 error) *ProfileServiceClient_DeleteAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_DeleteAPIKey_Call) RunAndReturn(run func(context.Context, *profile.DeleteAPIKeyRequest, ...grpc.CallOption) (*profile.DeleteAPIKeyResponse, error)) *ProfileServiceClient_DeleteAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) DeleteRole(ctx context.Context, in *profile.DeleteRoleRequest, opts ...grpc.CallOption) (*profile.DeleteRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 *profile.DeleteRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.DeleteRoleRequest, ...grpc.CallOption) (*profile.DeleteRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.DeleteRoleRequest, ...grpc.CallOption) *profile.DeleteRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.DeleteRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.DeleteRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type ProfileServiceClient_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.DeleteRoleRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) DeleteRole(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_DeleteRole_Call {
	return &ProfileServiceClient_DeleteRole_Call{Call: _e.mock.On("DeleteRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_DeleteRole_Call) Run(run func(ctx context.Context, in *profile.DeleteRoleRequest, opts ...grpc.CallOption)) *ProfileServiceClient_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.DeleteRoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_DeleteRole_Call) Return(_a0 *profile.DeleteRoleResponse, _a1 error) *ProfileServiceClient_DeleteRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_DeleteRole_Call) RunAndReturn(run func(context.Context, *profile.DeleteRoleRequest, ...grpc.CallOption) (*profile.DeleteRoleResponse, error)) *ProfileServiceClient_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetAPIKey provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAPIKey(ctx context.Context, in *profile.GetAPIKeyRequest, opts ...grpc.CallOption) (*profile.GetAPIKeyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIKey")
	}

	var r0 *profile.GetAPIKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAPIKeyRequest, ...grpc.CallOption) (*profile.GetAPIKeyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAPIKeyRequest, ...grpc.CallOption) *profile.GetAPIKeyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetAPIKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetAPIKeyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIKey'
type ProfileServiceClient_GetAPIKey_Call struct {
	*mock.Call
}

// GetAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetAPIKeyRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetAPIKey(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetAPIKey_Call {
	return &ProfileServiceClient_GetAPIKey_Call{Call: _e.mock.On("GetAPIKey",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetAPIKey_Call) Run(run func(ctx context.Context, in *profile.GetAPIKeyRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetAPIKeyRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetAPIKey_Call) Return(_a0 *profile.GetAPIKeyResponse, _a1 error) *ProfileServiceClient_GetAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetAPIKey_Call) RunAndReturn(run func(context.Context, *profile.GetAPIKeyRequest, ...grpc.CallOption) (*profile.GetAPIKeyResponse, error)) *ProfileServiceClient_GetAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveReferrals provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetActiveReferrals(ctx context.Context, in *profile.GetActiveReferralsRequest, opts ...grpc.CallOption) (*profile.GetActiveReferralsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveReferrals")
	}

	var r0 *profile.GetActiveReferralsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetActiveReferralsRequest, ...grpc.CallOption) (*profile.GetActiveReferralsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetActiveReferralsRequest, ...grpc.CallOption) *profile.GetActiveReferralsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetActiveReferralsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetActiveReferralsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetActiveReferrals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveReferrals'
type ProfileServiceClient_GetActiveReferrals_Call struct {
	*mock.Call
}

// GetActiveReferrals is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetActiveReferralsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetActiveReferrals(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetActiveReferrals_Call {
	return &ProfileServiceClient_GetActiveReferrals_Call{Call: _e.mock.On("GetActiveReferrals",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetActiveReferrals_Call) Run(run func(ctx context.Context, in *profile.GetActiveReferralsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetActiveReferrals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetActiveReferralsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetActiveReferrals_Call) Return(_a0 *profile.GetActiveReferralsResponse, _a1 error) *ProfileServiceClient_GetActiveReferrals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetActiveReferrals_Call) RunAndReturn(run func(context.Context, *profile.GetActiveReferralsRequest, ...grpc.CallOption) (*profile.GetActiveReferralsResponse, error)) *ProfileServiceClient_GetActiveReferrals_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddresses provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAddresses(ctx context.Context, in *profile.GetAddressesRequest, opts ...grpc.CallOption) (*profile.GetAddressesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAddresses")
	}

	var r0 *profile.GetAddressesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAddressesRequest, ...grpc.CallOption) (*profile.GetAddressesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAddressesRequest, ...grpc.CallOption) *profile.GetAddressesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetAddressesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetAddressesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddresses'
type ProfileServiceClient_GetAddresses_Call struct {
	*mock.Call
}

// GetAddresses is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetAddressesRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetAddresses(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetAddresses_Call {
	return &ProfileServiceClient_GetAddresses_Call{Call: _e.mock.On("GetAddresses",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetAddresses_Call) Run(run func(ctx context.Context, in *profile.GetAddressesRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetAddressesRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetAddresses_Call) Return(_a0 *profile.GetAddressesResponse, _a1 error) *ProfileServiceClient_GetAddresses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetAddresses_Call) RunAndReturn(run func(context.Context, *profile.GetAddressesRequest, ...grpc.CallOption) (*profile.GetAddressesResponse, error)) *ProfileServiceClient_GetAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSubUsers provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllSubUsers(ctx context.Context, in *profile.GetAllSubUsersRequest, opts ...grpc.CallOption) (*profile.GetAllSubUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSubUsers")
	}

	var r0 *profile.GetAllSubUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAllSubUsersRequest, ...grpc.CallOption) (*profile.GetAllSubUsersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAllSubUsersRequest, ...grpc.CallOption) *profile.GetAllSubUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetAllSubUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetAllSubUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetAllSubUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSubUsers'
type ProfileServiceClient_GetAllSubUsers_Call struct {
	*mock.Call
}

// GetAllSubUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetAllSubUsersRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetAllSubUsers(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetAllSubUsers_Call {
	return &ProfileServiceClient_GetAllSubUsers_Call{Call: _e.mock.On("GetAllSubUsers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetAllSubUsers_Call) Run(run func(ctx context.Context, in *profile.GetAllSubUsersRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetAllSubUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetAllSubUsersRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetAllSubUsers_Call) Return(_a0 *profile.GetAllSubUsersResponse, _a1 error) *ProfileServiceClient_GetAllSubUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetAllSubUsers_Call) RunAndReturn(run func(context.Context, *profile.GetAllSubUsersRequest, ...grpc.CallOption) (*profile.GetAllSubUsersResponse, error)) *ProfileServiceClient_GetAllSubUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserIDsByUsername provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllUserIDsByUsername(ctx context.Context, in *profile.GetAllUserIDsByUsernameRequest, opts ...grpc.CallOption) (*profile.GetAllUserIDsByUsernameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserIDsByUsername")
	}

	var r0 *profile.GetAllUserIDsByUsernameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAllUserIDsByUsernameRequest, ...grpc.CallOption) (*profile.GetAllUserIDsByUsernameResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAllUserIDsByUsernameRequest, ...grpc.CallOption) *profile.GetAllUserIDsByUsernameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetAllUserIDsByUsernameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetAllUserIDsByUsernameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetAllUserIDsByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserIDsByUsername'
type ProfileServiceClient_GetAllUserIDsByUsername_Call struct {
	*mock.Call
}

// GetAllUserIDsByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetAllUserIDsByUsernameRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetAllUserIDsByUsername(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetAllUserIDsByUsername_Call {
	return &ProfileServiceClient_GetAllUserIDsByUsername_Call{Call: _e.mock.On("GetAllUserIDsByUsername",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetAllUserIDsByUsername_Call) Run(run func(ctx context.Context, in *profile.GetAllUserIDsByUsernameRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetAllUserIDsByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetAllUserIDsByUsernameRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetAllUserIDsByUsername_Call) Return(_a0 *profile.GetAllUserIDsByUsernameResponse, _a1 error) *ProfileServiceClient_GetAllUserIDsByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetAllUserIDsByUsername_Call) RunAndReturn(run func(context.Context, *profile.GetAllUserIDsByUsernameRequest, ...grpc.CallOption) (*profile.GetAllUserIDsByUsernameResponse, error)) *ProfileServiceClient_GetAllUserIDsByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllUsers(ctx context.Context, in *profile.GetAllUsersRequest, opts ...grpc.CallOption) (*profile.GetAllUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 *profile.GetAllUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAllUsersRequest, ...grpc.CallOption) (*profile.GetAllUsersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAllUsersRequest, ...grpc.CallOption) *profile.GetAllUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetAllUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetAllUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type ProfileServiceClient_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetAllUsersRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetAllUsers(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetAllUsers_Call {
	return &ProfileServiceClient_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetAllUsers_Call) Run(run func(ctx context.Context, in *profile.GetAllUsersRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetAllUsersRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetAllUsers_Call) Return(_a0 *profile.GetAllUsersResponse, _a1 error) *ProfileServiceClient_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetAllUsers_Call) RunAndReturn(run func(context.Context, *profile.GetAllUsersRequest, ...grpc.CallOption) (*profile.GetAllUsersResponse, error)) *ProfileServiceClient_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsersByWlID provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllUsersByWlID(ctx context.Context, in *profile.GetAllUsersByWlIDRequest, opts ...grpc.CallOption) (*profile.GetAllUsersByWlIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsersByWlID")
	}

	var r0 *profile.GetAllUsersByWlIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAllUsersByWlIDRequest, ...grpc.CallOption) (*profile.GetAllUsersByWlIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetAllUsersByWlIDRequest, ...grpc.CallOption) *profile.GetAllUsersByWlIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetAllUsersByWlIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetAllUsersByWlIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetAllUsersByWlID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsersByWlID'
type ProfileServiceClient_GetAllUsersByWlID_Call struct {
	*mock.Call
}

// GetAllUsersByWlID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetAllUsersByWlIDRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetAllUsersByWlID(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetAllUsersByWlID_Call {
	return &ProfileServiceClient_GetAllUsersByWlID_Call{Call: _e.mock.On("GetAllUsersByWlID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetAllUsersByWlID_Call) Run(run func(ctx context.Context, in *profile.GetAllUsersByWlIDRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetAllUsersByWlID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetAllUsersByWlIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetAllUsersByWlID_Call) Return(_a0 *profile.GetAllUsersByWlIDResponse, _a1 error) *ProfileServiceClient_GetAllUsersByWlID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetAllUsersByWlID_Call) RunAndReturn(run func(context.Context, *profile.GetAllUsersByWlIDRequest, ...grpc.CallOption) (*profile.GetAllUsersByWlIDResponse, error)) *ProfileServiceClient_GetAllUsersByWlID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetByUserID(ctx context.Context, in *profile.GetByUserIDRequest, opts ...grpc.CallOption) (*profile.GetByUserIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *profile.GetByUserIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetByUserIDRequest, ...grpc.CallOption) (*profile.GetByUserIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetByUserIDRequest, ...grpc.CallOption) *profile.GetByUserIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetByUserIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetByUserIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type ProfileServiceClient_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetByUserIDRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetByUserID(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetByUserID_Call {
	return &ProfileServiceClient_GetByUserID_Call{Call: _e.mock.On("GetByUserID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetByUserID_Call) Run(run func(ctx context.Context, in *profile.GetByUserIDRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetByUserIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetByUserID_Call) Return(_a0 *profile.GetByUserIDResponse, _a1 error) *ProfileServiceClient_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetByUserID_Call) RunAndReturn(run func(context.Context, *profile.GetByUserIDRequest, ...grpc.CallOption) (*profile.GetByUserIDResponse, error)) *ProfileServiceClient_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserIDV2 provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetByUserIDV2(ctx context.Context, in *profile.GetByUserIDV2Request, opts ...grpc.CallOption) (*profile.GetByUserIDV2Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserIDV2")
	}

	var r0 *profile.GetByUserIDV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetByUserIDV2Request, ...grpc.CallOption) (*profile.GetByUserIDV2Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetByUserIDV2Request, ...grpc.CallOption) *profile.GetByUserIDV2Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetByUserIDV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetByUserIDV2Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetByUserIDV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserIDV2'
type ProfileServiceClient_GetByUserIDV2_Call struct {
	*mock.Call
}

// GetByUserIDV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetByUserIDV2Request
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetByUserIDV2(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetByUserIDV2_Call {
	return &ProfileServiceClient_GetByUserIDV2_Call{Call: _e.mock.On("GetByUserIDV2",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetByUserIDV2_Call) Run(run func(ctx context.Context, in *profile.GetByUserIDV2Request, opts ...grpc.CallOption)) *ProfileServiceClient_GetByUserIDV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetByUserIDV2Request), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetByUserIDV2_Call) Return(_a0 *profile.GetByUserIDV2Response, _a1 error) *ProfileServiceClient_GetByUserIDV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetByUserIDV2_Call) RunAndReturn(run func(context.Context, *profile.GetByUserIDV2Request, ...grpc.CallOption) (*profile.GetByUserIDV2Response, error)) *ProfileServiceClient_GetByUserIDV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsernames provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetByUsernames(ctx context.Context, in *profile.GetByUsernamesRequest, opts ...grpc.CallOption) (*profile.GetByUsernamesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsernames")
	}

	var r0 *profile.GetByUsernamesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetByUsernamesRequest, ...grpc.CallOption) (*profile.GetByUsernamesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetByUsernamesRequest, ...grpc.CallOption) *profile.GetByUsernamesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetByUsernamesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetByUsernamesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetByUsernames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsernames'
type ProfileServiceClient_GetByUsernames_Call struct {
	*mock.Call
}

// GetByUsernames is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetByUsernamesRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetByUsernames(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetByUsernames_Call {
	return &ProfileServiceClient_GetByUsernames_Call{Call: _e.mock.On("GetByUsernames",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetByUsernames_Call) Run(run func(ctx context.Context, in *profile.GetByUsernamesRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetByUsernames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetByUsernamesRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetByUsernames_Call) Return(_a0 *profile.GetByUsernamesResponse, _a1 error) *ProfileServiceClient_GetByUsernames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetByUsernames_Call) RunAndReturn(run func(context.Context, *profile.GetByUsernamesRequest, ...grpc.CallOption) (*profile.GetByUsernamesResponse, error)) *ProfileServiceClient_GetByUsernames_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsernamesForReferrals provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetByUsernamesForReferrals(ctx context.Context, in *profile.GetByUsernamesForReferralsRequest, opts ...grpc.CallOption) (profile.ProfileService_GetByUsernamesForReferralsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsernamesForReferrals")
	}

	var r0 profile.ProfileService_GetByUsernamesForReferralsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetByUsernamesForReferralsRequest, ...grpc.CallOption) (profile.ProfileService_GetByUsernamesForReferralsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetByUsernamesForReferralsRequest, ...grpc.CallOption) profile.ProfileService_GetByUsernamesForReferralsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(profile.ProfileService_GetByUsernamesForReferralsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetByUsernamesForReferralsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetByUsernamesForReferrals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsernamesForReferrals'
type ProfileServiceClient_GetByUsernamesForReferrals_Call struct {
	*mock.Call
}

// GetByUsernamesForReferrals is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetByUsernamesForReferralsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetByUsernamesForReferrals(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetByUsernamesForReferrals_Call {
	return &ProfileServiceClient_GetByUsernamesForReferrals_Call{Call: _e.mock.On("GetByUsernamesForReferrals",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetByUsernamesForReferrals_Call) Run(run func(ctx context.Context, in *profile.GetByUsernamesForReferralsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetByUsernamesForReferrals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetByUsernamesForReferralsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetByUsernamesForReferrals_Call) Return(_a0 profile.ProfileService_GetByUsernamesForReferralsClient, _a1 error) *ProfileServiceClient_GetByUsernamesForReferrals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetByUsernamesForReferrals_Call) RunAndReturn(run func(context.Context, *profile.GetByUsernamesForReferralsRequest, ...grpc.CallOption) (profile.ProfileService_GetByUsernamesForReferralsClient, error)) *ProfileServiceClient_GetByUsernamesForReferrals_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommissions provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetCommissions(ctx context.Context, in *profile.GetCommissionsRequest, opts ...grpc.CallOption) (*profile.GetCommissionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCommissions")
	}

	var r0 *profile.GetCommissionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetCommissionsRequest, ...grpc.CallOption) (*profile.GetCommissionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetCommissionsRequest, ...grpc.CallOption) *profile.GetCommissionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetCommissionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetCommissionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetCommissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommissions'
type ProfileServiceClient_GetCommissions_Call struct {
	*mock.Call
}

// GetCommissions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetCommissionsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetCommissions(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetCommissions_Call {
	return &ProfileServiceClient_GetCommissions_Call{Call: _e.mock.On("GetCommissions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetCommissions_Call) Run(run func(ctx context.Context, in *profile.GetCommissionsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetCommissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetCommissionsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetCommissions_Call) Return(_a0 *profile.GetCommissionsResponse, _a1 error) *ProfileServiceClient_GetCommissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetCommissions_Call) RunAndReturn(run func(context.Context, *profile.GetCommissionsRequest, ...grpc.CallOption) (*profile.GetCommissionsResponse, error)) *ProfileServiceClient_GetCommissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmailsByIDs provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetEmailsByIDs(ctx context.Context, in *profile.GetEmailsByIDsRequest, opts ...grpc.CallOption) (*profile.GetEmailsByIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailsByIDs")
	}

	var r0 *profile.GetEmailsByIDsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetEmailsByIDsRequest, ...grpc.CallOption) (*profile.GetEmailsByIDsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetEmailsByIDsRequest, ...grpc.CallOption) *profile.GetEmailsByIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetEmailsByIDsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetEmailsByIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetEmailsByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmailsByIDs'
type ProfileServiceClient_GetEmailsByIDs_Call struct {
	*mock.Call
}

// GetEmailsByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetEmailsByIDsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetEmailsByIDs(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetEmailsByIDs_Call {
	return &ProfileServiceClient_GetEmailsByIDs_Call{Call: _e.mock.On("GetEmailsByIDs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetEmailsByIDs_Call) Run(run func(ctx context.Context, in *profile.GetEmailsByIDsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetEmailsByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetEmailsByIDsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetEmailsByIDs_Call) Return(_a0 *profile.GetEmailsByIDsResponse, _a1 error) *ProfileServiceClient_GetEmailsByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetEmailsByIDs_Call) RunAndReturn(run func(context.Context, *profile.GetEmailsByIDsRequest, ...grpc.CallOption) (*profile.GetEmailsByIDsResponse, error)) *ProfileServiceClient_GetEmailsByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlagReferralLinkGenerated provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetFlagReferralLinkGenerated(ctx context.Context, in *profile.GetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption) (*profile.GetFlagReferralLinkGeneratedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFlagReferralLinkGenerated")
	}

	var r0 *profile.GetFlagReferralLinkGeneratedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetFlagReferralLinkGeneratedRequest, ...grpc.CallOption) (*profile.GetFlagReferralLinkGeneratedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetFlagReferralLinkGeneratedRequest, ...grpc.CallOption) *profile.GetFlagReferralLinkGeneratedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetFlagReferralLinkGeneratedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetFlagReferralLinkGeneratedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetFlagReferralLinkGenerated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlagReferralLinkGenerated'
type ProfileServiceClient_GetFlagReferralLinkGenerated_Call struct {
	*mock.Call
}

// GetFlagReferralLinkGenerated is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetFlagReferralLinkGeneratedRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetFlagReferralLinkGenerated(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetFlagReferralLinkGenerated_Call {
	return &ProfileServiceClient_GetFlagReferralLinkGenerated_Call{Call: _e.mock.On("GetFlagReferralLinkGenerated",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetFlagReferralLinkGenerated_Call) Run(run func(ctx context.Context, in *profile.GetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetFlagReferralLinkGenerated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetFlagReferralLinkGeneratedRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetFlagReferralLinkGenerated_Call) Return(_a0 *profile.GetFlagReferralLinkGeneratedResponse, _a1 error) *ProfileServiceClient_GetFlagReferralLinkGenerated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetFlagReferralLinkGenerated_Call) RunAndReturn(run func(context.Context, *profile.GetFlagReferralLinkGeneratedRequest, ...grpc.CallOption) (*profile.GetFlagReferralLinkGeneratedResponse, error)) *ProfileServiceClient_GetFlagReferralLinkGenerated_Call {
	_c.Call.Return(run)
	return _c
}

// GetKycStatus provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetKycStatus(ctx context.Context, in *profile.GetKycStatusRequest, opts ...grpc.CallOption) (*profile.GetKycStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetKycStatus")
	}

	var r0 *profile.GetKycStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetKycStatusRequest, ...grpc.CallOption) (*profile.GetKycStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetKycStatusRequest, ...grpc.CallOption) *profile.GetKycStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetKycStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetKycStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetKycStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKycStatus'
type ProfileServiceClient_GetKycStatus_Call struct {
	*mock.Call
}

// GetKycStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetKycStatusRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetKycStatus(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetKycStatus_Call {
	return &ProfileServiceClient_GetKycStatus_Call{Call: _e.mock.On("GetKycStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetKycStatus_Call) Run(run func(ctx context.Context, in *profile.GetKycStatusRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetKycStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetKycStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetKycStatus_Call) Return(_a0 *profile.GetKycStatusResponse, _a1 error) *ProfileServiceClient_GetKycStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetKycStatus_Call) RunAndReturn(run func(context.Context, *profile.GetKycStatusRequest, ...grpc.CallOption) (*profile.GetKycStatusResponse, error)) *ProfileServiceClient_GetKycStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetNoPayStatus provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetNoPayStatus(ctx context.Context, in *profile.GetNoPayStatusRequest, opts ...grpc.CallOption) (*profile.GetNoPayStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNoPayStatus")
	}

	var r0 *profile.GetNoPayStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetNoPayStatusRequest, ...grpc.CallOption) (*profile.GetNoPayStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetNoPayStatusRequest, ...grpc.CallOption) *profile.GetNoPayStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetNoPayStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetNoPayStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetNoPayStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNoPayStatus'
type ProfileServiceClient_GetNoPayStatus_Call struct {
	*mock.Call
}

// GetNoPayStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetNoPayStatusRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetNoPayStatus(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetNoPayStatus_Call {
	return &ProfileServiceClient_GetNoPayStatus_Call{Call: _e.mock.On("GetNoPayStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetNoPayStatus_Call) Run(run func(ctx context.Context, in *profile.GetNoPayStatusRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetNoPayStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetNoPayStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetNoPayStatus_Call) Return(_a0 *profile.GetNoPayStatusResponse, _a1 error) *ProfileServiceClient_GetNoPayStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetNoPayStatus_Call) RunAndReturn(run func(context.Context, *profile.GetNoPayStatusRequest, ...grpc.CallOption) (*profile.GetNoPayStatusResponse, error)) *ProfileServiceClient_GetNoPayStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationSettings provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetNotificationSettings(ctx context.Context, in *profile.GetNotificationSettingsRequest, opts ...grpc.CallOption) (*profile.GetNotificationSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSettings")
	}

	var r0 *profile.GetNotificationSettingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetNotificationSettingsRequest, ...grpc.CallOption) (*profile.GetNotificationSettingsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetNotificationSettingsRequest, ...grpc.CallOption) *profile.GetNotificationSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetNotificationSettingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetNotificationSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetNotificationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSettings'
type ProfileServiceClient_GetNotificationSettings_Call struct {
	*mock.Call
}

// GetNotificationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetNotificationSettingsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetNotificationSettings(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetNotificationSettings_Call {
	return &ProfileServiceClient_GetNotificationSettings_Call{Call: _e.mock.On("GetNotificationSettings",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetNotificationSettings_Call) Run(run func(ctx context.Context, in *profile.GetNotificationSettingsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetNotificationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetNotificationSettingsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetNotificationSettings_Call) Return(_a0 *profile.GetNotificationSettingsResponse, _a1 error) *ProfileServiceClient_GetNotificationSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetNotificationSettings_Call) RunAndReturn(run func(context.Context, *profile.GetNotificationSettingsRequest, ...grpc.CallOption) (*profile.GetNotificationSettingsResponse, error)) *ProfileServiceClient_GetNotificationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationSettingsWithTokens provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetNotificationSettingsWithTokens(ctx context.Context, in *profile.GetNotificationSettingsWithTokensRequest, opts ...grpc.CallOption) (*profile.GetNotificationSettingsWithTokensResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSettingsWithTokens")
	}

	var r0 *profile.GetNotificationSettingsWithTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetNotificationSettingsWithTokensRequest, ...grpc.CallOption) (*profile.GetNotificationSettingsWithTokensResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetNotificationSettingsWithTokensRequest, ...grpc.CallOption) *profile.GetNotificationSettingsWithTokensResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetNotificationSettingsWithTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetNotificationSettingsWithTokensRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetNotificationSettingsWithTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSettingsWithTokens'
type ProfileServiceClient_GetNotificationSettingsWithTokens_Call struct {
	*mock.Call
}

// GetNotificationSettingsWithTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetNotificationSettingsWithTokensRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetNotificationSettingsWithTokens(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetNotificationSettingsWithTokens_Call {
	return &ProfileServiceClient_GetNotificationSettingsWithTokens_Call{Call: _e.mock.On("GetNotificationSettingsWithTokens",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetNotificationSettingsWithTokens_Call) Run(run func(ctx context.Context, in *profile.GetNotificationSettingsWithTokensRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetNotificationSettingsWithTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetNotificationSettingsWithTokensRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetNotificationSettingsWithTokens_Call) Return(_a0 *profile.GetNotificationSettingsWithTokensResponse, _a1 error) *ProfileServiceClient_GetNotificationSettingsWithTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetNotificationSettingsWithTokens_Call) RunAndReturn(run func(context.Context, *profile.GetNotificationSettingsWithTokensRequest, ...grpc.CallOption) (*profile.GetNotificationSettingsWithTokensResponse, error)) *ProfileServiceClient_GetNotificationSettingsWithTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldByEmailAndWl provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetOldByEmailAndWl(ctx context.Context, in *profile.GetOldByEmailAndWlRequest, opts ...grpc.CallOption) (*profile.GetOldByEmailAndWlResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOldByEmailAndWl")
	}

	var r0 *profile.GetOldByEmailAndWlResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetOldByEmailAndWlRequest, ...grpc.CallOption) (*profile.GetOldByEmailAndWlResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetOldByEmailAndWlRequest, ...grpc.CallOption) *profile.GetOldByEmailAndWlResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetOldByEmailAndWlResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetOldByEmailAndWlRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetOldByEmailAndWl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldByEmailAndWl'
type ProfileServiceClient_GetOldByEmailAndWl_Call struct {
	*mock.Call
}

// GetOldByEmailAndWl is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetOldByEmailAndWlRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetOldByEmailAndWl(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetOldByEmailAndWl_Call {
	return &ProfileServiceClient_GetOldByEmailAndWl_Call{Call: _e.mock.On("GetOldByEmailAndWl",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetOldByEmailAndWl_Call) Run(run func(ctx context.Context, in *profile.GetOldByEmailAndWlRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetOldByEmailAndWl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetOldByEmailAndWlRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetOldByEmailAndWl_Call) Return(_a0 *profile.GetOldByEmailAndWlResponse, _a1 error) *ProfileServiceClient_GetOldByEmailAndWl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetOldByEmailAndWl_Call) RunAndReturn(run func(context.Context, *profile.GetOldByEmailAndWlRequest, ...grpc.CallOption) (*profile.GetOldByEmailAndWlResponse, error)) *ProfileServiceClient_GetOldByEmailAndWl_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldByEmailAndWlV2 provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetOldByEmailAndWlV2(ctx context.Context, in *profile.GetOldByEmailAndWlV2Request, opts ...grpc.CallOption) (*profile.GetOldByEmailAndWlV2Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOldByEmailAndWlV2")
	}

	var r0 *profile.GetOldByEmailAndWlV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetOldByEmailAndWlV2Request, ...grpc.CallOption) (*profile.GetOldByEmailAndWlV2Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetOldByEmailAndWlV2Request, ...grpc.CallOption) *profile.GetOldByEmailAndWlV2Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetOldByEmailAndWlV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetOldByEmailAndWlV2Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetOldByEmailAndWlV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldByEmailAndWlV2'
type ProfileServiceClient_GetOldByEmailAndWlV2_Call struct {
	*mock.Call
}

// GetOldByEmailAndWlV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetOldByEmailAndWlV2Request
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetOldByEmailAndWlV2(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetOldByEmailAndWlV2_Call {
	return &ProfileServiceClient_GetOldByEmailAndWlV2_Call{Call: _e.mock.On("GetOldByEmailAndWlV2",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetOldByEmailAndWlV2_Call) Run(run func(ctx context.Context, in *profile.GetOldByEmailAndWlV2Request, opts ...grpc.CallOption)) *ProfileServiceClient_GetOldByEmailAndWlV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetOldByEmailAndWlV2Request), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetOldByEmailAndWlV2_Call) Return(_a0 *profile.GetOldByEmailAndWlV2Response, _a1 error) *ProfileServiceClient_GetOldByEmailAndWlV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetOldByEmailAndWlV2_Call) RunAndReturn(run func(context.Context, *profile.GetOldByEmailAndWlV2Request, ...grpc.CallOption) (*profile.GetOldByEmailAndWlV2Response, error)) *ProfileServiceClient_GetOldByEmailAndWlV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldUserByEmailAndWl provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetOldUserByEmailAndWl(ctx context.Context, in *profile.GetOldUserByEmailAndWlRequest, opts ...grpc.CallOption) (*profile.GetOldUserByEmailAndWlResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOldUserByEmailAndWl")
	}

	var r0 *profile.GetOldUserByEmailAndWlResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetOldUserByEmailAndWlRequest, ...grpc.CallOption) (*profile.GetOldUserByEmailAndWlResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetOldUserByEmailAndWlRequest, ...grpc.CallOption) *profile.GetOldUserByEmailAndWlResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetOldUserByEmailAndWlResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetOldUserByEmailAndWlRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetOldUserByEmailAndWl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldUserByEmailAndWl'
type ProfileServiceClient_GetOldUserByEmailAndWl_Call struct {
	*mock.Call
}

// GetOldUserByEmailAndWl is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetOldUserByEmailAndWlRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetOldUserByEmailAndWl(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetOldUserByEmailAndWl_Call {
	return &ProfileServiceClient_GetOldUserByEmailAndWl_Call{Call: _e.mock.On("GetOldUserByEmailAndWl",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetOldUserByEmailAndWl_Call) Run(run func(ctx context.Context, in *profile.GetOldUserByEmailAndWlRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetOldUserByEmailAndWl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetOldUserByEmailAndWlRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetOldUserByEmailAndWl_Call) Return(_a0 *profile.GetOldUserByEmailAndWlResponse, _a1 error) *ProfileServiceClient_GetOldUserByEmailAndWl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetOldUserByEmailAndWl_Call) RunAndReturn(run func(context.Context, *profile.GetOldUserByEmailAndWlRequest, ...grpc.CallOption) (*profile.GetOldUserByEmailAndWlResponse, error)) *ProfileServiceClient_GetOldUserByEmailAndWl_Call {
	_c.Call.Return(run)
	return _c
}

// GetPushTokens provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetPushTokens(ctx context.Context, in *profile.GetPushTokensRequest, opts ...grpc.CallOption) (*profile.GetPushTokensResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPushTokens")
	}

	var r0 *profile.GetPushTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetPushTokensRequest, ...grpc.CallOption) (*profile.GetPushTokensResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetPushTokensRequest, ...grpc.CallOption) *profile.GetPushTokensResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetPushTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetPushTokensRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetPushTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPushTokens'
type ProfileServiceClient_GetPushTokens_Call struct {
	*mock.Call
}

// GetPushTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetPushTokensRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetPushTokens(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetPushTokens_Call {
	return &ProfileServiceClient_GetPushTokens_Call{Call: _e.mock.On("GetPushTokens",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetPushTokens_Call) Run(run func(ctx context.Context, in *profile.GetPushTokensRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetPushTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetPushTokensRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetPushTokens_Call) Return(_a0 *profile.GetPushTokensResponse, _a1 error) *ProfileServiceClient_GetPushTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetPushTokens_Call) RunAndReturn(run func(context.Context, *profile.GetPushTokensRequest, ...grpc.CallOption) (*profile.GetPushTokensResponse, error)) *ProfileServiceClient_GetPushTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetReferrals provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetReferrals(ctx context.Context, in *profile.GetReferralsRequest, opts ...grpc.CallOption) (*profile.GetReferralsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReferrals")
	}

	var r0 *profile.GetReferralsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetReferralsRequest, ...grpc.CallOption) (*profile.GetReferralsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetReferralsRequest, ...grpc.CallOption) *profile.GetReferralsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetReferralsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetReferralsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetReferrals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferrals'
type ProfileServiceClient_GetReferrals_Call struct {
	*mock.Call
}

// GetReferrals is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetReferralsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetReferrals(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetReferrals_Call {
	return &ProfileServiceClient_GetReferrals_Call{Call: _e.mock.On("GetReferrals",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetReferrals_Call) Run(run func(ctx context.Context, in *profile.GetReferralsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetReferrals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetReferralsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetReferrals_Call) Return(_a0 *profile.GetReferralsResponse, _a1 error) *ProfileServiceClient_GetReferrals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetReferrals_Call) RunAndReturn(run func(context.Context, *profile.GetReferralsRequest, ...grpc.CallOption) (*profile.GetReferralsResponse, error)) *ProfileServiceClient_GetReferrals_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesByUserID provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetRolesByUserID(ctx context.Context, in *profile.GetRolesByUserIDRequest, opts ...grpc.CallOption) (*profile.GetRolesByUserIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesByUserID")
	}

	var r0 *profile.GetRolesByUserIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetRolesByUserIDRequest, ...grpc.CallOption) (*profile.GetRolesByUserIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetRolesByUserIDRequest, ...grpc.CallOption) *profile.GetRolesByUserIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetRolesByUserIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetRolesByUserIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetRolesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesByUserID'
type ProfileServiceClient_GetRolesByUserID_Call struct {
	*mock.Call
}

// GetRolesByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetRolesByUserIDRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetRolesByUserID(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetRolesByUserID_Call {
	return &ProfileServiceClient_GetRolesByUserID_Call{Call: _e.mock.On("GetRolesByUserID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetRolesByUserID_Call) Run(run func(ctx context.Context, in *profile.GetRolesByUserIDRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetRolesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetRolesByUserIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetRolesByUserID_Call) Return(_a0 *profile.GetRolesByUserIDResponse, _a1 error) *ProfileServiceClient_GetRolesByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetRolesByUserID_Call) RunAndReturn(run func(context.Context, *profile.GetRolesByUserIDRequest, ...grpc.CallOption) (*profile.GetRolesByUserIDResponse, error)) *ProfileServiceClient_GetRolesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSuspended provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetSuspended(ctx context.Context, in *profile.GetSuspendedRequest, opts ...grpc.CallOption) (*profile.GetSuspendedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSuspended")
	}

	var r0 *profile.GetSuspendedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetSuspendedRequest, ...grpc.CallOption) (*profile.GetSuspendedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetSuspendedRequest, ...grpc.CallOption) *profile.GetSuspendedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetSuspendedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetSuspendedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetSuspended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuspended'
type ProfileServiceClient_GetSuspended_Call struct {
	*mock.Call
}

// GetSuspended is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetSuspendedRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetSuspended(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetSuspended_Call {
	return &ProfileServiceClient_GetSuspended_Call{Call: _e.mock.On("GetSuspended",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetSuspended_Call) Run(run func(ctx context.Context, in *profile.GetSuspendedRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetSuspended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetSuspendedRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetSuspended_Call) Return(_a0 *profile.GetSuspendedResponse, _a1 error) *ProfileServiceClient_GetSuspended_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetSuspended_Call) RunAndReturn(run func(context.Context, *profile.GetSuspendedRequest, ...grpc.CallOption) (*profile.GetSuspendedResponse, error)) *ProfileServiceClient_GetSuspended_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByApiKey provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetUserByApiKey(ctx context.Context, in *profile.GetUserByApiKeyRequest, opts ...grpc.CallOption) (*profile.GetUserByApiKeyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByApiKey")
	}

	var r0 *profile.GetUserByApiKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserByApiKeyRequest, ...grpc.CallOption) (*profile.GetUserByApiKeyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserByApiKeyRequest, ...grpc.CallOption) *profile.GetUserByApiKeyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetUserByApiKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetUserByApiKeyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetUserByApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByApiKey'
type ProfileServiceClient_GetUserByApiKey_Call struct {
	*mock.Call
}

// GetUserByApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetUserByApiKeyRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetUserByApiKey(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetUserByApiKey_Call {
	return &ProfileServiceClient_GetUserByApiKey_Call{Call: _e.mock.On("GetUserByApiKey",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetUserByApiKey_Call) Run(run func(ctx context.Context, in *profile.GetUserByApiKeyRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetUserByApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetUserByApiKeyRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetUserByApiKey_Call) Return(_a0 *profile.GetUserByApiKeyResponse, _a1 error) *ProfileServiceClient_GetUserByApiKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetUserByApiKey_Call) RunAndReturn(run func(context.Context, *profile.GetUserByApiKeyRequest, ...grpc.CallOption) (*profile.GetUserByApiKeyResponse, error)) *ProfileServiceClient_GetUserByApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmailAndWl provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetUserByEmailAndWl(ctx context.Context, in *profile.GetUserByEmailAndWlRequest, opts ...grpc.CallOption) (*profile.GetUserByEmailAndWlResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailAndWl")
	}

	var r0 *profile.GetUserByEmailAndWlResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserByEmailAndWlRequest, ...grpc.CallOption) (*profile.GetUserByEmailAndWlResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserByEmailAndWlRequest, ...grpc.CallOption) *profile.GetUserByEmailAndWlResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetUserByEmailAndWlResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetUserByEmailAndWlRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetUserByEmailAndWl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmailAndWl'
type ProfileServiceClient_GetUserByEmailAndWl_Call struct {
	*mock.Call
}

// GetUserByEmailAndWl is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetUserByEmailAndWlRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetUserByEmailAndWl(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetUserByEmailAndWl_Call {
	return &ProfileServiceClient_GetUserByEmailAndWl_Call{Call: _e.mock.On("GetUserByEmailAndWl",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetUserByEmailAndWl_Call) Run(run func(ctx context.Context, in *profile.GetUserByEmailAndWlRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetUserByEmailAndWl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetUserByEmailAndWlRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetUserByEmailAndWl_Call) Return(_a0 *profile.GetUserByEmailAndWlResponse, _a1 error) *ProfileServiceClient_GetUserByEmailAndWl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetUserByEmailAndWl_Call) RunAndReturn(run func(context.Context, *profile.GetUserByEmailAndWlRequest, ...grpc.CallOption) (*profile.GetUserByEmailAndWlResponse, error)) *ProfileServiceClient_GetUserByEmailAndWl_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDonationSettings provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetUserDonationSettings(ctx context.Context, in *profile.GetUserDonationSettingsRequest, opts ...grpc.CallOption) (*profile.GetUserDonationSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDonationSettings")
	}

	var r0 *profile.GetUserDonationSettingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserDonationSettingsRequest, ...grpc.CallOption) (*profile.GetUserDonationSettingsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserDonationSettingsRequest, ...grpc.CallOption) *profile.GetUserDonationSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetUserDonationSettingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetUserDonationSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetUserDonationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDonationSettings'
type ProfileServiceClient_GetUserDonationSettings_Call struct {
	*mock.Call
}

// GetUserDonationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetUserDonationSettingsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetUserDonationSettings(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetUserDonationSettings_Call {
	return &ProfileServiceClient_GetUserDonationSettings_Call{Call: _e.mock.On("GetUserDonationSettings",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetUserDonationSettings_Call) Run(run func(ctx context.Context, in *profile.GetUserDonationSettingsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetUserDonationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetUserDonationSettingsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetUserDonationSettings_Call) Return(_a0 *profile.GetUserDonationSettingsResponse, _a1 error) *ProfileServiceClient_GetUserDonationSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetUserDonationSettings_Call) RunAndReturn(run func(context.Context, *profile.GetUserDonationSettingsRequest, ...grpc.CallOption) (*profile.GetUserDonationSettingsResponse, error)) *ProfileServiceClient_GetUserDonationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserIDByOldID provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetUserIDByOldID(ctx context.Context, in *profile.GetUserIDByOldIDRequest, opts ...grpc.CallOption) (*profile.GetUserIDByOldIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIDByOldID")
	}

	var r0 *profile.GetUserIDByOldIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserIDByOldIDRequest, ...grpc.CallOption) (*profile.GetUserIDByOldIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserIDByOldIDRequest, ...grpc.CallOption) *profile.GetUserIDByOldIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetUserIDByOldIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetUserIDByOldIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetUserIDByOldID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserIDByOldID'
type ProfileServiceClient_GetUserIDByOldID_Call struct {
	*mock.Call
}

// GetUserIDByOldID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetUserIDByOldIDRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetUserIDByOldID(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetUserIDByOldID_Call {
	return &ProfileServiceClient_GetUserIDByOldID_Call{Call: _e.mock.On("GetUserIDByOldID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetUserIDByOldID_Call) Run(run func(ctx context.Context, in *profile.GetUserIDByOldIDRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetUserIDByOldID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetUserIDByOldIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetUserIDByOldID_Call) Return(_a0 *profile.GetUserIDByOldIDResponse, _a1 error) *ProfileServiceClient_GetUserIDByOldID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetUserIDByOldID_Call) RunAndReturn(run func(context.Context, *profile.GetUserIDByOldIDRequest, ...grpc.CallOption) (*profile.GetUserIDByOldIDResponse, error)) *ProfileServiceClient_GetUserIDByOldID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserIsActive provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetUserIsActive(ctx context.Context, in *profile.GetUserIsActiveRequest, opts ...grpc.CallOption) (*profile.GetUserIsActiveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIsActive")
	}

	var r0 *profile.GetUserIsActiveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserIsActiveRequest, ...grpc.CallOption) (*profile.GetUserIsActiveResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUserIsActiveRequest, ...grpc.CallOption) *profile.GetUserIsActiveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetUserIsActiveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetUserIsActiveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetUserIsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserIsActive'
type ProfileServiceClient_GetUserIsActive_Call struct {
	*mock.Call
}

// GetUserIsActive is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetUserIsActiveRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetUserIsActive(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetUserIsActive_Call {
	return &ProfileServiceClient_GetUserIsActive_Call{Call: _e.mock.On("GetUserIsActive",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetUserIsActive_Call) Run(run func(ctx context.Context, in *profile.GetUserIsActiveRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetUserIsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetUserIsActiveRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetUserIsActive_Call) Return(_a0 *profile.GetUserIsActiveResponse, _a1 error) *ProfileServiceClient_GetUserIsActive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetUserIsActive_Call) RunAndReturn(run func(context.Context, *profile.GetUserIsActiveRequest, ...grpc.CallOption) (*profile.GetUserIsActiveResponse, error)) *ProfileServiceClient_GetUserIsActive_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsernamesByIDs provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetUsernamesByIDs(ctx context.Context, in *profile.GetUsernamesByIDsRequest, opts ...grpc.CallOption) (*profile.GetUsernamesByIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsernamesByIDs")
	}

	var r0 *profile.GetUsernamesByIDsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUsernamesByIDsRequest, ...grpc.CallOption) (*profile.GetUsernamesByIDsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUsernamesByIDsRequest, ...grpc.CallOption) *profile.GetUsernamesByIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetUsernamesByIDsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetUsernamesByIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetUsernamesByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsernamesByIDs'
type ProfileServiceClient_GetUsernamesByIDs_Call struct {
	*mock.Call
}

// GetUsernamesByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetUsernamesByIDsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetUsernamesByIDs(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetUsernamesByIDs_Call {
	return &ProfileServiceClient_GetUsernamesByIDs_Call{Call: _e.mock.On("GetUsernamesByIDs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetUsernamesByIDs_Call) Run(run func(ctx context.Context, in *profile.GetUsernamesByIDsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetUsernamesByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetUsernamesByIDsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetUsernamesByIDs_Call) Return(_a0 *profile.GetUsernamesByIDsResponse, _a1 error) *ProfileServiceClient_GetUsernamesByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetUsernamesByIDs_Call) RunAndReturn(run func(context.Context, *profile.GetUsernamesByIDsRequest, ...grpc.CallOption) (*profile.GetUsernamesByIDsResponse, error)) *ProfileServiceClient_GetUsernamesByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByUUIDs provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetUsersByUUIDs(ctx context.Context, in *profile.GetUsersByUUIDsRequest, opts ...grpc.CallOption) (*profile.GetUsersByUUIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByUUIDs")
	}

	var r0 *profile.GetUsersByUUIDsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUsersByUUIDsRequest, ...grpc.CallOption) (*profile.GetUsersByUUIDsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUsersByUUIDsRequest, ...grpc.CallOption) *profile.GetUsersByUUIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetUsersByUUIDsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetUsersByUUIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetUsersByUUIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByUUIDs'
type ProfileServiceClient_GetUsersByUUIDs_Call struct {
	*mock.Call
}

// GetUsersByUUIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetUsersByUUIDsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetUsersByUUIDs(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetUsersByUUIDs_Call {
	return &ProfileServiceClient_GetUsersByUUIDs_Call{Call: _e.mock.On("GetUsersByUUIDs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetUsersByUUIDs_Call) Run(run func(ctx context.Context, in *profile.GetUsersByUUIDsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetUsersByUUIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetUsersByUUIDsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetUsersByUUIDs_Call) Return(_a0 *profile.GetUsersByUUIDsResponse, _a1 error) *ProfileServiceClient_GetUsersByUUIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetUsersByUUIDs_Call) RunAndReturn(run func(context.Context, *profile.GetUsersByUUIDsRequest, ...grpc.CallOption) (*profile.GetUsersByUUIDsResponse, error)) *ProfileServiceClient_GetUsersByUUIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersWithWL provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetUsersWithWL(ctx context.Context, in *profile.GetUsersWithWLRequest, opts ...grpc.CallOption) (*profile.GetUsersWithWLResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersWithWL")
	}

	var r0 *profile.GetUsersWithWLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUsersWithWLRequest, ...grpc.CallOption) (*profile.GetUsersWithWLResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.GetUsersWithWLRequest, ...grpc.CallOption) *profile.GetUsersWithWLResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.GetUsersWithWLResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.GetUsersWithWLRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_GetUsersWithWL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersWithWL'
type ProfileServiceClient_GetUsersWithWL_Call struct {
	*mock.Call
}

// GetUsersWithWL is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.GetUsersWithWLRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) GetUsersWithWL(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_GetUsersWithWL_Call {
	return &ProfileServiceClient_GetUsersWithWL_Call{Call: _e.mock.On("GetUsersWithWL",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_GetUsersWithWL_Call) Run(run func(ctx context.Context, in *profile.GetUsersWithWLRequest, opts ...grpc.CallOption)) *ProfileServiceClient_GetUsersWithWL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.GetUsersWithWLRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_GetUsersWithWL_Call) Return(_a0 *profile.GetUsersWithWLResponse, _a1 error) *ProfileServiceClient_GetUsersWithWL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_GetUsersWithWL_Call) RunAndReturn(run func(context.Context, *profile.GetUsersWithWLRequest, ...grpc.CallOption) (*profile.GetUsersWithWLResponse, error)) *ProfileServiceClient_GetUsersWithWL_Call {
	_c.Call.Return(run)
	return _c
}

// InsertKycHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) InsertKycHistory(ctx context.Context, in *profile.InsertKycHistoryRequest, opts ...grpc.CallOption) (*profile.InsertKycHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertKycHistory")
	}

	var r0 *profile.InsertKycHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.InsertKycHistoryRequest, ...grpc.CallOption) (*profile.InsertKycHistoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.InsertKycHistoryRequest, ...grpc.CallOption) *profile.InsertKycHistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.InsertKycHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.InsertKycHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_InsertKycHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertKycHistory'
type ProfileServiceClient_InsertKycHistory_Call struct {
	*mock.Call
}

// InsertKycHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.InsertKycHistoryRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) InsertKycHistory(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_InsertKycHistory_Call {
	return &ProfileServiceClient_InsertKycHistory_Call{Call: _e.mock.On("InsertKycHistory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_InsertKycHistory_Call) Run(run func(ctx context.Context, in *profile.InsertKycHistoryRequest, opts ...grpc.CallOption)) *ProfileServiceClient_InsertKycHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.InsertKycHistoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_InsertKycHistory_Call) Return(_a0 *profile.InsertKycHistoryResponse, _a1 error) *ProfileServiceClient_InsertKycHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_InsertKycHistory_Call) RunAndReturn(run func(context.Context, *profile.InsertKycHistoryRequest, ...grpc.CallOption) (*profile.InsertKycHistoryResponse, error)) *ProfileServiceClient_InsertKycHistory_Call {
	_c.Call.Return(run)
	return _c
}

// RelatedUsers provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) RelatedUsers(ctx context.Context, in *profile.RelatedUsersRequest, opts ...grpc.CallOption) (*profile.RelatedUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RelatedUsers")
	}

	var r0 *profile.RelatedUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.RelatedUsersRequest, ...grpc.CallOption) (*profile.RelatedUsersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.RelatedUsersRequest, ...grpc.CallOption) *profile.RelatedUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.RelatedUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.RelatedUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_RelatedUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RelatedUsers'
type ProfileServiceClient_RelatedUsers_Call struct {
	*mock.Call
}

// RelatedUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.RelatedUsersRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) RelatedUsers(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_RelatedUsers_Call {
	return &ProfileServiceClient_RelatedUsers_Call{Call: _e.mock.On("RelatedUsers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_RelatedUsers_Call) Run(run func(ctx context.Context, in *profile.RelatedUsersRequest, opts ...grpc.CallOption)) *ProfileServiceClient_RelatedUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.RelatedUsersRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_RelatedUsers_Call) Return(_a0 *profile.RelatedUsersResponse, _a1 error) *ProfileServiceClient_RelatedUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_RelatedUsers_Call) RunAndReturn(run func(context.Context, *profile.RelatedUsersRequest, ...grpc.CallOption) (*profile.RelatedUsersResponse, error)) *ProfileServiceClient_RelatedUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SafeDeleteByID provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SafeDeleteByID(ctx context.Context, in *profile.SafeDeleteByIDRequest, opts ...grpc.CallOption) (*profile.SafeDeleteByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SafeDeleteByID")
	}

	var r0 *profile.SafeDeleteByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SafeDeleteByIDRequest, ...grpc.CallOption) (*profile.SafeDeleteByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SafeDeleteByIDRequest, ...grpc.CallOption) *profile.SafeDeleteByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SafeDeleteByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SafeDeleteByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SafeDeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SafeDeleteByID'
type ProfileServiceClient_SafeDeleteByID_Call struct {
	*mock.Call
}

// SafeDeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SafeDeleteByIDRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SafeDeleteByID(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SafeDeleteByID_Call {
	return &ProfileServiceClient_SafeDeleteByID_Call{Call: _e.mock.On("SafeDeleteByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SafeDeleteByID_Call) Run(run func(ctx context.Context, in *profile.SafeDeleteByIDRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SafeDeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SafeDeleteByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SafeDeleteByID_Call) Return(_a0 *profile.SafeDeleteByIDResponse, _a1 error) *ProfileServiceClient_SafeDeleteByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SafeDeleteByID_Call) RunAndReturn(run func(context.Context, *profile.SafeDeleteByIDRequest, ...grpc.CallOption) (*profile.SafeDeleteByIDResponse, error)) *ProfileServiceClient_SafeDeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCommissions provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SaveCommissions(ctx context.Context, in *profile.SaveCommissionsRequest, opts ...grpc.CallOption) (*profile.SaveCommissionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveCommissions")
	}

	var r0 *profile.SaveCommissionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SaveCommissionsRequest, ...grpc.CallOption) (*profile.SaveCommissionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SaveCommissionsRequest, ...grpc.CallOption) *profile.SaveCommissionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SaveCommissionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SaveCommissionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SaveCommissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCommissions'
type ProfileServiceClient_SaveCommissions_Call struct {
	*mock.Call
}

// SaveCommissions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SaveCommissionsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SaveCommissions(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SaveCommissions_Call {
	return &ProfileServiceClient_SaveCommissions_Call{Call: _e.mock.On("SaveCommissions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SaveCommissions_Call) Run(run func(ctx context.Context, in *profile.SaveCommissionsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SaveCommissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SaveCommissionsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SaveCommissions_Call) Return(_a0 *profile.SaveCommissionsResponse, _a1 error) *ProfileServiceClient_SaveCommissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SaveCommissions_Call) RunAndReturn(run func(context.Context, *profile.SaveCommissionsRequest, ...grpc.CallOption) (*profile.SaveCommissionsResponse, error)) *ProfileServiceClient_SaveCommissions_Call {
	_c.Call.Return(run)
	return _c
}

// SaveNotificationSettings provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SaveNotificationSettings(ctx context.Context, in *profile.SaveNotificationSettingsRequest, opts ...grpc.CallOption) (*profile.SaveNotificationSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveNotificationSettings")
	}

	var r0 *profile.SaveNotificationSettingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SaveNotificationSettingsRequest, ...grpc.CallOption) (*profile.SaveNotificationSettingsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SaveNotificationSettingsRequest, ...grpc.CallOption) *profile.SaveNotificationSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SaveNotificationSettingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SaveNotificationSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SaveNotificationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNotificationSettings'
type ProfileServiceClient_SaveNotificationSettings_Call struct {
	*mock.Call
}

// SaveNotificationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SaveNotificationSettingsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SaveNotificationSettings(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SaveNotificationSettings_Call {
	return &ProfileServiceClient_SaveNotificationSettings_Call{Call: _e.mock.On("SaveNotificationSettings",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SaveNotificationSettings_Call) Run(run func(ctx context.Context, in *profile.SaveNotificationSettingsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SaveNotificationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SaveNotificationSettingsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SaveNotificationSettings_Call) Return(_a0 *profile.SaveNotificationSettingsResponse, _a1 error) *ProfileServiceClient_SaveNotificationSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SaveNotificationSettings_Call) RunAndReturn(run func(context.Context, *profile.SaveNotificationSettingsRequest, ...grpc.CallOption) (*profile.SaveNotificationSettingsResponse, error)) *ProfileServiceClient_SaveNotificationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SavePushToken provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SavePushToken(ctx context.Context, in *profile.SavePushTokenRequest, opts ...grpc.CallOption) (*profile.SavePushTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SavePushToken")
	}

	var r0 *profile.SavePushTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SavePushTokenRequest, ...grpc.CallOption) (*profile.SavePushTokenResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SavePushTokenRequest, ...grpc.CallOption) *profile.SavePushTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SavePushTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SavePushTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SavePushToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePushToken'
type ProfileServiceClient_SavePushToken_Call struct {
	*mock.Call
}

// SavePushToken is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SavePushTokenRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SavePushToken(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SavePushToken_Call {
	return &ProfileServiceClient_SavePushToken_Call{Call: _e.mock.On("SavePushToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SavePushToken_Call) Run(run func(ctx context.Context, in *profile.SavePushTokenRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SavePushToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SavePushTokenRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SavePushToken_Call) Return(_a0 *profile.SavePushTokenResponse, _a1 error) *ProfileServiceClient_SavePushToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SavePushToken_Call) RunAndReturn(run func(context.Context, *profile.SavePushTokenRequest, ...grpc.CallOption) (*profile.SavePushTokenResponse, error)) *ProfileServiceClient_SavePushToken_Call {
	_c.Call.Return(run)
	return _c
}

// SaveV3 provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SaveV3(ctx context.Context, in *profile.SaveV3Request, opts ...grpc.CallOption) (*profile.SaveV3Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveV3")
	}

	var r0 *profile.SaveV3Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SaveV3Request, ...grpc.CallOption) (*profile.SaveV3Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SaveV3Request, ...grpc.CallOption) *profile.SaveV3Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SaveV3Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SaveV3Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SaveV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveV3'
type ProfileServiceClient_SaveV3_Call struct {
	*mock.Call
}

// SaveV3 is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SaveV3Request
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SaveV3(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SaveV3_Call {
	return &ProfileServiceClient_SaveV3_Call{Call: _e.mock.On("SaveV3",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SaveV3_Call) Run(run func(ctx context.Context, in *profile.SaveV3Request, opts ...grpc.CallOption)) *ProfileServiceClient_SaveV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SaveV3Request), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SaveV3_Call) Return(_a0 *profile.SaveV3Response, _a1 error) *ProfileServiceClient_SaveV3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SaveV3_Call) RunAndReturn(run func(context.Context, *profile.SaveV3Request, ...grpc.CallOption) (*profile.SaveV3Response, error)) *ProfileServiceClient_SaveV3_Call {
	_c.Call.Return(run)
	return _c
}

// SaveV4 provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SaveV4(ctx context.Context, in *profile.SaveV4Request, opts ...grpc.CallOption) (*profile.SaveV4Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveV4")
	}

	var r0 *profile.SaveV4Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SaveV4Request, ...grpc.CallOption) (*profile.SaveV4Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SaveV4Request, ...grpc.CallOption) *profile.SaveV4Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SaveV4Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SaveV4Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SaveV4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveV4'
type ProfileServiceClient_SaveV4_Call struct {
	*mock.Call
}

// SaveV4 is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SaveV4Request
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SaveV4(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SaveV4_Call {
	return &ProfileServiceClient_SaveV4_Call{Call: _e.mock.On("SaveV4",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SaveV4_Call) Run(run func(ctx context.Context, in *profile.SaveV4Request, opts ...grpc.CallOption)) *ProfileServiceClient_SaveV4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SaveV4Request), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SaveV4_Call) Return(_a0 *profile.SaveV4Response, _a1 error) *ProfileServiceClient_SaveV4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SaveV4_Call) RunAndReturn(run func(context.Context, *profile.SaveV4Request, ...grpc.CallOption) (*profile.SaveV4Response, error)) *ProfileServiceClient_SaveV4_Call {
	_c.Call.Return(run)
	return _c
}

// SetFlagReferralLinkGenerated provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SetFlagReferralLinkGenerated(ctx context.Context, in *profile.SetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetFlagReferralLinkGenerated")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetFlagReferralLinkGeneratedRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetFlagReferralLinkGeneratedRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SetFlagReferralLinkGeneratedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SetFlagReferralLinkGenerated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFlagReferralLinkGenerated'
type ProfileServiceClient_SetFlagReferralLinkGenerated_Call struct {
	*mock.Call
}

// SetFlagReferralLinkGenerated is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SetFlagReferralLinkGeneratedRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SetFlagReferralLinkGenerated(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SetFlagReferralLinkGenerated_Call {
	return &ProfileServiceClient_SetFlagReferralLinkGenerated_Call{Call: _e.mock.On("SetFlagReferralLinkGenerated",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SetFlagReferralLinkGenerated_Call) Run(run func(ctx context.Context, in *profile.SetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SetFlagReferralLinkGenerated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SetFlagReferralLinkGeneratedRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SetFlagReferralLinkGenerated_Call) Return(_a0 *emptypb.Empty, _a1 error) *ProfileServiceClient_SetFlagReferralLinkGenerated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SetFlagReferralLinkGenerated_Call) RunAndReturn(run func(context.Context, *profile.SetFlagReferralLinkGeneratedRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *ProfileServiceClient_SetFlagReferralLinkGenerated_Call {
	_c.Call.Return(run)
	return _c
}

// SetKycStatus provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SetKycStatus(ctx context.Context, in *profile.SetKycStatusRequest, opts ...grpc.CallOption) (*profile.SetKycStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetKycStatus")
	}

	var r0 *profile.SetKycStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetKycStatusRequest, ...grpc.CallOption) (*profile.SetKycStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetKycStatusRequest, ...grpc.CallOption) *profile.SetKycStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SetKycStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SetKycStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SetKycStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetKycStatus'
type ProfileServiceClient_SetKycStatus_Call struct {
	*mock.Call
}

// SetKycStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SetKycStatusRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SetKycStatus(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SetKycStatus_Call {
	return &ProfileServiceClient_SetKycStatus_Call{Call: _e.mock.On("SetKycStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SetKycStatus_Call) Run(run func(ctx context.Context, in *profile.SetKycStatusRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SetKycStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SetKycStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SetKycStatus_Call) Return(_a0 *profile.SetKycStatusResponse, _a1 error) *ProfileServiceClient_SetKycStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SetKycStatus_Call) RunAndReturn(run func(context.Context, *profile.SetKycStatusRequest, ...grpc.CallOption) (*profile.SetKycStatusResponse, error)) *ProfileServiceClient_SetKycStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SetLanguage provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SetLanguage(ctx context.Context, in *profile.SetLanguageRequest, opts ...grpc.CallOption) (*profile.SetLanguageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetLanguage")
	}

	var r0 *profile.SetLanguageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetLanguageRequest, ...grpc.CallOption) (*profile.SetLanguageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetLanguageRequest, ...grpc.CallOption) *profile.SetLanguageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SetLanguageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SetLanguageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SetLanguage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLanguage'
type ProfileServiceClient_SetLanguage_Call struct {
	*mock.Call
}

// SetLanguage is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SetLanguageRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SetLanguage(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SetLanguage_Call {
	return &ProfileServiceClient_SetLanguage_Call{Call: _e.mock.On("SetLanguage",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SetLanguage_Call) Run(run func(ctx context.Context, in *profile.SetLanguageRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SetLanguage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SetLanguageRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SetLanguage_Call) Return(_a0 *profile.SetLanguageResponse, _a1 error) *ProfileServiceClient_SetLanguage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SetLanguage_Call) RunAndReturn(run func(context.Context, *profile.SetLanguageRequest, ...grpc.CallOption) (*profile.SetLanguageResponse, error)) *ProfileServiceClient_SetLanguage_Call {
	_c.Call.Return(run)
	return _c
}

// SetSuspended provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SetSuspended(ctx context.Context, in *profile.SetSuspendedRequest, opts ...grpc.CallOption) (*profile.SetSuspendedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetSuspended")
	}

	var r0 *profile.SetSuspendedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetSuspendedRequest, ...grpc.CallOption) (*profile.SetSuspendedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetSuspendedRequest, ...grpc.CallOption) *profile.SetSuspendedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SetSuspendedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SetSuspendedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SetSuspended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSuspended'
type ProfileServiceClient_SetSuspended_Call struct {
	*mock.Call
}

// SetSuspended is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SetSuspendedRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SetSuspended(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SetSuspended_Call {
	return &ProfileServiceClient_SetSuspended_Call{Call: _e.mock.On("SetSuspended",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SetSuspended_Call) Run(run func(ctx context.Context, in *profile.SetSuspendedRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SetSuspended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SetSuspendedRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SetSuspended_Call) Return(_a0 *profile.SetSuspendedResponse, _a1 error) *ProfileServiceClient_SetSuspended_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SetSuspended_Call) RunAndReturn(run func(context.Context, *profile.SetSuspendedRequest, ...grpc.CallOption) (*profile.SetSuspendedResponse, error)) *ProfileServiceClient_SetSuspended_Call {
	_c.Call.Return(run)
	return _c
}

// SetTimezone provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SetTimezone(ctx context.Context, in *profile.SetTimezoneRequest, opts ...grpc.CallOption) (*profile.SetTimezoneResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTimezone")
	}

	var r0 *profile.SetTimezoneResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetTimezoneRequest, ...grpc.CallOption) (*profile.SetTimezoneResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetTimezoneRequest, ...grpc.CallOption) *profile.SetTimezoneResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SetTimezoneResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SetTimezoneRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SetTimezone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimezone'
type ProfileServiceClient_SetTimezone_Call struct {
	*mock.Call
}

// SetTimezone is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SetTimezoneRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SetTimezone(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SetTimezone_Call {
	return &ProfileServiceClient_SetTimezone_Call{Call: _e.mock.On("SetTimezone",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SetTimezone_Call) Run(run func(ctx context.Context, in *profile.SetTimezoneRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SetTimezone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SetTimezoneRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SetTimezone_Call) Return(_a0 *profile.SetTimezoneResponse, _a1 error) *ProfileServiceClient_SetTimezone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SetTimezone_Call) RunAndReturn(run func(context.Context, *profile.SetTimezoneRequest, ...grpc.CallOption) (*profile.SetTimezoneResponse, error)) *ProfileServiceClient_SetTimezone_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserDonationSettings provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) SetUserDonationSettings(ctx context.Context, in *profile.SetUserDonationSettingsRequest, opts ...grpc.CallOption) (*profile.SetUserDonationSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetUserDonationSettings")
	}

	var r0 *profile.SetUserDonationSettingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetUserDonationSettingsRequest, ...grpc.CallOption) (*profile.SetUserDonationSettingsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.SetUserDonationSettingsRequest, ...grpc.CallOption) *profile.SetUserDonationSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.SetUserDonationSettingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.SetUserDonationSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_SetUserDonationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserDonationSettings'
type ProfileServiceClient_SetUserDonationSettings_Call struct {
	*mock.Call
}

// SetUserDonationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.SetUserDonationSettingsRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) SetUserDonationSettings(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_SetUserDonationSettings_Call {
	return &ProfileServiceClient_SetUserDonationSettings_Call{Call: _e.mock.On("SetUserDonationSettings",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_SetUserDonationSettings_Call) Run(run func(ctx context.Context, in *profile.SetUserDonationSettingsRequest, opts ...grpc.CallOption)) *ProfileServiceClient_SetUserDonationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.SetUserDonationSettingsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_SetUserDonationSettings_Call) Return(_a0 *profile.SetUserDonationSettingsResponse, _a1 error) *ProfileServiceClient_SetUserDonationSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_SetUserDonationSettings_Call) RunAndReturn(run func(context.Context, *profile.SetUserDonationSettingsRequest, ...grpc.CallOption) (*profile.SetUserDonationSettingsResponse, error)) *ProfileServiceClient_SetUserDonationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMinPay provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdateMinPay(ctx context.Context, in *profile.UpdateMinPayRequest, opts ...grpc.CallOption) (*profile.UpdateMinPayResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMinPay")
	}

	var r0 *profile.UpdateMinPayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateMinPayRequest, ...grpc.CallOption) (*profile.UpdateMinPayResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateMinPayRequest, ...grpc.CallOption) *profile.UpdateMinPayResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.UpdateMinPayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.UpdateMinPayRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_UpdateMinPay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMinPay'
type ProfileServiceClient_UpdateMinPay_Call struct {
	*mock.Call
}

// UpdateMinPay is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.UpdateMinPayRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) UpdateMinPay(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_UpdateMinPay_Call {
	return &ProfileServiceClient_UpdateMinPay_Call{Call: _e.mock.On("UpdateMinPay",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_UpdateMinPay_Call) Run(run func(ctx context.Context, in *profile.UpdateMinPayRequest, opts ...grpc.CallOption)) *ProfileServiceClient_UpdateMinPay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.UpdateMinPayRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_UpdateMinPay_Call) Return(_a0 *profile.UpdateMinPayResponse, _a1 error) *ProfileServiceClient_UpdateMinPay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_UpdateMinPay_Call) RunAndReturn(run func(context.Context, *profile.UpdateMinPayRequest, ...grpc.CallOption) (*profile.UpdateMinPayResponse, error)) *ProfileServiceClient_UpdateMinPay_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNoPay provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdateNoPay(ctx context.Context, in *profile.UpdateNoPayRequest, opts ...grpc.CallOption) (*profile.UpdateNoPayResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNoPay")
	}

	var r0 *profile.UpdateNoPayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateNoPayRequest, ...grpc.CallOption) (*profile.UpdateNoPayResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateNoPayRequest, ...grpc.CallOption) *profile.UpdateNoPayResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.UpdateNoPayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.UpdateNoPayRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_UpdateNoPay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNoPay'
type ProfileServiceClient_UpdateNoPay_Call struct {
	*mock.Call
}

// UpdateNoPay is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.UpdateNoPayRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) UpdateNoPay(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_UpdateNoPay_Call {
	return &ProfileServiceClient_UpdateNoPay_Call{Call: _e.mock.On("UpdateNoPay",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_UpdateNoPay_Call) Run(run func(ctx context.Context, in *profile.UpdateNoPayRequest, opts ...grpc.CallOption)) *ProfileServiceClient_UpdateNoPay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.UpdateNoPayRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_UpdateNoPay_Call) Return(_a0 *profile.UpdateNoPayResponse, _a1 error) *ProfileServiceClient_UpdateNoPay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_UpdateNoPay_Call) RunAndReturn(run func(context.Context, *profile.UpdateNoPayRequest, ...grpc.CallOption) (*profile.UpdateNoPayResponse, error)) *ProfileServiceClient_UpdateNoPay_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdatePassword(ctx context.Context, in *profile.UpdatePasswordRequest, opts ...grpc.CallOption) (*profile.UpdatePasswordResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 *profile.UpdatePasswordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdatePasswordRequest, ...grpc.CallOption) (*profile.UpdatePasswordResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdatePasswordRequest, ...grpc.CallOption) *profile.UpdatePasswordResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.UpdatePasswordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.UpdatePasswordRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type ProfileServiceClient_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.UpdatePasswordRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) UpdatePassword(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_UpdatePassword_Call {
	return &ProfileServiceClient_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_UpdatePassword_Call) Run(run func(ctx context.Context, in *profile.UpdatePasswordRequest, opts ...grpc.CallOption)) *ProfileServiceClient_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.UpdatePasswordRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_UpdatePassword_Call) Return(_a0 *profile.UpdatePasswordResponse, _a1 error) *ProfileServiceClient_UpdatePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_UpdatePassword_Call) RunAndReturn(run func(context.Context, *profile.UpdatePasswordRequest, ...grpc.CallOption) (*profile.UpdatePasswordResponse, error)) *ProfileServiceClient_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdateProfile(ctx context.Context, in *profile.UpdateProfileRequest, opts ...grpc.CallOption) (*profile.UpdateProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *profile.UpdateProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateProfileRequest, ...grpc.CallOption) (*profile.UpdateProfileResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateProfileRequest, ...grpc.CallOption) *profile.UpdateProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.UpdateProfileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.UpdateProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type ProfileServiceClient_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.UpdateProfileRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) UpdateProfile(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_UpdateProfile_Call {
	return &ProfileServiceClient_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_UpdateProfile_Call) Run(run func(ctx context.Context, in *profile.UpdateProfileRequest, opts ...grpc.CallOption)) *ProfileServiceClient_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.UpdateProfileRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_UpdateProfile_Call) Return(_a0 *profile.UpdateProfileResponse, _a1 error) *ProfileServiceClient_UpdateProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_UpdateProfile_Call) RunAndReturn(run func(context.Context, *profile.UpdateProfileRequest, ...grpc.CallOption) (*profile.UpdateProfileResponse, error)) *ProfileServiceClient_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRefID provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdateRefID(ctx context.Context, in *profile.UpdateRefIDRequest, opts ...grpc.CallOption) (*profile.UpdateRefIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefID")
	}

	var r0 *profile.UpdateRefIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateRefIDRequest, ...grpc.CallOption) (*profile.UpdateRefIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateRefIDRequest, ...grpc.CallOption) *profile.UpdateRefIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.UpdateRefIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.UpdateRefIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_UpdateRefID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRefID'
type ProfileServiceClient_UpdateRefID_Call struct {
	*mock.Call
}

// UpdateRefID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.UpdateRefIDRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) UpdateRefID(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_UpdateRefID_Call {
	return &ProfileServiceClient_UpdateRefID_Call{Call: _e.mock.On("UpdateRefID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_UpdateRefID_Call) Run(run func(ctx context.Context, in *profile.UpdateRefIDRequest, opts ...grpc.CallOption)) *ProfileServiceClient_UpdateRefID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.UpdateRefIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_UpdateRefID_Call) Return(_a0 *profile.UpdateRefIDResponse, _a1 error) *ProfileServiceClient_UpdateRefID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_UpdateRefID_Call) RunAndReturn(run func(context.Context, *profile.UpdateRefIDRequest, ...grpc.CallOption) (*profile.UpdateRefIDResponse, error)) *ProfileServiceClient_UpdateRefID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserIsActive provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdateUserIsActive(ctx context.Context, in *profile.UpdateUserIsActiveRequest, opts ...grpc.CallOption) (*profile.UpdateUserIsActiveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserIsActive")
	}

	var r0 *profile.UpdateUserIsActiveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateUserIsActiveRequest, ...grpc.CallOption) (*profile.UpdateUserIsActiveResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *profile.UpdateUserIsActiveRequest, ...grpc.CallOption) *profile.UpdateUserIsActiveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.UpdateUserIsActiveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *profile.UpdateUserIsActiveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileServiceClient_UpdateUserIsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserIsActive'
type ProfileServiceClient_UpdateUserIsActive_Call struct {
	*mock.Call
}

// UpdateUserIsActive is a helper method to define mock.On call
//   - ctx context.Context
//   - in *profile.UpdateUserIsActiveRequest
//   - opts ...grpc.CallOption
func (_e *ProfileServiceClient_Expecter) UpdateUserIsActive(ctx interface{}, in interface{}, opts ...interface{}) *ProfileServiceClient_UpdateUserIsActive_Call {
	return &ProfileServiceClient_UpdateUserIsActive_Call{Call: _e.mock.On("UpdateUserIsActive",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProfileServiceClient_UpdateUserIsActive_Call) Run(run func(ctx context.Context, in *profile.UpdateUserIsActiveRequest, opts ...grpc.CallOption)) *ProfileServiceClient_UpdateUserIsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*profile.UpdateUserIsActiveRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProfileServiceClient_UpdateUserIsActive_Call) Return(_a0 *profile.UpdateUserIsActiveResponse, _a1 error) *ProfileServiceClient_UpdateUserIsActive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileServiceClient_UpdateUserIsActive_Call) RunAndReturn(run func(context.Context, *profile.UpdateUserIsActiveRequest, ...grpc.CallOption) (*profile.UpdateUserIsActiveResponse, error)) *ProfileServiceClient_UpdateUserIsActive_Call {
	_c.Call.Return(run)
	return _c
}

// NewProfileServiceClient creates a new instance of ProfileServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileServiceClient {
	mock := &ProfileServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
