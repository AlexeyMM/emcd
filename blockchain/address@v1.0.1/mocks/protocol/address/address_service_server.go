// Code generated by mockery v2.43.2. DO NOT EDIT.

package address

import (
	context "context"

	address "code.emcdtech.com/emcd/blockchain/address/protocol/address"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// MockAddressServiceServer is an autogenerated mock type for the AddressServiceServer type
type MockAddressServiceServer struct {
	mock.Mock
}

type MockAddressServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressServiceServer) EXPECT() *MockAddressServiceServer_Expecter {
	return &MockAddressServiceServer_Expecter{mock: &_m.Mock}
}

// AddOrUpdatePersonalAddress provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) AddOrUpdatePersonalAddress(_a0 context.Context, _a1 *address.CreatePersonalAddressRequest) (*address.PersonalAddressResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddOrUpdatePersonalAddress")
	}

	var r0 *address.PersonalAddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.CreatePersonalAddressRequest) (*address.PersonalAddressResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.CreatePersonalAddressRequest) *address.PersonalAddressResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.PersonalAddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.CreatePersonalAddressRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_AddOrUpdatePersonalAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrUpdatePersonalAddress'
type MockAddressServiceServer_AddOrUpdatePersonalAddress_Call struct {
	*mock.Call
}

// AddOrUpdatePersonalAddress is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.CreatePersonalAddressRequest
func (_e *MockAddressServiceServer_Expecter) AddOrUpdatePersonalAddress(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_AddOrUpdatePersonalAddress_Call {
	return &MockAddressServiceServer_AddOrUpdatePersonalAddress_Call{Call: _e.mock.On("AddOrUpdatePersonalAddress", _a0, _a1)}
}

func (_c *MockAddressServiceServer_AddOrUpdatePersonalAddress_Call) Run(run func(_a0 context.Context, _a1 *address.CreatePersonalAddressRequest)) *MockAddressServiceServer_AddOrUpdatePersonalAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.CreatePersonalAddressRequest))
	})
	return _c
}

func (_c *MockAddressServiceServer_AddOrUpdatePersonalAddress_Call) Return(_a0 *address.PersonalAddressResponse, _a1 error) *MockAddressServiceServer_AddOrUpdatePersonalAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_AddOrUpdatePersonalAddress_Call) RunAndReturn(run func(context.Context, *address.CreatePersonalAddressRequest) (*address.PersonalAddressResponse, error)) *MockAddressServiceServer_AddOrUpdatePersonalAddress_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateDirtyAddress provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) CreateOrUpdateDirtyAddress(_a0 context.Context, _a1 *address.DirtyAddressForm) (*address.DirtyAddressForm, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateDirtyAddress")
	}

	var r0 *address.DirtyAddressForm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.DirtyAddressForm) (*address.DirtyAddressForm, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.DirtyAddressForm) *address.DirtyAddressForm); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.DirtyAddressForm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.DirtyAddressForm) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateDirtyAddress'
type MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call struct {
	*mock.Call
}

// CreateOrUpdateDirtyAddress is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.DirtyAddressForm
func (_e *MockAddressServiceServer_Expecter) CreateOrUpdateDirtyAddress(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call {
	return &MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call{Call: _e.mock.On("CreateOrUpdateDirtyAddress", _a0, _a1)}
}

func (_c *MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call) Run(run func(_a0 context.Context, _a1 *address.DirtyAddressForm)) *MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.DirtyAddressForm))
	})
	return _c
}

func (_c *MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call) Return(_a0 *address.DirtyAddressForm, _a1 error) *MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call) RunAndReturn(run func(context.Context, *address.DirtyAddressForm) (*address.DirtyAddressForm, error)) *MockAddressServiceServer_CreateOrUpdateDirtyAddress_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProcessingAddress provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) CreateProcessingAddress(_a0 context.Context, _a1 *address.CreateProcessingAddressRequest) (*address.AddressResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProcessingAddress")
	}

	var r0 *address.AddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.CreateProcessingAddressRequest) (*address.AddressResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.CreateProcessingAddressRequest) *address.AddressResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.AddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.CreateProcessingAddressRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_CreateProcessingAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProcessingAddress'
type MockAddressServiceServer_CreateProcessingAddress_Call struct {
	*mock.Call
}

// CreateProcessingAddress is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.CreateProcessingAddressRequest
func (_e *MockAddressServiceServer_Expecter) CreateProcessingAddress(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_CreateProcessingAddress_Call {
	return &MockAddressServiceServer_CreateProcessingAddress_Call{Call: _e.mock.On("CreateProcessingAddress", _a0, _a1)}
}

func (_c *MockAddressServiceServer_CreateProcessingAddress_Call) Run(run func(_a0 context.Context, _a1 *address.CreateProcessingAddressRequest)) *MockAddressServiceServer_CreateProcessingAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.CreateProcessingAddressRequest))
	})
	return _c
}

func (_c *MockAddressServiceServer_CreateProcessingAddress_Call) Return(_a0 *address.AddressResponse, _a1 error) *MockAddressServiceServer_CreateProcessingAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_CreateProcessingAddress_Call) RunAndReturn(run func(context.Context, *address.CreateProcessingAddressRequest) (*address.AddressResponse, error)) *MockAddressServiceServer_CreateProcessingAddress_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePersonalAddress provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) DeletePersonalAddress(_a0 context.Context, _a1 *address.DeletePersonalAddressRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonalAddress")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.DeletePersonalAddressRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.DeletePersonalAddressRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.DeletePersonalAddressRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_DeletePersonalAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonalAddress'
type MockAddressServiceServer_DeletePersonalAddress_Call struct {
	*mock.Call
}

// DeletePersonalAddress is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.DeletePersonalAddressRequest
func (_e *MockAddressServiceServer_Expecter) DeletePersonalAddress(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_DeletePersonalAddress_Call {
	return &MockAddressServiceServer_DeletePersonalAddress_Call{Call: _e.mock.On("DeletePersonalAddress", _a0, _a1)}
}

func (_c *MockAddressServiceServer_DeletePersonalAddress_Call) Run(run func(_a0 context.Context, _a1 *address.DeletePersonalAddressRequest)) *MockAddressServiceServer_DeletePersonalAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.DeletePersonalAddressRequest))
	})
	return _c
}

func (_c *MockAddressServiceServer_DeletePersonalAddress_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockAddressServiceServer_DeletePersonalAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_DeletePersonalAddress_Call) RunAndReturn(run func(context.Context, *address.DeletePersonalAddressRequest) (*emptypb.Empty, error)) *MockAddressServiceServer_DeletePersonalAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressByStr provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetAddressByStr(_a0 context.Context, _a1 *address.AddressStrId) (*address.AddressResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressByStr")
	}

	var r0 *address.AddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressStrId) (*address.AddressResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressStrId) *address.AddressResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.AddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.AddressStrId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetAddressByStr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressByStr'
type MockAddressServiceServer_GetAddressByStr_Call struct {
	*mock.Call
}

// GetAddressByStr is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.AddressStrId
func (_e *MockAddressServiceServer_Expecter) GetAddressByStr(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetAddressByStr_Call {
	return &MockAddressServiceServer_GetAddressByStr_Call{Call: _e.mock.On("GetAddressByStr", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetAddressByStr_Call) Run(run func(_a0 context.Context, _a1 *address.AddressStrId)) *MockAddressServiceServer_GetAddressByStr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.AddressStrId))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetAddressByStr_Call) Return(_a0 *address.AddressResponse, _a1 error) *MockAddressServiceServer_GetAddressByStr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetAddressByStr_Call) RunAndReturn(run func(context.Context, *address.AddressStrId) (*address.AddressResponse, error)) *MockAddressServiceServer_GetAddressByStr_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressByUuid provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetAddressByUuid(_a0 context.Context, _a1 *address.AddressUuid) (*address.AddressResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressByUuid")
	}

	var r0 *address.AddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressUuid) (*address.AddressResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressUuid) *address.AddressResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.AddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.AddressUuid) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetAddressByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressByUuid'
type MockAddressServiceServer_GetAddressByUuid_Call struct {
	*mock.Call
}

// GetAddressByUuid is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.AddressUuid
func (_e *MockAddressServiceServer_Expecter) GetAddressByUuid(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetAddressByUuid_Call {
	return &MockAddressServiceServer_GetAddressByUuid_Call{Call: _e.mock.On("GetAddressByUuid", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetAddressByUuid_Call) Run(run func(_a0 context.Context, _a1 *address.AddressUuid)) *MockAddressServiceServer_GetAddressByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.AddressUuid))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetAddressByUuid_Call) Return(_a0 *address.AddressResponse, _a1 error) *MockAddressServiceServer_GetAddressByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetAddressByUuid_Call) RunAndReturn(run func(context.Context, *address.AddressUuid) (*address.AddressResponse, error)) *MockAddressServiceServer_GetAddressByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressesByUserUuid provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetAddressesByUserUuid(_a0 context.Context, _a1 *address.UserUuid) (*address.AddressMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressesByUserUuid")
	}

	var r0 *address.AddressMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.UserUuid) (*address.AddressMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.UserUuid) *address.AddressMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.AddressMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.UserUuid) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetAddressesByUserUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressesByUserUuid'
type MockAddressServiceServer_GetAddressesByUserUuid_Call struct {
	*mock.Call
}

// GetAddressesByUserUuid is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.UserUuid
func (_e *MockAddressServiceServer_Expecter) GetAddressesByUserUuid(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetAddressesByUserUuid_Call {
	return &MockAddressServiceServer_GetAddressesByUserUuid_Call{Call: _e.mock.On("GetAddressesByUserUuid", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetAddressesByUserUuid_Call) Run(run func(_a0 context.Context, _a1 *address.UserUuid)) *MockAddressServiceServer_GetAddressesByUserUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.UserUuid))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetAddressesByUserUuid_Call) Return(_a0 *address.AddressMultiResponse, _a1 error) *MockAddressServiceServer_GetAddressesByUserUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetAddressesByUserUuid_Call) RunAndReturn(run func(context.Context, *address.UserUuid) (*address.AddressMultiResponse, error)) *MockAddressServiceServer_GetAddressesByUserUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressesNewByFilter provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetAddressesNewByFilter(_a0 context.Context, _a1 *address.AddressNewFilter) (*address.AddressMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressesNewByFilter")
	}

	var r0 *address.AddressMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressNewFilter) (*address.AddressMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressNewFilter) *address.AddressMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.AddressMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.AddressNewFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetAddressesNewByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressesNewByFilter'
type MockAddressServiceServer_GetAddressesNewByFilter_Call struct {
	*mock.Call
}

// GetAddressesNewByFilter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.AddressNewFilter
func (_e *MockAddressServiceServer_Expecter) GetAddressesNewByFilter(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetAddressesNewByFilter_Call {
	return &MockAddressServiceServer_GetAddressesNewByFilter_Call{Call: _e.mock.On("GetAddressesNewByFilter", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetAddressesNewByFilter_Call) Run(run func(_a0 context.Context, _a1 *address.AddressNewFilter)) *MockAddressServiceServer_GetAddressesNewByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.AddressNewFilter))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetAddressesNewByFilter_Call) Return(_a0 *address.AddressMultiResponse, _a1 error) *MockAddressServiceServer_GetAddressesNewByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetAddressesNewByFilter_Call) RunAndReturn(run func(context.Context, *address.AddressNewFilter) (*address.AddressMultiResponse, error)) *MockAddressServiceServer_GetAddressesNewByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressesOldByFilter provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetAddressesOldByFilter(_a0 context.Context, _a1 *address.AddressOldFilter) (*address.AddressMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressesOldByFilter")
	}

	var r0 *address.AddressMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressOldFilter) (*address.AddressMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressOldFilter) *address.AddressMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.AddressMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.AddressOldFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetAddressesOldByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressesOldByFilter'
type MockAddressServiceServer_GetAddressesOldByFilter_Call struct {
	*mock.Call
}

// GetAddressesOldByFilter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.AddressOldFilter
func (_e *MockAddressServiceServer_Expecter) GetAddressesOldByFilter(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetAddressesOldByFilter_Call {
	return &MockAddressServiceServer_GetAddressesOldByFilter_Call{Call: _e.mock.On("GetAddressesOldByFilter", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetAddressesOldByFilter_Call) Run(run func(_a0 context.Context, _a1 *address.AddressOldFilter)) *MockAddressServiceServer_GetAddressesOldByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.AddressOldFilter))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetAddressesOldByFilter_Call) Return(_a0 *address.AddressMultiResponse, _a1 error) *MockAddressServiceServer_GetAddressesOldByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetAddressesOldByFilter_Call) RunAndReturn(run func(context.Context, *address.AddressOldFilter) (*address.AddressMultiResponse, error)) *MockAddressServiceServer_GetAddressesOldByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirtyAddressesByFilter provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetDirtyAddressesByFilter(_a0 context.Context, _a1 *address.DirtyAddressFilter) (*address.DirtyAddressMultiForm, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDirtyAddressesByFilter")
	}

	var r0 *address.DirtyAddressMultiForm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.DirtyAddressFilter) (*address.DirtyAddressMultiForm, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.DirtyAddressFilter) *address.DirtyAddressMultiForm); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.DirtyAddressMultiForm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.DirtyAddressFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetDirtyAddressesByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirtyAddressesByFilter'
type MockAddressServiceServer_GetDirtyAddressesByFilter_Call struct {
	*mock.Call
}

// GetDirtyAddressesByFilter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.DirtyAddressFilter
func (_e *MockAddressServiceServer_Expecter) GetDirtyAddressesByFilter(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetDirtyAddressesByFilter_Call {
	return &MockAddressServiceServer_GetDirtyAddressesByFilter_Call{Call: _e.mock.On("GetDirtyAddressesByFilter", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetDirtyAddressesByFilter_Call) Run(run func(_a0 context.Context, _a1 *address.DirtyAddressFilter)) *MockAddressServiceServer_GetDirtyAddressesByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.DirtyAddressFilter))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetDirtyAddressesByFilter_Call) Return(_a0 *address.DirtyAddressMultiForm, _a1 error) *MockAddressServiceServer_GetDirtyAddressesByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetDirtyAddressesByFilter_Call) RunAndReturn(run func(context.Context, *address.DirtyAddressFilter) (*address.DirtyAddressMultiForm, error)) *MockAddressServiceServer_GetDirtyAddressesByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateAddress provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetOrCreateAddress(_a0 context.Context, _a1 *address.CreateAddressRequest) (*address.AddressResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateAddress")
	}

	var r0 *address.AddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.CreateAddressRequest) (*address.AddressResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.CreateAddressRequest) *address.AddressResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.AddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.CreateAddressRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetOrCreateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateAddress'
type MockAddressServiceServer_GetOrCreateAddress_Call struct {
	*mock.Call
}

// GetOrCreateAddress is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.CreateAddressRequest
func (_e *MockAddressServiceServer_Expecter) GetOrCreateAddress(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetOrCreateAddress_Call {
	return &MockAddressServiceServer_GetOrCreateAddress_Call{Call: _e.mock.On("GetOrCreateAddress", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetOrCreateAddress_Call) Run(run func(_a0 context.Context, _a1 *address.CreateAddressRequest)) *MockAddressServiceServer_GetOrCreateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.CreateAddressRequest))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetOrCreateAddress_Call) Return(_a0 *address.AddressResponse, _a1 error) *MockAddressServiceServer_GetOrCreateAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetOrCreateAddress_Call) RunAndReturn(run func(context.Context, *address.CreateAddressRequest) (*address.AddressResponse, error)) *MockAddressServiceServer_GetOrCreateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonalAddressesByFilter provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetPersonalAddressesByFilter(_a0 context.Context, _a1 *address.AddressPersonalFilter) (*address.PersonalAddressMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalAddressesByFilter")
	}

	var r0 *address.PersonalAddressMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressPersonalFilter) (*address.PersonalAddressMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.AddressPersonalFilter) *address.PersonalAddressMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.PersonalAddressMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.AddressPersonalFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetPersonalAddressesByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonalAddressesByFilter'
type MockAddressServiceServer_GetPersonalAddressesByFilter_Call struct {
	*mock.Call
}

// GetPersonalAddressesByFilter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.AddressPersonalFilter
func (_e *MockAddressServiceServer_Expecter) GetPersonalAddressesByFilter(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetPersonalAddressesByFilter_Call {
	return &MockAddressServiceServer_GetPersonalAddressesByFilter_Call{Call: _e.mock.On("GetPersonalAddressesByFilter", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetPersonalAddressesByFilter_Call) Run(run func(_a0 context.Context, _a1 *address.AddressPersonalFilter)) *MockAddressServiceServer_GetPersonalAddressesByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.AddressPersonalFilter))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetPersonalAddressesByFilter_Call) Return(_a0 *address.PersonalAddressMultiResponse, _a1 error) *MockAddressServiceServer_GetPersonalAddressesByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetPersonalAddressesByFilter_Call) RunAndReturn(run func(context.Context, *address.AddressPersonalFilter) (*address.PersonalAddressMultiResponse, error)) *MockAddressServiceServer_GetPersonalAddressesByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonalAddressesByUserUuid provides a mock function with given fields: _a0, _a1
func (_m *MockAddressServiceServer) GetPersonalAddressesByUserUuid(_a0 context.Context, _a1 *address.UserUuid) (*address.PersonalAddressMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalAddressesByUserUuid")
	}

	var r0 *address.PersonalAddressMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *address.UserUuid) (*address.PersonalAddressMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *address.UserUuid) *address.PersonalAddressMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*address.PersonalAddressMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *address.UserUuid) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonalAddressesByUserUuid'
type MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call struct {
	*mock.Call
}

// GetPersonalAddressesByUserUuid is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *address.UserUuid
func (_e *MockAddressServiceServer_Expecter) GetPersonalAddressesByUserUuid(_a0 interface{}, _a1 interface{}) *MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call {
	return &MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call{Call: _e.mock.On("GetPersonalAddressesByUserUuid", _a0, _a1)}
}

func (_c *MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call) Run(run func(_a0 context.Context, _a1 *address.UserUuid)) *MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*address.UserUuid))
	})
	return _c
}

func (_c *MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call) Return(_a0 *address.PersonalAddressMultiResponse, _a1 error) *MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call) RunAndReturn(run func(context.Context, *address.UserUuid) (*address.PersonalAddressMultiResponse, error)) *MockAddressServiceServer_GetPersonalAddressesByUserUuid_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAddressServiceServer provides a mock function with given fields:
func (_m *MockAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {
	_m.Called()
}

// MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAddressServiceServer'
type MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAddressServiceServer is a helper method to define mock.On call
func (_e *MockAddressServiceServer_Expecter) mustEmbedUnimplementedAddressServiceServer() *MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call {
	return &MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAddressServiceServer")}
}

func (_c *MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call) Run(run func()) *MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call) Return() *MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call) RunAndReturn(run func()) *MockAddressServiceServer_mustEmbedUnimplementedAddressServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAddressServiceServer creates a new instance of MockAddressServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddressServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddressServiceServer {
	mock := &MockAddressServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
