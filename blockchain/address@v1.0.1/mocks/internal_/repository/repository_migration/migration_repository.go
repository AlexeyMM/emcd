// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository_migration

import (
	context "context"

	model "code.emcdtech.com/emcd/blockchain/address/model"
	mock "github.com/stretchr/testify/mock"

	model_migration "code.emcdtech.com/emcd/blockchain/address/model/model_migration"

	time "time"
)

// MockMigrationRepository is an autogenerated mock type for the MigrationRepository type
type MockMigrationRepository struct {
	mock.Mock
}

type MockMigrationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMigrationRepository) EXPECT() *MockMigrationRepository_Expecter {
	return &MockMigrationRepository_Expecter{mock: &_m.Mock}
}

// AddNewAddressDirect provides a mock function with given fields: ctx, address
func (_m *MockMigrationRepository) AddNewAddressDirect(ctx context.Context, address *model.Address) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for AddNewAddressDirect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Address) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrationRepository_AddNewAddressDirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNewAddressDirect'
type MockMigrationRepository_AddNewAddressDirect_Call struct {
	*mock.Call
}

// AddNewAddressDirect is a helper method to define mock.On call
//   - ctx context.Context
//   - address *model.Address
func (_e *MockMigrationRepository_Expecter) AddNewAddressDirect(ctx interface{}, address interface{}) *MockMigrationRepository_AddNewAddressDirect_Call {
	return &MockMigrationRepository_AddNewAddressDirect_Call{Call: _e.mock.On("AddNewAddressDirect", ctx, address)}
}

func (_c *MockMigrationRepository_AddNewAddressDirect_Call) Run(run func(ctx context.Context, address *model.Address)) *MockMigrationRepository_AddNewAddressDirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Address))
	})
	return _c
}

func (_c *MockMigrationRepository_AddNewAddressDirect_Call) Return(_a0 error) *MockMigrationRepository_AddNewAddressDirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrationRepository_AddNewAddressDirect_Call) RunAndReturn(run func(context.Context, *model.Address) error) *MockMigrationRepository_AddNewAddressDirect_Call {
	_c.Call.Return(run)
	return _c
}

// AddNewDerivedAddressDirect provides a mock function with given fields: ctx, address
func (_m *MockMigrationRepository) AddNewDerivedAddressDirect(ctx context.Context, address *model.AddressDerived) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for AddNewDerivedAddressDirect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressDerived) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrationRepository_AddNewDerivedAddressDirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNewDerivedAddressDirect'
type MockMigrationRepository_AddNewDerivedAddressDirect_Call struct {
	*mock.Call
}

// AddNewDerivedAddressDirect is a helper method to define mock.On call
//   - ctx context.Context
//   - address *model.AddressDerived
func (_e *MockMigrationRepository_Expecter) AddNewDerivedAddressDirect(ctx interface{}, address interface{}) *MockMigrationRepository_AddNewDerivedAddressDirect_Call {
	return &MockMigrationRepository_AddNewDerivedAddressDirect_Call{Call: _e.mock.On("AddNewDerivedAddressDirect", ctx, address)}
}

func (_c *MockMigrationRepository_AddNewDerivedAddressDirect_Call) Run(run func(ctx context.Context, address *model.AddressDerived)) *MockMigrationRepository_AddNewDerivedAddressDirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressDerived))
	})
	return _c
}

func (_c *MockMigrationRepository_AddNewDerivedAddressDirect_Call) Return(_a0 error) *MockMigrationRepository_AddNewDerivedAddressDirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrationRepository_AddNewDerivedAddressDirect_Call) RunAndReturn(run func(context.Context, *model.AddressDerived) error) *MockMigrationRepository_AddNewDerivedAddressDirect_Call {
	_c.Call.Return(run)
	return _c
}

// AddOldAddressDirect provides a mock function with given fields: ctx, address
func (_m *MockMigrationRepository) AddOldAddressDirect(ctx context.Context, address *model.AddressOld) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for AddOldAddressDirect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressOld) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrationRepository_AddOldAddressDirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOldAddressDirect'
type MockMigrationRepository_AddOldAddressDirect_Call struct {
	*mock.Call
}

// AddOldAddressDirect is a helper method to define mock.On call
//   - ctx context.Context
//   - address *model.AddressOld
func (_e *MockMigrationRepository_Expecter) AddOldAddressDirect(ctx interface{}, address interface{}) *MockMigrationRepository_AddOldAddressDirect_Call {
	return &MockMigrationRepository_AddOldAddressDirect_Call{Call: _e.mock.On("AddOldAddressDirect", ctx, address)}
}

func (_c *MockMigrationRepository_AddOldAddressDirect_Call) Run(run func(ctx context.Context, address *model.AddressOld)) *MockMigrationRepository_AddOldAddressDirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressOld))
	})
	return _c
}

func (_c *MockMigrationRepository_AddOldAddressDirect_Call) Return(_a0 error) *MockMigrationRepository_AddOldAddressDirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrationRepository_AddOldAddressDirect_Call) RunAndReturn(run func(context.Context, *model.AddressOld) error) *MockMigrationRepository_AddOldAddressDirect_Call {
	_c.Call.Return(run)
	return _c
}

// AddPersonalAddressDirect provides a mock function with given fields: ctx, address
func (_m *MockMigrationRepository) AddPersonalAddressDirect(ctx context.Context, address *model.AddressPersonal) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for AddPersonalAddressDirect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressPersonal) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrationRepository_AddPersonalAddressDirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPersonalAddressDirect'
type MockMigrationRepository_AddPersonalAddressDirect_Call struct {
	*mock.Call
}

// AddPersonalAddressDirect is a helper method to define mock.On call
//   - ctx context.Context
//   - address *model.AddressPersonal
func (_e *MockMigrationRepository_Expecter) AddPersonalAddressDirect(ctx interface{}, address interface{}) *MockMigrationRepository_AddPersonalAddressDirect_Call {
	return &MockMigrationRepository_AddPersonalAddressDirect_Call{Call: _e.mock.On("AddPersonalAddressDirect", ctx, address)}
}

func (_c *MockMigrationRepository_AddPersonalAddressDirect_Call) Run(run func(ctx context.Context, address *model.AddressPersonal)) *MockMigrationRepository_AddPersonalAddressDirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressPersonal))
	})
	return _c
}

func (_c *MockMigrationRepository_AddPersonalAddressDirect_Call) Return(_a0 error) *MockMigrationRepository_AddPersonalAddressDirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrationRepository_AddPersonalAddressDirect_Call) RunAndReturn(run func(context.Context, *model.AddressPersonal) error) *MockMigrationRepository_AddPersonalAddressDirect_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressMigrations provides a mock function with given fields: ctx, lastAtGt, limit
func (_m *MockMigrationRepository) GetAddressMigrations(ctx context.Context, lastAtGt time.Time, limit uint64) (*uint64, model_migration.AddressMigrations, error) {
	ret := _m.Called(ctx, lastAtGt, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressMigrations")
	}

	var r0 *uint64
	var r1 model_migration.AddressMigrations
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint64) (*uint64, model_migration.AddressMigrations, error)); ok {
		return rf(ctx, lastAtGt, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint64) *uint64); ok {
		r0 = rf(ctx, lastAtGt, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, uint64) model_migration.AddressMigrations); ok {
		r1 = rf(ctx, lastAtGt, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model_migration.AddressMigrations)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, time.Time, uint64) error); ok {
		r2 = rf(ctx, lastAtGt, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMigrationRepository_GetAddressMigrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressMigrations'
type MockMigrationRepository_GetAddressMigrations_Call struct {
	*mock.Call
}

// GetAddressMigrations is a helper method to define mock.On call
//   - ctx context.Context
//   - lastAtGt time.Time
//   - limit uint64
func (_e *MockMigrationRepository_Expecter) GetAddressMigrations(ctx interface{}, lastAtGt interface{}, limit interface{}) *MockMigrationRepository_GetAddressMigrations_Call {
	return &MockMigrationRepository_GetAddressMigrations_Call{Call: _e.mock.On("GetAddressMigrations", ctx, lastAtGt, limit)}
}

func (_c *MockMigrationRepository_GetAddressMigrations_Call) Run(run func(ctx context.Context, lastAtGt time.Time, limit uint64)) *MockMigrationRepository_GetAddressMigrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(uint64))
	})
	return _c
}

func (_c *MockMigrationRepository_GetAddressMigrations_Call) Return(_a0 *uint64, _a1 model_migration.AddressMigrations, _a2 error) *MockMigrationRepository_GetAddressMigrations_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMigrationRepository_GetAddressMigrations_Call) RunAndReturn(run func(context.Context, time.Time, uint64) (*uint64, model_migration.AddressMigrations, error)) *MockMigrationRepository_GetAddressMigrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressPersonalMigrations provides a mock function with given fields: ctx, lastAtGt, limit
func (_m *MockMigrationRepository) GetAddressPersonalMigrations(ctx context.Context, lastAtGt time.Time, limit uint64) (*uint64, model_migration.AddressPersonalMigrations, error) {
	ret := _m.Called(ctx, lastAtGt, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressPersonalMigrations")
	}

	var r0 *uint64
	var r1 model_migration.AddressPersonalMigrations
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint64) (*uint64, model_migration.AddressPersonalMigrations, error)); ok {
		return rf(ctx, lastAtGt, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint64) *uint64); ok {
		r0 = rf(ctx, lastAtGt, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, uint64) model_migration.AddressPersonalMigrations); ok {
		r1 = rf(ctx, lastAtGt, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model_migration.AddressPersonalMigrations)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, time.Time, uint64) error); ok {
		r2 = rf(ctx, lastAtGt, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMigrationRepository_GetAddressPersonalMigrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressPersonalMigrations'
type MockMigrationRepository_GetAddressPersonalMigrations_Call struct {
	*mock.Call
}

// GetAddressPersonalMigrations is a helper method to define mock.On call
//   - ctx context.Context
//   - lastAtGt time.Time
//   - limit uint64
func (_e *MockMigrationRepository_Expecter) GetAddressPersonalMigrations(ctx interface{}, lastAtGt interface{}, limit interface{}) *MockMigrationRepository_GetAddressPersonalMigrations_Call {
	return &MockMigrationRepository_GetAddressPersonalMigrations_Call{Call: _e.mock.On("GetAddressPersonalMigrations", ctx, lastAtGt, limit)}
}

func (_c *MockMigrationRepository_GetAddressPersonalMigrations_Call) Run(run func(ctx context.Context, lastAtGt time.Time, limit uint64)) *MockMigrationRepository_GetAddressPersonalMigrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(uint64))
	})
	return _c
}

func (_c *MockMigrationRepository_GetAddressPersonalMigrations_Call) Return(_a0 *uint64, _a1 model_migration.AddressPersonalMigrations, _a2 error) *MockMigrationRepository_GetAddressPersonalMigrations_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMigrationRepository_GetAddressPersonalMigrations_Call) RunAndReturn(run func(context.Context, time.Time, uint64) (*uint64, model_migration.AddressPersonalMigrations, error)) *MockMigrationRepository_GetAddressPersonalMigrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetMigrationLastAt provides a mock function with given fields: ctx, tableName
func (_m *MockMigrationRepository) GetMigrationLastAt(ctx context.Context, tableName model_migration.MigrationTableName) (*time.Time, error) {
	ret := _m.Called(ctx, tableName)

	if len(ret) == 0 {
		panic("no return value specified for GetMigrationLastAt")
	}

	var r0 *time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model_migration.MigrationTableName) (*time.Time, error)); ok {
		return rf(ctx, tableName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model_migration.MigrationTableName) *time.Time); ok {
		r0 = rf(ctx, tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model_migration.MigrationTableName) error); ok {
		r1 = rf(ctx, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMigrationRepository_GetMigrationLastAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMigrationLastAt'
type MockMigrationRepository_GetMigrationLastAt_Call struct {
	*mock.Call
}

// GetMigrationLastAt is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName model_migration.MigrationTableName
func (_e *MockMigrationRepository_Expecter) GetMigrationLastAt(ctx interface{}, tableName interface{}) *MockMigrationRepository_GetMigrationLastAt_Call {
	return &MockMigrationRepository_GetMigrationLastAt_Call{Call: _e.mock.On("GetMigrationLastAt", ctx, tableName)}
}

func (_c *MockMigrationRepository_GetMigrationLastAt_Call) Run(run func(ctx context.Context, tableName model_migration.MigrationTableName)) *MockMigrationRepository_GetMigrationLastAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model_migration.MigrationTableName))
	})
	return _c
}

func (_c *MockMigrationRepository_GetMigrationLastAt_Call) Return(_a0 *time.Time, _a1 error) *MockMigrationRepository_GetMigrationLastAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMigrationRepository_GetMigrationLastAt_Call) RunAndReturn(run func(context.Context, model_migration.MigrationTableName) (*time.Time, error)) *MockMigrationRepository_GetMigrationLastAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountMigrations provides a mock function with given fields: ctx, lastAtGt, limit
func (_m *MockMigrationRepository) GetUserAccountMigrations(ctx context.Context, lastAtGt time.Time, limit uint64) (*uint64, model_migration.UserAccountMigrations, error) {
	ret := _m.Called(ctx, lastAtGt, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountMigrations")
	}

	var r0 *uint64
	var r1 model_migration.UserAccountMigrations
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint64) (*uint64, model_migration.UserAccountMigrations, error)); ok {
		return rf(ctx, lastAtGt, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, uint64) *uint64); ok {
		r0 = rf(ctx, lastAtGt, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, uint64) model_migration.UserAccountMigrations); ok {
		r1 = rf(ctx, lastAtGt, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model_migration.UserAccountMigrations)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, time.Time, uint64) error); ok {
		r2 = rf(ctx, lastAtGt, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMigrationRepository_GetUserAccountMigrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountMigrations'
type MockMigrationRepository_GetUserAccountMigrations_Call struct {
	*mock.Call
}

// GetUserAccountMigrations is a helper method to define mock.On call
//   - ctx context.Context
//   - lastAtGt time.Time
//   - limit uint64
func (_e *MockMigrationRepository_Expecter) GetUserAccountMigrations(ctx interface{}, lastAtGt interface{}, limit interface{}) *MockMigrationRepository_GetUserAccountMigrations_Call {
	return &MockMigrationRepository_GetUserAccountMigrations_Call{Call: _e.mock.On("GetUserAccountMigrations", ctx, lastAtGt, limit)}
}

func (_c *MockMigrationRepository_GetUserAccountMigrations_Call) Run(run func(ctx context.Context, lastAtGt time.Time, limit uint64)) *MockMigrationRepository_GetUserAccountMigrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(uint64))
	})
	return _c
}

func (_c *MockMigrationRepository_GetUserAccountMigrations_Call) Return(_a0 *uint64, _a1 model_migration.UserAccountMigrations, _a2 error) *MockMigrationRepository_GetUserAccountMigrations_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMigrationRepository_GetUserAccountMigrations_Call) RunAndReturn(run func(context.Context, time.Time, uint64) (*uint64, model_migration.UserAccountMigrations, error)) *MockMigrationRepository_GetUserAccountMigrations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMigrationLastAt provides a mock function with given fields: ctx, tableName, lastAt
func (_m *MockMigrationRepository) UpdateMigrationLastAt(ctx context.Context, tableName model_migration.MigrationTableName, lastAt time.Time) error {
	ret := _m.Called(ctx, tableName, lastAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMigrationLastAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model_migration.MigrationTableName, time.Time) error); ok {
		r0 = rf(ctx, tableName, lastAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrationRepository_UpdateMigrationLastAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMigrationLastAt'
type MockMigrationRepository_UpdateMigrationLastAt_Call struct {
	*mock.Call
}

// UpdateMigrationLastAt is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName model_migration.MigrationTableName
//   - lastAt time.Time
func (_e *MockMigrationRepository_Expecter) UpdateMigrationLastAt(ctx interface{}, tableName interface{}, lastAt interface{}) *MockMigrationRepository_UpdateMigrationLastAt_Call {
	return &MockMigrationRepository_UpdateMigrationLastAt_Call{Call: _e.mock.On("UpdateMigrationLastAt", ctx, tableName, lastAt)}
}

func (_c *MockMigrationRepository_UpdateMigrationLastAt_Call) Run(run func(ctx context.Context, tableName model_migration.MigrationTableName, lastAt time.Time)) *MockMigrationRepository_UpdateMigrationLastAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model_migration.MigrationTableName), args[2].(time.Time))
	})
	return _c
}

func (_c *MockMigrationRepository_UpdateMigrationLastAt_Call) Return(_a0 error) *MockMigrationRepository_UpdateMigrationLastAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrationRepository_UpdateMigrationLastAt_Call) RunAndReturn(run func(context.Context, model_migration.MigrationTableName, time.Time) error) *MockMigrationRepository_UpdateMigrationLastAt_Call {
	_c.Call.Return(run)
	return _c
}

// WithinTransaction provides a mock function with given fields: ctx, txFn
func (_m *MockMigrationRepository) WithinTransaction(ctx context.Context, txFn func(context.Context) error) error {
	ret := _m.Called(ctx, txFn)

	if len(ret) == 0 {
		panic("no return value specified for WithinTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, txFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrationRepository_WithinTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransaction'
type MockMigrationRepository_WithinTransaction_Call struct {
	*mock.Call
}

// WithinTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txFn func(context.Context) error
func (_e *MockMigrationRepository_Expecter) WithinTransaction(ctx interface{}, txFn interface{}) *MockMigrationRepository_WithinTransaction_Call {
	return &MockMigrationRepository_WithinTransaction_Call{Call: _e.mock.On("WithinTransaction", ctx, txFn)}
}

func (_c *MockMigrationRepository_WithinTransaction_Call) Run(run func(ctx context.Context, txFn func(context.Context) error)) *MockMigrationRepository_WithinTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *MockMigrationRepository_WithinTransaction_Call) Return(_a0 error) *MockMigrationRepository_WithinTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrationRepository_WithinTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *MockMigrationRepository_WithinTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMigrationRepository creates a new instance of MockMigrationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMigrationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMigrationRepository {
	mock := &MockMigrationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
