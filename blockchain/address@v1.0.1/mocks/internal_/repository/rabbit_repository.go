// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	amqp091 "github.com/rabbitmq/amqp091-go"
	mock "github.com/stretchr/testify/mock"
)

// MockRabbitRepository is an autogenerated mock type for the RabbitRepository type
type MockRabbitRepository struct {
	mock.Mock
}

type MockRabbitRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRabbitRepository) EXPECT() *MockRabbitRepository_Expecter {
	return &MockRabbitRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockRabbitRepository) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRabbitRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRabbitRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRabbitRepository_Expecter) Close() *MockRabbitRepository_Close_Call {
	return &MockRabbitRepository_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRabbitRepository_Close_Call) Run(run func()) *MockRabbitRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRabbitRepository_Close_Call) Return(_a0 error) *MockRabbitRepository_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRabbitRepository_Close_Call) RunAndReturn(run func() error) *MockRabbitRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields:
func (_m *MockRabbitRepository) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRabbitRepository_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockRabbitRepository_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockRabbitRepository_Expecter) Connect() *MockRabbitRepository_Connect_Call {
	return &MockRabbitRepository_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockRabbitRepository_Connect_Call) Run(run func()) *MockRabbitRepository_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRabbitRepository_Connect_Call) Return(_a0 error) *MockRabbitRepository_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRabbitRepository_Connect_Call) RunAndReturn(run func() error) *MockRabbitRepository_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannel provides a mock function with given fields:
func (_m *MockRabbitRepository) GetChannel() *amqp091.Channel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChannel")
	}

	var r0 *amqp091.Channel
	if rf, ok := ret.Get(0).(func() *amqp091.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp091.Channel)
		}
	}

	return r0
}

// MockRabbitRepository_GetChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannel'
type MockRabbitRepository_GetChannel_Call struct {
	*mock.Call
}

// GetChannel is a helper method to define mock.On call
func (_e *MockRabbitRepository_Expecter) GetChannel() *MockRabbitRepository_GetChannel_Call {
	return &MockRabbitRepository_GetChannel_Call{Call: _e.mock.On("GetChannel")}
}

func (_c *MockRabbitRepository_GetChannel_Call) Run(run func()) *MockRabbitRepository_GetChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRabbitRepository_GetChannel_Call) Return(_a0 *amqp091.Channel) *MockRabbitRepository_GetChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRabbitRepository_GetChannel_Call) RunAndReturn(run func() *amqp091.Channel) *MockRabbitRepository_GetChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnection provides a mock function with given fields:
func (_m *MockRabbitRepository) GetConnection() *amqp091.Connection {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 *amqp091.Connection
	if rf, ok := ret.Get(0).(func() *amqp091.Connection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp091.Connection)
		}
	}

	return r0
}

// MockRabbitRepository_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type MockRabbitRepository_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
func (_e *MockRabbitRepository_Expecter) GetConnection() *MockRabbitRepository_GetConnection_Call {
	return &MockRabbitRepository_GetConnection_Call{Call: _e.mock.On("GetConnection")}
}

func (_c *MockRabbitRepository_GetConnection_Call) Run(run func()) *MockRabbitRepository_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRabbitRepository_GetConnection_Call) Return(_a0 *amqp091.Connection) *MockRabbitRepository_GetConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRabbitRepository_GetConnection_Call) RunAndReturn(run func() *amqp091.Connection) *MockRabbitRepository_GetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// Reconnect provides a mock function with given fields:
func (_m *MockRabbitRepository) Reconnect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRabbitRepository_Reconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconnect'
type MockRabbitRepository_Reconnect_Call struct {
	*mock.Call
}

// Reconnect is a helper method to define mock.On call
func (_e *MockRabbitRepository_Expecter) Reconnect() *MockRabbitRepository_Reconnect_Call {
	return &MockRabbitRepository_Reconnect_Call{Call: _e.mock.On("Reconnect")}
}

func (_c *MockRabbitRepository_Reconnect_Call) Run(run func()) *MockRabbitRepository_Reconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRabbitRepository_Reconnect_Call) Return(_a0 error) *MockRabbitRepository_Reconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRabbitRepository_Reconnect_Call) RunAndReturn(run func() error) *MockRabbitRepository_Reconnect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRabbitRepository creates a new instance of MockRabbitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRabbitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRabbitRepository {
	mock := &MockRabbitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
