// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import mock "github.com/stretchr/testify/mock"

// MockDerivedFunc is an autogenerated mock type for the DerivedFunc type
type MockDerivedFunc struct {
	mock.Mock
}

type MockDerivedFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDerivedFunc) EXPECT() *MockDerivedFunc_Expecter {
	return &MockDerivedFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockDerivedFunc) Execute(_a0 uint32) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint32) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDerivedFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDerivedFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 uint32
func (_e *MockDerivedFunc_Expecter) Execute(_a0 interface{}) *MockDerivedFunc_Execute_Call {
	return &MockDerivedFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockDerivedFunc_Execute_Call) Run(run func(_a0 uint32)) *MockDerivedFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *MockDerivedFunc_Execute_Call) Return(_a0 string, _a1 error) *MockDerivedFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDerivedFunc_Execute_Call) RunAndReturn(run func(uint32) (string, error)) *MockDerivedFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDerivedFunc creates a new instance of MockDerivedFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDerivedFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDerivedFunc {
	mock := &MockDerivedFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
