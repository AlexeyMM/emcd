// Code generated by mockery v2.43.2. DO NOT EDIT.

package service

import (
	address "code.emcdtech.com/emcd/blockchain/address/protocol/address"
	common "code.emcdtech.com/emcd/blockchain/node/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	model "code.emcdtech.com/emcd/blockchain/address/model"

	repository "code.emcdtech.com/emcd/blockchain/address/internal/repository"

	uuid "github.com/google/uuid"
)

// MockAddressService is an autogenerated mock type for the AddressService type
type MockAddressService struct {
	mock.Mock
}

type MockAddressService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressService) EXPECT() *MockAddressService_Expecter {
	return &MockAddressService_Expecter{mock: &_m.Mock}
}

// CreateNewAddress provides a mock function with given fields: ctx, addressUuid, userUuid, addressType, networkGroup
func (_m *MockAddressService) CreateNewAddress(ctx context.Context, addressUuid uuid.UUID, userUuid uuid.UUID, addressType address.AddressType, networkGroup common.NetworkGroupEnum) (*model.Address, error) {
	ret := _m.Called(ctx, addressUuid, userUuid, addressType, networkGroup)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewAddress")
	}

	var r0 *model.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkGroupEnum) (*model.Address, error)); ok {
		return rf(ctx, addressUuid, userUuid, addressType, networkGroup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkGroupEnum) *model.Address); ok {
		r0 = rf(ctx, addressUuid, userUuid, addressType, networkGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkGroupEnum) error); ok {
		r1 = rf(ctx, addressUuid, userUuid, addressType, networkGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_CreateNewAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewAddress'
type MockAddressService_CreateNewAddress_Call struct {
	*mock.Call
}

// CreateNewAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - addressUuid uuid.UUID
//   - userUuid uuid.UUID
//   - addressType address.AddressType
//   - networkGroup common.NetworkGroupEnum
func (_e *MockAddressService_Expecter) CreateNewAddress(ctx interface{}, addressUuid interface{}, userUuid interface{}, addressType interface{}, networkGroup interface{}) *MockAddressService_CreateNewAddress_Call {
	return &MockAddressService_CreateNewAddress_Call{Call: _e.mock.On("CreateNewAddress", ctx, addressUuid, userUuid, addressType, networkGroup)}
}

func (_c *MockAddressService_CreateNewAddress_Call) Run(run func(ctx context.Context, addressUuid uuid.UUID, userUuid uuid.UUID, addressType address.AddressType, networkGroup common.NetworkGroupEnum)) *MockAddressService_CreateNewAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(address.AddressType), args[4].(common.NetworkGroupEnum))
	})
	return _c
}

func (_c *MockAddressService_CreateNewAddress_Call) Return(_a0 *model.Address, _a1 error) *MockAddressService_CreateNewAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_CreateNewAddress_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkGroupEnum) (*model.Address, error)) *MockAddressService_CreateNewAddress_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOldAddress provides a mock function with given fields: ctx, addressUuid, userUuid, addressType, network, coin
func (_m *MockAddressService) CreateOldAddress(ctx context.Context, addressUuid uuid.UUID, userUuid uuid.UUID, addressType address.AddressType, network common.NetworkEnum, coin string) (*model.AddressOld, error) {
	ret := _m.Called(ctx, addressUuid, userUuid, addressType, network, coin)

	if len(ret) == 0 {
		panic("no return value specified for CreateOldAddress")
	}

	var r0 *model.AddressOld
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkEnum, string) (*model.AddressOld, error)); ok {
		return rf(ctx, addressUuid, userUuid, addressType, network, coin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkEnum, string) *model.AddressOld); ok {
		r0 = rf(ctx, addressUuid, userUuid, addressType, network, coin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddressOld)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkEnum, string) error); ok {
		r1 = rf(ctx, addressUuid, userUuid, addressType, network, coin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_CreateOldAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOldAddress'
type MockAddressService_CreateOldAddress_Call struct {
	*mock.Call
}

// CreateOldAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - addressUuid uuid.UUID
//   - userUuid uuid.UUID
//   - addressType address.AddressType
//   - network common.NetworkEnum
//   - coin string
func (_e *MockAddressService_Expecter) CreateOldAddress(ctx interface{}, addressUuid interface{}, userUuid interface{}, addressType interface{}, network interface{}, coin interface{}) *MockAddressService_CreateOldAddress_Call {
	return &MockAddressService_CreateOldAddress_Call{Call: _e.mock.On("CreateOldAddress", ctx, addressUuid, userUuid, addressType, network, coin)}
}

func (_c *MockAddressService_CreateOldAddress_Call) Run(run func(ctx context.Context, addressUuid uuid.UUID, userUuid uuid.UUID, addressType address.AddressType, network common.NetworkEnum, coin string)) *MockAddressService_CreateOldAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(address.AddressType), args[4].(common.NetworkEnum), args[5].(string))
	})
	return _c
}

func (_c *MockAddressService_CreateOldAddress_Call) Return(_a0 *model.AddressOld, _a1 error) *MockAddressService_CreateOldAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_CreateOldAddress_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkEnum, string) (*model.AddressOld, error)) *MockAddressService_CreateOldAddress_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateDirtyAddress provides a mock function with given fields: ctx, _a1
func (_m *MockAddressService) CreateOrUpdateDirtyAddress(ctx context.Context, _a1 *model.AddressDirty) (*model.AddressDirty, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateDirtyAddress")
	}

	var r0 *model.AddressDirty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressDirty) (*model.AddressDirty, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressDirty) *model.AddressDirty); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddressDirty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.AddressDirty) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_CreateOrUpdateDirtyAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateDirtyAddress'
type MockAddressService_CreateOrUpdateDirtyAddress_Call struct {
	*mock.Call
}

// CreateOrUpdateDirtyAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *model.AddressDirty
func (_e *MockAddressService_Expecter) CreateOrUpdateDirtyAddress(ctx interface{}, _a1 interface{}) *MockAddressService_CreateOrUpdateDirtyAddress_Call {
	return &MockAddressService_CreateOrUpdateDirtyAddress_Call{Call: _e.mock.On("CreateOrUpdateDirtyAddress", ctx, _a1)}
}

func (_c *MockAddressService_CreateOrUpdateDirtyAddress_Call) Run(run func(ctx context.Context, _a1 *model.AddressDirty)) *MockAddressService_CreateOrUpdateDirtyAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressDirty))
	})
	return _c
}

func (_c *MockAddressService_CreateOrUpdateDirtyAddress_Call) Return(_a0 *model.AddressDirty, _a1 error) *MockAddressService_CreateOrUpdateDirtyAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_CreateOrUpdateDirtyAddress_Call) RunAndReturn(run func(context.Context, *model.AddressDirty) (*model.AddressDirty, error)) *MockAddressService_CreateOrUpdateDirtyAddress_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePersonalAddress provides a mock function with given fields: ctx, addressStr, userUuid, network, minPayout
func (_m *MockAddressService) CreatePersonalAddress(ctx context.Context, addressStr string, userUuid uuid.UUID, network common.NetworkEnum, minPayout float64) (*model.AddressPersonal, error) {
	ret := _m.Called(ctx, addressStr, userUuid, network, minPayout)

	if len(ret) == 0 {
		panic("no return value specified for CreatePersonalAddress")
	}

	var r0 *model.AddressPersonal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, common.NetworkEnum, float64) (*model.AddressPersonal, error)); ok {
		return rf(ctx, addressStr, userUuid, network, minPayout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, common.NetworkEnum, float64) *model.AddressPersonal); ok {
		r0 = rf(ctx, addressStr, userUuid, network, minPayout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddressPersonal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, common.NetworkEnum, float64) error); ok {
		r1 = rf(ctx, addressStr, userUuid, network, minPayout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_CreatePersonalAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePersonalAddress'
type MockAddressService_CreatePersonalAddress_Call struct {
	*mock.Call
}

// CreatePersonalAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - addressStr string
//   - userUuid uuid.UUID
//   - network common.NetworkEnum
//   - minPayout float64
func (_e *MockAddressService_Expecter) CreatePersonalAddress(ctx interface{}, addressStr interface{}, userUuid interface{}, network interface{}, minPayout interface{}) *MockAddressService_CreatePersonalAddress_Call {
	return &MockAddressService_CreatePersonalAddress_Call{Call: _e.mock.On("CreatePersonalAddress", ctx, addressStr, userUuid, network, minPayout)}
}

func (_c *MockAddressService_CreatePersonalAddress_Call) Run(run func(ctx context.Context, addressStr string, userUuid uuid.UUID, network common.NetworkEnum, minPayout float64)) *MockAddressService_CreatePersonalAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID), args[3].(common.NetworkEnum), args[4].(float64))
	})
	return _c
}

func (_c *MockAddressService_CreatePersonalAddress_Call) Return(_a0 *model.AddressPersonal, _a1 error) *MockAddressService_CreatePersonalAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_CreatePersonalAddress_Call) RunAndReturn(run func(context.Context, string, uuid.UUID, common.NetworkEnum, float64) (*model.AddressPersonal, error)) *MockAddressService_CreatePersonalAddress_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProcessingAddress provides a mock function with given fields: ctx, addressUuid, userUuid, processingUuid, addressType, networkGroup
func (_m *MockAddressService) CreateProcessingAddress(ctx context.Context, addressUuid uuid.UUID, userUuid uuid.UUID, processingUuid uuid.UUID, addressType address.AddressType, networkGroup common.NetworkGroupEnum) (*model.Address, error) {
	ret := _m.Called(ctx, addressUuid, userUuid, processingUuid, addressType, networkGroup)

	if len(ret) == 0 {
		panic("no return value specified for CreateProcessingAddress")
	}

	var r0 *model.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkGroupEnum) (*model.Address, error)); ok {
		return rf(ctx, addressUuid, userUuid, processingUuid, addressType, networkGroup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkGroupEnum) *model.Address); ok {
		r0 = rf(ctx, addressUuid, userUuid, processingUuid, addressType, networkGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkGroupEnum) error); ok {
		r1 = rf(ctx, addressUuid, userUuid, processingUuid, addressType, networkGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_CreateProcessingAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProcessingAddress'
type MockAddressService_CreateProcessingAddress_Call struct {
	*mock.Call
}

// CreateProcessingAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - addressUuid uuid.UUID
//   - userUuid uuid.UUID
//   - processingUuid uuid.UUID
//   - addressType address.AddressType
//   - networkGroup common.NetworkGroupEnum
func (_e *MockAddressService_Expecter) CreateProcessingAddress(ctx interface{}, addressUuid interface{}, userUuid interface{}, processingUuid interface{}, addressType interface{}, networkGroup interface{}) *MockAddressService_CreateProcessingAddress_Call {
	return &MockAddressService_CreateProcessingAddress_Call{Call: _e.mock.On("CreateProcessingAddress", ctx, addressUuid, userUuid, processingUuid, addressType, networkGroup)}
}

func (_c *MockAddressService_CreateProcessingAddress_Call) Run(run func(ctx context.Context, addressUuid uuid.UUID, userUuid uuid.UUID, processingUuid uuid.UUID, addressType address.AddressType, networkGroup common.NetworkGroupEnum)) *MockAddressService_CreateProcessingAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(address.AddressType), args[5].(common.NetworkGroupEnum))
	})
	return _c
}

func (_c *MockAddressService_CreateProcessingAddress_Call) Return(_a0 *model.Address, _a1 error) *MockAddressService_CreateProcessingAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_CreateProcessingAddress_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, address.AddressType, common.NetworkGroupEnum) (*model.Address, error)) *MockAddressService_CreateProcessingAddress_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePersonalAddress provides a mock function with given fields: ctx, userUuid, network
func (_m *MockAddressService) DeletePersonalAddress(ctx context.Context, userUuid uuid.UUID, network common.NetworkEnum) error {
	ret := _m.Called(ctx, userUuid, network)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonalAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, common.NetworkEnum) error); ok {
		r0 = rf(ctx, userUuid, network)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddressService_DeletePersonalAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonalAddress'
type MockAddressService_DeletePersonalAddress_Call struct {
	*mock.Call
}

// DeletePersonalAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - userUuid uuid.UUID
//   - network common.NetworkEnum
func (_e *MockAddressService_Expecter) DeletePersonalAddress(ctx interface{}, userUuid interface{}, network interface{}) *MockAddressService_DeletePersonalAddress_Call {
	return &MockAddressService_DeletePersonalAddress_Call{Call: _e.mock.On("DeletePersonalAddress", ctx, userUuid, network)}
}

func (_c *MockAddressService_DeletePersonalAddress_Call) Run(run func(ctx context.Context, userUuid uuid.UUID, network common.NetworkEnum)) *MockAddressService_DeletePersonalAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(common.NetworkEnum))
	})
	return _c
}

func (_c *MockAddressService_DeletePersonalAddress_Call) Return(_a0 error) *MockAddressService_DeletePersonalAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressService_DeletePersonalAddress_Call) RunAndReturn(run func(context.Context, uuid.UUID, common.NetworkEnum) error) *MockAddressService_DeletePersonalAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetDerivedFunc provides a mock function with given fields: networkGroup
func (_m *MockAddressService) GetDerivedFunc(networkGroup common.NetworkGroupEnum) (repository.DerivedFunc, *uint32, error) {
	ret := _m.Called(networkGroup)

	if len(ret) == 0 {
		panic("no return value specified for GetDerivedFunc")
	}

	var r0 repository.DerivedFunc
	var r1 *uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(common.NetworkGroupEnum) (repository.DerivedFunc, *uint32, error)); ok {
		return rf(networkGroup)
	}
	if rf, ok := ret.Get(0).(func(common.NetworkGroupEnum) repository.DerivedFunc); ok {
		r0 = rf(networkGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.DerivedFunc)
		}
	}

	if rf, ok := ret.Get(1).(func(common.NetworkGroupEnum) *uint32); ok {
		r1 = rf(networkGroup)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uint32)
		}
	}

	if rf, ok := ret.Get(2).(func(common.NetworkGroupEnum) error); ok {
		r2 = rf(networkGroup)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAddressService_GetDerivedFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDerivedFunc'
type MockAddressService_GetDerivedFunc_Call struct {
	*mock.Call
}

// GetDerivedFunc is a helper method to define mock.On call
//   - networkGroup common.NetworkGroupEnum
func (_e *MockAddressService_Expecter) GetDerivedFunc(networkGroup interface{}) *MockAddressService_GetDerivedFunc_Call {
	return &MockAddressService_GetDerivedFunc_Call{Call: _e.mock.On("GetDerivedFunc", networkGroup)}
}

func (_c *MockAddressService_GetDerivedFunc_Call) Run(run func(networkGroup common.NetworkGroupEnum)) *MockAddressService_GetDerivedFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.NetworkGroupEnum))
	})
	return _c
}

func (_c *MockAddressService_GetDerivedFunc_Call) Return(_a0 repository.DerivedFunc, _a1 *uint32, _a2 error) *MockAddressService_GetDerivedFunc_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAddressService_GetDerivedFunc_Call) RunAndReturn(run func(common.NetworkGroupEnum) (repository.DerivedFunc, *uint32, error)) *MockAddressService_GetDerivedFunc_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirtyAddressesByFilter provides a mock function with given fields: ctx, filter
func (_m *MockAddressService) GetDirtyAddressesByFilter(ctx context.Context, filter *model.AddressDirtyFilter) (model.AddressesDirty, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetDirtyAddressesByFilter")
	}

	var r0 model.AddressesDirty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressDirtyFilter) (model.AddressesDirty, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressDirtyFilter) model.AddressesDirty); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AddressesDirty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.AddressDirtyFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetDirtyAddressesByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirtyAddressesByFilter'
type MockAddressService_GetDirtyAddressesByFilter_Call struct {
	*mock.Call
}

// GetDirtyAddressesByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.AddressDirtyFilter
func (_e *MockAddressService_Expecter) GetDirtyAddressesByFilter(ctx interface{}, filter interface{}) *MockAddressService_GetDirtyAddressesByFilter_Call {
	return &MockAddressService_GetDirtyAddressesByFilter_Call{Call: _e.mock.On("GetDirtyAddressesByFilter", ctx, filter)}
}

func (_c *MockAddressService_GetDirtyAddressesByFilter_Call) Run(run func(ctx context.Context, filter *model.AddressDirtyFilter)) *MockAddressService_GetDirtyAddressesByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressDirtyFilter))
	})
	return _c
}

func (_c *MockAddressService_GetDirtyAddressesByFilter_Call) Return(_a0 model.AddressesDirty, _a1 error) *MockAddressService_GetDirtyAddressesByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetDirtyAddressesByFilter_Call) RunAndReturn(run func(context.Context, *model.AddressDirtyFilter) (model.AddressesDirty, error)) *MockAddressService_GetDirtyAddressesByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewAddressByConstraint provides a mock function with given fields: ctx, userUuid, addressType, networkGroup
func (_m *MockAddressService) GetNewAddressByConstraint(ctx context.Context, userUuid uuid.UUID, addressType address.AddressType, networkGroup common.NetworkGroupEnum) (model.Addresses, error) {
	ret := _m.Called(ctx, userUuid, addressType, networkGroup)

	if len(ret) == 0 {
		panic("no return value specified for GetNewAddressByConstraint")
	}

	var r0 model.Addresses
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, address.AddressType, common.NetworkGroupEnum) (model.Addresses, error)); ok {
		return rf(ctx, userUuid, addressType, networkGroup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, address.AddressType, common.NetworkGroupEnum) model.Addresses); ok {
		r0 = rf(ctx, userUuid, addressType, networkGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Addresses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, address.AddressType, common.NetworkGroupEnum) error); ok {
		r1 = rf(ctx, userUuid, addressType, networkGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetNewAddressByConstraint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewAddressByConstraint'
type MockAddressService_GetNewAddressByConstraint_Call struct {
	*mock.Call
}

// GetNewAddressByConstraint is a helper method to define mock.On call
//   - ctx context.Context
//   - userUuid uuid.UUID
//   - addressType address.AddressType
//   - networkGroup common.NetworkGroupEnum
func (_e *MockAddressService_Expecter) GetNewAddressByConstraint(ctx interface{}, userUuid interface{}, addressType interface{}, networkGroup interface{}) *MockAddressService_GetNewAddressByConstraint_Call {
	return &MockAddressService_GetNewAddressByConstraint_Call{Call: _e.mock.On("GetNewAddressByConstraint", ctx, userUuid, addressType, networkGroup)}
}

func (_c *MockAddressService_GetNewAddressByConstraint_Call) Run(run func(ctx context.Context, userUuid uuid.UUID, addressType address.AddressType, networkGroup common.NetworkGroupEnum)) *MockAddressService_GetNewAddressByConstraint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(address.AddressType), args[3].(common.NetworkGroupEnum))
	})
	return _c
}

func (_c *MockAddressService_GetNewAddressByConstraint_Call) Return(_a0 model.Addresses, _a1 error) *MockAddressService_GetNewAddressByConstraint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetNewAddressByConstraint_Call) RunAndReturn(run func(context.Context, uuid.UUID, address.AddressType, common.NetworkGroupEnum) (model.Addresses, error)) *MockAddressService_GetNewAddressByConstraint_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewAddressByStr provides a mock function with given fields: ctx, addressStr
func (_m *MockAddressService) GetNewAddressByStr(ctx context.Context, addressStr string) (model.Addresses, error) {
	ret := _m.Called(ctx, addressStr)

	if len(ret) == 0 {
		panic("no return value specified for GetNewAddressByStr")
	}

	var r0 model.Addresses
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Addresses, error)); ok {
		return rf(ctx, addressStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Addresses); ok {
		r0 = rf(ctx, addressStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Addresses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, addressStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetNewAddressByStr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewAddressByStr'
type MockAddressService_GetNewAddressByStr_Call struct {
	*mock.Call
}

// GetNewAddressByStr is a helper method to define mock.On call
//   - ctx context.Context
//   - addressStr string
func (_e *MockAddressService_Expecter) GetNewAddressByStr(ctx interface{}, addressStr interface{}) *MockAddressService_GetNewAddressByStr_Call {
	return &MockAddressService_GetNewAddressByStr_Call{Call: _e.mock.On("GetNewAddressByStr", ctx, addressStr)}
}

func (_c *MockAddressService_GetNewAddressByStr_Call) Run(run func(ctx context.Context, addressStr string)) *MockAddressService_GetNewAddressByStr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAddressService_GetNewAddressByStr_Call) Return(_a0 model.Addresses, _a1 error) *MockAddressService_GetNewAddressByStr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetNewAddressByStr_Call) RunAndReturn(run func(context.Context, string) (model.Addresses, error)) *MockAddressService_GetNewAddressByStr_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewAddressByUuid provides a mock function with given fields: ctx, addressUuid
func (_m *MockAddressService) GetNewAddressByUuid(ctx context.Context, addressUuid uuid.UUID) (model.Addresses, error) {
	ret := _m.Called(ctx, addressUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetNewAddressByUuid")
	}

	var r0 model.Addresses
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Addresses, error)); ok {
		return rf(ctx, addressUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Addresses); ok {
		r0 = rf(ctx, addressUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Addresses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, addressUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetNewAddressByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewAddressByUuid'
type MockAddressService_GetNewAddressByUuid_Call struct {
	*mock.Call
}

// GetNewAddressByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - addressUuid uuid.UUID
func (_e *MockAddressService_Expecter) GetNewAddressByUuid(ctx interface{}, addressUuid interface{}) *MockAddressService_GetNewAddressByUuid_Call {
	return &MockAddressService_GetNewAddressByUuid_Call{Call: _e.mock.On("GetNewAddressByUuid", ctx, addressUuid)}
}

func (_c *MockAddressService_GetNewAddressByUuid_Call) Run(run func(ctx context.Context, addressUuid uuid.UUID)) *MockAddressService_GetNewAddressByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAddressService_GetNewAddressByUuid_Call) Return(_a0 model.Addresses, _a1 error) *MockAddressService_GetNewAddressByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetNewAddressByUuid_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Addresses, error)) *MockAddressService_GetNewAddressByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewAddressesByFilter provides a mock function with given fields: ctx, filter
func (_m *MockAddressService) GetNewAddressesByFilter(ctx context.Context, filter *model.AddressFilter) (*uint64, model.Addresses, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetNewAddressesByFilter")
	}

	var r0 *uint64
	var r1 model.Addresses
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressFilter) (*uint64, model.Addresses, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressFilter) *uint64); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.AddressFilter) model.Addresses); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.Addresses)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.AddressFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAddressService_GetNewAddressesByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewAddressesByFilter'
type MockAddressService_GetNewAddressesByFilter_Call struct {
	*mock.Call
}

// GetNewAddressesByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.AddressFilter
func (_e *MockAddressService_Expecter) GetNewAddressesByFilter(ctx interface{}, filter interface{}) *MockAddressService_GetNewAddressesByFilter_Call {
	return &MockAddressService_GetNewAddressesByFilter_Call{Call: _e.mock.On("GetNewAddressesByFilter", ctx, filter)}
}

func (_c *MockAddressService_GetNewAddressesByFilter_Call) Run(run func(ctx context.Context, filter *model.AddressFilter)) *MockAddressService_GetNewAddressesByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressFilter))
	})
	return _c
}

func (_c *MockAddressService_GetNewAddressesByFilter_Call) Return(_a0 *uint64, _a1 model.Addresses, _a2 error) *MockAddressService_GetNewAddressesByFilter_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAddressService_GetNewAddressesByFilter_Call) RunAndReturn(run func(context.Context, *model.AddressFilter) (*uint64, model.Addresses, error)) *MockAddressService_GetNewAddressesByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewAddressesByUserUuid provides a mock function with given fields: ctx, userUuid
func (_m *MockAddressService) GetNewAddressesByUserUuid(ctx context.Context, userUuid uuid.UUID) (model.Addresses, error) {
	ret := _m.Called(ctx, userUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetNewAddressesByUserUuid")
	}

	var r0 model.Addresses
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Addresses, error)); ok {
		return rf(ctx, userUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Addresses); ok {
		r0 = rf(ctx, userUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Addresses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetNewAddressesByUserUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewAddressesByUserUuid'
type MockAddressService_GetNewAddressesByUserUuid_Call struct {
	*mock.Call
}

// GetNewAddressesByUserUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - userUuid uuid.UUID
func (_e *MockAddressService_Expecter) GetNewAddressesByUserUuid(ctx interface{}, userUuid interface{}) *MockAddressService_GetNewAddressesByUserUuid_Call {
	return &MockAddressService_GetNewAddressesByUserUuid_Call{Call: _e.mock.On("GetNewAddressesByUserUuid", ctx, userUuid)}
}

func (_c *MockAddressService_GetNewAddressesByUserUuid_Call) Run(run func(ctx context.Context, userUuid uuid.UUID)) *MockAddressService_GetNewAddressesByUserUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAddressService_GetNewAddressesByUserUuid_Call) Return(_a0 model.Addresses, _a1 error) *MockAddressService_GetNewAddressesByUserUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetNewAddressesByUserUuid_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Addresses, error)) *MockAddressService_GetNewAddressesByUserUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldAddressByConstraint provides a mock function with given fields: ctx, userUuid, network, coin
func (_m *MockAddressService) GetOldAddressByConstraint(ctx context.Context, userUuid uuid.UUID, network common.NetworkEnum, coin string) (model.AddressesOld, error) {
	ret := _m.Called(ctx, userUuid, network, coin)

	if len(ret) == 0 {
		panic("no return value specified for GetOldAddressByConstraint")
	}

	var r0 model.AddressesOld
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, common.NetworkEnum, string) (model.AddressesOld, error)); ok {
		return rf(ctx, userUuid, network, coin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, common.NetworkEnum, string) model.AddressesOld); ok {
		r0 = rf(ctx, userUuid, network, coin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AddressesOld)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, common.NetworkEnum, string) error); ok {
		r1 = rf(ctx, userUuid, network, coin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetOldAddressByConstraint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldAddressByConstraint'
type MockAddressService_GetOldAddressByConstraint_Call struct {
	*mock.Call
}

// GetOldAddressByConstraint is a helper method to define mock.On call
//   - ctx context.Context
//   - userUuid uuid.UUID
//   - network common.NetworkEnum
//   - coin string
func (_e *MockAddressService_Expecter) GetOldAddressByConstraint(ctx interface{}, userUuid interface{}, network interface{}, coin interface{}) *MockAddressService_GetOldAddressByConstraint_Call {
	return &MockAddressService_GetOldAddressByConstraint_Call{Call: _e.mock.On("GetOldAddressByConstraint", ctx, userUuid, network, coin)}
}

func (_c *MockAddressService_GetOldAddressByConstraint_Call) Run(run func(ctx context.Context, userUuid uuid.UUID, network common.NetworkEnum, coin string)) *MockAddressService_GetOldAddressByConstraint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(common.NetworkEnum), args[3].(string))
	})
	return _c
}

func (_c *MockAddressService_GetOldAddressByConstraint_Call) Return(_a0 model.AddressesOld, _a1 error) *MockAddressService_GetOldAddressByConstraint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetOldAddressByConstraint_Call) RunAndReturn(run func(context.Context, uuid.UUID, common.NetworkEnum, string) (model.AddressesOld, error)) *MockAddressService_GetOldAddressByConstraint_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldAddressByStr provides a mock function with given fields: ctx, addressStr
func (_m *MockAddressService) GetOldAddressByStr(ctx context.Context, addressStr string) (model.AddressesOld, error) {
	ret := _m.Called(ctx, addressStr)

	if len(ret) == 0 {
		panic("no return value specified for GetOldAddressByStr")
	}

	var r0 model.AddressesOld
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.AddressesOld, error)); ok {
		return rf(ctx, addressStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.AddressesOld); ok {
		r0 = rf(ctx, addressStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AddressesOld)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, addressStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetOldAddressByStr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldAddressByStr'
type MockAddressService_GetOldAddressByStr_Call struct {
	*mock.Call
}

// GetOldAddressByStr is a helper method to define mock.On call
//   - ctx context.Context
//   - addressStr string
func (_e *MockAddressService_Expecter) GetOldAddressByStr(ctx interface{}, addressStr interface{}) *MockAddressService_GetOldAddressByStr_Call {
	return &MockAddressService_GetOldAddressByStr_Call{Call: _e.mock.On("GetOldAddressByStr", ctx, addressStr)}
}

func (_c *MockAddressService_GetOldAddressByStr_Call) Run(run func(ctx context.Context, addressStr string)) *MockAddressService_GetOldAddressByStr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAddressService_GetOldAddressByStr_Call) Return(_a0 model.AddressesOld, _a1 error) *MockAddressService_GetOldAddressByStr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetOldAddressByStr_Call) RunAndReturn(run func(context.Context, string) (model.AddressesOld, error)) *MockAddressService_GetOldAddressByStr_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldAddressByUuid provides a mock function with given fields: ctx, addressUuid
func (_m *MockAddressService) GetOldAddressByUuid(ctx context.Context, addressUuid uuid.UUID) (model.AddressesOld, error) {
	ret := _m.Called(ctx, addressUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOldAddressByUuid")
	}

	var r0 model.AddressesOld
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.AddressesOld, error)); ok {
		return rf(ctx, addressUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.AddressesOld); ok {
		r0 = rf(ctx, addressUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AddressesOld)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, addressUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetOldAddressByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldAddressByUuid'
type MockAddressService_GetOldAddressByUuid_Call struct {
	*mock.Call
}

// GetOldAddressByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - addressUuid uuid.UUID
func (_e *MockAddressService_Expecter) GetOldAddressByUuid(ctx interface{}, addressUuid interface{}) *MockAddressService_GetOldAddressByUuid_Call {
	return &MockAddressService_GetOldAddressByUuid_Call{Call: _e.mock.On("GetOldAddressByUuid", ctx, addressUuid)}
}

func (_c *MockAddressService_GetOldAddressByUuid_Call) Run(run func(ctx context.Context, addressUuid uuid.UUID)) *MockAddressService_GetOldAddressByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAddressService_GetOldAddressByUuid_Call) Return(_a0 model.AddressesOld, _a1 error) *MockAddressService_GetOldAddressByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetOldAddressByUuid_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.AddressesOld, error)) *MockAddressService_GetOldAddressByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldAddressesByFilter provides a mock function with given fields: ctx, filter
func (_m *MockAddressService) GetOldAddressesByFilter(ctx context.Context, filter *model.AddressOldFilter) (*uint64, model.AddressesOld, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetOldAddressesByFilter")
	}

	var r0 *uint64
	var r1 model.AddressesOld
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressOldFilter) (*uint64, model.AddressesOld, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressOldFilter) *uint64); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.AddressOldFilter) model.AddressesOld); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.AddressesOld)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.AddressOldFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAddressService_GetOldAddressesByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldAddressesByFilter'
type MockAddressService_GetOldAddressesByFilter_Call struct {
	*mock.Call
}

// GetOldAddressesByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.AddressOldFilter
func (_e *MockAddressService_Expecter) GetOldAddressesByFilter(ctx interface{}, filter interface{}) *MockAddressService_GetOldAddressesByFilter_Call {
	return &MockAddressService_GetOldAddressesByFilter_Call{Call: _e.mock.On("GetOldAddressesByFilter", ctx, filter)}
}

func (_c *MockAddressService_GetOldAddressesByFilter_Call) Run(run func(ctx context.Context, filter *model.AddressOldFilter)) *MockAddressService_GetOldAddressesByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressOldFilter))
	})
	return _c
}

func (_c *MockAddressService_GetOldAddressesByFilter_Call) Return(_a0 *uint64, _a1 model.AddressesOld, _a2 error) *MockAddressService_GetOldAddressesByFilter_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAddressService_GetOldAddressesByFilter_Call) RunAndReturn(run func(context.Context, *model.AddressOldFilter) (*uint64, model.AddressesOld, error)) *MockAddressService_GetOldAddressesByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldAddressesByUserUuid provides a mock function with given fields: ctx, userUuid
func (_m *MockAddressService) GetOldAddressesByUserUuid(ctx context.Context, userUuid uuid.UUID) (model.AddressesOld, error) {
	ret := _m.Called(ctx, userUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOldAddressesByUserUuid")
	}

	var r0 model.AddressesOld
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.AddressesOld, error)); ok {
		return rf(ctx, userUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.AddressesOld); ok {
		r0 = rf(ctx, userUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AddressesOld)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetOldAddressesByUserUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldAddressesByUserUuid'
type MockAddressService_GetOldAddressesByUserUuid_Call struct {
	*mock.Call
}

// GetOldAddressesByUserUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - userUuid uuid.UUID
func (_e *MockAddressService_Expecter) GetOldAddressesByUserUuid(ctx interface{}, userUuid interface{}) *MockAddressService_GetOldAddressesByUserUuid_Call {
	return &MockAddressService_GetOldAddressesByUserUuid_Call{Call: _e.mock.On("GetOldAddressesByUserUuid", ctx, userUuid)}
}

func (_c *MockAddressService_GetOldAddressesByUserUuid_Call) Run(run func(ctx context.Context, userUuid uuid.UUID)) *MockAddressService_GetOldAddressesByUserUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAddressService_GetOldAddressesByUserUuid_Call) Return(_a0 model.AddressesOld, _a1 error) *MockAddressService_GetOldAddressesByUserUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetOldAddressesByUserUuid_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.AddressesOld, error)) *MockAddressService_GetOldAddressesByUserUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonalAddressByConstraint provides a mock function with given fields: ctx, userUuid, network
func (_m *MockAddressService) GetPersonalAddressByConstraint(ctx context.Context, userUuid uuid.UUID, network common.NetworkEnum) (model.AddressesPersonal, error) {
	ret := _m.Called(ctx, userUuid, network)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalAddressByConstraint")
	}

	var r0 model.AddressesPersonal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, common.NetworkEnum) (model.AddressesPersonal, error)); ok {
		return rf(ctx, userUuid, network)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, common.NetworkEnum) model.AddressesPersonal); ok {
		r0 = rf(ctx, userUuid, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AddressesPersonal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, common.NetworkEnum) error); ok {
		r1 = rf(ctx, userUuid, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_GetPersonalAddressByConstraint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonalAddressByConstraint'
type MockAddressService_GetPersonalAddressByConstraint_Call struct {
	*mock.Call
}

// GetPersonalAddressByConstraint is a helper method to define mock.On call
//   - ctx context.Context
//   - userUuid uuid.UUID
//   - network common.NetworkEnum
func (_e *MockAddressService_Expecter) GetPersonalAddressByConstraint(ctx interface{}, userUuid interface{}, network interface{}) *MockAddressService_GetPersonalAddressByConstraint_Call {
	return &MockAddressService_GetPersonalAddressByConstraint_Call{Call: _e.mock.On("GetPersonalAddressByConstraint", ctx, userUuid, network)}
}

func (_c *MockAddressService_GetPersonalAddressByConstraint_Call) Run(run func(ctx context.Context, userUuid uuid.UUID, network common.NetworkEnum)) *MockAddressService_GetPersonalAddressByConstraint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(common.NetworkEnum))
	})
	return _c
}

func (_c *MockAddressService_GetPersonalAddressByConstraint_Call) Return(_a0 model.AddressesPersonal, _a1 error) *MockAddressService_GetPersonalAddressByConstraint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_GetPersonalAddressByConstraint_Call) RunAndReturn(run func(context.Context, uuid.UUID, common.NetworkEnum) (model.AddressesPersonal, error)) *MockAddressService_GetPersonalAddressByConstraint_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonalAddressesByFilter provides a mock function with given fields: ctx, filter
func (_m *MockAddressService) GetPersonalAddressesByFilter(ctx context.Context, filter *model.AddressPersonalFilter) (*uint64, model.AddressesPersonal, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalAddressesByFilter")
	}

	var r0 *uint64
	var r1 model.AddressesPersonal
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressPersonalFilter) (*uint64, model.AddressesPersonal, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressPersonalFilter) *uint64); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.AddressPersonalFilter) model.AddressesPersonal); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.AddressesPersonal)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.AddressPersonalFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAddressService_GetPersonalAddressesByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonalAddressesByFilter'
type MockAddressService_GetPersonalAddressesByFilter_Call struct {
	*mock.Call
}

// GetPersonalAddressesByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.AddressPersonalFilter
func (_e *MockAddressService_Expecter) GetPersonalAddressesByFilter(ctx interface{}, filter interface{}) *MockAddressService_GetPersonalAddressesByFilter_Call {
	return &MockAddressService_GetPersonalAddressesByFilter_Call{Call: _e.mock.On("GetPersonalAddressesByFilter", ctx, filter)}
}

func (_c *MockAddressService_GetPersonalAddressesByFilter_Call) Run(run func(ctx context.Context, filter *model.AddressPersonalFilter)) *MockAddressService_GetPersonalAddressesByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressPersonalFilter))
	})
	return _c
}

func (_c *MockAddressService_GetPersonalAddressesByFilter_Call) Return(_a0 *uint64, _a1 model.AddressesPersonal, _a2 error) *MockAddressService_GetPersonalAddressesByFilter_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAddressService_GetPersonalAddressesByFilter_Call) RunAndReturn(run func(context.Context, *model.AddressPersonalFilter) (*uint64, model.AddressesPersonal, error)) *MockAddressService_GetPersonalAddressesByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePersonalAddress provides a mock function with given fields: ctx, _a1, addressStr, minPayout
func (_m *MockAddressService) UpdatePersonalAddress(ctx context.Context, _a1 *model.AddressPersonal, addressStr string, minPayout *float64) (*model.AddressPersonal, error) {
	ret := _m.Called(ctx, _a1, addressStr, minPayout)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePersonalAddress")
	}

	var r0 *model.AddressPersonal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressPersonal, string, *float64) (*model.AddressPersonal, error)); ok {
		return rf(ctx, _a1, addressStr, minPayout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.AddressPersonal, string, *float64) *model.AddressPersonal); ok {
		r0 = rf(ctx, _a1, addressStr, minPayout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddressPersonal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.AddressPersonal, string, *float64) error); ok {
		r1 = rf(ctx, _a1, addressStr, minPayout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressService_UpdatePersonalAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePersonalAddress'
type MockAddressService_UpdatePersonalAddress_Call struct {
	*mock.Call
}

// UpdatePersonalAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *model.AddressPersonal
//   - addressStr string
//   - minPayout *float64
func (_e *MockAddressService_Expecter) UpdatePersonalAddress(ctx interface{}, _a1 interface{}, addressStr interface{}, minPayout interface{}) *MockAddressService_UpdatePersonalAddress_Call {
	return &MockAddressService_UpdatePersonalAddress_Call{Call: _e.mock.On("UpdatePersonalAddress", ctx, _a1, addressStr, minPayout)}
}

func (_c *MockAddressService_UpdatePersonalAddress_Call) Run(run func(ctx context.Context, _a1 *model.AddressPersonal, addressStr string, minPayout *float64)) *MockAddressService_UpdatePersonalAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.AddressPersonal), args[2].(string), args[3].(*float64))
	})
	return _c
}

func (_c *MockAddressService_UpdatePersonalAddress_Call) Return(_a0 *model.AddressPersonal, _a1 error) *MockAddressService_UpdatePersonalAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressService_UpdatePersonalAddress_Call) RunAndReturn(run func(context.Context, *model.AddressPersonal, string, *float64) (*model.AddressPersonal, error)) *MockAddressService_UpdatePersonalAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAddressService creates a new instance of MockAddressService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddressService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddressService {
	mock := &MockAddressService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
