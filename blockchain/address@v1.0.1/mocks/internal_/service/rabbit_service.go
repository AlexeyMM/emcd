// Code generated by mockery v2.43.2. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRabbitService is an autogenerated mock type for the RabbitService type
type MockRabbitService struct {
	mock.Mock
}

type MockRabbitService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRabbitService) EXPECT() *MockRabbitService_Expecter {
	return &MockRabbitService_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, routingKey, body
func (_m *MockRabbitService) Publish(ctx context.Context, routingKey string, body []byte) error {
	ret := _m.Called(ctx, routingKey, body)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, routingKey, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRabbitService_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockRabbitService_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - routingKey string
//   - body []byte
func (_e *MockRabbitService_Expecter) Publish(ctx interface{}, routingKey interface{}, body interface{}) *MockRabbitService_Publish_Call {
	return &MockRabbitService_Publish_Call{Call: _e.mock.On("Publish", ctx, routingKey, body)}
}

func (_c *MockRabbitService_Publish_Call) Run(run func(ctx context.Context, routingKey string, body []byte)) *MockRabbitService_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockRabbitService_Publish_Call) Return(_a0 error) *MockRabbitService_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRabbitService_Publish_Call) RunAndReturn(run func(context.Context, string, []byte) error) *MockRabbitService_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRabbitService creates a new instance of MockRabbitService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRabbitService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRabbitService {
	mock := &MockRabbitService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
