// Code generated by mockery v2.46.3. DO NOT EDIT.

package swap

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	swap "code.emcdtech.com/b2b/swap/protocol/swap"
)

// MockSwapServiceClient is an autogenerated mock type for the SwapServiceClient type
type MockSwapServiceClient struct {
	mock.Mock
}

type MockSwapServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwapServiceClient) EXPECT() *MockSwapServiceClient_Expecter {
	return &MockSwapServiceClient_Expecter{mock: &_m.Mock}
}

// Estimate provides a mock function with given fields: ctx, in, opts
func (_m *MockSwapServiceClient) Estimate(ctx context.Context, in *swap.EstimateRequest, opts ...grpc.CallOption) (*swap.EstimateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Estimate")
	}

	var r0 *swap.EstimateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.EstimateRequest, ...grpc.CallOption) (*swap.EstimateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.EstimateRequest, ...grpc.CallOption) *swap.EstimateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swap.EstimateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.EstimateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceClient_Estimate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Estimate'
type MockSwapServiceClient_Estimate_Call struct {
	*mock.Call
}

// Estimate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swap.EstimateRequest
//   - opts ...grpc.CallOption
func (_e *MockSwapServiceClient_Expecter) Estimate(ctx interface{}, in interface{}, opts ...interface{}) *MockSwapServiceClient_Estimate_Call {
	return &MockSwapServiceClient_Estimate_Call{Call: _e.mock.On("Estimate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSwapServiceClient_Estimate_Call) Run(run func(ctx context.Context, in *swap.EstimateRequest, opts ...grpc.CallOption)) *MockSwapServiceClient_Estimate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swap.EstimateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSwapServiceClient_Estimate_Call) Return(_a0 *swap.EstimateResponse, _a1 error) *MockSwapServiceClient_Estimate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceClient_Estimate_Call) RunAndReturn(run func(context.Context, *swap.EstimateRequest, ...grpc.CallOption) (*swap.EstimateResponse, error)) *MockSwapServiceClient_Estimate_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwapByID provides a mock function with given fields: ctx, in, opts
func (_m *MockSwapServiceClient) GetSwapByID(ctx context.Context, in *swap.GetSwapByIDRequest, opts ...grpc.CallOption) (*swap.GetSwapByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSwapByID")
	}

	var r0 *swap.GetSwapByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.GetSwapByIDRequest, ...grpc.CallOption) (*swap.GetSwapByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.GetSwapByIDRequest, ...grpc.CallOption) *swap.GetSwapByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swap.GetSwapByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.GetSwapByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceClient_GetSwapByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwapByID'
type MockSwapServiceClient_GetSwapByID_Call struct {
	*mock.Call
}

// GetSwapByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swap.GetSwapByIDRequest
//   - opts ...grpc.CallOption
func (_e *MockSwapServiceClient_Expecter) GetSwapByID(ctx interface{}, in interface{}, opts ...interface{}) *MockSwapServiceClient_GetSwapByID_Call {
	return &MockSwapServiceClient_GetSwapByID_Call{Call: _e.mock.On("GetSwapByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSwapServiceClient_GetSwapByID_Call) Run(run func(ctx context.Context, in *swap.GetSwapByIDRequest, opts ...grpc.CallOption)) *MockSwapServiceClient_GetSwapByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swap.GetSwapByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSwapServiceClient_GetSwapByID_Call) Return(_a0 *swap.GetSwapByIDResponse, _a1 error) *MockSwapServiceClient_GetSwapByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceClient_GetSwapByID_Call) RunAndReturn(run func(context.Context, *swap.GetSwapByIDRequest, ...grpc.CallOption) (*swap.GetSwapByIDResponse, error)) *MockSwapServiceClient_GetSwapByID_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareSwap provides a mock function with given fields: ctx, in, opts
func (_m *MockSwapServiceClient) PrepareSwap(ctx context.Context, in *swap.PrepareSwapRequest, opts ...grpc.CallOption) (*swap.PrepareSwapResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PrepareSwap")
	}

	var r0 *swap.PrepareSwapResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.PrepareSwapRequest, ...grpc.CallOption) (*swap.PrepareSwapResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.PrepareSwapRequest, ...grpc.CallOption) *swap.PrepareSwapResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swap.PrepareSwapResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.PrepareSwapRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceClient_PrepareSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareSwap'
type MockSwapServiceClient_PrepareSwap_Call struct {
	*mock.Call
}

// PrepareSwap is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swap.PrepareSwapRequest
//   - opts ...grpc.CallOption
func (_e *MockSwapServiceClient_Expecter) PrepareSwap(ctx interface{}, in interface{}, opts ...interface{}) *MockSwapServiceClient_PrepareSwap_Call {
	return &MockSwapServiceClient_PrepareSwap_Call{Call: _e.mock.On("PrepareSwap",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSwapServiceClient_PrepareSwap_Call) Run(run func(ctx context.Context, in *swap.PrepareSwapRequest, opts ...grpc.CallOption)) *MockSwapServiceClient_PrepareSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swap.PrepareSwapRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSwapServiceClient_PrepareSwap_Call) Return(_a0 *swap.PrepareSwapResponse, _a1 error) *MockSwapServiceClient_PrepareSwap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceClient_PrepareSwap_Call) RunAndReturn(run func(context.Context, *swap.PrepareSwapRequest, ...grpc.CallOption) (*swap.PrepareSwapResponse, error)) *MockSwapServiceClient_PrepareSwap_Call {
	_c.Call.Return(run)
	return _c
}

// StartSwap provides a mock function with given fields: ctx, in, opts
func (_m *MockSwapServiceClient) StartSwap(ctx context.Context, in *swap.StartSwapRequest, opts ...grpc.CallOption) (*swap.StartSwapResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSwap")
	}

	var r0 *swap.StartSwapResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.StartSwapRequest, ...grpc.CallOption) (*swap.StartSwapResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.StartSwapRequest, ...grpc.CallOption) *swap.StartSwapResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swap.StartSwapResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.StartSwapRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceClient_StartSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSwap'
type MockSwapServiceClient_StartSwap_Call struct {
	*mock.Call
}

// StartSwap is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swap.StartSwapRequest
//   - opts ...grpc.CallOption
func (_e *MockSwapServiceClient_Expecter) StartSwap(ctx interface{}, in interface{}, opts ...interface{}) *MockSwapServiceClient_StartSwap_Call {
	return &MockSwapServiceClient_StartSwap_Call{Call: _e.mock.On("StartSwap",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSwapServiceClient_StartSwap_Call) Run(run func(ctx context.Context, in *swap.StartSwapRequest, opts ...grpc.CallOption)) *MockSwapServiceClient_StartSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swap.StartSwapRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSwapServiceClient_StartSwap_Call) Return(_a0 *swap.StartSwapResponse, _a1 error) *MockSwapServiceClient_StartSwap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceClient_StartSwap_Call) RunAndReturn(run func(context.Context, *swap.StartSwapRequest, ...grpc.CallOption) (*swap.StartSwapResponse, error)) *MockSwapServiceClient_StartSwap_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: ctx, in, opts
func (_m *MockSwapServiceClient) Status(ctx context.Context, in *swap.StatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[swap.StatusResponse], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 grpc.ServerStreamingClient[swap.StatusResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.StatusRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[swap.StatusResponse], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.StatusRequest, ...grpc.CallOption) grpc.ServerStreamingClient[swap.StatusResponse]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[swap.StatusResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.StatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceClient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockSwapServiceClient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swap.StatusRequest
//   - opts ...grpc.CallOption
func (_e *MockSwapServiceClient_Expecter) Status(ctx interface{}, in interface{}, opts ...interface{}) *MockSwapServiceClient_Status_Call {
	return &MockSwapServiceClient_Status_Call{Call: _e.mock.On("Status",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSwapServiceClient_Status_Call) Run(run func(ctx context.Context, in *swap.StatusRequest, opts ...grpc.CallOption)) *MockSwapServiceClient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swap.StatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSwapServiceClient_Status_Call) Return(_a0 grpc.ServerStreamingClient[swap.StatusResponse], _a1 error) *MockSwapServiceClient_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceClient_Status_Call) RunAndReturn(run func(context.Context, *swap.StatusRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[swap.StatusResponse], error)) *MockSwapServiceClient_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSwapServiceClient creates a new instance of MockSwapServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwapServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwapServiceClient {
	mock := &MockSwapServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
