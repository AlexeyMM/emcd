// Code generated by mockery v2.46.3. DO NOT EDIT.

package swap

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	swap "code.emcdtech.com/b2b/swap/protocol/swap"
)

// MockSwapServiceServer is an autogenerated mock type for the SwapServiceServer type
type MockSwapServiceServer struct {
	mock.Mock
}

type MockSwapServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwapServiceServer) EXPECT() *MockSwapServiceServer_Expecter {
	return &MockSwapServiceServer_Expecter{mock: &_m.Mock}
}

// Estimate provides a mock function with given fields: _a0, _a1
func (_m *MockSwapServiceServer) Estimate(_a0 context.Context, _a1 *swap.EstimateRequest) (*swap.EstimateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Estimate")
	}

	var r0 *swap.EstimateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.EstimateRequest) (*swap.EstimateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.EstimateRequest) *swap.EstimateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swap.EstimateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.EstimateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceServer_Estimate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Estimate'
type MockSwapServiceServer_Estimate_Call struct {
	*mock.Call
}

// Estimate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swap.EstimateRequest
func (_e *MockSwapServiceServer_Expecter) Estimate(_a0 interface{}, _a1 interface{}) *MockSwapServiceServer_Estimate_Call {
	return &MockSwapServiceServer_Estimate_Call{Call: _e.mock.On("Estimate", _a0, _a1)}
}

func (_c *MockSwapServiceServer_Estimate_Call) Run(run func(_a0 context.Context, _a1 *swap.EstimateRequest)) *MockSwapServiceServer_Estimate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swap.EstimateRequest))
	})
	return _c
}

func (_c *MockSwapServiceServer_Estimate_Call) Return(_a0 *swap.EstimateResponse, _a1 error) *MockSwapServiceServer_Estimate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceServer_Estimate_Call) RunAndReturn(run func(context.Context, *swap.EstimateRequest) (*swap.EstimateResponse, error)) *MockSwapServiceServer_Estimate_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwapByID provides a mock function with given fields: _a0, _a1
func (_m *MockSwapServiceServer) GetSwapByID(_a0 context.Context, _a1 *swap.GetSwapByIDRequest) (*swap.GetSwapByIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSwapByID")
	}

	var r0 *swap.GetSwapByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.GetSwapByIDRequest) (*swap.GetSwapByIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.GetSwapByIDRequest) *swap.GetSwapByIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swap.GetSwapByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.GetSwapByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceServer_GetSwapByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwapByID'
type MockSwapServiceServer_GetSwapByID_Call struct {
	*mock.Call
}

// GetSwapByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swap.GetSwapByIDRequest
func (_e *MockSwapServiceServer_Expecter) GetSwapByID(_a0 interface{}, _a1 interface{}) *MockSwapServiceServer_GetSwapByID_Call {
	return &MockSwapServiceServer_GetSwapByID_Call{Call: _e.mock.On("GetSwapByID", _a0, _a1)}
}

func (_c *MockSwapServiceServer_GetSwapByID_Call) Run(run func(_a0 context.Context, _a1 *swap.GetSwapByIDRequest)) *MockSwapServiceServer_GetSwapByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swap.GetSwapByIDRequest))
	})
	return _c
}

func (_c *MockSwapServiceServer_GetSwapByID_Call) Return(_a0 *swap.GetSwapByIDResponse, _a1 error) *MockSwapServiceServer_GetSwapByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceServer_GetSwapByID_Call) RunAndReturn(run func(context.Context, *swap.GetSwapByIDRequest) (*swap.GetSwapByIDResponse, error)) *MockSwapServiceServer_GetSwapByID_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareSwap provides a mock function with given fields: _a0, _a1
func (_m *MockSwapServiceServer) PrepareSwap(_a0 context.Context, _a1 *swap.PrepareSwapRequest) (*swap.PrepareSwapResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PrepareSwap")
	}

	var r0 *swap.PrepareSwapResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.PrepareSwapRequest) (*swap.PrepareSwapResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.PrepareSwapRequest) *swap.PrepareSwapResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swap.PrepareSwapResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.PrepareSwapRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceServer_PrepareSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareSwap'
type MockSwapServiceServer_PrepareSwap_Call struct {
	*mock.Call
}

// PrepareSwap is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swap.PrepareSwapRequest
func (_e *MockSwapServiceServer_Expecter) PrepareSwap(_a0 interface{}, _a1 interface{}) *MockSwapServiceServer_PrepareSwap_Call {
	return &MockSwapServiceServer_PrepareSwap_Call{Call: _e.mock.On("PrepareSwap", _a0, _a1)}
}

func (_c *MockSwapServiceServer_PrepareSwap_Call) Run(run func(_a0 context.Context, _a1 *swap.PrepareSwapRequest)) *MockSwapServiceServer_PrepareSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swap.PrepareSwapRequest))
	})
	return _c
}

func (_c *MockSwapServiceServer_PrepareSwap_Call) Return(_a0 *swap.PrepareSwapResponse, _a1 error) *MockSwapServiceServer_PrepareSwap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceServer_PrepareSwap_Call) RunAndReturn(run func(context.Context, *swap.PrepareSwapRequest) (*swap.PrepareSwapResponse, error)) *MockSwapServiceServer_PrepareSwap_Call {
	_c.Call.Return(run)
	return _c
}

// StartSwap provides a mock function with given fields: _a0, _a1
func (_m *MockSwapServiceServer) StartSwap(_a0 context.Context, _a1 *swap.StartSwapRequest) (*swap.StartSwapResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StartSwap")
	}

	var r0 *swap.StartSwapResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swap.StartSwapRequest) (*swap.StartSwapResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swap.StartSwapRequest) *swap.StartSwapResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swap.StartSwapResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swap.StartSwapRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapServiceServer_StartSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSwap'
type MockSwapServiceServer_StartSwap_Call struct {
	*mock.Call
}

// StartSwap is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swap.StartSwapRequest
func (_e *MockSwapServiceServer_Expecter) StartSwap(_a0 interface{}, _a1 interface{}) *MockSwapServiceServer_StartSwap_Call {
	return &MockSwapServiceServer_StartSwap_Call{Call: _e.mock.On("StartSwap", _a0, _a1)}
}

func (_c *MockSwapServiceServer_StartSwap_Call) Run(run func(_a0 context.Context, _a1 *swap.StartSwapRequest)) *MockSwapServiceServer_StartSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swap.StartSwapRequest))
	})
	return _c
}

func (_c *MockSwapServiceServer_StartSwap_Call) Return(_a0 *swap.StartSwapResponse, _a1 error) *MockSwapServiceServer_StartSwap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapServiceServer_StartSwap_Call) RunAndReturn(run func(context.Context, *swap.StartSwapRequest) (*swap.StartSwapResponse, error)) *MockSwapServiceServer_StartSwap_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *MockSwapServiceServer) Status(_a0 *swap.StatusRequest, _a1 grpc.ServerStreamingServer[swap.StatusResponse]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*swap.StatusRequest, grpc.ServerStreamingServer[swap.StatusResponse]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSwapServiceServer_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockSwapServiceServer_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - _a0 *swap.StatusRequest
//   - _a1 grpc.ServerStreamingServer[swap.StatusResponse]
func (_e *MockSwapServiceServer_Expecter) Status(_a0 interface{}, _a1 interface{}) *MockSwapServiceServer_Status_Call {
	return &MockSwapServiceServer_Status_Call{Call: _e.mock.On("Status", _a0, _a1)}
}

func (_c *MockSwapServiceServer_Status_Call) Run(run func(_a0 *swap.StatusRequest, _a1 grpc.ServerStreamingServer[swap.StatusResponse])) *MockSwapServiceServer_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*swap.StatusRequest), args[1].(grpc.ServerStreamingServer[swap.StatusResponse]))
	})
	return _c
}

func (_c *MockSwapServiceServer_Status_Call) Return(_a0 error) *MockSwapServiceServer_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSwapServiceServer_Status_Call) RunAndReturn(run func(*swap.StatusRequest, grpc.ServerStreamingServer[swap.StatusResponse]) error) *MockSwapServiceServer_Status_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedSwapServiceServer provides a mock function with given fields:
func (_m *MockSwapServiceServer) mustEmbedUnimplementedSwapServiceServer() {
	_m.Called()
}

// MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedSwapServiceServer'
type MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedSwapServiceServer is a helper method to define mock.On call
func (_e *MockSwapServiceServer_Expecter) mustEmbedUnimplementedSwapServiceServer() *MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call {
	return &MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedSwapServiceServer")}
}

func (_c *MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call) Run(run func()) *MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call) Return() *MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call) RunAndReturn(run func()) *MockSwapServiceServer_mustEmbedUnimplementedSwapServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSwapServiceServer creates a new instance of MockSwapServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwapServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwapServiceServer {
	mock := &MockSwapServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
