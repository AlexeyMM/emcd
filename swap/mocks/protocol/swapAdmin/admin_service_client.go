// Code generated by mockery v2.46.3. DO NOT EDIT.

package swapAdmin

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	swapAdmin "code.emcdtech.com/b2b/swap/protocol/swapAdmin"
)

// MockAdminServiceClient is an autogenerated mock type for the AdminServiceClient type
type MockAdminServiceClient struct {
	mock.Mock
}

type MockAdminServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdminServiceClient) EXPECT() *MockAdminServiceClient_Expecter {
	return &MockAdminServiceClient_Expecter{mock: &_m.Mock}
}

// ChangeManualSwapStatus provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) ChangeManualSwapStatus(ctx context.Context, in *swapAdmin.ChangeManualSwapStatusRequest, opts ...grpc.CallOption) (*swapAdmin.ChangeManualSwapStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeManualSwapStatus")
	}

	var r0 *swapAdmin.ChangeManualSwapStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.ChangeManualSwapStatusRequest, ...grpc.CallOption) (*swapAdmin.ChangeManualSwapStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.ChangeManualSwapStatusRequest, ...grpc.CallOption) *swapAdmin.ChangeManualSwapStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.ChangeManualSwapStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.ChangeManualSwapStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_ChangeManualSwapStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeManualSwapStatus'
type MockAdminServiceClient_ChangeManualSwapStatus_Call struct {
	*mock.Call
}

// ChangeManualSwapStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.ChangeManualSwapStatusRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) ChangeManualSwapStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_ChangeManualSwapStatus_Call {
	return &MockAdminServiceClient_ChangeManualSwapStatus_Call{Call: _e.mock.On("ChangeManualSwapStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_ChangeManualSwapStatus_Call) Run(run func(ctx context.Context, in *swapAdmin.ChangeManualSwapStatusRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_ChangeManualSwapStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.ChangeManualSwapStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_ChangeManualSwapStatus_Call) Return(_a0 *swapAdmin.ChangeManualSwapStatusResponse, _a1 error) *MockAdminServiceClient_ChangeManualSwapStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_ChangeManualSwapStatus_Call) RunAndReturn(run func(context.Context, *swapAdmin.ChangeManualSwapStatusRequest, ...grpc.CallOption) (*swapAdmin.ChangeManualSwapStatusResponse, error)) *MockAdminServiceClient_ChangeManualSwapStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckOrder provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) CheckOrder(ctx context.Context, in *swapAdmin.CheckOrderRequest, opts ...grpc.CallOption) (*swapAdmin.CheckOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrder")
	}

	var r0 *swapAdmin.CheckOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.CheckOrderRequest, ...grpc.CallOption) (*swapAdmin.CheckOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.CheckOrderRequest, ...grpc.CallOption) *swapAdmin.CheckOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.CheckOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.CheckOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_CheckOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOrder'
type MockAdminServiceClient_CheckOrder_Call struct {
	*mock.Call
}

// CheckOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.CheckOrderRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) CheckOrder(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_CheckOrder_Call {
	return &MockAdminServiceClient_CheckOrder_Call{Call: _e.mock.On("CheckOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_CheckOrder_Call) Run(run func(ctx context.Context, in *swapAdmin.CheckOrderRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_CheckOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.CheckOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_CheckOrder_Call) Return(_a0 *swapAdmin.CheckOrderResponse, _a1 error) *MockAdminServiceClient_CheckOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_CheckOrder_Call) RunAndReturn(run func(context.Context, *swapAdmin.CheckOrderRequest, ...grpc.CallOption) (*swapAdmin.CheckOrderResponse, error)) *MockAdminServiceClient_CheckOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmAQuote provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) ConfirmAQuote(ctx context.Context, in *swapAdmin.ConfirmAQuoteRequest, opts ...grpc.CallOption) (*swapAdmin.ConfirmAQuoteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmAQuote")
	}

	var r0 *swapAdmin.ConfirmAQuoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.ConfirmAQuoteRequest, ...grpc.CallOption) (*swapAdmin.ConfirmAQuoteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.ConfirmAQuoteRequest, ...grpc.CallOption) *swapAdmin.ConfirmAQuoteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.ConfirmAQuoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.ConfirmAQuoteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_ConfirmAQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmAQuote'
type MockAdminServiceClient_ConfirmAQuote_Call struct {
	*mock.Call
}

// ConfirmAQuote is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.ConfirmAQuoteRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) ConfirmAQuote(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_ConfirmAQuote_Call {
	return &MockAdminServiceClient_ConfirmAQuote_Call{Call: _e.mock.On("ConfirmAQuote",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_ConfirmAQuote_Call) Run(run func(ctx context.Context, in *swapAdmin.ConfirmAQuoteRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_ConfirmAQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.ConfirmAQuoteRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_ConfirmAQuote_Call) Return(_a0 *swapAdmin.ConfirmAQuoteResponse, _a1 error) *MockAdminServiceClient_ConfirmAQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_ConfirmAQuote_Call) RunAndReturn(run func(context.Context, *swapAdmin.ConfirmAQuoteRequest, ...grpc.CallOption) (*swapAdmin.ConfirmAQuoteResponse, error)) *MockAdminServiceClient_ConfirmAQuote_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalanceByCoin provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) GetBalanceByCoin(ctx context.Context, in *swapAdmin.GetBalanceByCoinRequest, opts ...grpc.CallOption) (*swapAdmin.GetBalanceByCoinResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceByCoin")
	}

	var r0 *swapAdmin.GetBalanceByCoinResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetBalanceByCoinRequest, ...grpc.CallOption) (*swapAdmin.GetBalanceByCoinResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetBalanceByCoinRequest, ...grpc.CallOption) *swapAdmin.GetBalanceByCoinResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetBalanceByCoinResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetBalanceByCoinRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_GetBalanceByCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceByCoin'
type MockAdminServiceClient_GetBalanceByCoin_Call struct {
	*mock.Call
}

// GetBalanceByCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.GetBalanceByCoinRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) GetBalanceByCoin(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_GetBalanceByCoin_Call {
	return &MockAdminServiceClient_GetBalanceByCoin_Call{Call: _e.mock.On("GetBalanceByCoin",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_GetBalanceByCoin_Call) Run(run func(ctx context.Context, in *swapAdmin.GetBalanceByCoinRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_GetBalanceByCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.GetBalanceByCoinRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_GetBalanceByCoin_Call) Return(_a0 *swapAdmin.GetBalanceByCoinResponse, _a1 error) *MockAdminServiceClient_GetBalanceByCoin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_GetBalanceByCoin_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetBalanceByCoinRequest, ...grpc.CallOption) (*swapAdmin.GetBalanceByCoinResponse, error)) *MockAdminServiceClient_GetBalanceByCoin_Call {
	_c.Call.Return(run)
	return _c
}

// GetConvertStatus provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) GetConvertStatus(ctx context.Context, in *swapAdmin.GetConvertStatusRequest, opts ...grpc.CallOption) (*swapAdmin.GetConvertStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConvertStatus")
	}

	var r0 *swapAdmin.GetConvertStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetConvertStatusRequest, ...grpc.CallOption) (*swapAdmin.GetConvertStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetConvertStatusRequest, ...grpc.CallOption) *swapAdmin.GetConvertStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetConvertStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetConvertStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_GetConvertStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConvertStatus'
type MockAdminServiceClient_GetConvertStatus_Call struct {
	*mock.Call
}

// GetConvertStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.GetConvertStatusRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) GetConvertStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_GetConvertStatus_Call {
	return &MockAdminServiceClient_GetConvertStatus_Call{Call: _e.mock.On("GetConvertStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_GetConvertStatus_Call) Run(run func(ctx context.Context, in *swapAdmin.GetConvertStatusRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_GetConvertStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.GetConvertStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_GetConvertStatus_Call) Return(_a0 *swapAdmin.GetConvertStatusResponse, _a1 error) *MockAdminServiceClient_GetConvertStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_GetConvertStatus_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetConvertStatusRequest, ...grpc.CallOption) (*swapAdmin.GetConvertStatusResponse, error)) *MockAdminServiceClient_GetConvertStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwapStatusHistory provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) GetSwapStatusHistory(ctx context.Context, in *swapAdmin.GetSwapStatusHistoryRequest, opts ...grpc.CallOption) (*swapAdmin.GetSwapStatusHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSwapStatusHistory")
	}

	var r0 *swapAdmin.GetSwapStatusHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetSwapStatusHistoryRequest, ...grpc.CallOption) (*swapAdmin.GetSwapStatusHistoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetSwapStatusHistoryRequest, ...grpc.CallOption) *swapAdmin.GetSwapStatusHistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetSwapStatusHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetSwapStatusHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_GetSwapStatusHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwapStatusHistory'
type MockAdminServiceClient_GetSwapStatusHistory_Call struct {
	*mock.Call
}

// GetSwapStatusHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.GetSwapStatusHistoryRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) GetSwapStatusHistory(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_GetSwapStatusHistory_Call {
	return &MockAdminServiceClient_GetSwapStatusHistory_Call{Call: _e.mock.On("GetSwapStatusHistory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_GetSwapStatusHistory_Call) Run(run func(ctx context.Context, in *swapAdmin.GetSwapStatusHistoryRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_GetSwapStatusHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.GetSwapStatusHistoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_GetSwapStatusHistory_Call) Return(_a0 *swapAdmin.GetSwapStatusHistoryResponse, _a1 error) *MockAdminServiceClient_GetSwapStatusHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_GetSwapStatusHistory_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetSwapStatusHistoryRequest, ...grpc.CallOption) (*swapAdmin.GetSwapStatusHistoryResponse, error)) *MockAdminServiceClient_GetSwapStatusHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwaps provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) GetSwaps(ctx context.Context, in *swapAdmin.GetSwapsRequest, opts ...grpc.CallOption) (*swapAdmin.GetSwapsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSwaps")
	}

	var r0 *swapAdmin.GetSwapsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetSwapsRequest, ...grpc.CallOption) (*swapAdmin.GetSwapsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetSwapsRequest, ...grpc.CallOption) *swapAdmin.GetSwapsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetSwapsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetSwapsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_GetSwaps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwaps'
type MockAdminServiceClient_GetSwaps_Call struct {
	*mock.Call
}

// GetSwaps is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.GetSwapsRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) GetSwaps(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_GetSwaps_Call {
	return &MockAdminServiceClient_GetSwaps_Call{Call: _e.mock.On("GetSwaps",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_GetSwaps_Call) Run(run func(ctx context.Context, in *swapAdmin.GetSwapsRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_GetSwaps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.GetSwapsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_GetSwaps_Call) Return(_a0 *swapAdmin.GetSwapsResponse, _a1 error) *MockAdminServiceClient_GetSwaps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_GetSwaps_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetSwapsRequest, ...grpc.CallOption) (*swapAdmin.GetSwapsResponse, error)) *MockAdminServiceClient_GetSwaps_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawalLink provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) GetWithdrawalLink(ctx context.Context, in *swapAdmin.GetWithdrawalLinkRequest, opts ...grpc.CallOption) (*swapAdmin.GetWithdrawalLinkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalLink")
	}

	var r0 *swapAdmin.GetWithdrawalLinkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetWithdrawalLinkRequest, ...grpc.CallOption) (*swapAdmin.GetWithdrawalLinkResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetWithdrawalLinkRequest, ...grpc.CallOption) *swapAdmin.GetWithdrawalLinkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetWithdrawalLinkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetWithdrawalLinkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_GetWithdrawalLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalLink'
type MockAdminServiceClient_GetWithdrawalLink_Call struct {
	*mock.Call
}

// GetWithdrawalLink is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.GetWithdrawalLinkRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) GetWithdrawalLink(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_GetWithdrawalLink_Call {
	return &MockAdminServiceClient_GetWithdrawalLink_Call{Call: _e.mock.On("GetWithdrawalLink",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_GetWithdrawalLink_Call) Run(run func(ctx context.Context, in *swapAdmin.GetWithdrawalLinkRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_GetWithdrawalLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.GetWithdrawalLinkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_GetWithdrawalLink_Call) Return(_a0 *swapAdmin.GetWithdrawalLinkResponse, _a1 error) *MockAdminServiceClient_GetWithdrawalLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_GetWithdrawalLink_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetWithdrawalLinkRequest, ...grpc.CallOption) (*swapAdmin.GetWithdrawalLinkResponse, error)) *MockAdminServiceClient_GetWithdrawalLink_Call {
	_c.Call.Return(run)
	return _c
}

// PlaceOrderForUSDT provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) PlaceOrderForUSDT(ctx context.Context, in *swapAdmin.PlaceOrderForUSDTRequest, opts ...grpc.CallOption) (*swapAdmin.PlaceOrderForUSDTResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrderForUSDT")
	}

	var r0 *swapAdmin.PlaceOrderForUSDTResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.PlaceOrderForUSDTRequest, ...grpc.CallOption) (*swapAdmin.PlaceOrderForUSDTResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.PlaceOrderForUSDTRequest, ...grpc.CallOption) *swapAdmin.PlaceOrderForUSDTResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.PlaceOrderForUSDTResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.PlaceOrderForUSDTRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_PlaceOrderForUSDT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaceOrderForUSDT'
type MockAdminServiceClient_PlaceOrderForUSDT_Call struct {
	*mock.Call
}

// PlaceOrderForUSDT is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.PlaceOrderForUSDTRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) PlaceOrderForUSDT(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_PlaceOrderForUSDT_Call {
	return &MockAdminServiceClient_PlaceOrderForUSDT_Call{Call: _e.mock.On("PlaceOrderForUSDT",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_PlaceOrderForUSDT_Call) Run(run func(ctx context.Context, in *swapAdmin.PlaceOrderForUSDTRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_PlaceOrderForUSDT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.PlaceOrderForUSDTRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_PlaceOrderForUSDT_Call) Return(_a0 *swapAdmin.PlaceOrderForUSDTResponse, _a1 error) *MockAdminServiceClient_PlaceOrderForUSDT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_PlaceOrderForUSDT_Call) RunAndReturn(run func(context.Context, *swapAdmin.PlaceOrderForUSDTRequest, ...grpc.CallOption) (*swapAdmin.PlaceOrderForUSDTResponse, error)) *MockAdminServiceClient_PlaceOrderForUSDT_Call {
	_c.Call.Return(run)
	return _c
}

// RequestAQuote provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) RequestAQuote(ctx context.Context, in *swapAdmin.RequestAQuoteRequest, opts ...grpc.CallOption) (*swapAdmin.RequestAQuoteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestAQuote")
	}

	var r0 *swapAdmin.RequestAQuoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.RequestAQuoteRequest, ...grpc.CallOption) (*swapAdmin.RequestAQuoteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.RequestAQuoteRequest, ...grpc.CallOption) *swapAdmin.RequestAQuoteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.RequestAQuoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.RequestAQuoteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_RequestAQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestAQuote'
type MockAdminServiceClient_RequestAQuote_Call struct {
	*mock.Call
}

// RequestAQuote is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.RequestAQuoteRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) RequestAQuote(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_RequestAQuote_Call {
	return &MockAdminServiceClient_RequestAQuote_Call{Call: _e.mock.On("RequestAQuote",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_RequestAQuote_Call) Run(run func(ctx context.Context, in *swapAdmin.RequestAQuoteRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_RequestAQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.RequestAQuoteRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_RequestAQuote_Call) Return(_a0 *swapAdmin.RequestAQuoteResponse, _a1 error) *MockAdminServiceClient_RequestAQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_RequestAQuote_Call) RunAndReturn(run func(context.Context, *swapAdmin.RequestAQuoteRequest, ...grpc.CallOption) (*swapAdmin.RequestAQuoteResponse, error)) *MockAdminServiceClient_RequestAQuote_Call {
	_c.Call.Return(run)
	return _c
}

// SetDestinationAddress provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) SetDestinationAddress(ctx context.Context, in *swapAdmin.SetDestinationAddressRequest, opts ...grpc.CallOption) (*swapAdmin.SetDestinationAddressResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDestinationAddress")
	}

	var r0 *swapAdmin.SetDestinationAddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.SetDestinationAddressRequest, ...grpc.CallOption) (*swapAdmin.SetDestinationAddressResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.SetDestinationAddressRequest, ...grpc.CallOption) *swapAdmin.SetDestinationAddressResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.SetDestinationAddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.SetDestinationAddressRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_SetDestinationAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDestinationAddress'
type MockAdminServiceClient_SetDestinationAddress_Call struct {
	*mock.Call
}

// SetDestinationAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.SetDestinationAddressRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) SetDestinationAddress(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_SetDestinationAddress_Call {
	return &MockAdminServiceClient_SetDestinationAddress_Call{Call: _e.mock.On("SetDestinationAddress",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_SetDestinationAddress_Call) Run(run func(ctx context.Context, in *swapAdmin.SetDestinationAddressRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_SetDestinationAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.SetDestinationAddressRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_SetDestinationAddress_Call) Return(_a0 *swapAdmin.SetDestinationAddressResponse, _a1 error) *MockAdminServiceClient_SetDestinationAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_SetDestinationAddress_Call) RunAndReturn(run func(context.Context, *swapAdmin.SetDestinationAddressRequest, ...grpc.CallOption) (*swapAdmin.SetDestinationAddressResponse, error)) *MockAdminServiceClient_SetDestinationAddress_Call {
	_c.Call.Return(run)
	return _c
}

// TransferBetweenAccountTypes provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) TransferBetweenAccountTypes(ctx context.Context, in *swapAdmin.TransferBetweenAccountTypesRequest, opts ...grpc.CallOption) (*swapAdmin.TransferBetweenAccountTypesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TransferBetweenAccountTypes")
	}

	var r0 *swapAdmin.TransferBetweenAccountTypesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.TransferBetweenAccountTypesRequest, ...grpc.CallOption) (*swapAdmin.TransferBetweenAccountTypesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.TransferBetweenAccountTypesRequest, ...grpc.CallOption) *swapAdmin.TransferBetweenAccountTypesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.TransferBetweenAccountTypesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.TransferBetweenAccountTypesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_TransferBetweenAccountTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferBetweenAccountTypes'
type MockAdminServiceClient_TransferBetweenAccountTypes_Call struct {
	*mock.Call
}

// TransferBetweenAccountTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.TransferBetweenAccountTypesRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) TransferBetweenAccountTypes(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_TransferBetweenAccountTypes_Call {
	return &MockAdminServiceClient_TransferBetweenAccountTypes_Call{Call: _e.mock.On("TransferBetweenAccountTypes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_TransferBetweenAccountTypes_Call) Run(run func(ctx context.Context, in *swapAdmin.TransferBetweenAccountTypesRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_TransferBetweenAccountTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.TransferBetweenAccountTypesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_TransferBetweenAccountTypes_Call) Return(_a0 *swapAdmin.TransferBetweenAccountTypesResponse, _a1 error) *MockAdminServiceClient_TransferBetweenAccountTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_TransferBetweenAccountTypes_Call) RunAndReturn(run func(context.Context, *swapAdmin.TransferBetweenAccountTypesRequest, ...grpc.CallOption) (*swapAdmin.TransferBetweenAccountTypesResponse, error)) *MockAdminServiceClient_TransferBetweenAccountTypes_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, in, opts
func (_m *MockAdminServiceClient) Withdraw(ctx context.Context, in *swapAdmin.WithdrawRequest, opts ...grpc.CallOption) (*swapAdmin.WithdrawResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 *swapAdmin.WithdrawResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.WithdrawRequest, ...grpc.CallOption) (*swapAdmin.WithdrawResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.WithdrawRequest, ...grpc.CallOption) *swapAdmin.WithdrawResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.WithdrawResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.WithdrawRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceClient_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type MockAdminServiceClient_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - in *swapAdmin.WithdrawRequest
//   - opts ...grpc.CallOption
func (_e *MockAdminServiceClient_Expecter) Withdraw(ctx interface{}, in interface{}, opts ...interface{}) *MockAdminServiceClient_Withdraw_Call {
	return &MockAdminServiceClient_Withdraw_Call{Call: _e.mock.On("Withdraw",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAdminServiceClient_Withdraw_Call) Run(run func(ctx context.Context, in *swapAdmin.WithdrawRequest, opts ...grpc.CallOption)) *MockAdminServiceClient_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*swapAdmin.WithdrawRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAdminServiceClient_Withdraw_Call) Return(_a0 *swapAdmin.WithdrawResponse, _a1 error) *MockAdminServiceClient_Withdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceClient_Withdraw_Call) RunAndReturn(run func(context.Context, *swapAdmin.WithdrawRequest, ...grpc.CallOption) (*swapAdmin.WithdrawResponse, error)) *MockAdminServiceClient_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdminServiceClient creates a new instance of MockAdminServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdminServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdminServiceClient {
	mock := &MockAdminServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
