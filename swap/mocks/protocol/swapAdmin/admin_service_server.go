// Code generated by mockery v2.46.3. DO NOT EDIT.

package swapAdmin

import (
	context "context"

	swapAdmin "code.emcdtech.com/b2b/swap/protocol/swapAdmin"
	mock "github.com/stretchr/testify/mock"
)

// MockAdminServiceServer is an autogenerated mock type for the AdminServiceServer type
type MockAdminServiceServer struct {
	mock.Mock
}

type MockAdminServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdminServiceServer) EXPECT() *MockAdminServiceServer_Expecter {
	return &MockAdminServiceServer_Expecter{mock: &_m.Mock}
}

// ChangeManualSwapStatus provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) ChangeManualSwapStatus(_a0 context.Context, _a1 *swapAdmin.ChangeManualSwapStatusRequest) (*swapAdmin.ChangeManualSwapStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ChangeManualSwapStatus")
	}

	var r0 *swapAdmin.ChangeManualSwapStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.ChangeManualSwapStatusRequest) (*swapAdmin.ChangeManualSwapStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.ChangeManualSwapStatusRequest) *swapAdmin.ChangeManualSwapStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.ChangeManualSwapStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.ChangeManualSwapStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_ChangeManualSwapStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeManualSwapStatus'
type MockAdminServiceServer_ChangeManualSwapStatus_Call struct {
	*mock.Call
}

// ChangeManualSwapStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.ChangeManualSwapStatusRequest
func (_e *MockAdminServiceServer_Expecter) ChangeManualSwapStatus(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_ChangeManualSwapStatus_Call {
	return &MockAdminServiceServer_ChangeManualSwapStatus_Call{Call: _e.mock.On("ChangeManualSwapStatus", _a0, _a1)}
}

func (_c *MockAdminServiceServer_ChangeManualSwapStatus_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.ChangeManualSwapStatusRequest)) *MockAdminServiceServer_ChangeManualSwapStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.ChangeManualSwapStatusRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_ChangeManualSwapStatus_Call) Return(_a0 *swapAdmin.ChangeManualSwapStatusResponse, _a1 error) *MockAdminServiceServer_ChangeManualSwapStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_ChangeManualSwapStatus_Call) RunAndReturn(run func(context.Context, *swapAdmin.ChangeManualSwapStatusRequest) (*swapAdmin.ChangeManualSwapStatusResponse, error)) *MockAdminServiceServer_ChangeManualSwapStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckOrder provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) CheckOrder(_a0 context.Context, _a1 *swapAdmin.CheckOrderRequest) (*swapAdmin.CheckOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrder")
	}

	var r0 *swapAdmin.CheckOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.CheckOrderRequest) (*swapAdmin.CheckOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.CheckOrderRequest) *swapAdmin.CheckOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.CheckOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.CheckOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_CheckOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOrder'
type MockAdminServiceServer_CheckOrder_Call struct {
	*mock.Call
}

// CheckOrder is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.CheckOrderRequest
func (_e *MockAdminServiceServer_Expecter) CheckOrder(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_CheckOrder_Call {
	return &MockAdminServiceServer_CheckOrder_Call{Call: _e.mock.On("CheckOrder", _a0, _a1)}
}

func (_c *MockAdminServiceServer_CheckOrder_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.CheckOrderRequest)) *MockAdminServiceServer_CheckOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.CheckOrderRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_CheckOrder_Call) Return(_a0 *swapAdmin.CheckOrderResponse, _a1 error) *MockAdminServiceServer_CheckOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_CheckOrder_Call) RunAndReturn(run func(context.Context, *swapAdmin.CheckOrderRequest) (*swapAdmin.CheckOrderResponse, error)) *MockAdminServiceServer_CheckOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmAQuote provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) ConfirmAQuote(_a0 context.Context, _a1 *swapAdmin.ConfirmAQuoteRequest) (*swapAdmin.ConfirmAQuoteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmAQuote")
	}

	var r0 *swapAdmin.ConfirmAQuoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.ConfirmAQuoteRequest) (*swapAdmin.ConfirmAQuoteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.ConfirmAQuoteRequest) *swapAdmin.ConfirmAQuoteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.ConfirmAQuoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.ConfirmAQuoteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_ConfirmAQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmAQuote'
type MockAdminServiceServer_ConfirmAQuote_Call struct {
	*mock.Call
}

// ConfirmAQuote is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.ConfirmAQuoteRequest
func (_e *MockAdminServiceServer_Expecter) ConfirmAQuote(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_ConfirmAQuote_Call {
	return &MockAdminServiceServer_ConfirmAQuote_Call{Call: _e.mock.On("ConfirmAQuote", _a0, _a1)}
}

func (_c *MockAdminServiceServer_ConfirmAQuote_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.ConfirmAQuoteRequest)) *MockAdminServiceServer_ConfirmAQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.ConfirmAQuoteRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_ConfirmAQuote_Call) Return(_a0 *swapAdmin.ConfirmAQuoteResponse, _a1 error) *MockAdminServiceServer_ConfirmAQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_ConfirmAQuote_Call) RunAndReturn(run func(context.Context, *swapAdmin.ConfirmAQuoteRequest) (*swapAdmin.ConfirmAQuoteResponse, error)) *MockAdminServiceServer_ConfirmAQuote_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalanceByCoin provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) GetBalanceByCoin(_a0 context.Context, _a1 *swapAdmin.GetBalanceByCoinRequest) (*swapAdmin.GetBalanceByCoinResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceByCoin")
	}

	var r0 *swapAdmin.GetBalanceByCoinResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetBalanceByCoinRequest) (*swapAdmin.GetBalanceByCoinResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetBalanceByCoinRequest) *swapAdmin.GetBalanceByCoinResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetBalanceByCoinResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetBalanceByCoinRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_GetBalanceByCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceByCoin'
type MockAdminServiceServer_GetBalanceByCoin_Call struct {
	*mock.Call
}

// GetBalanceByCoin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.GetBalanceByCoinRequest
func (_e *MockAdminServiceServer_Expecter) GetBalanceByCoin(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_GetBalanceByCoin_Call {
	return &MockAdminServiceServer_GetBalanceByCoin_Call{Call: _e.mock.On("GetBalanceByCoin", _a0, _a1)}
}

func (_c *MockAdminServiceServer_GetBalanceByCoin_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.GetBalanceByCoinRequest)) *MockAdminServiceServer_GetBalanceByCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.GetBalanceByCoinRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_GetBalanceByCoin_Call) Return(_a0 *swapAdmin.GetBalanceByCoinResponse, _a1 error) *MockAdminServiceServer_GetBalanceByCoin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_GetBalanceByCoin_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetBalanceByCoinRequest) (*swapAdmin.GetBalanceByCoinResponse, error)) *MockAdminServiceServer_GetBalanceByCoin_Call {
	_c.Call.Return(run)
	return _c
}

// GetConvertStatus provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) GetConvertStatus(_a0 context.Context, _a1 *swapAdmin.GetConvertStatusRequest) (*swapAdmin.GetConvertStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetConvertStatus")
	}

	var r0 *swapAdmin.GetConvertStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetConvertStatusRequest) (*swapAdmin.GetConvertStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetConvertStatusRequest) *swapAdmin.GetConvertStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetConvertStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetConvertStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_GetConvertStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConvertStatus'
type MockAdminServiceServer_GetConvertStatus_Call struct {
	*mock.Call
}

// GetConvertStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.GetConvertStatusRequest
func (_e *MockAdminServiceServer_Expecter) GetConvertStatus(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_GetConvertStatus_Call {
	return &MockAdminServiceServer_GetConvertStatus_Call{Call: _e.mock.On("GetConvertStatus", _a0, _a1)}
}

func (_c *MockAdminServiceServer_GetConvertStatus_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.GetConvertStatusRequest)) *MockAdminServiceServer_GetConvertStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.GetConvertStatusRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_GetConvertStatus_Call) Return(_a0 *swapAdmin.GetConvertStatusResponse, _a1 error) *MockAdminServiceServer_GetConvertStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_GetConvertStatus_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetConvertStatusRequest) (*swapAdmin.GetConvertStatusResponse, error)) *MockAdminServiceServer_GetConvertStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwapStatusHistory provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) GetSwapStatusHistory(_a0 context.Context, _a1 *swapAdmin.GetSwapStatusHistoryRequest) (*swapAdmin.GetSwapStatusHistoryResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSwapStatusHistory")
	}

	var r0 *swapAdmin.GetSwapStatusHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetSwapStatusHistoryRequest) (*swapAdmin.GetSwapStatusHistoryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetSwapStatusHistoryRequest) *swapAdmin.GetSwapStatusHistoryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetSwapStatusHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetSwapStatusHistoryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_GetSwapStatusHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwapStatusHistory'
type MockAdminServiceServer_GetSwapStatusHistory_Call struct {
	*mock.Call
}

// GetSwapStatusHistory is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.GetSwapStatusHistoryRequest
func (_e *MockAdminServiceServer_Expecter) GetSwapStatusHistory(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_GetSwapStatusHistory_Call {
	return &MockAdminServiceServer_GetSwapStatusHistory_Call{Call: _e.mock.On("GetSwapStatusHistory", _a0, _a1)}
}

func (_c *MockAdminServiceServer_GetSwapStatusHistory_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.GetSwapStatusHistoryRequest)) *MockAdminServiceServer_GetSwapStatusHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.GetSwapStatusHistoryRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_GetSwapStatusHistory_Call) Return(_a0 *swapAdmin.GetSwapStatusHistoryResponse, _a1 error) *MockAdminServiceServer_GetSwapStatusHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_GetSwapStatusHistory_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetSwapStatusHistoryRequest) (*swapAdmin.GetSwapStatusHistoryResponse, error)) *MockAdminServiceServer_GetSwapStatusHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwaps provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) GetSwaps(_a0 context.Context, _a1 *swapAdmin.GetSwapsRequest) (*swapAdmin.GetSwapsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSwaps")
	}

	var r0 *swapAdmin.GetSwapsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetSwapsRequest) (*swapAdmin.GetSwapsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetSwapsRequest) *swapAdmin.GetSwapsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetSwapsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetSwapsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_GetSwaps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwaps'
type MockAdminServiceServer_GetSwaps_Call struct {
	*mock.Call
}

// GetSwaps is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.GetSwapsRequest
func (_e *MockAdminServiceServer_Expecter) GetSwaps(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_GetSwaps_Call {
	return &MockAdminServiceServer_GetSwaps_Call{Call: _e.mock.On("GetSwaps", _a0, _a1)}
}

func (_c *MockAdminServiceServer_GetSwaps_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.GetSwapsRequest)) *MockAdminServiceServer_GetSwaps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.GetSwapsRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_GetSwaps_Call) Return(_a0 *swapAdmin.GetSwapsResponse, _a1 error) *MockAdminServiceServer_GetSwaps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_GetSwaps_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetSwapsRequest) (*swapAdmin.GetSwapsResponse, error)) *MockAdminServiceServer_GetSwaps_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawalLink provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) GetWithdrawalLink(_a0 context.Context, _a1 *swapAdmin.GetWithdrawalLinkRequest) (*swapAdmin.GetWithdrawalLinkResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalLink")
	}

	var r0 *swapAdmin.GetWithdrawalLinkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetWithdrawalLinkRequest) (*swapAdmin.GetWithdrawalLinkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.GetWithdrawalLinkRequest) *swapAdmin.GetWithdrawalLinkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.GetWithdrawalLinkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.GetWithdrawalLinkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_GetWithdrawalLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalLink'
type MockAdminServiceServer_GetWithdrawalLink_Call struct {
	*mock.Call
}

// GetWithdrawalLink is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.GetWithdrawalLinkRequest
func (_e *MockAdminServiceServer_Expecter) GetWithdrawalLink(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_GetWithdrawalLink_Call {
	return &MockAdminServiceServer_GetWithdrawalLink_Call{Call: _e.mock.On("GetWithdrawalLink", _a0, _a1)}
}

func (_c *MockAdminServiceServer_GetWithdrawalLink_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.GetWithdrawalLinkRequest)) *MockAdminServiceServer_GetWithdrawalLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.GetWithdrawalLinkRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_GetWithdrawalLink_Call) Return(_a0 *swapAdmin.GetWithdrawalLinkResponse, _a1 error) *MockAdminServiceServer_GetWithdrawalLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_GetWithdrawalLink_Call) RunAndReturn(run func(context.Context, *swapAdmin.GetWithdrawalLinkRequest) (*swapAdmin.GetWithdrawalLinkResponse, error)) *MockAdminServiceServer_GetWithdrawalLink_Call {
	_c.Call.Return(run)
	return _c
}

// PlaceOrderForUSDT provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) PlaceOrderForUSDT(_a0 context.Context, _a1 *swapAdmin.PlaceOrderForUSDTRequest) (*swapAdmin.PlaceOrderForUSDTResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrderForUSDT")
	}

	var r0 *swapAdmin.PlaceOrderForUSDTResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.PlaceOrderForUSDTRequest) (*swapAdmin.PlaceOrderForUSDTResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.PlaceOrderForUSDTRequest) *swapAdmin.PlaceOrderForUSDTResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.PlaceOrderForUSDTResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.PlaceOrderForUSDTRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_PlaceOrderForUSDT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaceOrderForUSDT'
type MockAdminServiceServer_PlaceOrderForUSDT_Call struct {
	*mock.Call
}

// PlaceOrderForUSDT is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.PlaceOrderForUSDTRequest
func (_e *MockAdminServiceServer_Expecter) PlaceOrderForUSDT(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_PlaceOrderForUSDT_Call {
	return &MockAdminServiceServer_PlaceOrderForUSDT_Call{Call: _e.mock.On("PlaceOrderForUSDT", _a0, _a1)}
}

func (_c *MockAdminServiceServer_PlaceOrderForUSDT_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.PlaceOrderForUSDTRequest)) *MockAdminServiceServer_PlaceOrderForUSDT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.PlaceOrderForUSDTRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_PlaceOrderForUSDT_Call) Return(_a0 *swapAdmin.PlaceOrderForUSDTResponse, _a1 error) *MockAdminServiceServer_PlaceOrderForUSDT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_PlaceOrderForUSDT_Call) RunAndReturn(run func(context.Context, *swapAdmin.PlaceOrderForUSDTRequest) (*swapAdmin.PlaceOrderForUSDTResponse, error)) *MockAdminServiceServer_PlaceOrderForUSDT_Call {
	_c.Call.Return(run)
	return _c
}

// RequestAQuote provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) RequestAQuote(_a0 context.Context, _a1 *swapAdmin.RequestAQuoteRequest) (*swapAdmin.RequestAQuoteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RequestAQuote")
	}

	var r0 *swapAdmin.RequestAQuoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.RequestAQuoteRequest) (*swapAdmin.RequestAQuoteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.RequestAQuoteRequest) *swapAdmin.RequestAQuoteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.RequestAQuoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.RequestAQuoteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_RequestAQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestAQuote'
type MockAdminServiceServer_RequestAQuote_Call struct {
	*mock.Call
}

// RequestAQuote is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.RequestAQuoteRequest
func (_e *MockAdminServiceServer_Expecter) RequestAQuote(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_RequestAQuote_Call {
	return &MockAdminServiceServer_RequestAQuote_Call{Call: _e.mock.On("RequestAQuote", _a0, _a1)}
}

func (_c *MockAdminServiceServer_RequestAQuote_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.RequestAQuoteRequest)) *MockAdminServiceServer_RequestAQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.RequestAQuoteRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_RequestAQuote_Call) Return(_a0 *swapAdmin.RequestAQuoteResponse, _a1 error) *MockAdminServiceServer_RequestAQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_RequestAQuote_Call) RunAndReturn(run func(context.Context, *swapAdmin.RequestAQuoteRequest) (*swapAdmin.RequestAQuoteResponse, error)) *MockAdminServiceServer_RequestAQuote_Call {
	_c.Call.Return(run)
	return _c
}

// SetDestinationAddress provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) SetDestinationAddress(_a0 context.Context, _a1 *swapAdmin.SetDestinationAddressRequest) (*swapAdmin.SetDestinationAddressResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetDestinationAddress")
	}

	var r0 *swapAdmin.SetDestinationAddressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.SetDestinationAddressRequest) (*swapAdmin.SetDestinationAddressResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.SetDestinationAddressRequest) *swapAdmin.SetDestinationAddressResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.SetDestinationAddressResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.SetDestinationAddressRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_SetDestinationAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDestinationAddress'
type MockAdminServiceServer_SetDestinationAddress_Call struct {
	*mock.Call
}

// SetDestinationAddress is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.SetDestinationAddressRequest
func (_e *MockAdminServiceServer_Expecter) SetDestinationAddress(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_SetDestinationAddress_Call {
	return &MockAdminServiceServer_SetDestinationAddress_Call{Call: _e.mock.On("SetDestinationAddress", _a0, _a1)}
}

func (_c *MockAdminServiceServer_SetDestinationAddress_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.SetDestinationAddressRequest)) *MockAdminServiceServer_SetDestinationAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.SetDestinationAddressRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_SetDestinationAddress_Call) Return(_a0 *swapAdmin.SetDestinationAddressResponse, _a1 error) *MockAdminServiceServer_SetDestinationAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_SetDestinationAddress_Call) RunAndReturn(run func(context.Context, *swapAdmin.SetDestinationAddressRequest) (*swapAdmin.SetDestinationAddressResponse, error)) *MockAdminServiceServer_SetDestinationAddress_Call {
	_c.Call.Return(run)
	return _c
}

// TransferBetweenAccountTypes provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) TransferBetweenAccountTypes(_a0 context.Context, _a1 *swapAdmin.TransferBetweenAccountTypesRequest) (*swapAdmin.TransferBetweenAccountTypesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TransferBetweenAccountTypes")
	}

	var r0 *swapAdmin.TransferBetweenAccountTypesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.TransferBetweenAccountTypesRequest) (*swapAdmin.TransferBetweenAccountTypesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.TransferBetweenAccountTypesRequest) *swapAdmin.TransferBetweenAccountTypesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.TransferBetweenAccountTypesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.TransferBetweenAccountTypesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_TransferBetweenAccountTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferBetweenAccountTypes'
type MockAdminServiceServer_TransferBetweenAccountTypes_Call struct {
	*mock.Call
}

// TransferBetweenAccountTypes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.TransferBetweenAccountTypesRequest
func (_e *MockAdminServiceServer_Expecter) TransferBetweenAccountTypes(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_TransferBetweenAccountTypes_Call {
	return &MockAdminServiceServer_TransferBetweenAccountTypes_Call{Call: _e.mock.On("TransferBetweenAccountTypes", _a0, _a1)}
}

func (_c *MockAdminServiceServer_TransferBetweenAccountTypes_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.TransferBetweenAccountTypesRequest)) *MockAdminServiceServer_TransferBetweenAccountTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.TransferBetweenAccountTypesRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_TransferBetweenAccountTypes_Call) Return(_a0 *swapAdmin.TransferBetweenAccountTypesResponse, _a1 error) *MockAdminServiceServer_TransferBetweenAccountTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_TransferBetweenAccountTypes_Call) RunAndReturn(run func(context.Context, *swapAdmin.TransferBetweenAccountTypesRequest) (*swapAdmin.TransferBetweenAccountTypesResponse, error)) *MockAdminServiceServer_TransferBetweenAccountTypes_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: _a0, _a1
func (_m *MockAdminServiceServer) Withdraw(_a0 context.Context, _a1 *swapAdmin.WithdrawRequest) (*swapAdmin.WithdrawResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 *swapAdmin.WithdrawResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.WithdrawRequest) (*swapAdmin.WithdrawResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapAdmin.WithdrawRequest) *swapAdmin.WithdrawResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapAdmin.WithdrawResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapAdmin.WithdrawRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminServiceServer_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type MockAdminServiceServer_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapAdmin.WithdrawRequest
func (_e *MockAdminServiceServer_Expecter) Withdraw(_a0 interface{}, _a1 interface{}) *MockAdminServiceServer_Withdraw_Call {
	return &MockAdminServiceServer_Withdraw_Call{Call: _e.mock.On("Withdraw", _a0, _a1)}
}

func (_c *MockAdminServiceServer_Withdraw_Call) Run(run func(_a0 context.Context, _a1 *swapAdmin.WithdrawRequest)) *MockAdminServiceServer_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapAdmin.WithdrawRequest))
	})
	return _c
}

func (_c *MockAdminServiceServer_Withdraw_Call) Return(_a0 *swapAdmin.WithdrawResponse, _a1 error) *MockAdminServiceServer_Withdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminServiceServer_Withdraw_Call) RunAndReturn(run func(context.Context, *swapAdmin.WithdrawRequest) (*swapAdmin.WithdrawResponse, error)) *MockAdminServiceServer_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAdminServiceServer provides a mock function with given fields:
func (_m *MockAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {
	_m.Called()
}

// MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAdminServiceServer'
type MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAdminServiceServer is a helper method to define mock.On call
func (_e *MockAdminServiceServer_Expecter) mustEmbedUnimplementedAdminServiceServer() *MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call {
	return &MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAdminServiceServer")}
}

func (_c *MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call) Run(run func()) *MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call) Return() *MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call) RunAndReturn(run func()) *MockAdminServiceServer_mustEmbedUnimplementedAdminServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdminServiceServer creates a new instance of MockAdminServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdminServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdminServiceServer {
	mock := &MockAdminServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
