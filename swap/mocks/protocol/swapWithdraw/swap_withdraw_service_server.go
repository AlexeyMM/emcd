// Code generated by mockery v2.46.3. DO NOT EDIT.

package swapWithdraw

import (
	context "context"

	swapWithdraw "code.emcdtech.com/b2b/swap/protocol/swapWithdraw"
	mock "github.com/stretchr/testify/mock"
)

// MockSwapWithdrawServiceServer is an autogenerated mock type for the SwapWithdrawServiceServer type
type MockSwapWithdrawServiceServer struct {
	mock.Mock
}

type MockSwapWithdrawServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwapWithdrawServiceServer) EXPECT() *MockSwapWithdrawServiceServer_Expecter {
	return &MockSwapWithdrawServiceServer_Expecter{mock: &_m.Mock}
}

// GetTransactionLink provides a mock function with given fields: _a0, _a1
func (_m *MockSwapWithdrawServiceServer) GetTransactionLink(_a0 context.Context, _a1 *swapWithdraw.GetTransactionLinkRequest) (*swapWithdraw.GetTransactionLinkResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionLink")
	}

	var r0 *swapWithdraw.GetTransactionLinkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *swapWithdraw.GetTransactionLinkRequest) (*swapWithdraw.GetTransactionLinkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *swapWithdraw.GetTransactionLinkRequest) *swapWithdraw.GetTransactionLinkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*swapWithdraw.GetTransactionLinkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *swapWithdraw.GetTransactionLinkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapWithdrawServiceServer_GetTransactionLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionLink'
type MockSwapWithdrawServiceServer_GetTransactionLink_Call struct {
	*mock.Call
}

// GetTransactionLink is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *swapWithdraw.GetTransactionLinkRequest
func (_e *MockSwapWithdrawServiceServer_Expecter) GetTransactionLink(_a0 interface{}, _a1 interface{}) *MockSwapWithdrawServiceServer_GetTransactionLink_Call {
	return &MockSwapWithdrawServiceServer_GetTransactionLink_Call{Call: _e.mock.On("GetTransactionLink", _a0, _a1)}
}

func (_c *MockSwapWithdrawServiceServer_GetTransactionLink_Call) Run(run func(_a0 context.Context, _a1 *swapWithdraw.GetTransactionLinkRequest)) *MockSwapWithdrawServiceServer_GetTransactionLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*swapWithdraw.GetTransactionLinkRequest))
	})
	return _c
}

func (_c *MockSwapWithdrawServiceServer_GetTransactionLink_Call) Return(_a0 *swapWithdraw.GetTransactionLinkResponse, _a1 error) *MockSwapWithdrawServiceServer_GetTransactionLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapWithdrawServiceServer_GetTransactionLink_Call) RunAndReturn(run func(context.Context, *swapWithdraw.GetTransactionLinkRequest) (*swapWithdraw.GetTransactionLinkResponse, error)) *MockSwapWithdrawServiceServer_GetTransactionLink_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedSwapWithdrawServiceServer provides a mock function with given fields:
func (_m *MockSwapWithdrawServiceServer) mustEmbedUnimplementedSwapWithdrawServiceServer() {
	_m.Called()
}

// MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedSwapWithdrawServiceServer'
type MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedSwapWithdrawServiceServer is a helper method to define mock.On call
func (_e *MockSwapWithdrawServiceServer_Expecter) mustEmbedUnimplementedSwapWithdrawServiceServer() *MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call {
	return &MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedSwapWithdrawServiceServer")}
}

func (_c *MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call) Run(run func()) *MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call) Return() *MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call) RunAndReturn(run func()) *MockSwapWithdrawServiceServer_mustEmbedUnimplementedSwapWithdrawServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSwapWithdrawServiceServer creates a new instance of MockSwapWithdrawServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwapWithdrawServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwapWithdrawServiceServer {
	mock := &MockSwapWithdrawServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
