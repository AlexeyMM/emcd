// Code generated by mockery v2.46.3. DO NOT EDIT.

package client

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockEmail is an autogenerated mock type for the Email type
type MockEmail struct {
	mock.Mock
}

type MockEmail_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmail) EXPECT() *MockEmail_Expecter {
	return &MockEmail_Expecter{mock: &_m.Mock}
}

// SendInitialSwapMessage provides a mock function with given fields: ctx, userEmail, language, swapID
func (_m *MockEmail) SendInitialSwapMessage(ctx context.Context, userEmail string, language string, swapID uuid.UUID) {
	_m.Called(ctx, userEmail, language, swapID)
}

// MockEmail_SendInitialSwapMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInitialSwapMessage'
type MockEmail_SendInitialSwapMessage_Call struct {
	*mock.Call
}

// SendInitialSwapMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - userEmail string
//   - language string
//   - swapID uuid.UUID
func (_e *MockEmail_Expecter) SendInitialSwapMessage(ctx interface{}, userEmail interface{}, language interface{}, swapID interface{}) *MockEmail_SendInitialSwapMessage_Call {
	return &MockEmail_SendInitialSwapMessage_Call{Call: _e.mock.On("SendInitialSwapMessage", ctx, userEmail, language, swapID)}
}

func (_c *MockEmail_SendInitialSwapMessage_Call) Run(run func(ctx context.Context, userEmail string, language string, swapID uuid.UUID)) *MockEmail_SendInitialSwapMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockEmail_SendInitialSwapMessage_Call) Return() *MockEmail_SendInitialSwapMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEmail_SendInitialSwapMessage_Call) RunAndReturn(run func(context.Context, string, string, uuid.UUID)) *MockEmail_SendInitialSwapMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendSuccessfulSwapMessage provides a mock function with given fields: ctx, swap, user
func (_m *MockEmail) SendSuccessfulSwapMessage(ctx context.Context, swap *model.Swap, user *model.User) {
	_m.Called(ctx, swap, user)
}

// MockEmail_SendSuccessfulSwapMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSuccessfulSwapMessage'
type MockEmail_SendSuccessfulSwapMessage_Call struct {
	*mock.Call
}

// SendSuccessfulSwapMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - user *model.User
func (_e *MockEmail_Expecter) SendSuccessfulSwapMessage(ctx interface{}, swap interface{}, user interface{}) *MockEmail_SendSuccessfulSwapMessage_Call {
	return &MockEmail_SendSuccessfulSwapMessage_Call{Call: _e.mock.On("SendSuccessfulSwapMessage", ctx, swap, user)}
}

func (_c *MockEmail_SendSuccessfulSwapMessage_Call) Run(run func(ctx context.Context, swap *model.Swap, user *model.User)) *MockEmail_SendSuccessfulSwapMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(*model.User))
	})
	return _c
}

func (_c *MockEmail_SendSuccessfulSwapMessage_Call) Return() *MockEmail_SendSuccessfulSwapMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEmail_SendSuccessfulSwapMessage_Call) RunAndReturn(run func(context.Context, *model.Swap, *model.User)) *MockEmail_SendSuccessfulSwapMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmail creates a new instance of MockEmail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmail(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmail {
	mock := &MockEmail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
