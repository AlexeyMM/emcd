// Code generated by mockery v2.46.3. DO NOT EDIT.

package client

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "code.emcdtech.com/b2b/swap/model"

	time "time"
)

// MockExchangeAccount is an autogenerated mock type for the ExchangeAccount type
type MockExchangeAccount struct {
	mock.Mock
}

type MockExchangeAccount_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExchangeAccount) EXPECT() *MockExchangeAccount_Expecter {
	return &MockExchangeAccount_Expecter{mock: &_m.Mock}
}

// CreateSubAPIKey provides a mock function with given fields: ctx, accountID
func (_m *MockExchangeAccount) CreateSubAPIKey(ctx context.Context, accountID int) (*model.Secrets, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubAPIKey")
	}

	var r0 *model.Secrets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Secrets, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Secrets); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Secrets)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeAccount_CreateSubAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubAPIKey'
type MockExchangeAccount_CreateSubAPIKey_Call struct {
	*mock.Call
}

// CreateSubAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int
func (_e *MockExchangeAccount_Expecter) CreateSubAPIKey(ctx interface{}, accountID interface{}) *MockExchangeAccount_CreateSubAPIKey_Call {
	return &MockExchangeAccount_CreateSubAPIKey_Call{Call: _e.mock.On("CreateSubAPIKey", ctx, accountID)}
}

func (_c *MockExchangeAccount_CreateSubAPIKey_Call) Run(run func(ctx context.Context, accountID int)) *MockExchangeAccount_CreateSubAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockExchangeAccount_CreateSubAPIKey_Call) Return(_a0 *model.Secrets, _a1 error) *MockExchangeAccount_CreateSubAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeAccount_CreateSubAPIKey_Call) RunAndReturn(run func(context.Context, int) (*model.Secrets, error)) *MockExchangeAccount_CreateSubAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubAccount provides a mock function with given fields: ctx
func (_m *MockExchangeAccount) CreateSubAccount(ctx context.Context) (*model.Account, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubAccount")
	}

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.Account, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeAccount_CreateSubAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubAccount'
type MockExchangeAccount_CreateSubAccount_Call struct {
	*mock.Call
}

// CreateSubAccount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockExchangeAccount_Expecter) CreateSubAccount(ctx interface{}) *MockExchangeAccount_CreateSubAccount_Call {
	return &MockExchangeAccount_CreateSubAccount_Call{Call: _e.mock.On("CreateSubAccount", ctx)}
}

func (_c *MockExchangeAccount_CreateSubAccount_Call) Run(run func(ctx context.Context)) *MockExchangeAccount_CreateSubAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockExchangeAccount_CreateSubAccount_Call) Return(_a0 *model.Account, _a1 error) *MockExchangeAccount_CreateSubAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeAccount_CreateSubAccount_Call) RunAndReturn(run func(context.Context) (*model.Account, error)) *MockExchangeAccount_CreateSubAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubAPIKey provides a mock function with given fields: ctx, apiKey
func (_m *MockExchangeAccount) DeleteSubAPIKey(ctx context.Context, apiKey string) error {
	ret := _m.Called(ctx, apiKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExchangeAccount_DeleteSubAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubAPIKey'
type MockExchangeAccount_DeleteSubAPIKey_Call struct {
	*mock.Call
}

// DeleteSubAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey string
func (_e *MockExchangeAccount_Expecter) DeleteSubAPIKey(ctx interface{}, apiKey interface{}) *MockExchangeAccount_DeleteSubAPIKey_Call {
	return &MockExchangeAccount_DeleteSubAPIKey_Call{Call: _e.mock.On("DeleteSubAPIKey", ctx, apiKey)}
}

func (_c *MockExchangeAccount_DeleteSubAPIKey_Call) Run(run func(ctx context.Context, apiKey string)) *MockExchangeAccount_DeleteSubAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockExchangeAccount_DeleteSubAPIKey_Call) Return(_a0 error) *MockExchangeAccount_DeleteSubAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExchangeAccount_DeleteSubAPIKey_Call) RunAndReturn(run func(context.Context, string) error) *MockExchangeAccount_DeleteSubAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubAccount provides a mock function with given fields: ctx, id
func (_m *MockExchangeAccount) DeleteSubAccount(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExchangeAccount_DeleteSubAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubAccount'
type MockExchangeAccount_DeleteSubAccount_Call struct {
	*mock.Call
}

// DeleteSubAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockExchangeAccount_Expecter) DeleteSubAccount(ctx interface{}, id interface{}) *MockExchangeAccount_DeleteSubAccount_Call {
	return &MockExchangeAccount_DeleteSubAccount_Call{Call: _e.mock.On("DeleteSubAccount", ctx, id)}
}

func (_c *MockExchangeAccount_DeleteSubAccount_Call) Run(run func(ctx context.Context, id int)) *MockExchangeAccount_DeleteSubAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockExchangeAccount_DeleteSubAccount_Call) Return(_a0 error) *MockExchangeAccount_DeleteSubAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExchangeAccount_DeleteSubAccount_Call) RunAndReturn(run func(context.Context, int) error) *MockExchangeAccount_DeleteSubAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalanceByCoin provides a mock function with given fields: ctx, accountID, coin, accountType
func (_m *MockExchangeAccount) GetBalanceByCoin(ctx context.Context, accountID int, coin string, accountType string) (*model.Balance, error) {
	ret := _m.Called(ctx, accountID, coin, accountType)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceByCoin")
	}

	var r0 *model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) (*model.Balance, error)); ok {
		return rf(ctx, accountID, coin, accountType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) *model.Balance); ok {
		r0 = rf(ctx, accountID, coin, accountType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string) error); ok {
		r1 = rf(ctx, accountID, coin, accountType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeAccount_GetBalanceByCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceByCoin'
type MockExchangeAccount_GetBalanceByCoin_Call struct {
	*mock.Call
}

// GetBalanceByCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int
//   - coin string
//   - accountType string
func (_e *MockExchangeAccount_Expecter) GetBalanceByCoin(ctx interface{}, accountID interface{}, coin interface{}, accountType interface{}) *MockExchangeAccount_GetBalanceByCoin_Call {
	return &MockExchangeAccount_GetBalanceByCoin_Call{Call: _e.mock.On("GetBalanceByCoin", ctx, accountID, coin, accountType)}
}

func (_c *MockExchangeAccount_GetBalanceByCoin_Call) Run(run func(ctx context.Context, accountID int, coin string, accountType string)) *MockExchangeAccount_GetBalanceByCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockExchangeAccount_GetBalanceByCoin_Call) Return(_a0 *model.Balance, _a1 error) *MockExchangeAccount_GetBalanceByCoin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeAccount_GetBalanceByCoin_Call) RunAndReturn(run func(context.Context, int, string, string) (*model.Balance, error)) *MockExchangeAccount_GetBalanceByCoin_Call {
	_c.Call.Return(run)
	return _c
}

// GetDepositRecords provides a mock function with given fields: ctx, coin, startTime, subAccApikey, subAccApiSecret
func (_m *MockExchangeAccount) GetDepositRecords(ctx context.Context, coin string, startTime time.Time, subAccApikey string, subAccApiSecret string) ([]*model.Deposit, error) {
	ret := _m.Called(ctx, coin, startTime, subAccApikey, subAccApiSecret)

	if len(ret) == 0 {
		panic("no return value specified for GetDepositRecords")
	}

	var r0 []*model.Deposit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, string, string) ([]*model.Deposit, error)); ok {
		return rf(ctx, coin, startTime, subAccApikey, subAccApiSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, string, string) []*model.Deposit); ok {
		r0 = rf(ctx, coin, startTime, subAccApikey, subAccApiSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Deposit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, string, string) error); ok {
		r1 = rf(ctx, coin, startTime, subAccApikey, subAccApiSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeAccount_GetDepositRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepositRecords'
type MockExchangeAccount_GetDepositRecords_Call struct {
	*mock.Call
}

// GetDepositRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - coin string
//   - startTime time.Time
//   - subAccApikey string
//   - subAccApiSecret string
func (_e *MockExchangeAccount_Expecter) GetDepositRecords(ctx interface{}, coin interface{}, startTime interface{}, subAccApikey interface{}, subAccApiSecret interface{}) *MockExchangeAccount_GetDepositRecords_Call {
	return &MockExchangeAccount_GetDepositRecords_Call{Call: _e.mock.On("GetDepositRecords", ctx, coin, startTime, subAccApikey, subAccApiSecret)}
}

func (_c *MockExchangeAccount_GetDepositRecords_Call) Run(run func(ctx context.Context, coin string, startTime time.Time, subAccApikey string, subAccApiSecret string)) *MockExchangeAccount_GetDepositRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockExchangeAccount_GetDepositRecords_Call) Return(_a0 []*model.Deposit, _a1 error) *MockExchangeAccount_GetDepositRecords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeAccount_GetDepositRecords_Call) RunAndReturn(run func(context.Context, string, time.Time, string, string) ([]*model.Deposit, error)) *MockExchangeAccount_GetDepositRecords_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubAccounts provides a mock function with given fields: ctx
func (_m *MockExchangeAccount) GetSubAccounts(ctx context.Context) ([]*model.Account, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSubAccounts")
	}

	var r0 []*model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Account, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeAccount_GetSubAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubAccounts'
type MockExchangeAccount_GetSubAccounts_Call struct {
	*mock.Call
}

// GetSubAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockExchangeAccount_Expecter) GetSubAccounts(ctx interface{}) *MockExchangeAccount_GetSubAccounts_Call {
	return &MockExchangeAccount_GetSubAccounts_Call{Call: _e.mock.On("GetSubAccounts", ctx)}
}

func (_c *MockExchangeAccount_GetSubAccounts_Call) Run(run func(ctx context.Context)) *MockExchangeAccount_GetSubAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockExchangeAccount_GetSubAccounts_Call) Return(_a0 []*model.Account, _a1 error) *MockExchangeAccount_GetSubAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeAccount_GetSubAccounts_Call) RunAndReturn(run func(context.Context) ([]*model.Account, error)) *MockExchangeAccount_GetSubAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubDepositAddress provides a mock function with given fields: ctx, accountID, coin, network
func (_m *MockExchangeAccount) GetSubDepositAddress(ctx context.Context, accountID int, coin string, network string) (*model.AddressData, error) {
	ret := _m.Called(ctx, accountID, coin, network)

	if len(ret) == 0 {
		panic("no return value specified for GetSubDepositAddress")
	}

	var r0 *model.AddressData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) (*model.AddressData, error)); ok {
		return rf(ctx, accountID, coin, network)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) *model.AddressData); ok {
		r0 = rf(ctx, accountID, coin, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddressData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string) error); ok {
		r1 = rf(ctx, accountID, coin, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeAccount_GetSubDepositAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubDepositAddress'
type MockExchangeAccount_GetSubDepositAddress_Call struct {
	*mock.Call
}

// GetSubDepositAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int
//   - coin string
//   - network string
func (_e *MockExchangeAccount_Expecter) GetSubDepositAddress(ctx interface{}, accountID interface{}, coin interface{}, network interface{}) *MockExchangeAccount_GetSubDepositAddress_Call {
	return &MockExchangeAccount_GetSubDepositAddress_Call{Call: _e.mock.On("GetSubDepositAddress", ctx, accountID, coin, network)}
}

func (_c *MockExchangeAccount_GetSubDepositAddress_Call) Run(run func(ctx context.Context, accountID int, coin string, network string)) *MockExchangeAccount_GetSubDepositAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockExchangeAccount_GetSubDepositAddress_Call) Return(_a0 *model.AddressData, _a1 error) *MockExchangeAccount_GetSubDepositAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeAccount_GetSubDepositAddress_Call) RunAndReturn(run func(context.Context, int, string, string) (*model.AddressData, error)) *MockExchangeAccount_GetSubDepositAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawalAmount provides a mock function with given fields: ctx, coin
func (_m *MockExchangeAccount) GetWithdrawalAmount(ctx context.Context, coin string) (decimal.Decimal, error) {
	ret := _m.Called(ctx, coin)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalAmount")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (decimal.Decimal, error)); ok {
		return rf(ctx, coin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) decimal.Decimal); ok {
		r0 = rf(ctx, coin)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, coin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeAccount_GetWithdrawalAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalAmount'
type MockExchangeAccount_GetWithdrawalAmount_Call struct {
	*mock.Call
}

// GetWithdrawalAmount is a helper method to define mock.On call
//   - ctx context.Context
//   - coin string
func (_e *MockExchangeAccount_Expecter) GetWithdrawalAmount(ctx interface{}, coin interface{}) *MockExchangeAccount_GetWithdrawalAmount_Call {
	return &MockExchangeAccount_GetWithdrawalAmount_Call{Call: _e.mock.On("GetWithdrawalAmount", ctx, coin)}
}

func (_c *MockExchangeAccount_GetWithdrawalAmount_Call) Run(run func(ctx context.Context, coin string)) *MockExchangeAccount_GetWithdrawalAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockExchangeAccount_GetWithdrawalAmount_Call) Return(_a0 decimal.Decimal, _a1 error) *MockExchangeAccount_GetWithdrawalAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeAccount_GetWithdrawalAmount_Call) RunAndReturn(run func(context.Context, string) (decimal.Decimal, error)) *MockExchangeAccount_GetWithdrawalAmount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExchangeAccount creates a new instance of MockExchangeAccount. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchangeAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchangeAccount {
	mock := &MockExchangeAccount{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
