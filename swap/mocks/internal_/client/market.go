// Code generated by mockery v2.46.3. DO NOT EDIT.

package client

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "code.emcdtech.com/b2b/swap/model"

	uuid "github.com/google/uuid"
)

// MockMarket is an autogenerated mock type for the Market type
type MockMarket struct {
	mock.Mock
}

type MockMarket_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMarket) EXPECT() *MockMarket_Expecter {
	return &MockMarket_Expecter{mock: &_m.Mock}
}

// ConfirmAQuote provides a mock function with given fields: ctx, id
func (_m *MockMarket) ConfirmAQuote(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmAQuote")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarket_ConfirmAQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmAQuote'
type MockMarket_ConfirmAQuote_Call struct {
	*mock.Call
}

// ConfirmAQuote is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMarket_Expecter) ConfirmAQuote(ctx interface{}, id interface{}) *MockMarket_ConfirmAQuote_Call {
	return &MockMarket_ConfirmAQuote_Call{Call: _e.mock.On("ConfirmAQuote", ctx, id)}
}

func (_c *MockMarket_ConfirmAQuote_Call) Run(run func(ctx context.Context, id string)) *MockMarket_ConfirmAQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMarket_ConfirmAQuote_Call) Return(_a0 string, _a1 error) *MockMarket_ConfirmAQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarket_ConfirmAQuote_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockMarket_ConfirmAQuote_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFeeRate provides a mock function with given fields: ctx
func (_m *MockMarket) GetAllFeeRate(ctx context.Context) (map[string]*model.Fee, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFeeRate")
	}

	var r0 map[string]*model.Fee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]*model.Fee, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]*model.Fee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Fee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarket_GetAllFeeRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFeeRate'
type MockMarket_GetAllFeeRate_Call struct {
	*mock.Call
}

// GetAllFeeRate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMarket_Expecter) GetAllFeeRate(ctx interface{}) *MockMarket_GetAllFeeRate_Call {
	return &MockMarket_GetAllFeeRate_Call{Call: _e.mock.On("GetAllFeeRate", ctx)}
}

func (_c *MockMarket_GetAllFeeRate_Call) Run(run func(ctx context.Context)) *MockMarket_GetAllFeeRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMarket_GetAllFeeRate_Call) Return(_a0 map[string]*model.Fee, _a1 error) *MockMarket_GetAllFeeRate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarket_GetAllFeeRate_Call) RunAndReturn(run func(context.Context) (map[string]*model.Fee, error)) *MockMarket_GetAllFeeRate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoinInfo provides a mock function with given fields: ctx
func (_m *MockMarket) GetCoinInfo(ctx context.Context) ([]*model.Coin, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinInfo")
	}

	var r0 []*model.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Coin, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Coin); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarket_GetCoinInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoinInfo'
type MockMarket_GetCoinInfo_Call struct {
	*mock.Call
}

// GetCoinInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMarket_Expecter) GetCoinInfo(ctx interface{}) *MockMarket_GetCoinInfo_Call {
	return &MockMarket_GetCoinInfo_Call{Call: _e.mock.On("GetCoinInfo", ctx)}
}

func (_c *MockMarket_GetCoinInfo_Call) Run(run func(ctx context.Context)) *MockMarket_GetCoinInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMarket_GetCoinInfo_Call) Return(_a0 []*model.Coin, _a1 error) *MockMarket_GetCoinInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarket_GetCoinInfo_Call) RunAndReturn(run func(context.Context) ([]*model.Coin, error)) *MockMarket_GetCoinInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetConvertCoinList provides a mock function with given fields: ctx
func (_m *MockMarket) GetConvertCoinList(ctx context.Context) (map[string]int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConvertCoinList")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarket_GetConvertCoinList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConvertCoinList'
type MockMarket_GetConvertCoinList_Call struct {
	*mock.Call
}

// GetConvertCoinList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMarket_Expecter) GetConvertCoinList(ctx interface{}) *MockMarket_GetConvertCoinList_Call {
	return &MockMarket_GetConvertCoinList_Call{Call: _e.mock.On("GetConvertCoinList", ctx)}
}

func (_c *MockMarket_GetConvertCoinList_Call) Run(run func(ctx context.Context)) *MockMarket_GetConvertCoinList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMarket_GetConvertCoinList_Call) Return(_a0 map[string]int, _a1 error) *MockMarket_GetConvertCoinList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarket_GetConvertCoinList_Call) RunAndReturn(run func(context.Context) (map[string]int, error)) *MockMarket_GetConvertCoinList_Call {
	_c.Call.Return(run)
	return _c
}

// GetConvertStatus provides a mock function with given fields: ctx, id, accountType
func (_m *MockMarket) GetConvertStatus(ctx context.Context, id string, accountType string) (string, error) {
	ret := _m.Called(ctx, id, accountType)

	if len(ret) == 0 {
		panic("no return value specified for GetConvertStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, id, accountType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, accountType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, accountType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarket_GetConvertStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConvertStatus'
type MockMarket_GetConvertStatus_Call struct {
	*mock.Call
}

// GetConvertStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - accountType string
func (_e *MockMarket_Expecter) GetConvertStatus(ctx interface{}, id interface{}, accountType interface{}) *MockMarket_GetConvertStatus_Call {
	return &MockMarket_GetConvertStatus_Call{Call: _e.mock.On("GetConvertStatus", ctx, id, accountType)}
}

func (_c *MockMarket_GetConvertStatus_Call) Run(run func(ctx context.Context, id string, accountType string)) *MockMarket_GetConvertStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMarket_GetConvertStatus_Call) Return(_a0 string, _a1 error) *MockMarket_GetConvertStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarket_GetConvertStatus_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockMarket_GetConvertStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstrumentsInfo provides a mock function with given fields: ctx
func (_m *MockMarket) GetInstrumentsInfo(ctx context.Context) (map[string]*model.Symbol, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInstrumentsInfo")
	}

	var r0 map[string]*model.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]*model.Symbol, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]*model.Symbol); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarket_GetInstrumentsInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstrumentsInfo'
type MockMarket_GetInstrumentsInfo_Call struct {
	*mock.Call
}

// GetInstrumentsInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMarket_Expecter) GetInstrumentsInfo(ctx interface{}) *MockMarket_GetInstrumentsInfo_Call {
	return &MockMarket_GetInstrumentsInfo_Call{Call: _e.mock.On("GetInstrumentsInfo", ctx)}
}

func (_c *MockMarket_GetInstrumentsInfo_Call) Run(run func(ctx context.Context)) *MockMarket_GetInstrumentsInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMarket_GetInstrumentsInfo_Call) Return(_a0 map[string]*model.Symbol, _a1 error) *MockMarket_GetInstrumentsInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarket_GetInstrumentsInfo_Call) RunAndReturn(run func(context.Context) (map[string]*model.Symbol, error)) *MockMarket_GetInstrumentsInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderStatus provides a mock function with given fields: ctx, orderID, subApiKey, subApiSecret
func (_m *MockMarket) GetOrderStatus(ctx context.Context, orderID uuid.UUID, subApiKey string, subApiSecret string) (model.OrderStatus, error) {
	ret := _m.Called(ctx, orderID, subApiKey, subApiSecret)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderStatus")
	}

	var r0 model.OrderStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) (model.OrderStatus, error)); ok {
		return rf(ctx, orderID, subApiKey, subApiSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) model.OrderStatus); ok {
		r0 = rf(ctx, orderID, subApiKey, subApiSecret)
	} else {
		r0 = ret.Get(0).(model.OrderStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, orderID, subApiKey, subApiSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarket_GetOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderStatus'
type MockMarket_GetOrderStatus_Call struct {
	*mock.Call
}

// GetOrderStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID uuid.UUID
//   - subApiKey string
//   - subApiSecret string
func (_e *MockMarket_Expecter) GetOrderStatus(ctx interface{}, orderID interface{}, subApiKey interface{}, subApiSecret interface{}) *MockMarket_GetOrderStatus_Call {
	return &MockMarket_GetOrderStatus_Call{Call: _e.mock.On("GetOrderStatus", ctx, orderID, subApiKey, subApiSecret)}
}

func (_c *MockMarket_GetOrderStatus_Call) Run(run func(ctx context.Context, orderID uuid.UUID, subApiKey string, subApiSecret string)) *MockMarket_GetOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockMarket_GetOrderStatus_Call) Return(_a0 model.OrderStatus, _a1 error) *MockMarket_GetOrderStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarket_GetOrderStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) (model.OrderStatus, error)) *MockMarket_GetOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// PlaceOrder provides a mock function with given fields: ctx, order, secrets
func (_m *MockMarket) PlaceOrder(ctx context.Context, order *model.Order, secrets *model.Secrets) error {
	ret := _m.Called(ctx, order, secrets)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order, *model.Secrets) error); ok {
		r0 = rf(ctx, order, secrets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMarket_PlaceOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaceOrder'
type MockMarket_PlaceOrder_Call struct {
	*mock.Call
}

// PlaceOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *model.Order
//   - secrets *model.Secrets
func (_e *MockMarket_Expecter) PlaceOrder(ctx interface{}, order interface{}, secrets interface{}) *MockMarket_PlaceOrder_Call {
	return &MockMarket_PlaceOrder_Call{Call: _e.mock.On("PlaceOrder", ctx, order, secrets)}
}

func (_c *MockMarket_PlaceOrder_Call) Run(run func(ctx context.Context, order *model.Order, secrets *model.Secrets)) *MockMarket_PlaceOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Order), args[2].(*model.Secrets))
	})
	return _c
}

func (_c *MockMarket_PlaceOrder_Call) Return(_a0 error) *MockMarket_PlaceOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMarket_PlaceOrder_Call) RunAndReturn(run func(context.Context, *model.Order, *model.Secrets) error) *MockMarket_PlaceOrder_Call {
	_c.Call.Return(run)
	return _c
}

// RequestAQuote provides a mock function with given fields: ctx, from, to, accountType, amount
func (_m *MockMarket) RequestAQuote(ctx context.Context, from string, to string, accountType string, amount decimal.Decimal) (*model.Quote, error) {
	ret := _m.Called(ctx, from, to, accountType, amount)

	if len(ret) == 0 {
		panic("no return value specified for RequestAQuote")
	}

	var r0 *model.Quote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, decimal.Decimal) (*model.Quote, error)); ok {
		return rf(ctx, from, to, accountType, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, decimal.Decimal) *model.Quote); ok {
		r0 = rf(ctx, from, to, accountType, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Quote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, decimal.Decimal) error); ok {
		r1 = rf(ctx, from, to, accountType, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarket_RequestAQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestAQuote'
type MockMarket_RequestAQuote_Call struct {
	*mock.Call
}

// RequestAQuote is a helper method to define mock.On call
//   - ctx context.Context
//   - from string
//   - to string
//   - accountType string
//   - amount decimal.Decimal
func (_e *MockMarket_Expecter) RequestAQuote(ctx interface{}, from interface{}, to interface{}, accountType interface{}, amount interface{}) *MockMarket_RequestAQuote_Call {
	return &MockMarket_RequestAQuote_Call{Call: _e.mock.On("RequestAQuote", ctx, from, to, accountType, amount)}
}

func (_c *MockMarket_RequestAQuote_Call) Run(run func(ctx context.Context, from string, to string, accountType string, amount decimal.Decimal)) *MockMarket_RequestAQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(decimal.Decimal))
	})
	return _c
}

func (_c *MockMarket_RequestAQuote_Call) Return(_a0 *model.Quote, _a1 error) *MockMarket_RequestAQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarket_RequestAQuote_Call) RunAndReturn(run func(context.Context, string, string, string, decimal.Decimal) (*model.Quote, error)) *MockMarket_RequestAQuote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMarket creates a new instance of MockMarket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMarket(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMarket {
	mock := &MockMarket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
