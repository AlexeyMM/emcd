// Code generated by mockery v2.46.3. DO NOT EDIT.

package client

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockExchangeTransaction is an autogenerated mock type for the ExchangeTransaction type
type MockExchangeTransaction struct {
	mock.Mock
}

type MockExchangeTransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExchangeTransaction) EXPECT() *MockExchangeTransaction_Expecter {
	return &MockExchangeTransaction_Expecter{mock: &_m.Mock}
}

// CreateInternalTransfer provides a mock function with given fields: ctx, trs, apiKey, apiSecret
func (_m *MockExchangeTransaction) CreateInternalTransfer(ctx context.Context, trs *model.InternalTransfer, apiKey string, apiSecret string) (*model.InternalTransfer, error) {
	ret := _m.Called(ctx, trs, apiKey, apiSecret)

	if len(ret) == 0 {
		panic("no return value specified for CreateInternalTransfer")
	}

	var r0 *model.InternalTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.InternalTransfer, string, string) (*model.InternalTransfer, error)); ok {
		return rf(ctx, trs, apiKey, apiSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.InternalTransfer, string, string) *model.InternalTransfer); ok {
		r0 = rf(ctx, trs, apiKey, apiSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.InternalTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.InternalTransfer, string, string) error); ok {
		r1 = rf(ctx, trs, apiKey, apiSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeTransaction_CreateInternalTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInternalTransfer'
type MockExchangeTransaction_CreateInternalTransfer_Call struct {
	*mock.Call
}

// CreateInternalTransfer is a helper method to define mock.On call
//   - ctx context.Context
//   - trs *model.InternalTransfer
//   - apiKey string
//   - apiSecret string
func (_e *MockExchangeTransaction_Expecter) CreateInternalTransfer(ctx interface{}, trs interface{}, apiKey interface{}, apiSecret interface{}) *MockExchangeTransaction_CreateInternalTransfer_Call {
	return &MockExchangeTransaction_CreateInternalTransfer_Call{Call: _e.mock.On("CreateInternalTransfer", ctx, trs, apiKey, apiSecret)}
}

func (_c *MockExchangeTransaction_CreateInternalTransfer_Call) Run(run func(ctx context.Context, trs *model.InternalTransfer, apiKey string, apiSecret string)) *MockExchangeTransaction_CreateInternalTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.InternalTransfer), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockExchangeTransaction_CreateInternalTransfer_Call) Return(_a0 *model.InternalTransfer, _a1 error) *MockExchangeTransaction_CreateInternalTransfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeTransaction_CreateInternalTransfer_Call) RunAndReturn(run func(context.Context, *model.InternalTransfer, string, string) (*model.InternalTransfer, error)) *MockExchangeTransaction_CreateInternalTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransfer provides a mock function with given fields: ctx, transferID
func (_m *MockExchangeTransaction) GetTransfer(ctx context.Context, transferID uuid.UUID) (*model.InternalTransfer, error) {
	ret := _m.Called(ctx, transferID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransfer")
	}

	var r0 *model.InternalTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.InternalTransfer, error)); ok {
		return rf(ctx, transferID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.InternalTransfer); ok {
		r0 = rf(ctx, transferID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.InternalTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, transferID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeTransaction_GetTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransfer'
type MockExchangeTransaction_GetTransfer_Call struct {
	*mock.Call
}

// GetTransfer is a helper method to define mock.On call
//   - ctx context.Context
//   - transferID uuid.UUID
func (_e *MockExchangeTransaction_Expecter) GetTransfer(ctx interface{}, transferID interface{}) *MockExchangeTransaction_GetTransfer_Call {
	return &MockExchangeTransaction_GetTransfer_Call{Call: _e.mock.On("GetTransfer", ctx, transferID)}
}

func (_c *MockExchangeTransaction_GetTransfer_Call) Run(run func(ctx context.Context, transferID uuid.UUID)) *MockExchangeTransaction_GetTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockExchangeTransaction_GetTransfer_Call) Return(_a0 *model.InternalTransfer, _a1 error) *MockExchangeTransaction_GetTransfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeTransaction_GetTransfer_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.InternalTransfer, error)) *MockExchangeTransaction_GetTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdraw provides a mock function with given fields: ctx, withdrawID
func (_m *MockExchangeTransaction) GetWithdraw(ctx context.Context, withdrawID int) (*model.Withdraw, error) {
	ret := _m.Called(ctx, withdrawID)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdraw")
	}

	var r0 *model.Withdraw
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Withdraw, error)); ok {
		return rf(ctx, withdrawID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Withdraw); ok {
		r0 = rf(ctx, withdrawID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Withdraw)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, withdrawID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeTransaction_GetWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdraw'
type MockExchangeTransaction_GetWithdraw_Call struct {
	*mock.Call
}

// GetWithdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - withdrawID int
func (_e *MockExchangeTransaction_Expecter) GetWithdraw(ctx interface{}, withdrawID interface{}) *MockExchangeTransaction_GetWithdraw_Call {
	return &MockExchangeTransaction_GetWithdraw_Call{Call: _e.mock.On("GetWithdraw", ctx, withdrawID)}
}

func (_c *MockExchangeTransaction_GetWithdraw_Call) Run(run func(ctx context.Context, withdrawID int)) *MockExchangeTransaction_GetWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockExchangeTransaction_GetWithdraw_Call) Return(_a0 *model.Withdraw, _a1 error) *MockExchangeTransaction_GetWithdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeTransaction_GetWithdraw_Call) RunAndReturn(run func(context.Context, int) (*model.Withdraw, error)) *MockExchangeTransaction_GetWithdraw_Call {
	_c.Call.Return(run)
	return _c
}

// TransferFromSubToMaster provides a mock function with given fields: ctx, transfer
func (_m *MockExchangeTransaction) TransferFromSubToMaster(ctx context.Context, transfer *model.InternalTransfer) (model.InternalTransferStatus, error) {
	ret := _m.Called(ctx, transfer)

	if len(ret) == 0 {
		panic("no return value specified for TransferFromSubToMaster")
	}

	var r0 model.InternalTransferStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.InternalTransfer) (model.InternalTransferStatus, error)); ok {
		return rf(ctx, transfer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.InternalTransfer) model.InternalTransferStatus); ok {
		r0 = rf(ctx, transfer)
	} else {
		r0 = ret.Get(0).(model.InternalTransferStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.InternalTransfer) error); ok {
		r1 = rf(ctx, transfer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeTransaction_TransferFromSubToMaster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferFromSubToMaster'
type MockExchangeTransaction_TransferFromSubToMaster_Call struct {
	*mock.Call
}

// TransferFromSubToMaster is a helper method to define mock.On call
//   - ctx context.Context
//   - transfer *model.InternalTransfer
func (_e *MockExchangeTransaction_Expecter) TransferFromSubToMaster(ctx interface{}, transfer interface{}) *MockExchangeTransaction_TransferFromSubToMaster_Call {
	return &MockExchangeTransaction_TransferFromSubToMaster_Call{Call: _e.mock.On("TransferFromSubToMaster", ctx, transfer)}
}

func (_c *MockExchangeTransaction_TransferFromSubToMaster_Call) Run(run func(ctx context.Context, transfer *model.InternalTransfer)) *MockExchangeTransaction_TransferFromSubToMaster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.InternalTransfer))
	})
	return _c
}

func (_c *MockExchangeTransaction_TransferFromSubToMaster_Call) Return(_a0 model.InternalTransferStatus, _a1 error) *MockExchangeTransaction_TransferFromSubToMaster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeTransaction_TransferFromSubToMaster_Call) RunAndReturn(run func(context.Context, *model.InternalTransfer) (model.InternalTransferStatus, error)) *MockExchangeTransaction_TransferFromSubToMaster_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, withdraw
func (_m *MockExchangeTransaction) Withdraw(ctx context.Context, withdraw *model.Withdraw) (int64, error) {
	ret := _m.Called(ctx, withdraw)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Withdraw) (int64, error)); ok {
		return rf(ctx, withdraw)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Withdraw) int64); ok {
		r0 = rf(ctx, withdraw)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Withdraw) error); ok {
		r1 = rf(ctx, withdraw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExchangeTransaction_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type MockExchangeTransaction_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - withdraw *model.Withdraw
func (_e *MockExchangeTransaction_Expecter) Withdraw(ctx interface{}, withdraw interface{}) *MockExchangeTransaction_Withdraw_Call {
	return &MockExchangeTransaction_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, withdraw)}
}

func (_c *MockExchangeTransaction_Withdraw_Call) Run(run func(ctx context.Context, withdraw *model.Withdraw)) *MockExchangeTransaction_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Withdraw))
	})
	return _c
}

func (_c *MockExchangeTransaction_Withdraw_Call) Return(_a0 int64, _a1 error) *MockExchangeTransaction_Withdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExchangeTransaction_Withdraw_Call) RunAndReturn(run func(context.Context, *model.Withdraw) (int64, error)) *MockExchangeTransaction_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExchangeTransaction creates a new instance of MockExchangeTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchangeTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchangeTransaction {
	mock := &MockExchangeTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
