// Code generated by mockery v2.46.3. DO NOT EDIT.

package client

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCoin is an autogenerated mock type for the Coin type
type MockCoin struct {
	mock.Mock
}

type MockCoin_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoin) EXPECT() *MockCoin_Expecter {
	return &MockCoin_Expecter{mock: &_m.Mock}
}

// GetCoinsInfo provides a mock function with given fields: ctx
func (_m *MockCoin) GetCoinsInfo(ctx context.Context) (map[string]*model.CoinInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsInfo")
	}

	var r0 map[string]*model.CoinInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]*model.CoinInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]*model.CoinInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.CoinInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoin_GetCoinsInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoinsInfo'
type MockCoin_GetCoinsInfo_Call struct {
	*mock.Call
}

// GetCoinsInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCoin_Expecter) GetCoinsInfo(ctx interface{}) *MockCoin_GetCoinsInfo_Call {
	return &MockCoin_GetCoinsInfo_Call{Call: _e.mock.On("GetCoinsInfo", ctx)}
}

func (_c *MockCoin_GetCoinsInfo_Call) Run(run func(ctx context.Context)) *MockCoin_GetCoinsInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCoin_GetCoinsInfo_Call) Return(_a0 map[string]*model.CoinInfo, _a1 error) *MockCoin_GetCoinsInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCoin_GetCoinsInfo_Call) RunAndReturn(run func(context.Context) (map[string]*model.CoinInfo, error)) *MockCoin_GetCoinsInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCoin creates a new instance of MockCoin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoin(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoin {
	mock := &MockCoin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
