// Code generated by mockery v2.46.3. DO NOT EDIT.

package service

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"

	service "code.emcdtech.com/b2b/swap/internal/service"

	uuid "github.com/google/uuid"
)

// MockSwap is an autogenerated mock type for the Swap type
type MockSwap struct {
	mock.Mock
}

type MockSwap_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwap) EXPECT() *MockSwap_Expecter {
	return &MockSwap_Expecter{mock: &_m.Mock}
}

// CheckDeposit provides a mock function with given fields: ctx, sw
func (_m *MockSwap) CheckDeposit(ctx context.Context, sw *model.Swap) (model.Status, error) {
	ret := _m.Called(ctx, sw)

	if len(ret) == 0 {
		panic("no return value specified for CheckDeposit")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) (model.Status, error)); ok {
		return rf(ctx, sw)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) model.Status); ok {
		r0 = rf(ctx, sw)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap) error); ok {
		r1 = rf(ctx, sw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_CheckDeposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDeposit'
type MockSwap_CheckDeposit_Call struct {
	*mock.Call
}

// CheckDeposit is a helper method to define mock.On call
//   - ctx context.Context
//   - sw *model.Swap
func (_e *MockSwap_Expecter) CheckDeposit(ctx interface{}, sw interface{}) *MockSwap_CheckDeposit_Call {
	return &MockSwap_CheckDeposit_Call{Call: _e.mock.On("CheckDeposit", ctx, sw)}
}

func (_c *MockSwap_CheckDeposit_Call) Run(run func(ctx context.Context, sw *model.Swap)) *MockSwap_CheckDeposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap))
	})
	return _c
}

func (_c *MockSwap_CheckDeposit_Call) Return(_a0 model.Status, _a1 error) *MockSwap_CheckDeposit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_CheckDeposit_Call) RunAndReturn(run func(context.Context, *model.Swap) (model.Status, error)) *MockSwap_CheckDeposit_Call {
	_c.Call.Return(run)
	return _c
}

// CheckOrder provides a mock function with given fields: ctx, swap, orderID
func (_m *MockSwap) CheckOrder(ctx context.Context, swap *model.Swap, orderID uuid.UUID) (model.Status, error) {
	ret := _m.Called(ctx, swap, orderID)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrder")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, uuid.UUID) (model.Status, error)); ok {
		return rf(ctx, swap, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, uuid.UUID) model.Status); ok {
		r0 = rf(ctx, swap, orderID)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap, uuid.UUID) error); ok {
		r1 = rf(ctx, swap, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_CheckOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOrder'
type MockSwap_CheckOrder_Call struct {
	*mock.Call
}

// CheckOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - orderID uuid.UUID
func (_e *MockSwap_Expecter) CheckOrder(ctx interface{}, swap interface{}, orderID interface{}) *MockSwap_CheckOrder_Call {
	return &MockSwap_CheckOrder_Call{Call: _e.mock.On("CheckOrder", ctx, swap, orderID)}
}

func (_c *MockSwap_CheckOrder_Call) Run(run func(ctx context.Context, swap *model.Swap, orderID uuid.UUID)) *MockSwap_CheckOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockSwap_CheckOrder_Call) Return(_a0 model.Status, _a1 error) *MockSwap_CheckOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_CheckOrder_Call) RunAndReturn(run func(context.Context, *model.Swap, uuid.UUID) (model.Status, error)) *MockSwap_CheckOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CheckTransferFromSubToMaster provides a mock function with given fields: ctx, swap, accountID
func (_m *MockSwap) CheckTransferFromSubToMaster(ctx context.Context, swap *model.Swap, accountID int64) (model.Status, error) {
	ret := _m.Called(ctx, swap, accountID)

	if len(ret) == 0 {
		panic("no return value specified for CheckTransferFromSubToMaster")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, int64) (model.Status, error)); ok {
		return rf(ctx, swap, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, int64) model.Status); ok {
		r0 = rf(ctx, swap, accountID)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap, int64) error); ok {
		r1 = rf(ctx, swap, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_CheckTransferFromSubToMaster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTransferFromSubToMaster'
type MockSwap_CheckTransferFromSubToMaster_Call struct {
	*mock.Call
}

// CheckTransferFromSubToMaster is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - accountID int64
func (_e *MockSwap_Expecter) CheckTransferFromSubToMaster(ctx interface{}, swap interface{}, accountID interface{}) *MockSwap_CheckTransferFromSubToMaster_Call {
	return &MockSwap_CheckTransferFromSubToMaster_Call{Call: _e.mock.On("CheckTransferFromSubToMaster", ctx, swap, accountID)}
}

func (_c *MockSwap_CheckTransferFromSubToMaster_Call) Run(run func(ctx context.Context, swap *model.Swap, accountID int64)) *MockSwap_CheckTransferFromSubToMaster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(int64))
	})
	return _c
}

func (_c *MockSwap_CheckTransferFromSubToMaster_Call) Return(_a0 model.Status, _a1 error) *MockSwap_CheckTransferFromSubToMaster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_CheckTransferFromSubToMaster_Call) RunAndReturn(run func(context.Context, *model.Swap, int64) (model.Status, error)) *MockSwap_CheckTransferFromSubToMaster_Call {
	_c.Call.Return(run)
	return _c
}

// CheckWithdraw provides a mock function with given fields: ctx, swap, withdrawID
func (_m *MockSwap) CheckWithdraw(ctx context.Context, swap *model.Swap, withdrawID int64) (model.Status, error) {
	ret := _m.Called(ctx, swap, withdrawID)

	if len(ret) == 0 {
		panic("no return value specified for CheckWithdraw")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, int64) (model.Status, error)); ok {
		return rf(ctx, swap, withdrawID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, int64) model.Status); ok {
		r0 = rf(ctx, swap, withdrawID)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap, int64) error); ok {
		r1 = rf(ctx, swap, withdrawID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_CheckWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckWithdraw'
type MockSwap_CheckWithdraw_Call struct {
	*mock.Call
}

// CheckWithdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - withdrawID int64
func (_e *MockSwap_Expecter) CheckWithdraw(ctx interface{}, swap interface{}, withdrawID interface{}) *MockSwap_CheckWithdraw_Call {
	return &MockSwap_CheckWithdraw_Call{Call: _e.mock.On("CheckWithdraw", ctx, swap, withdrawID)}
}

func (_c *MockSwap_CheckWithdraw_Call) Run(run func(ctx context.Context, swap *model.Swap, withdrawID int64)) *MockSwap_CheckWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(int64))
	})
	return _c
}

func (_c *MockSwap_CheckWithdraw_Call) Return(_a0 model.Status, _a1 error) *MockSwap_CheckWithdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_CheckWithdraw_Call) RunAndReturn(run func(context.Context, *model.Swap, int64) (model.Status, error)) *MockSwap_CheckWithdraw_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrders provides a mock function with given fields: ctx, swap
func (_m *MockSwap) CreateOrders(ctx context.Context, swap *model.Swap) (model.Orders, model.Status, error) {
	ret := _m.Called(ctx, swap)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrders")
	}

	var r0 model.Orders
	var r1 model.Status
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) (model.Orders, model.Status, error)); ok {
		return rf(ctx, swap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) model.Orders); ok {
		r0 = rf(ctx, swap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Orders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap) model.Status); ok {
		r1 = rf(ctx, swap)
	} else {
		r1 = ret.Get(1).(model.Status)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.Swap) error); ok {
		r2 = rf(ctx, swap)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSwap_CreateOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrders'
type MockSwap_CreateOrders_Call struct {
	*mock.Call
}

// CreateOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
func (_e *MockSwap_Expecter) CreateOrders(ctx interface{}, swap interface{}) *MockSwap_CreateOrders_Call {
	return &MockSwap_CreateOrders_Call{Call: _e.mock.On("CreateOrders", ctx, swap)}
}

func (_c *MockSwap_CreateOrders_Call) Run(run func(ctx context.Context, swap *model.Swap)) *MockSwap_CreateOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap))
	})
	return _c
}

func (_c *MockSwap_CreateOrders_Call) Return(_a0 model.Orders, _a1 model.Status, _a2 error) *MockSwap_CreateOrders_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSwap_CreateOrders_Call) RunAndReturn(run func(context.Context, *model.Swap) (model.Orders, model.Status, error)) *MockSwap_CreateOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActiveSwaps provides a mock function with given fields: ctx
func (_m *MockSwap) GetAllActiveSwaps(ctx context.Context) ([]*model.Swap, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllActiveSwaps")
	}

	var r0 []*model.Swap
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Swap, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Swap); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Swap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_GetAllActiveSwaps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActiveSwaps'
type MockSwap_GetAllActiveSwaps_Call struct {
	*mock.Call
}

// GetAllActiveSwaps is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSwap_Expecter) GetAllActiveSwaps(ctx interface{}) *MockSwap_GetAllActiveSwaps_Call {
	return &MockSwap_GetAllActiveSwaps_Call{Call: _e.mock.On("GetAllActiveSwaps", ctx)}
}

func (_c *MockSwap_GetAllActiveSwaps_Call) Run(run func(ctx context.Context)) *MockSwap_GetAllActiveSwaps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSwap_GetAllActiveSwaps_Call) Return(_a0 []*model.Swap, _a1 error) *MockSwap_GetAllActiveSwaps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_GetAllActiveSwaps_Call) RunAndReturn(run func(context.Context) ([]*model.Swap, error)) *MockSwap_GetAllActiveSwaps_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwapByID provides a mock function with given fields: ctx, id
func (_m *MockSwap) GetSwapByID(ctx context.Context, id uuid.UUID) (*service.SwapByID, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSwapByID")
	}

	var r0 *service.SwapByID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*service.SwapByID, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *service.SwapByID); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.SwapByID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_GetSwapByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwapByID'
type MockSwap_GetSwapByID_Call struct {
	*mock.Call
}

// GetSwapByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSwap_Expecter) GetSwapByID(ctx interface{}, id interface{}) *MockSwap_GetSwapByID_Call {
	return &MockSwap_GetSwapByID_Call{Call: _e.mock.On("GetSwapByID", ctx, id)}
}

func (_c *MockSwap_GetSwapByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSwap_GetSwapByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSwap_GetSwapByID_Call) Return(_a0 *service.SwapByID, _a1 error) *MockSwap_GetSwapByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_GetSwapByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*service.SwapByID, error)) *MockSwap_GetSwapByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwapStatus provides a mock function with given fields: ctx, swapID
func (_m *MockSwap) GetSwapStatus(ctx context.Context, swapID uuid.UUID) (model.Status, error) {
	ret := _m.Called(ctx, swapID)

	if len(ret) == 0 {
		panic("no return value specified for GetSwapStatus")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Status, error)); ok {
		return rf(ctx, swapID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Status); ok {
		r0 = rf(ctx, swapID)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, swapID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_GetSwapStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwapStatus'
type MockSwap_GetSwapStatus_Call struct {
	*mock.Call
}

// GetSwapStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - swapID uuid.UUID
func (_e *MockSwap_Expecter) GetSwapStatus(ctx interface{}, swapID interface{}) *MockSwap_GetSwapStatus_Call {
	return &MockSwap_GetSwapStatus_Call{Call: _e.mock.On("GetSwapStatus", ctx, swapID)}
}

func (_c *MockSwap_GetSwapStatus_Call) Run(run func(ctx context.Context, swapID uuid.UUID)) *MockSwap_GetSwapStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSwap_GetSwapStatus_Call) Return(_a0 model.Status, _a1 error) *MockSwap_GetSwapStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_GetSwapStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Status, error)) *MockSwap_GetSwapStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwaps provides a mock function with given fields: ctx, filter
func (_m *MockSwap) GetSwaps(ctx context.Context, filter *model.SwapFilter) ([]*model.Swap, int, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetSwaps")
	}

	var r0 []*model.Swap
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SwapFilter) ([]*model.Swap, int, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SwapFilter) []*model.Swap); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Swap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SwapFilter) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.SwapFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSwap_GetSwaps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwaps'
type MockSwap_GetSwaps_Call struct {
	*mock.Call
}

// GetSwaps is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.SwapFilter
func (_e *MockSwap_Expecter) GetSwaps(ctx interface{}, filter interface{}) *MockSwap_GetSwaps_Call {
	return &MockSwap_GetSwaps_Call{Call: _e.mock.On("GetSwaps", ctx, filter)}
}

func (_c *MockSwap_GetSwaps_Call) Run(run func(ctx context.Context, filter *model.SwapFilter)) *MockSwap_GetSwaps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SwapFilter))
	})
	return _c
}

func (_c *MockSwap_GetSwaps_Call) Return(_a0 []*model.Swap, _a1 int, _a2 error) *MockSwap_GetSwaps_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSwap_GetSwaps_Call) RunAndReturn(run func(context.Context, *model.SwapFilter) ([]*model.Swap, int, error)) *MockSwap_GetSwaps_Call {
	_c.Call.Return(run)
	return _c
}

// PlaceOrder provides a mock function with given fields: ctx, swap, order
func (_m *MockSwap) PlaceOrder(ctx context.Context, swap *model.Swap, order *model.Order) (model.Status, error) {
	ret := _m.Called(ctx, swap, order)

	if len(ret) == 0 {
		panic("no return value specified for PlaceOrder")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, *model.Order) (model.Status, error)); ok {
		return rf(ctx, swap, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, *model.Order) model.Status); ok {
		r0 = rf(ctx, swap, order)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap, *model.Order) error); ok {
		r1 = rf(ctx, swap, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_PlaceOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaceOrder'
type MockSwap_PlaceOrder_Call struct {
	*mock.Call
}

// PlaceOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - order *model.Order
func (_e *MockSwap_Expecter) PlaceOrder(ctx interface{}, swap interface{}, order interface{}) *MockSwap_PlaceOrder_Call {
	return &MockSwap_PlaceOrder_Call{Call: _e.mock.On("PlaceOrder", ctx, swap, order)}
}

func (_c *MockSwap_PlaceOrder_Call) Run(run func(ctx context.Context, swap *model.Swap, order *model.Order)) *MockSwap_PlaceOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(*model.Order))
	})
	return _c
}

func (_c *MockSwap_PlaceOrder_Call) Return(_a0 model.Status, _a1 error) *MockSwap_PlaceOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_PlaceOrder_Call) RunAndReturn(run func(context.Context, *model.Swap, *model.Order) (model.Status, error)) *MockSwap_PlaceOrder_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareSwap provides a mock function with given fields: ctx, swap
func (_m *MockSwap) PrepareSwap(ctx context.Context, swap *model.Swap) (uuid.UUID, *model.AddressData, error) {
	ret := _m.Called(ctx, swap)

	if len(ret) == 0 {
		panic("no return value specified for PrepareSwap")
	}

	var r0 uuid.UUID
	var r1 *model.AddressData
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) (uuid.UUID, *model.AddressData, error)); ok {
		return rf(ctx, swap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) uuid.UUID); ok {
		r0 = rf(ctx, swap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap) *model.AddressData); ok {
		r1 = rf(ctx, swap)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AddressData)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.Swap) error); ok {
		r2 = rf(ctx, swap)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSwap_PrepareSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareSwap'
type MockSwap_PrepareSwap_Call struct {
	*mock.Call
}

// PrepareSwap is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
func (_e *MockSwap_Expecter) PrepareSwap(ctx interface{}, swap interface{}) *MockSwap_PrepareSwap_Call {
	return &MockSwap_PrepareSwap_Call{Call: _e.mock.On("PrepareSwap", ctx, swap)}
}

func (_c *MockSwap_PrepareSwap_Call) Run(run func(ctx context.Context, swap *model.Swap)) *MockSwap_PrepareSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap))
	})
	return _c
}

func (_c *MockSwap_PrepareSwap_Call) Return(swapID uuid.UUID, depositAddress *model.AddressData, err error) *MockSwap_PrepareSwap_Call {
	_c.Call.Return(swapID, depositAddress, err)
	return _c
}

func (_c *MockSwap_PrepareSwap_Call) RunAndReturn(run func(context.Context, *model.Swap) (uuid.UUID, *model.AddressData, error)) *MockSwap_PrepareSwap_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareWithdraw provides a mock function with given fields: ctx, swap
func (_m *MockSwap) PrepareWithdraw(ctx context.Context, swap *model.Swap) (model.Status, error) {
	ret := _m.Called(ctx, swap)

	if len(ret) == 0 {
		panic("no return value specified for PrepareWithdraw")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) (model.Status, error)); ok {
		return rf(ctx, swap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) model.Status); ok {
		r0 = rf(ctx, swap)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap) error); ok {
		r1 = rf(ctx, swap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_PrepareWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareWithdraw'
type MockSwap_PrepareWithdraw_Call struct {
	*mock.Call
}

// PrepareWithdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
func (_e *MockSwap_Expecter) PrepareWithdraw(ctx interface{}, swap interface{}) *MockSwap_PrepareWithdraw_Call {
	return &MockSwap_PrepareWithdraw_Call{Call: _e.mock.On("PrepareWithdraw", ctx, swap)}
}

func (_c *MockSwap_PrepareWithdraw_Call) Run(run func(ctx context.Context, swap *model.Swap)) *MockSwap_PrepareWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap))
	})
	return _c
}

func (_c *MockSwap_PrepareWithdraw_Call) Return(_a0 model.Status, _a1 error) *MockSwap_PrepareWithdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_PrepareWithdraw_Call) RunAndReturn(run func(context.Context, *model.Swap) (model.Status, error)) *MockSwap_PrepareWithdraw_Call {
	_c.Call.Return(run)
	return _c
}

// StartSwap provides a mock function with given fields: ctx, swapID, email, language
func (_m *MockSwap) StartSwap(ctx context.Context, swapID uuid.UUID, email string, language string) error {
	ret := _m.Called(ctx, swapID, email, language)

	if len(ret) == 0 {
		panic("no return value specified for StartSwap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, swapID, email, language)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSwap_StartSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSwap'
type MockSwap_StartSwap_Call struct {
	*mock.Call
}

// StartSwap is a helper method to define mock.On call
//   - ctx context.Context
//   - swapID uuid.UUID
//   - email string
//   - language string
func (_e *MockSwap_Expecter) StartSwap(ctx interface{}, swapID interface{}, email interface{}, language interface{}) *MockSwap_StartSwap_Call {
	return &MockSwap_StartSwap_Call{Call: _e.mock.On("StartSwap", ctx, swapID, email, language)}
}

func (_c *MockSwap_StartSwap_Call) Run(run func(ctx context.Context, swapID uuid.UUID, email string, language string)) *MockSwap_StartSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSwap_StartSwap_Call) Return(_a0 error) *MockSwap_StartSwap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSwap_StartSwap_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) error) *MockSwap_StartSwap_Call {
	_c.Call.Return(run)
	return _c
}

// SwapEstimate provides a mock function with given fields: ctx, swap
func (_m *MockSwap) SwapEstimate(ctx context.Context, swap *model.Swap) (*model.Estimate, error) {
	ret := _m.Called(ctx, swap)

	if len(ret) == 0 {
		panic("no return value specified for SwapEstimate")
	}

	var r0 *model.Estimate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) (*model.Estimate, error)); ok {
		return rf(ctx, swap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) *model.Estimate); ok {
		r0 = rf(ctx, swap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Estimate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap) error); ok {
		r1 = rf(ctx, swap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_SwapEstimate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwapEstimate'
type MockSwap_SwapEstimate_Call struct {
	*mock.Call
}

// SwapEstimate is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
func (_e *MockSwap_Expecter) SwapEstimate(ctx interface{}, swap interface{}) *MockSwap_SwapEstimate_Call {
	return &MockSwap_SwapEstimate_Call{Call: _e.mock.On("SwapEstimate", ctx, swap)}
}

func (_c *MockSwap_SwapEstimate_Call) Run(run func(ctx context.Context, swap *model.Swap)) *MockSwap_SwapEstimate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap))
	})
	return _c
}

func (_c *MockSwap_SwapEstimate_Call) Return(_a0 *model.Estimate, _a1 error) *MockSwap_SwapEstimate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_SwapEstimate_Call) RunAndReturn(run func(context.Context, *model.Swap) (*model.Estimate, error)) *MockSwap_SwapEstimate_Call {
	_c.Call.Return(run)
	return _c
}

// TransferFromSubToMaster provides a mock function with given fields: ctx, swap, transfer
func (_m *MockSwap) TransferFromSubToMaster(ctx context.Context, swap *model.Swap, transfer *model.InternalTransfer) (model.Status, error) {
	ret := _m.Called(ctx, swap, transfer)

	if len(ret) == 0 {
		panic("no return value specified for TransferFromSubToMaster")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, *model.InternalTransfer) (model.Status, error)); ok {
		return rf(ctx, swap, transfer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, *model.InternalTransfer) model.Status); ok {
		r0 = rf(ctx, swap, transfer)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap, *model.InternalTransfer) error); ok {
		r1 = rf(ctx, swap, transfer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_TransferFromSubToMaster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferFromSubToMaster'
type MockSwap_TransferFromSubToMaster_Call struct {
	*mock.Call
}

// TransferFromSubToMaster is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - transfer *model.InternalTransfer
func (_e *MockSwap_Expecter) TransferFromSubToMaster(ctx interface{}, swap interface{}, transfer interface{}) *MockSwap_TransferFromSubToMaster_Call {
	return &MockSwap_TransferFromSubToMaster_Call{Call: _e.mock.On("TransferFromSubToMaster", ctx, swap, transfer)}
}

func (_c *MockSwap_TransferFromSubToMaster_Call) Run(run func(ctx context.Context, swap *model.Swap, transfer *model.InternalTransfer)) *MockSwap_TransferFromSubToMaster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(*model.InternalTransfer))
	})
	return _c
}

func (_c *MockSwap_TransferFromSubToMaster_Call) Return(_a0 model.Status, _a1 error) *MockSwap_TransferFromSubToMaster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_TransferFromSubToMaster_Call) RunAndReturn(run func(context.Context, *model.Swap, *model.InternalTransfer) (model.Status, error)) *MockSwap_TransferFromSubToMaster_Call {
	_c.Call.Return(run)
	return _c
}

// TransferToUnified provides a mock function with given fields: ctx, swap
func (_m *MockSwap) TransferToUnified(ctx context.Context, swap *model.Swap) (model.Status, error) {
	ret := _m.Called(ctx, swap)

	if len(ret) == 0 {
		panic("no return value specified for TransferToUnified")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) (model.Status, error)); ok {
		return rf(ctx, swap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) model.Status); ok {
		r0 = rf(ctx, swap)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap) error); ok {
		r1 = rf(ctx, swap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_TransferToUnified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferToUnified'
type MockSwap_TransferToUnified_Call struct {
	*mock.Call
}

// TransferToUnified is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
func (_e *MockSwap_Expecter) TransferToUnified(ctx interface{}, swap interface{}) *MockSwap_TransferToUnified_Call {
	return &MockSwap_TransferToUnified_Call{Call: _e.mock.On("TransferToUnified", ctx, swap)}
}

func (_c *MockSwap_TransferToUnified_Call) Run(run func(ctx context.Context, swap *model.Swap)) *MockSwap_TransferToUnified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap))
	})
	return _c
}

func (_c *MockSwap_TransferToUnified_Call) Return(_a0 model.Status, _a1 error) *MockSwap_TransferToUnified_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_TransferToUnified_Call) RunAndReturn(run func(context.Context, *model.Swap) (model.Status, error)) *MockSwap_TransferToUnified_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, filter, partial
func (_m *MockSwap) Update(ctx context.Context, filter *model.SwapFilter, partial *model.SwapPartial) error {
	ret := _m.Called(ctx, filter, partial)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SwapFilter, *model.SwapPartial) error); ok {
		r0 = rf(ctx, filter, partial)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSwap_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSwap_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.SwapFilter
//   - partial *model.SwapPartial
func (_e *MockSwap_Expecter) Update(ctx interface{}, filter interface{}, partial interface{}) *MockSwap_Update_Call {
	return &MockSwap_Update_Call{Call: _e.mock.On("Update", ctx, filter, partial)}
}

func (_c *MockSwap_Update_Call) Run(run func(ctx context.Context, filter *model.SwapFilter, partial *model.SwapPartial)) *MockSwap_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SwapFilter), args[2].(*model.SwapPartial))
	})
	return _c
}

func (_c *MockSwap_Update_Call) Return(_a0 error) *MockSwap_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSwap_Update_Call) RunAndReturn(run func(context.Context, *model.SwapFilter, *model.SwapPartial) error) *MockSwap_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WaitDeposit provides a mock function with given fields: ctx, sw
func (_m *MockSwap) WaitDeposit(ctx context.Context, sw *model.Swap) (model.Status, error) {
	ret := _m.Called(ctx, sw)

	if len(ret) == 0 {
		panic("no return value specified for WaitDeposit")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) (model.Status, error)); ok {
		return rf(ctx, sw)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) model.Status); ok {
		r0 = rf(ctx, sw)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap) error); ok {
		r1 = rf(ctx, sw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_WaitDeposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitDeposit'
type MockSwap_WaitDeposit_Call struct {
	*mock.Call
}

// WaitDeposit is a helper method to define mock.On call
//   - ctx context.Context
//   - sw *model.Swap
func (_e *MockSwap_Expecter) WaitDeposit(ctx interface{}, sw interface{}) *MockSwap_WaitDeposit_Call {
	return &MockSwap_WaitDeposit_Call{Call: _e.mock.On("WaitDeposit", ctx, sw)}
}

func (_c *MockSwap_WaitDeposit_Call) Run(run func(ctx context.Context, sw *model.Swap)) *MockSwap_WaitDeposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap))
	})
	return _c
}

func (_c *MockSwap_WaitDeposit_Call) Return(_a0 model.Status, _a1 error) *MockSwap_WaitDeposit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_WaitDeposit_Call) RunAndReturn(run func(context.Context, *model.Swap) (model.Status, error)) *MockSwap_WaitDeposit_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, swap
func (_m *MockSwap) Withdraw(ctx context.Context, swap *model.Swap) (model.Status, error) {
	ret := _m.Called(ctx, swap)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 model.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) (model.Status, error)); ok {
		return rf(ctx, swap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap) model.Status); ok {
		r0 = rf(ctx, swap)
	} else {
		r0 = ret.Get(0).(model.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Swap) error); ok {
		r1 = rf(ctx, swap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type MockSwap_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
func (_e *MockSwap_Expecter) Withdraw(ctx interface{}, swap interface{}) *MockSwap_Withdraw_Call {
	return &MockSwap_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, swap)}
}

func (_c *MockSwap_Withdraw_Call) Run(run func(ctx context.Context, swap *model.Swap)) *MockSwap_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap))
	})
	return _c
}

func (_c *MockSwap_Withdraw_Call) Return(_a0 model.Status, _a1 error) *MockSwap_Withdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_Withdraw_Call) RunAndReturn(run func(context.Context, *model.Swap) (model.Status, error)) *MockSwap_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSwap creates a new instance of MockSwap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwap(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwap {
	mock := &MockSwap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
