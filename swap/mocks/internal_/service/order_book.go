// Code generated by mockery v2.46.3. DO NOT EDIT.

package service

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderBook is an autogenerated mock type for the OrderBook type
type MockOrderBook struct {
	mock.Mock
}

type MockOrderBook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderBook) EXPECT() *MockOrderBook_Expecter {
	return &MockOrderBook_Expecter{mock: &_m.Mock}
}

// Subscribe provides a mock function with given fields: ctx, symbols
func (_m *MockOrderBook) Subscribe(ctx context.Context, symbols []*model.Symbol) error {
	ret := _m.Called(ctx, symbols)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Symbol) error); ok {
		r0 = rf(ctx, symbols)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderBook_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockOrderBook_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - symbols []*model.Symbol
func (_e *MockOrderBook_Expecter) Subscribe(ctx interface{}, symbols interface{}) *MockOrderBook_Subscribe_Call {
	return &MockOrderBook_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, symbols)}
}

func (_c *MockOrderBook_Subscribe_Call) Run(run func(ctx context.Context, symbols []*model.Symbol)) *MockOrderBook_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*model.Symbol))
	})
	return _c
}

func (_c *MockOrderBook_Subscribe_Call) Return(_a0 error) *MockOrderBook_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderBook_Subscribe_Call) RunAndReturn(run func(context.Context, []*model.Symbol) error) *MockOrderBook_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, symbol, bids, asks, isSnapshot
func (_m *MockOrderBook) Update(ctx context.Context, symbol string, bids [][2]string, asks [][2]string, isSnapshot bool) error {
	ret := _m.Called(ctx, symbol, bids, asks, isSnapshot)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, [][2]string, [][2]string, bool) error); ok {
		r0 = rf(ctx, symbol, bids, asks, isSnapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderBook_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOrderBook_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol string
//   - bids [][2]string
//   - asks [][2]string
//   - isSnapshot bool
func (_e *MockOrderBook_Expecter) Update(ctx interface{}, symbol interface{}, bids interface{}, asks interface{}, isSnapshot interface{}) *MockOrderBook_Update_Call {
	return &MockOrderBook_Update_Call{Call: _e.mock.On("Update", ctx, symbol, bids, asks, isSnapshot)}
}

func (_c *MockOrderBook_Update_Call) Run(run func(ctx context.Context, symbol string, bids [][2]string, asks [][2]string, isSnapshot bool)) *MockOrderBook_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([][2]string), args[3].([][2]string), args[4].(bool))
	})
	return _c
}

func (_c *MockOrderBook_Update_Call) Return(_a0 error) *MockOrderBook_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderBook_Update_Call) RunAndReturn(run func(context.Context, string, [][2]string, [][2]string, bool) error) *MockOrderBook_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderBook creates a new instance of MockOrderBook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderBook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderBook {
	mock := &MockOrderBook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
