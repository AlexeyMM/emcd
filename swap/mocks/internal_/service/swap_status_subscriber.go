// Code generated by mockery v2.46.3. DO NOT EDIT.

package service

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockSwapStatusSubscriber is an autogenerated mock type for the SwapStatusSubscriber type
type MockSwapStatusSubscriber struct {
	mock.Mock
}

type MockSwapStatusSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwapStatusSubscriber) EXPECT() *MockSwapStatusSubscriber_Expecter {
	return &MockSwapStatusSubscriber_Expecter{mock: &_m.Mock}
}

// Subscribe provides a mock function with given fields: ctx, swapID, clientID, ch
func (_m *MockSwapStatusSubscriber) Subscribe(ctx context.Context, swapID uuid.UUID, clientID uuid.UUID, ch chan model.PublicStatus) {
	_m.Called(ctx, swapID, clientID, ch)
}

// MockSwapStatusSubscriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockSwapStatusSubscriber_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - swapID uuid.UUID
//   - clientID uuid.UUID
//   - ch chan model.PublicStatus
func (_e *MockSwapStatusSubscriber_Expecter) Subscribe(ctx interface{}, swapID interface{}, clientID interface{}, ch interface{}) *MockSwapStatusSubscriber_Subscribe_Call {
	return &MockSwapStatusSubscriber_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, swapID, clientID, ch)}
}

func (_c *MockSwapStatusSubscriber_Subscribe_Call) Run(run func(ctx context.Context, swapID uuid.UUID, clientID uuid.UUID, ch chan model.PublicStatus)) *MockSwapStatusSubscriber_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(chan model.PublicStatus))
	})
	return _c
}

func (_c *MockSwapStatusSubscriber_Subscribe_Call) Return() *MockSwapStatusSubscriber_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSwapStatusSubscriber_Subscribe_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, chan model.PublicStatus)) *MockSwapStatusSubscriber_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: swapID, clientID
func (_m *MockSwapStatusSubscriber) Unsubscribe(swapID uuid.UUID, clientID uuid.UUID) {
	_m.Called(swapID, clientID)
}

// MockSwapStatusSubscriber_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockSwapStatusSubscriber_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - swapID uuid.UUID
//   - clientID uuid.UUID
func (_e *MockSwapStatusSubscriber_Expecter) Unsubscribe(swapID interface{}, clientID interface{}) *MockSwapStatusSubscriber_Unsubscribe_Call {
	return &MockSwapStatusSubscriber_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", swapID, clientID)}
}

func (_c *MockSwapStatusSubscriber_Unsubscribe_Call) Run(run func(swapID uuid.UUID, clientID uuid.UUID)) *MockSwapStatusSubscriber_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSwapStatusSubscriber_Unsubscribe_Call) Return() *MockSwapStatusSubscriber_Unsubscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSwapStatusSubscriber_Unsubscribe_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID)) *MockSwapStatusSubscriber_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSwapStatusSubscriber creates a new instance of MockSwapStatusSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwapStatusSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwapStatusSubscriber {
	mock := &MockSwapStatusSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
