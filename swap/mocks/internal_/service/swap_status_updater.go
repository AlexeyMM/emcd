// Code generated by mockery v2.46.3. DO NOT EDIT.

package service

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockSwapStatusUpdater is an autogenerated mock type for the SwapStatusUpdater type
type MockSwapStatusUpdater struct {
	mock.Mock
}

type MockSwapStatusUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwapStatusUpdater) EXPECT() *MockSwapStatusUpdater_Expecter {
	return &MockSwapStatusUpdater_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function with given fields: ctx, swap, status
func (_m *MockSwapStatusUpdater) Broadcast(ctx context.Context, swap *model.Swap, status model.Status) {
	_m.Called(ctx, swap, status)
}

// MockSwapStatusUpdater_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MockSwapStatusUpdater_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - status model.Status
func (_e *MockSwapStatusUpdater_Expecter) Broadcast(ctx interface{}, swap interface{}, status interface{}) *MockSwapStatusUpdater_Broadcast_Call {
	return &MockSwapStatusUpdater_Broadcast_Call{Call: _e.mock.On("Broadcast", ctx, swap, status)}
}

func (_c *MockSwapStatusUpdater_Broadcast_Call) Run(run func(ctx context.Context, swap *model.Swap, status model.Status)) *MockSwapStatusUpdater_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(model.Status))
	})
	return _c
}

func (_c *MockSwapStatusUpdater_Broadcast_Call) Return() *MockSwapStatusUpdater_Broadcast_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSwapStatusUpdater_Broadcast_Call) RunAndReturn(run func(context.Context, *model.Swap, model.Status)) *MockSwapStatusUpdater_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwap provides a mock function with given fields: ctx, swapID
func (_m *MockSwapStatusUpdater) GetSwap(ctx context.Context, swapID uuid.UUID) (*model.Swap, error) {
	ret := _m.Called(ctx, swapID)

	if len(ret) == 0 {
		panic("no return value specified for GetSwap")
	}

	var r0 *model.Swap
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Swap, error)); ok {
		return rf(ctx, swapID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Swap); ok {
		r0 = rf(ctx, swapID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Swap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, swapID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapStatusUpdater_GetSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwap'
type MockSwapStatusUpdater_GetSwap_Call struct {
	*mock.Call
}

// GetSwap is a helper method to define mock.On call
//   - ctx context.Context
//   - swapID uuid.UUID
func (_e *MockSwapStatusUpdater_Expecter) GetSwap(ctx interface{}, swapID interface{}) *MockSwapStatusUpdater_GetSwap_Call {
	return &MockSwapStatusUpdater_GetSwap_Call{Call: _e.mock.On("GetSwap", ctx, swapID)}
}

func (_c *MockSwapStatusUpdater_GetSwap_Call) Run(run func(ctx context.Context, swapID uuid.UUID)) *MockSwapStatusUpdater_GetSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSwapStatusUpdater_GetSwap_Call) Return(_a0 *model.Swap, _a1 error) *MockSwapStatusUpdater_GetSwap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapStatusUpdater_GetSwap_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Swap, error)) *MockSwapStatusUpdater_GetSwap_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, swap, status
func (_m *MockSwapStatusUpdater) Update(ctx context.Context, swap *model.Swap, status model.Status) error {
	ret := _m.Called(ctx, swap, status)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, model.Status) error); ok {
		r0 = rf(ctx, swap, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSwapStatusUpdater_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSwapStatusUpdater_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - status model.Status
func (_e *MockSwapStatusUpdater_Expecter) Update(ctx interface{}, swap interface{}, status interface{}) *MockSwapStatusUpdater_Update_Call {
	return &MockSwapStatusUpdater_Update_Call{Call: _e.mock.On("Update", ctx, swap, status)}
}

func (_c *MockSwapStatusUpdater_Update_Call) Run(run func(ctx context.Context, swap *model.Swap, status model.Status)) *MockSwapStatusUpdater_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(model.Status))
	})
	return _c
}

func (_c *MockSwapStatusUpdater_Update_Call) Return(_a0 error) *MockSwapStatusUpdater_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSwapStatusUpdater_Update_Call) RunAndReturn(run func(context.Context, *model.Swap, model.Status) error) *MockSwapStatusUpdater_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAndBroadcast provides a mock function with given fields: ctx, swap, status
func (_m *MockSwapStatusUpdater) UpdateAndBroadcast(ctx context.Context, swap *model.Swap, status model.Status) error {
	ret := _m.Called(ctx, swap, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAndBroadcast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Swap, model.Status) error); ok {
		r0 = rf(ctx, swap, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSwapStatusUpdater_UpdateAndBroadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAndBroadcast'
type MockSwapStatusUpdater_UpdateAndBroadcast_Call struct {
	*mock.Call
}

// UpdateAndBroadcast is a helper method to define mock.On call
//   - ctx context.Context
//   - swap *model.Swap
//   - status model.Status
func (_e *MockSwapStatusUpdater_Expecter) UpdateAndBroadcast(ctx interface{}, swap interface{}, status interface{}) *MockSwapStatusUpdater_UpdateAndBroadcast_Call {
	return &MockSwapStatusUpdater_UpdateAndBroadcast_Call{Call: _e.mock.On("UpdateAndBroadcast", ctx, swap, status)}
}

func (_c *MockSwapStatusUpdater_UpdateAndBroadcast_Call) Run(run func(ctx context.Context, swap *model.Swap, status model.Status)) *MockSwapStatusUpdater_UpdateAndBroadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Swap), args[2].(model.Status))
	})
	return _c
}

func (_c *MockSwapStatusUpdater_UpdateAndBroadcast_Call) Return(_a0 error) *MockSwapStatusUpdater_UpdateAndBroadcast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSwapStatusUpdater_UpdateAndBroadcast_Call) RunAndReturn(run func(context.Context, *model.Swap, model.Status) error) *MockSwapStatusUpdater_UpdateAndBroadcast_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSwapStatusUpdater creates a new instance of MockSwapStatusUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwapStatusUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwapStatusUpdater {
	mock := &MockSwapStatusUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
