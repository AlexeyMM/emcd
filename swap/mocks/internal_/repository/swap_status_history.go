// Code generated by mockery v2.46.3. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockSwapStatusHistory is an autogenerated mock type for the SwapStatusHistory type
type MockSwapStatusHistory struct {
	mock.Mock
}

type MockSwapStatusHistory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwapStatusHistory) EXPECT() *MockSwapStatusHistory_Expecter {
	return &MockSwapStatusHistory_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, swapID, item
func (_m *MockSwapStatusHistory) Add(ctx context.Context, swapID uuid.UUID, item *model.SwapStatusHistoryItem) error {
	ret := _m.Called(ctx, swapID, item)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.SwapStatusHistoryItem) error); ok {
		r0 = rf(ctx, swapID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSwapStatusHistory_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockSwapStatusHistory_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - swapID uuid.UUID
//   - item *model.SwapStatusHistoryItem
func (_e *MockSwapStatusHistory_Expecter) Add(ctx interface{}, swapID interface{}, item interface{}) *MockSwapStatusHistory_Add_Call {
	return &MockSwapStatusHistory_Add_Call{Call: _e.mock.On("Add", ctx, swapID, item)}
}

func (_c *MockSwapStatusHistory_Add_Call) Run(run func(ctx context.Context, swapID uuid.UUID, item *model.SwapStatusHistoryItem)) *MockSwapStatusHistory_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.SwapStatusHistoryItem))
	})
	return _c
}

func (_c *MockSwapStatusHistory_Add_Call) Return(_a0 error) *MockSwapStatusHistory_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSwapStatusHistory_Add_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.SwapStatusHistoryItem) error) *MockSwapStatusHistory_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter
func (_m *MockSwapStatusHistory) Find(ctx context.Context, filter *model.SwapStatusHistoryFilter) ([]*model.SwapStatusHistoryItem, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []*model.SwapStatusHistoryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SwapStatusHistoryFilter) ([]*model.SwapStatusHistoryItem, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SwapStatusHistoryFilter) []*model.SwapStatusHistoryItem); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SwapStatusHistoryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SwapStatusHistoryFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwapStatusHistory_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockSwapStatusHistory_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.SwapStatusHistoryFilter
func (_e *MockSwapStatusHistory_Expecter) Find(ctx interface{}, filter interface{}) *MockSwapStatusHistory_Find_Call {
	return &MockSwapStatusHistory_Find_Call{Call: _e.mock.On("Find", ctx, filter)}
}

func (_c *MockSwapStatusHistory_Find_Call) Run(run func(ctx context.Context, filter *model.SwapStatusHistoryFilter)) *MockSwapStatusHistory_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SwapStatusHistoryFilter))
	})
	return _c
}

func (_c *MockSwapStatusHistory_Find_Call) Return(_a0 []*model.SwapStatusHistoryItem, _a1 error) *MockSwapStatusHistory_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwapStatusHistory_Find_Call) RunAndReturn(run func(context.Context, *model.SwapStatusHistoryFilter) ([]*model.SwapStatusHistoryItem, error)) *MockSwapStatusHistory_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSwapStatusHistory creates a new instance of MockSwapStatusHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwapStatusHistory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwapStatusHistory {
	mock := &MockSwapStatusHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
