// Code generated by mockery v2.46.3. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockErrorCounter is an autogenerated mock type for the ErrorCounter type
type MockErrorCounter struct {
	mock.Mock
}

type MockErrorCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorCounter) EXPECT() *MockErrorCounter_Expecter {
	return &MockErrorCounter_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: swapID
func (_m *MockErrorCounter) Delete(swapID uuid.UUID) {
	_m.Called(swapID)
}

// MockErrorCounter_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockErrorCounter_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - swapID uuid.UUID
func (_e *MockErrorCounter_Expecter) Delete(swapID interface{}) *MockErrorCounter_Delete_Call {
	return &MockErrorCounter_Delete_Call{Call: _e.mock.On("Delete", swapID)}
}

func (_c *MockErrorCounter_Delete_Call) Run(run func(swapID uuid.UUID)) *MockErrorCounter_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockErrorCounter_Delete_Call) Return() *MockErrorCounter_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorCounter_Delete_Call) RunAndReturn(run func(uuid.UUID)) *MockErrorCounter_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Inc provides a mock function with given fields: swapID
func (_m *MockErrorCounter) Inc(swapID uuid.UUID) int {
	ret := _m.Called(swapID)

	if len(ret) == 0 {
		panic("no return value specified for Inc")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(uuid.UUID) int); ok {
		r0 = rf(swapID)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockErrorCounter_Inc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inc'
type MockErrorCounter_Inc_Call struct {
	*mock.Call
}

// Inc is a helper method to define mock.On call
//   - swapID uuid.UUID
func (_e *MockErrorCounter_Expecter) Inc(swapID interface{}) *MockErrorCounter_Inc_Call {
	return &MockErrorCounter_Inc_Call{Call: _e.mock.On("Inc", swapID)}
}

func (_c *MockErrorCounter_Inc_Call) Run(run func(swapID uuid.UUID)) *MockErrorCounter_Inc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockErrorCounter_Inc_Call) Return(_a0 int) *MockErrorCounter_Inc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockErrorCounter_Inc_Call) RunAndReturn(run func(uuid.UUID) int) *MockErrorCounter_Inc_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockErrorCounter creates a new instance of MockErrorCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorCounter {
	mock := &MockErrorCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
