// Code generated by mockery v2.46.3. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"
)

// MockUser is an autogenerated mock type for the User type
type MockUser struct {
	mock.Mock
}

type MockUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUser) EXPECT() *MockUser_Expecter {
	return &MockUser_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, user
func (_m *MockUser) Add(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockUser_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUser_Expecter) Add(ctx interface{}, user interface{}) *MockUser_Add_Call {
	return &MockUser_Add_Call{Call: _e.mock.On("Add", ctx, user)}
}

func (_c *MockUser_Add_Call) Run(run func(ctx context.Context, user *model.User)) *MockUser_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockUser_Add_Call) Return(_a0 error) *MockUser_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_Add_Call) RunAndReturn(run func(context.Context, *model.User) error) *MockUser_Add_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, filter
func (_m *MockUser) FindOne(ctx context.Context, filter *model.UserFilter) (*model.User, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserFilter) (*model.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserFilter) *model.User); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockUser_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.UserFilter
func (_e *MockUser_Expecter) FindOne(ctx interface{}, filter interface{}) *MockUser_FindOne_Call {
	return &MockUser_FindOne_Call{Call: _e.mock.On("FindOne", ctx, filter)}
}

func (_c *MockUser_FindOne_Call) Run(run func(ctx context.Context, filter *model.UserFilter)) *MockUser_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UserFilter))
	})
	return _c
}

func (_c *MockUser_FindOne_Call) Return(_a0 *model.User, _a1 error) *MockUser_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_FindOne_Call) RunAndReturn(run func(context.Context, *model.UserFilter) (*model.User, error)) *MockUser_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUser creates a new instance of MockUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUser {
	mock := &MockUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
