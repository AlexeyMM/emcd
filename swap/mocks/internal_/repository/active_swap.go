// Code generated by mockery v2.46.3. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockActiveSwap is an autogenerated mock type for the ActiveSwap type
type MockActiveSwap struct {
	mock.Mock
}

type MockActiveSwap_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActiveSwap) EXPECT() *MockActiveSwap_Expecter {
	return &MockActiveSwap_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: swapID
func (_m *MockActiveSwap) Add(swapID uuid.UUID) {
	_m.Called(swapID)
}

// MockActiveSwap_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockActiveSwap_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - swapID uuid.UUID
func (_e *MockActiveSwap_Expecter) Add(swapID interface{}) *MockActiveSwap_Add_Call {
	return &MockActiveSwap_Add_Call{Call: _e.mock.On("Add", swapID)}
}

func (_c *MockActiveSwap_Add_Call) Run(run func(swapID uuid.UUID)) *MockActiveSwap_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockActiveSwap_Add_Call) Return() *MockActiveSwap_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockActiveSwap_Add_Call) RunAndReturn(run func(uuid.UUID)) *MockActiveSwap_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: swapID
func (_m *MockActiveSwap) Delete(swapID uuid.UUID) {
	_m.Called(swapID)
}

// MockActiveSwap_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockActiveSwap_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - swapID uuid.UUID
func (_e *MockActiveSwap_Expecter) Delete(swapID interface{}) *MockActiveSwap_Delete_Call {
	return &MockActiveSwap_Delete_Call{Call: _e.mock.On("Delete", swapID)}
}

func (_c *MockActiveSwap_Delete_Call) Run(run func(swapID uuid.UUID)) *MockActiveSwap_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockActiveSwap_Delete_Call) Return() *MockActiveSwap_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockActiveSwap_Delete_Call) RunAndReturn(run func(uuid.UUID)) *MockActiveSwap_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function with given fields: swapID
func (_m *MockActiveSwap) Exist(swapID uuid.UUID) bool {
	ret := _m.Called(swapID)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(swapID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockActiveSwap_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type MockActiveSwap_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - swapID uuid.UUID
func (_e *MockActiveSwap_Expecter) Exist(swapID interface{}) *MockActiveSwap_Exist_Call {
	return &MockActiveSwap_Exist_Call{Call: _e.mock.On("Exist", swapID)}
}

func (_c *MockActiveSwap_Exist_Call) Run(run func(swapID uuid.UUID)) *MockActiveSwap_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockActiveSwap_Exist_Call) Return(_a0 bool) *MockActiveSwap_Exist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActiveSwap_Exist_Call) RunAndReturn(run func(uuid.UUID) bool) *MockActiveSwap_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// IsSwapLimitExceeded provides a mock function with given fields:
func (_m *MockActiveSwap) IsSwapLimitExceeded() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSwapLimitExceeded")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockActiveSwap_IsSwapLimitExceeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSwapLimitExceeded'
type MockActiveSwap_IsSwapLimitExceeded_Call struct {
	*mock.Call
}

// IsSwapLimitExceeded is a helper method to define mock.On call
func (_e *MockActiveSwap_Expecter) IsSwapLimitExceeded() *MockActiveSwap_IsSwapLimitExceeded_Call {
	return &MockActiveSwap_IsSwapLimitExceeded_Call{Call: _e.mock.On("IsSwapLimitExceeded")}
}

func (_c *MockActiveSwap_IsSwapLimitExceeded_Call) Run(run func()) *MockActiveSwap_IsSwapLimitExceeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockActiveSwap_IsSwapLimitExceeded_Call) Return(_a0 bool) *MockActiveSwap_IsSwapLimitExceeded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActiveSwap_IsSwapLimitExceeded_Call) RunAndReturn(run func() bool) *MockActiveSwap_IsSwapLimitExceeded_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockActiveSwap creates a new instance of MockActiveSwap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActiveSwap(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActiveSwap {
	mock := &MockActiveSwap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
