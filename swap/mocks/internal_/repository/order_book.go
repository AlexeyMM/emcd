// Code generated by mockery v2.46.3. DO NOT EDIT.

package repository

import (
	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderBook is an autogenerated mock type for the OrderBook type
type MockOrderBook struct {
	mock.Mock
}

type MockOrderBook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderBook) EXPECT() *MockOrderBook_Expecter {
	return &MockOrderBook_Expecter{mock: &_m.Mock}
}

// AddDelta provides a mock function with given fields: symbol, bids, asks
func (_m *MockOrderBook) AddDelta(symbol string, bids [][2]string, asks [][2]string) error {
	ret := _m.Called(symbol, bids, asks)

	if len(ret) == 0 {
		panic("no return value specified for AddDelta")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, [][2]string, [][2]string) error); ok {
		r0 = rf(symbol, bids, asks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderBook_AddDelta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDelta'
type MockOrderBook_AddDelta_Call struct {
	*mock.Call
}

// AddDelta is a helper method to define mock.On call
//   - symbol string
//   - bids [][2]string
//   - asks [][2]string
func (_e *MockOrderBook_Expecter) AddDelta(symbol interface{}, bids interface{}, asks interface{}) *MockOrderBook_AddDelta_Call {
	return &MockOrderBook_AddDelta_Call{Call: _e.mock.On("AddDelta", symbol, bids, asks)}
}

func (_c *MockOrderBook_AddDelta_Call) Run(run func(symbol string, bids [][2]string, asks [][2]string)) *MockOrderBook_AddDelta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([][2]string), args[2].([][2]string))
	})
	return _c
}

func (_c *MockOrderBook_AddDelta_Call) Return(_a0 error) *MockOrderBook_AddDelta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderBook_AddDelta_Call) RunAndReturn(run func(string, [][2]string, [][2]string) error) *MockOrderBook_AddDelta_Call {
	_c.Call.Return(run)
	return _c
}

// AddSnapshot provides a mock function with given fields: symbol, bids, asks
func (_m *MockOrderBook) AddSnapshot(symbol string, bids [][2]string, asks [][2]string) error {
	ret := _m.Called(symbol, bids, asks)

	if len(ret) == 0 {
		panic("no return value specified for AddSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, [][2]string, [][2]string) error); ok {
		r0 = rf(symbol, bids, asks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderBook_AddSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSnapshot'
type MockOrderBook_AddSnapshot_Call struct {
	*mock.Call
}

// AddSnapshot is a helper method to define mock.On call
//   - symbol string
//   - bids [][2]string
//   - asks [][2]string
func (_e *MockOrderBook_Expecter) AddSnapshot(symbol interface{}, bids interface{}, asks interface{}) *MockOrderBook_AddSnapshot_Call {
	return &MockOrderBook_AddSnapshot_Call{Call: _e.mock.On("AddSnapshot", symbol, bids, asks)}
}

func (_c *MockOrderBook_AddSnapshot_Call) Run(run func(symbol string, bids [][2]string, asks [][2]string)) *MockOrderBook_AddSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([][2]string), args[2].([][2]string))
	})
	return _c
}

func (_c *MockOrderBook_AddSnapshot_Call) Return(_a0 error) *MockOrderBook_AddSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderBook_AddSnapshot_Call) RunAndReturn(run func(string, [][2]string, [][2]string) error) *MockOrderBook_AddSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetAskTopLevels provides a mock function with given fields: symbol, n
func (_m *MockOrderBook) GetAskTopLevels(symbol string, n int) ([][2]float64, error) {
	ret := _m.Called(symbol, n)

	if len(ret) == 0 {
		panic("no return value specified for GetAskTopLevels")
	}

	var r0 [][2]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([][2]float64, error)); ok {
		return rf(symbol, n)
	}
	if rf, ok := ret.Get(0).(func(string, int) [][2]float64); ok {
		r0 = rf(symbol, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][2]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(symbol, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderBook_GetAskTopLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAskTopLevels'
type MockOrderBook_GetAskTopLevels_Call struct {
	*mock.Call
}

// GetAskTopLevels is a helper method to define mock.On call
//   - symbol string
//   - n int
func (_e *MockOrderBook_Expecter) GetAskTopLevels(symbol interface{}, n interface{}) *MockOrderBook_GetAskTopLevels_Call {
	return &MockOrderBook_GetAskTopLevels_Call{Call: _e.mock.On("GetAskTopLevels", symbol, n)}
}

func (_c *MockOrderBook_GetAskTopLevels_Call) Run(run func(symbol string, n int)) *MockOrderBook_GetAskTopLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockOrderBook_GetAskTopLevels_Call) Return(_a0 [][2]float64, _a1 error) *MockOrderBook_GetAskTopLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderBook_GetAskTopLevels_Call) RunAndReturn(run func(string, int) ([][2]float64, error)) *MockOrderBook_GetAskTopLevels_Call {
	_c.Call.Return(run)
	return _c
}

// GetBidTopLevels provides a mock function with given fields: symbol, n
func (_m *MockOrderBook) GetBidTopLevels(symbol string, n int) ([][2]float64, error) {
	ret := _m.Called(symbol, n)

	if len(ret) == 0 {
		panic("no return value specified for GetBidTopLevels")
	}

	var r0 [][2]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([][2]float64, error)); ok {
		return rf(symbol, n)
	}
	if rf, ok := ret.Get(0).(func(string, int) [][2]float64); ok {
		r0 = rf(symbol, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][2]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(symbol, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderBook_GetBidTopLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBidTopLevels'
type MockOrderBook_GetBidTopLevels_Call struct {
	*mock.Call
}

// GetBidTopLevels is a helper method to define mock.On call
//   - symbol string
//   - n int
func (_e *MockOrderBook_Expecter) GetBidTopLevels(symbol interface{}, n interface{}) *MockOrderBook_GetBidTopLevels_Call {
	return &MockOrderBook_GetBidTopLevels_Call{Call: _e.mock.On("GetBidTopLevels", symbol, n)}
}

func (_c *MockOrderBook_GetBidTopLevels_Call) Run(run func(symbol string, n int)) *MockOrderBook_GetBidTopLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockOrderBook_GetBidTopLevels_Call) Return(_a0 [][2]float64, _a1 error) *MockOrderBook_GetBidTopLevels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderBook_GetBidTopLevels_Call) RunAndReturn(run func(string, int) ([][2]float64, error)) *MockOrderBook_GetBidTopLevels_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: _a0
func (_m *MockOrderBook) Init(_a0 []*model.Symbol) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*model.Symbol) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderBook_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockOrderBook_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - _a0 []*model.Symbol
func (_e *MockOrderBook_Expecter) Init(_a0 interface{}) *MockOrderBook_Init_Call {
	return &MockOrderBook_Init_Call{Call: _e.mock.On("Init", _a0)}
}

func (_c *MockOrderBook_Init_Call) Run(run func(_a0 []*model.Symbol)) *MockOrderBook_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*model.Symbol))
	})
	return _c
}

func (_c *MockOrderBook_Init_Call) Return(_a0 error) *MockOrderBook_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderBook_Init_Call) RunAndReturn(run func([]*model.Symbol) error) *MockOrderBook_Init_Call {
	_c.Call.Return(run)
	return _c
}

// IsExist provides a mock function with given fields: symbol
func (_m *MockOrderBook) IsExist(symbol string) bool {
	ret := _m.Called(symbol)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(symbol)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockOrderBook_IsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExist'
type MockOrderBook_IsExist_Call struct {
	*mock.Call
}

// IsExist is a helper method to define mock.On call
//   - symbol string
func (_e *MockOrderBook_Expecter) IsExist(symbol interface{}) *MockOrderBook_IsExist_Call {
	return &MockOrderBook_IsExist_Call{Call: _e.mock.On("IsExist", symbol)}
}

func (_c *MockOrderBook_IsExist_Call) Run(run func(symbol string)) *MockOrderBook_IsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrderBook_IsExist_Call) Return(_a0 bool) *MockOrderBook_IsExist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderBook_IsExist_Call) RunAndReturn(run func(string) bool) *MockOrderBook_IsExist_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *MockOrderBook) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockOrderBook_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MockOrderBook_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MockOrderBook_Expecter) Len() *MockOrderBook_Len_Call {
	return &MockOrderBook_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MockOrderBook_Len_Call) Run(run func()) *MockOrderBook_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrderBook_Len_Call) Return(_a0 int) *MockOrderBook_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderBook_Len_Call) RunAndReturn(run func() int) *MockOrderBook_Len_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderBook creates a new instance of MockOrderBook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderBook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderBook {
	mock := &MockOrderBook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
