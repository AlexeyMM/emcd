// Code generated by mockery v2.46.3. DO NOT EDIT.

package repository

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "code.emcdtech.com/b2b/swap/model"

	uuid "github.com/google/uuid"
)

// MockSwap is an autogenerated mock type for the Swap type
type MockSwap struct {
	mock.Mock
}

type MockSwap_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSwap) EXPECT() *MockSwap_Expecter {
	return &MockSwap_Expecter{mock: &_m.Mock}
}

// Estimate provides a mock function with given fields: ctx, request
func (_m *MockSwap) Estimate(ctx context.Context, request *model.EstimateRequest) (decimal.Decimal, decimal.Decimal, decimal.Decimal, *model.Limits, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Estimate")
	}

	var r0 decimal.Decimal
	var r1 decimal.Decimal
	var r2 decimal.Decimal
	var r3 *model.Limits
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.EstimateRequest) (decimal.Decimal, decimal.Decimal, decimal.Decimal, *model.Limits, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.EstimateRequest) decimal.Decimal); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.EstimateRequest) decimal.Decimal); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Get(1).(decimal.Decimal)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.EstimateRequest) decimal.Decimal); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Get(2).(decimal.Decimal)
	}

	if rf, ok := ret.Get(3).(func(context.Context, *model.EstimateRequest) *model.Limits); ok {
		r3 = rf(ctx, request)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*model.Limits)
		}
	}

	if rf, ok := ret.Get(4).(func(context.Context, *model.EstimateRequest) error); ok {
		r4 = rf(ctx, request)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// MockSwap_Estimate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Estimate'
type MockSwap_Estimate_Call struct {
	*mock.Call
}

// Estimate is a helper method to define mock.On call
//   - ctx context.Context
//   - request *model.EstimateRequest
func (_e *MockSwap_Expecter) Estimate(ctx interface{}, request interface{}) *MockSwap_Estimate_Call {
	return &MockSwap_Estimate_Call{Call: _e.mock.On("Estimate", ctx, request)}
}

func (_c *MockSwap_Estimate_Call) Run(run func(ctx context.Context, request *model.EstimateRequest)) *MockSwap_Estimate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.EstimateRequest))
	})
	return _c
}

func (_c *MockSwap_Estimate_Call) Return(amountFrom decimal.Decimal, amountTo decimal.Decimal, rate decimal.Decimal, limits *model.Limits, err error) *MockSwap_Estimate_Call {
	_c.Call.Return(amountFrom, amountTo, rate, limits, err)
	return _c
}

func (_c *MockSwap_Estimate_Call) RunAndReturn(run func(context.Context, *model.EstimateRequest) (decimal.Decimal, decimal.Decimal, decimal.Decimal, *model.Limits, error)) *MockSwap_Estimate_Call {
	_c.Call.Return(run)
	return _c
}

// GetSwapByID provides a mock function with given fields: ctx, id
func (_m *MockSwap) GetSwapByID(ctx context.Context, id string) (*model.SwapByIDResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSwapByID")
	}

	var r0 *model.SwapByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.SwapByIDResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.SwapByIDResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SwapByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSwap_GetSwapByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSwapByID'
type MockSwap_GetSwapByID_Call struct {
	*mock.Call
}

// GetSwapByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSwap_Expecter) GetSwapByID(ctx interface{}, id interface{}) *MockSwap_GetSwapByID_Call {
	return &MockSwap_GetSwapByID_Call{Call: _e.mock.On("GetSwapByID", ctx, id)}
}

func (_c *MockSwap_GetSwapByID_Call) Run(run func(ctx context.Context, id string)) *MockSwap_GetSwapByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSwap_GetSwapByID_Call) Return(_a0 *model.SwapByIDResponse, _a1 error) *MockSwap_GetSwapByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSwap_GetSwapByID_Call) RunAndReturn(run func(context.Context, string) (*model.SwapByIDResponse, error)) *MockSwap_GetSwapByID_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareSwap provides a mock function with given fields: ctx, request
func (_m *MockSwap) PrepareSwap(ctx context.Context, request *model.SwapRequest) (uuid.UUID, *model.AddressData, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PrepareSwap")
	}

	var r0 uuid.UUID
	var r1 *model.AddressData
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SwapRequest) (uuid.UUID, *model.AddressData, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SwapRequest) uuid.UUID); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SwapRequest) *model.AddressData); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AddressData)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.SwapRequest) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSwap_PrepareSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareSwap'
type MockSwap_PrepareSwap_Call struct {
	*mock.Call
}

// PrepareSwap is a helper method to define mock.On call
//   - ctx context.Context
//   - request *model.SwapRequest
func (_e *MockSwap_Expecter) PrepareSwap(ctx interface{}, request interface{}) *MockSwap_PrepareSwap_Call {
	return &MockSwap_PrepareSwap_Call{Call: _e.mock.On("PrepareSwap", ctx, request)}
}

func (_c *MockSwap_PrepareSwap_Call) Run(run func(ctx context.Context, request *model.SwapRequest)) *MockSwap_PrepareSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SwapRequest))
	})
	return _c
}

func (_c *MockSwap_PrepareSwap_Call) Return(id uuid.UUID, depositAddress *model.AddressData, err error) *MockSwap_PrepareSwap_Call {
	_c.Call.Return(id, depositAddress, err)
	return _c
}

func (_c *MockSwap_PrepareSwap_Call) RunAndReturn(run func(context.Context, *model.SwapRequest) (uuid.UUID, *model.AddressData, error)) *MockSwap_PrepareSwap_Call {
	_c.Call.Return(run)
	return _c
}

// StartSwap provides a mock function with given fields: ctx, swapID, email, language
func (_m *MockSwap) StartSwap(ctx context.Context, swapID uuid.UUID, email string, language string) error {
	ret := _m.Called(ctx, swapID, email, language)

	if len(ret) == 0 {
		panic("no return value specified for StartSwap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, swapID, email, language)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSwap_StartSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSwap'
type MockSwap_StartSwap_Call struct {
	*mock.Call
}

// StartSwap is a helper method to define mock.On call
//   - ctx context.Context
//   - swapID uuid.UUID
//   - email string
//   - language string
func (_e *MockSwap_Expecter) StartSwap(ctx interface{}, swapID interface{}, email interface{}, language interface{}) *MockSwap_StartSwap_Call {
	return &MockSwap_StartSwap_Call{Call: _e.mock.On("StartSwap", ctx, swapID, email, language)}
}

func (_c *MockSwap_StartSwap_Call) Run(run func(ctx context.Context, swapID uuid.UUID, email string, language string)) *MockSwap_StartSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSwap_StartSwap_Call) Return(_a0 error) *MockSwap_StartSwap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSwap_StartSwap_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) error) *MockSwap_StartSwap_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: ctx, swapID, ch
func (_m *MockSwap) Status(ctx context.Context, swapID uuid.UUID, ch chan<- model.Status) error {
	ret := _m.Called(ctx, swapID, ch)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, chan<- model.Status) error); ok {
		r0 = rf(ctx, swapID, ch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSwap_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockSwap_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
//   - swapID uuid.UUID
//   - ch chan<- model.Status
func (_e *MockSwap_Expecter) Status(ctx interface{}, swapID interface{}, ch interface{}) *MockSwap_Status_Call {
	return &MockSwap_Status_Call{Call: _e.mock.On("Status", ctx, swapID, ch)}
}

func (_c *MockSwap_Status_Call) Run(run func(ctx context.Context, swapID uuid.UUID, ch chan<- model.Status)) *MockSwap_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(chan<- model.Status))
	})
	return _c
}

func (_c *MockSwap_Status_Call) Return(_a0 error) *MockSwap_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSwap_Status_Call) RunAndReturn(run func(context.Context, uuid.UUID, chan<- model.Status) error) *MockSwap_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSwap creates a new instance of MockSwap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSwap(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSwap {
	mock := &MockSwap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
