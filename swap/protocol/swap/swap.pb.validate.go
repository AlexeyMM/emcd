// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/proto/swap.proto

package swap

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSwapByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSwapByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSwapByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSwapByIDRequestMultiError, or nil if none found.
func (m *GetSwapByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSwapByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSwapByIDRequestMultiError(errors)
	}

	return nil
}

// GetSwapByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetSwapByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSwapByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSwapByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSwapByIDRequestMultiError) AllErrors() []error { return m }

// GetSwapByIDRequestValidationError is the validation error returned by
// GetSwapByIDRequest.Validate if the designated constraints aren't met.
type GetSwapByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSwapByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSwapByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSwapByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSwapByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSwapByIDRequestValidationError) ErrorName() string {
	return "GetSwapByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSwapByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSwapByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSwapByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSwapByIDRequestValidationError{}

// Validate checks the field values on GetSwapByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSwapByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSwapByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSwapByIDResponseMultiError, or nil if none found.
func (m *GetSwapByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSwapByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinFrom

	// no validation rules for CoinTo

	// no validation rules for NetworkFrom

	// no validation rules for NetworkTo

	// no validation rules for AmountFrom

	// no validation rules for AmountTo

	if all {
		switch v := interface{}(m.GetAddressFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSwapByIDResponseValidationError{
					field:  "AddressFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSwapByIDResponseValidationError{
					field:  "AddressFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSwapByIDResponseValidationError{
				field:  "AddressFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddressTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSwapByIDResponseValidationError{
					field:  "AddressTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSwapByIDResponseValidationError{
					field:  "AddressTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSwapByIDResponseValidationError{
				field:  "AddressTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for SwapDuration

	// no validation rules for Rate

	if len(errors) > 0 {
		return GetSwapByIDResponseMultiError(errors)
	}

	return nil
}

// GetSwapByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetSwapByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSwapByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSwapByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSwapByIDResponseMultiError) AllErrors() []error { return m }

// GetSwapByIDResponseValidationError is the validation error returned by
// GetSwapByIDResponse.Validate if the designated constraints aren't met.
type GetSwapByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSwapByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSwapByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSwapByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSwapByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSwapByIDResponseValidationError) ErrorName() string {
	return "GetSwapByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSwapByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSwapByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSwapByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSwapByIDResponseValidationError{}

// Validate checks the field values on AddressData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressDataMultiError, or
// nil if none found.
func (m *AddressData) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Tag

	if len(errors) > 0 {
		return AddressDataMultiError(errors)
	}

	return nil
}

// AddressDataMultiError is an error wrapping multiple validation errors
// returned by AddressData.ValidateAll() if the designated constraints aren't met.
type AddressDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressDataMultiError) AllErrors() []error { return m }

// AddressDataValidationError is the validation error returned by
// AddressData.Validate if the designated constraints aren't met.
type AddressDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressDataValidationError) ErrorName() string { return "AddressDataValidationError" }

// Error satisfies the builtin error interface
func (e AddressDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressDataValidationError{}

// Validate checks the field values on EstimateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateRequestMultiError, or nil if none found.
func (m *EstimateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinFrom

	// no validation rules for CoinTo

	// no validation rules for NetworkFrom

	// no validation rules for NetworkTo

	// no validation rules for AmountFrom

	// no validation rules for AmountTo

	if len(errors) > 0 {
		return EstimateRequestMultiError(errors)
	}

	return nil
}

// EstimateRequestMultiError is an error wrapping multiple validation errors
// returned by EstimateRequest.ValidateAll() if the designated constraints
// aren't met.
type EstimateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestMultiError) AllErrors() []error { return m }

// EstimateRequestValidationError is the validation error returned by
// EstimateRequest.Validate if the designated constraints aren't met.
type EstimateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestValidationError) ErrorName() string { return "EstimateRequestValidationError" }

// Error satisfies the builtin error interface
func (e EstimateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestValidationError{}

// Validate checks the field values on EstimateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EstimateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateResponseMultiError, or nil if none found.
func (m *EstimateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AmountFrom

	// no validation rules for AmountTo

	// no validation rules for Rate

	// no validation rules for MinFrom

	// no validation rules for MaxFrom

	if len(errors) > 0 {
		return EstimateResponseMultiError(errors)
	}

	return nil
}

// EstimateResponseMultiError is an error wrapping multiple validation errors
// returned by EstimateResponse.ValidateAll() if the designated constraints
// aren't met.
type EstimateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResponseMultiError) AllErrors() []error { return m }

// EstimateResponseValidationError is the validation error returned by
// EstimateResponse.Validate if the designated constraints aren't met.
type EstimateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResponseValidationError) ErrorName() string { return "EstimateResponseValidationError" }

// Error satisfies the builtin error interface
func (e EstimateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResponseValidationError{}

// Validate checks the field values on PrepareSwapRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrepareSwapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrepareSwapRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrepareSwapRequestMultiError, or nil if none found.
func (m *PrepareSwapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrepareSwapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinFrom

	// no validation rules for CoinTo

	// no validation rules for NetworkFrom

	// no validation rules for NetworkTo

	// no validation rules for AmountFrom

	// no validation rules for AmountTo

	if all {
		switch v := interface{}(m.GetAddressTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrepareSwapRequestValidationError{
					field:  "AddressTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrepareSwapRequestValidationError{
					field:  "AddressTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareSwapRequestValidationError{
				field:  "AddressTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ParentId

	if len(errors) > 0 {
		return PrepareSwapRequestMultiError(errors)
	}

	return nil
}

// PrepareSwapRequestMultiError is an error wrapping multiple validation errors
// returned by PrepareSwapRequest.ValidateAll() if the designated constraints
// aren't met.
type PrepareSwapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrepareSwapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrepareSwapRequestMultiError) AllErrors() []error { return m }

// PrepareSwapRequestValidationError is the validation error returned by
// PrepareSwapRequest.Validate if the designated constraints aren't met.
type PrepareSwapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareSwapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareSwapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareSwapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareSwapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareSwapRequestValidationError) ErrorName() string {
	return "PrepareSwapRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrepareSwapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareSwapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareSwapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareSwapRequestValidationError{}

// Validate checks the field values on PrepareSwapResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrepareSwapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrepareSwapResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrepareSwapResponseMultiError, or nil if none found.
func (m *PrepareSwapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PrepareSwapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetDepositAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrepareSwapResponseValidationError{
					field:  "DepositAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrepareSwapResponseValidationError{
					field:  "DepositAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepositAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareSwapResponseValidationError{
				field:  "DepositAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PrepareSwapResponseMultiError(errors)
	}

	return nil
}

// PrepareSwapResponseMultiError is an error wrapping multiple validation
// errors returned by PrepareSwapResponse.ValidateAll() if the designated
// constraints aren't met.
type PrepareSwapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrepareSwapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrepareSwapResponseMultiError) AllErrors() []error { return m }

// PrepareSwapResponseValidationError is the validation error returned by
// PrepareSwapResponse.Validate if the designated constraints aren't met.
type PrepareSwapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareSwapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareSwapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareSwapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareSwapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareSwapResponseValidationError) ErrorName() string {
	return "PrepareSwapResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PrepareSwapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareSwapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareSwapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareSwapResponseValidationError{}

// Validate checks the field values on StartSwapRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartSwapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSwapRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartSwapRequestMultiError, or nil if none found.
func (m *StartSwapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSwapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SwapId

	// no validation rules for Email

	// no validation rules for Language

	if len(errors) > 0 {
		return StartSwapRequestMultiError(errors)
	}

	return nil
}

// StartSwapRequestMultiError is an error wrapping multiple validation errors
// returned by StartSwapRequest.ValidateAll() if the designated constraints
// aren't met.
type StartSwapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSwapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSwapRequestMultiError) AllErrors() []error { return m }

// StartSwapRequestValidationError is the validation error returned by
// StartSwapRequest.Validate if the designated constraints aren't met.
type StartSwapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSwapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSwapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSwapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSwapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSwapRequestValidationError) ErrorName() string { return "StartSwapRequestValidationError" }

// Error satisfies the builtin error interface
func (e StartSwapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSwapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSwapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSwapRequestValidationError{}

// Validate checks the field values on StartSwapResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartSwapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSwapResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartSwapResponseMultiError, or nil if none found.
func (m *StartSwapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSwapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartSwapResponseMultiError(errors)
	}

	return nil
}

// StartSwapResponseMultiError is an error wrapping multiple validation errors
// returned by StartSwapResponse.ValidateAll() if the designated constraints
// aren't met.
type StartSwapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSwapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSwapResponseMultiError) AllErrors() []error { return m }

// StartSwapResponseValidationError is the validation error returned by
// StartSwapResponse.Validate if the designated constraints aren't met.
type StartSwapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSwapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSwapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSwapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSwapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSwapResponseValidationError) ErrorName() string {
	return "StartSwapResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartSwapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSwapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSwapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSwapResponseValidationError{}

// Validate checks the field values on StatusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusRequestMultiError, or
// nil if none found.
func (m *StatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SwapId

	if len(errors) > 0 {
		return StatusRequestMultiError(errors)
	}

	return nil
}

// StatusRequestMultiError is an error wrapping multiple validation errors
// returned by StatusRequest.ValidateAll() if the designated constraints
// aren't met.
type StatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusRequestMultiError) AllErrors() []error { return m }

// StatusRequestValidationError is the validation error returned by
// StatusRequest.Validate if the designated constraints aren't met.
type StatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusRequestValidationError) ErrorName() string { return "StatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusRequestValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusResponseMultiError,
// or nil if none found.
func (m *StatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return StatusResponseMultiError(errors)
	}

	return nil
}

// StatusResponseMultiError is an error wrapping multiple validation errors
// returned by StatusResponse.ValidateAll() if the designated constraints
// aren't met.
type StatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusResponseMultiError) AllErrors() []error { return m }

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}
