// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: protocol/proto/swap.proto

package swap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SwapService_Estimate_FullMethodName    = "/swap.SwapService/Estimate"
	SwapService_PrepareSwap_FullMethodName = "/swap.SwapService/PrepareSwap"
	SwapService_StartSwap_FullMethodName   = "/swap.SwapService/StartSwap"
	SwapService_Status_FullMethodName      = "/swap.SwapService/Status"
	SwapService_GetSwapByID_FullMethodName = "/swap.SwapService/GetSwapByID"
)

// SwapServiceClient is the client API for SwapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapServiceClient interface {
	Estimate(ctx context.Context, in *EstimateRequest, opts ...grpc.CallOption) (*EstimateResponse, error)
	PrepareSwap(ctx context.Context, in *PrepareSwapRequest, opts ...grpc.CallOption) (*PrepareSwapResponse, error)
	StartSwap(ctx context.Context, in *StartSwapRequest, opts ...grpc.CallOption) (*StartSwapResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusResponse], error)
	GetSwapByID(ctx context.Context, in *GetSwapByIDRequest, opts ...grpc.CallOption) (*GetSwapByIDResponse, error)
}

type swapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapServiceClient(cc grpc.ClientConnInterface) SwapServiceClient {
	return &swapServiceClient{cc}
}

func (c *swapServiceClient) Estimate(ctx context.Context, in *EstimateRequest, opts ...grpc.CallOption) (*EstimateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateResponse)
	err := c.cc.Invoke(ctx, SwapService_Estimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) PrepareSwap(ctx context.Context, in *PrepareSwapRequest, opts ...grpc.CallOption) (*PrepareSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareSwapResponse)
	err := c.cc.Invoke(ctx, SwapService_PrepareSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) StartSwap(ctx context.Context, in *StartSwapRequest, opts ...grpc.CallOption) (*StartSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSwapResponse)
	err := c.cc.Invoke(ctx, SwapService_StartSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SwapService_ServiceDesc.Streams[0], SwapService_Status_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StatusRequest, StatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SwapService_StatusClient = grpc.ServerStreamingClient[StatusResponse]

func (c *swapServiceClient) GetSwapByID(ctx context.Context, in *GetSwapByIDRequest, opts ...grpc.CallOption) (*GetSwapByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwapByIDResponse)
	err := c.cc.Invoke(ctx, SwapService_GetSwapByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapServiceServer is the server API for SwapService service.
// All implementations must embed UnimplementedSwapServiceServer
// for forward compatibility.
type SwapServiceServer interface {
	Estimate(context.Context, *EstimateRequest) (*EstimateResponse, error)
	PrepareSwap(context.Context, *PrepareSwapRequest) (*PrepareSwapResponse, error)
	StartSwap(context.Context, *StartSwapRequest) (*StartSwapResponse, error)
	Status(*StatusRequest, grpc.ServerStreamingServer[StatusResponse]) error
	GetSwapByID(context.Context, *GetSwapByIDRequest) (*GetSwapByIDResponse, error)
	mustEmbedUnimplementedSwapServiceServer()
}

// UnimplementedSwapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwapServiceServer struct{}

func (UnimplementedSwapServiceServer) Estimate(context.Context, *EstimateRequest) (*EstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Estimate not implemented")
}
func (UnimplementedSwapServiceServer) PrepareSwap(context.Context, *PrepareSwapRequest) (*PrepareSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSwap not implemented")
}
func (UnimplementedSwapServiceServer) StartSwap(context.Context, *StartSwapRequest) (*StartSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSwap not implemented")
}
func (UnimplementedSwapServiceServer) Status(*StatusRequest, grpc.ServerStreamingServer[StatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedSwapServiceServer) GetSwapByID(context.Context, *GetSwapByIDRequest) (*GetSwapByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapByID not implemented")
}
func (UnimplementedSwapServiceServer) mustEmbedUnimplementedSwapServiceServer() {}
func (UnimplementedSwapServiceServer) testEmbeddedByValue()                     {}

// UnsafeSwapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapServiceServer will
// result in compilation errors.
type UnsafeSwapServiceServer interface {
	mustEmbedUnimplementedSwapServiceServer()
}

func RegisterSwapServiceServer(s grpc.ServiceRegistrar, srv SwapServiceServer) {
	// If the following call pancis, it indicates UnimplementedSwapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SwapService_ServiceDesc, srv)
}

func _SwapService_Estimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).Estimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_Estimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).Estimate(ctx, req.(*EstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_PrepareSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).PrepareSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_PrepareSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).PrepareSwap(ctx, req.(*PrepareSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_StartSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).StartSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_StartSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).StartSwap(ctx, req.(*StartSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwapServiceServer).Status(m, &grpc.GenericServerStream[StatusRequest, StatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SwapService_StatusServer = grpc.ServerStreamingServer[StatusResponse]

func _SwapService_GetSwapByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).GetSwapByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_GetSwapByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).GetSwapByID(ctx, req.(*GetSwapByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwapService_ServiceDesc is the grpc.ServiceDesc for SwapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swap.SwapService",
	HandlerType: (*SwapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Estimate",
			Handler:    _SwapService_Estimate_Handler,
		},
		{
			MethodName: "PrepareSwap",
			Handler:    _SwapService_PrepareSwap_Handler,
		},
		{
			MethodName: "StartSwap",
			Handler:    _SwapService_StartSwap_Handler,
		},
		{
			MethodName: "GetSwapByID",
			Handler:    _SwapService_GetSwapByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Status",
			Handler:       _SwapService_Status_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/proto/swap.proto",
}
