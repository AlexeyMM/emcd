// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/proto/swapAdmin.proto

package swapAdmin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	swap "code.emcdtech.com/b2b/swap/protocol/swap"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = swap.SwapStatus(0)
)

// Validate checks the field values on Swap with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Swap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Swap with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SwapMultiError, or nil if none found.
func (m *Swap) ValidateAll() error {
	return m.validate(true)
}

func (m *Swap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for CoinFrom

	// no validation rules for CoinTo

	// no validation rules for NetworkFrom

	// no validation rules for NetworkTo

	if all {
		switch v := interface{}(m.GetAddressFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SwapValidationError{
					field:  "AddressFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SwapValidationError{
					field:  "AddressFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapValidationError{
				field:  "AddressFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddressTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SwapValidationError{
					field:  "AddressTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SwapValidationError{
					field:  "AddressTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddressTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapValidationError{
				field:  "AddressTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AmountFrom

	// no validation rules for AmountTo

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SwapValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SwapValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SwapValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SwapValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PartnerId

	if len(errors) > 0 {
		return SwapMultiError(errors)
	}

	return nil
}

// SwapMultiError is an error wrapping multiple validation errors returned by
// Swap.ValidateAll() if the designated constraints aren't met.
type SwapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwapMultiError) AllErrors() []error { return m }

// SwapValidationError is the validation error returned by Swap.Validate if the
// designated constraints aren't met.
type SwapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapValidationError) ErrorName() string { return "SwapValidationError" }

// Error satisfies the builtin error interface
func (e SwapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapValidationError{}

// Validate checks the field values on GetBalanceByCoinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalanceByCoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalanceByCoinRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalanceByCoinRequestMultiError, or nil if none found.
func (m *GetBalanceByCoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalanceByCoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountType

	// no validation rules for Coin

	if len(errors) > 0 {
		return GetBalanceByCoinRequestMultiError(errors)
	}

	return nil
}

// GetBalanceByCoinRequestMultiError is an error wrapping multiple validation
// errors returned by GetBalanceByCoinRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBalanceByCoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalanceByCoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalanceByCoinRequestMultiError) AllErrors() []error { return m }

// GetBalanceByCoinRequestValidationError is the validation error returned by
// GetBalanceByCoinRequest.Validate if the designated constraints aren't met.
type GetBalanceByCoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceByCoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceByCoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceByCoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceByCoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceByCoinRequestValidationError) ErrorName() string {
	return "GetBalanceByCoinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceByCoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceByCoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceByCoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceByCoinRequestValidationError{}

// Validate checks the field values on GetBalanceByCoinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalanceByCoinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalanceByCoinResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalanceByCoinResponseMultiError, or nil if none found.
func (m *GetBalanceByCoinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalanceByCoinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	if len(errors) > 0 {
		return GetBalanceByCoinResponseMultiError(errors)
	}

	return nil
}

// GetBalanceByCoinResponseMultiError is an error wrapping multiple validation
// errors returned by GetBalanceByCoinResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBalanceByCoinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalanceByCoinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalanceByCoinResponseMultiError) AllErrors() []error { return m }

// GetBalanceByCoinResponseValidationError is the validation error returned by
// GetBalanceByCoinResponse.Validate if the designated constraints aren't met.
type GetBalanceByCoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceByCoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceByCoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceByCoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceByCoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceByCoinResponseValidationError) ErrorName() string {
	return "GetBalanceByCoinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceByCoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceByCoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceByCoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceByCoinResponseValidationError{}

// Validate checks the field values on TransferBetweenAccountTypesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TransferBetweenAccountTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferBetweenAccountTypesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TransferBetweenAccountTypesRequestMultiError, or nil if none found.
func (m *TransferBetweenAccountTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferBetweenAccountTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromAccountType

	// no validation rules for ToAccountType

	// no validation rules for Coin

	// no validation rules for Amount

	if len(errors) > 0 {
		return TransferBetweenAccountTypesRequestMultiError(errors)
	}

	return nil
}

// TransferBetweenAccountTypesRequestMultiError is an error wrapping multiple
// validation errors returned by
// TransferBetweenAccountTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferBetweenAccountTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferBetweenAccountTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferBetweenAccountTypesRequestMultiError) AllErrors() []error { return m }

// TransferBetweenAccountTypesRequestValidationError is the validation error
// returned by TransferBetweenAccountTypesRequest.Validate if the designated
// constraints aren't met.
type TransferBetweenAccountTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferBetweenAccountTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferBetweenAccountTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferBetweenAccountTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferBetweenAccountTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferBetweenAccountTypesRequestValidationError) ErrorName() string {
	return "TransferBetweenAccountTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferBetweenAccountTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferBetweenAccountTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferBetweenAccountTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferBetweenAccountTypesRequestValidationError{}

// Validate checks the field values on TransferBetweenAccountTypesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TransferBetweenAccountTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferBetweenAccountTypesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TransferBetweenAccountTypesResponseMultiError, or nil if none found.
func (m *TransferBetweenAccountTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferBetweenAccountTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransferBetweenAccountTypesResponseMultiError(errors)
	}

	return nil
}

// TransferBetweenAccountTypesResponseMultiError is an error wrapping multiple
// validation errors returned by
// TransferBetweenAccountTypesResponse.ValidateAll() if the designated
// constraints aren't met.
type TransferBetweenAccountTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferBetweenAccountTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferBetweenAccountTypesResponseMultiError) AllErrors() []error { return m }

// TransferBetweenAccountTypesResponseValidationError is the validation error
// returned by TransferBetweenAccountTypesResponse.Validate if the designated
// constraints aren't met.
type TransferBetweenAccountTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferBetweenAccountTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferBetweenAccountTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferBetweenAccountTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferBetweenAccountTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferBetweenAccountTypesResponseValidationError) ErrorName() string {
	return "TransferBetweenAccountTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferBetweenAccountTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferBetweenAccountTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferBetweenAccountTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferBetweenAccountTypesResponseValidationError{}

// Validate checks the field values on PlaceOrderForUSDTRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderForUSDTRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderForUSDTRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderForUSDTRequestMultiError, or nil if none found.
func (m *PlaceOrderForUSDTRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderForUSDTRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Coin

	// no validation rules for Direction

	// no validation rules for Amount

	if len(errors) > 0 {
		return PlaceOrderForUSDTRequestMultiError(errors)
	}

	return nil
}

// PlaceOrderForUSDTRequestMultiError is an error wrapping multiple validation
// errors returned by PlaceOrderForUSDTRequest.ValidateAll() if the designated
// constraints aren't met.
type PlaceOrderForUSDTRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderForUSDTRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderForUSDTRequestMultiError) AllErrors() []error { return m }

// PlaceOrderForUSDTRequestValidationError is the validation error returned by
// PlaceOrderForUSDTRequest.Validate if the designated constraints aren't met.
type PlaceOrderForUSDTRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderForUSDTRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderForUSDTRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderForUSDTRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderForUSDTRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderForUSDTRequestValidationError) ErrorName() string {
	return "PlaceOrderForUSDTRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlaceOrderForUSDTRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderForUSDTRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderForUSDTRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderForUSDTRequestValidationError{}

// Validate checks the field values on PlaceOrderForUSDTResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlaceOrderForUSDTResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlaceOrderForUSDTResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlaceOrderForUSDTResponseMultiError, or nil if none found.
func (m *PlaceOrderForUSDTResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlaceOrderForUSDTResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return PlaceOrderForUSDTResponseMultiError(errors)
	}

	return nil
}

// PlaceOrderForUSDTResponseMultiError is an error wrapping multiple validation
// errors returned by PlaceOrderForUSDTResponse.ValidateAll() if the
// designated constraints aren't met.
type PlaceOrderForUSDTResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlaceOrderForUSDTResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlaceOrderForUSDTResponseMultiError) AllErrors() []error { return m }

// PlaceOrderForUSDTResponseValidationError is the validation error returned by
// PlaceOrderForUSDTResponse.Validate if the designated constraints aren't met.
type PlaceOrderForUSDTResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceOrderForUSDTResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceOrderForUSDTResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceOrderForUSDTResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceOrderForUSDTResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceOrderForUSDTResponseValidationError) ErrorName() string {
	return "PlaceOrderForUSDTResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlaceOrderForUSDTResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceOrderForUSDTResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceOrderForUSDTResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceOrderForUSDTResponseValidationError{}

// Validate checks the field values on CheckOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckOrderRequestMultiError, or nil if none found.
func (m *CheckOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CheckOrderRequestMultiError(errors)
	}

	return nil
}

// CheckOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CheckOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOrderRequestMultiError) AllErrors() []error { return m }

// CheckOrderRequestValidationError is the validation error returned by
// CheckOrderRequest.Validate if the designated constraints aren't met.
type CheckOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOrderRequestValidationError) ErrorName() string {
	return "CheckOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOrderRequestValidationError{}

// Validate checks the field values on CheckOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckOrderResponseMultiError, or nil if none found.
func (m *CheckOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CheckOrderResponseMultiError(errors)
	}

	return nil
}

// CheckOrderResponseMultiError is an error wrapping multiple validation errors
// returned by CheckOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOrderResponseMultiError) AllErrors() []error { return m }

// CheckOrderResponseValidationError is the validation error returned by
// CheckOrderResponse.Validate if the designated constraints aren't met.
type CheckOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOrderResponseValidationError) ErrorName() string {
	return "CheckOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOrderResponseValidationError{}

// Validate checks the field values on WithdrawRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawRequestMultiError, or nil if none found.
func (m *WithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SwapId

	if len(errors) > 0 {
		return WithdrawRequestMultiError(errors)
	}

	return nil
}

// WithdrawRequestMultiError is an error wrapping multiple validation errors
// returned by WithdrawRequest.ValidateAll() if the designated constraints
// aren't met.
type WithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawRequestMultiError) AllErrors() []error { return m }

// WithdrawRequestValidationError is the validation error returned by
// WithdrawRequest.Validate if the designated constraints aren't met.
type WithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawRequestValidationError) ErrorName() string { return "WithdrawRequestValidationError" }

// Error satisfies the builtin error interface
func (e WithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawRequestValidationError{}

// Validate checks the field values on WithdrawResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WithdrawResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawResponseMultiError, or nil if none found.
func (m *WithdrawResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WithdrawalId

	if len(errors) > 0 {
		return WithdrawResponseMultiError(errors)
	}

	return nil
}

// WithdrawResponseMultiError is an error wrapping multiple validation errors
// returned by WithdrawResponse.ValidateAll() if the designated constraints
// aren't met.
type WithdrawResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawResponseMultiError) AllErrors() []error { return m }

// WithdrawResponseValidationError is the validation error returned by
// WithdrawResponse.Validate if the designated constraints aren't met.
type WithdrawResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawResponseValidationError) ErrorName() string { return "WithdrawResponseValidationError" }

// Error satisfies the builtin error interface
func (e WithdrawResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawResponseValidationError{}

// Validate checks the field values on GetWithdrawalLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWithdrawalLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWithdrawalLinkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWithdrawalLinkRequestMultiError, or nil if none found.
func (m *GetWithdrawalLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWithdrawalLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WithdrawalId

	if len(errors) > 0 {
		return GetWithdrawalLinkRequestMultiError(errors)
	}

	return nil
}

// GetWithdrawalLinkRequestMultiError is an error wrapping multiple validation
// errors returned by GetWithdrawalLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWithdrawalLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWithdrawalLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWithdrawalLinkRequestMultiError) AllErrors() []error { return m }

// GetWithdrawalLinkRequestValidationError is the validation error returned by
// GetWithdrawalLinkRequest.Validate if the designated constraints aren't met.
type GetWithdrawalLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWithdrawalLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWithdrawalLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWithdrawalLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWithdrawalLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWithdrawalLinkRequestValidationError) ErrorName() string {
	return "GetWithdrawalLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWithdrawalLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWithdrawalLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWithdrawalLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWithdrawalLinkRequestValidationError{}

// Validate checks the field values on GetWithdrawalLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWithdrawalLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWithdrawalLinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWithdrawalLinkResponseMultiError, or nil if none found.
func (m *GetWithdrawalLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWithdrawalLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Link

	if len(errors) > 0 {
		return GetWithdrawalLinkResponseMultiError(errors)
	}

	return nil
}

// GetWithdrawalLinkResponseMultiError is an error wrapping multiple validation
// errors returned by GetWithdrawalLinkResponse.ValidateAll() if the
// designated constraints aren't met.
type GetWithdrawalLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWithdrawalLinkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWithdrawalLinkResponseMultiError) AllErrors() []error { return m }

// GetWithdrawalLinkResponseValidationError is the validation error returned by
// GetWithdrawalLinkResponse.Validate if the designated constraints aren't met.
type GetWithdrawalLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWithdrawalLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWithdrawalLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWithdrawalLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWithdrawalLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWithdrawalLinkResponseValidationError) ErrorName() string {
	return "GetWithdrawalLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWithdrawalLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWithdrawalLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWithdrawalLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWithdrawalLinkResponseValidationError{}

// Validate checks the field values on RequestAQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestAQuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestAQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestAQuoteRequestMultiError, or nil if none found.
func (m *RequestAQuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestAQuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for To

	// no validation rules for AccountType

	// no validation rules for Amount

	if len(errors) > 0 {
		return RequestAQuoteRequestMultiError(errors)
	}

	return nil
}

// RequestAQuoteRequestMultiError is an error wrapping multiple validation
// errors returned by RequestAQuoteRequest.ValidateAll() if the designated
// constraints aren't met.
type RequestAQuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestAQuoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestAQuoteRequestMultiError) AllErrors() []error { return m }

// RequestAQuoteRequestValidationError is the validation error returned by
// RequestAQuoteRequest.Validate if the designated constraints aren't met.
type RequestAQuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestAQuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestAQuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestAQuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestAQuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestAQuoteRequestValidationError) ErrorName() string {
	return "RequestAQuoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestAQuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestAQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestAQuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestAQuoteRequestValidationError{}

// Validate checks the field values on RequestAQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestAQuoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestAQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestAQuoteResponseMultiError, or nil if none found.
func (m *RequestAQuoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestAQuoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Rate

	// no validation rules for FromAmount

	// no validation rules for ToAmount

	if all {
		switch v := interface{}(m.GetExpiredTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestAQuoteResponseValidationError{
					field:  "ExpiredTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestAQuoteResponseValidationError{
					field:  "ExpiredTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestAQuoteResponseValidationError{
				field:  "ExpiredTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestAQuoteResponseMultiError(errors)
	}

	return nil
}

// RequestAQuoteResponseMultiError is an error wrapping multiple validation
// errors returned by RequestAQuoteResponse.ValidateAll() if the designated
// constraints aren't met.
type RequestAQuoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestAQuoteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestAQuoteResponseMultiError) AllErrors() []error { return m }

// RequestAQuoteResponseValidationError is the validation error returned by
// RequestAQuoteResponse.Validate if the designated constraints aren't met.
type RequestAQuoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestAQuoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestAQuoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestAQuoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestAQuoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestAQuoteResponseValidationError) ErrorName() string {
	return "RequestAQuoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestAQuoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestAQuoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestAQuoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestAQuoteResponseValidationError{}

// Validate checks the field values on ConfirmAQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmAQuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmAQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmAQuoteRequestMultiError, or nil if none found.
func (m *ConfirmAQuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmAQuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ConfirmAQuoteRequestMultiError(errors)
	}

	return nil
}

// ConfirmAQuoteRequestMultiError is an error wrapping multiple validation
// errors returned by ConfirmAQuoteRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfirmAQuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmAQuoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmAQuoteRequestMultiError) AllErrors() []error { return m }

// ConfirmAQuoteRequestValidationError is the validation error returned by
// ConfirmAQuoteRequest.Validate if the designated constraints aren't met.
type ConfirmAQuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmAQuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmAQuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmAQuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmAQuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmAQuoteRequestValidationError) ErrorName() string {
	return "ConfirmAQuoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmAQuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmAQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmAQuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmAQuoteRequestValidationError{}

// Validate checks the field values on ConfirmAQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmAQuoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmAQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmAQuoteResponseMultiError, or nil if none found.
func (m *ConfirmAQuoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmAQuoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return ConfirmAQuoteResponseMultiError(errors)
	}

	return nil
}

// ConfirmAQuoteResponseMultiError is an error wrapping multiple validation
// errors returned by ConfirmAQuoteResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfirmAQuoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmAQuoteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmAQuoteResponseMultiError) AllErrors() []error { return m }

// ConfirmAQuoteResponseValidationError is the validation error returned by
// ConfirmAQuoteResponse.Validate if the designated constraints aren't met.
type ConfirmAQuoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmAQuoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmAQuoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmAQuoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmAQuoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmAQuoteResponseValidationError) ErrorName() string {
	return "ConfirmAQuoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmAQuoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmAQuoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmAQuoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmAQuoteResponseValidationError{}

// Validate checks the field values on GetConvertStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConvertStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConvertStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConvertStatusRequestMultiError, or nil if none found.
func (m *GetConvertStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConvertStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccountType

	if len(errors) > 0 {
		return GetConvertStatusRequestMultiError(errors)
	}

	return nil
}

// GetConvertStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetConvertStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConvertStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConvertStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConvertStatusRequestMultiError) AllErrors() []error { return m }

// GetConvertStatusRequestValidationError is the validation error returned by
// GetConvertStatusRequest.Validate if the designated constraints aren't met.
type GetConvertStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConvertStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConvertStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConvertStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConvertStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConvertStatusRequestValidationError) ErrorName() string {
	return "GetConvertStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConvertStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConvertStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConvertStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConvertStatusRequestValidationError{}

// Validate checks the field values on GetConvertStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConvertStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConvertStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConvertStatusResponseMultiError, or nil if none found.
func (m *GetConvertStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConvertStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetConvertStatusResponseMultiError(errors)
	}

	return nil
}

// GetConvertStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetConvertStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConvertStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConvertStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConvertStatusResponseMultiError) AllErrors() []error { return m }

// GetConvertStatusResponseValidationError is the validation error returned by
// GetConvertStatusResponse.Validate if the designated constraints aren't met.
type GetConvertStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConvertStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConvertStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConvertStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConvertStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConvertStatusResponseValidationError) ErrorName() string {
	return "GetConvertStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConvertStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConvertStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConvertStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConvertStatusResponseValidationError{}

// Validate checks the field values on GetSwapsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSwapsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSwapsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSwapsRequestMultiError, or nil if none found.
func (m *GetSwapsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSwapsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.AddressFrom != nil {
		// no validation rules for AddressFrom
	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSwapsRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSwapsRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSwapsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.To != nil {

		if all {
			switch v := interface{}(m.GetTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSwapsRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSwapsRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSwapsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSwapsRequestMultiError(errors)
	}

	return nil
}

// GetSwapsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSwapsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSwapsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSwapsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSwapsRequestMultiError) AllErrors() []error { return m }

// GetSwapsRequestValidationError is the validation error returned by
// GetSwapsRequest.Validate if the designated constraints aren't met.
type GetSwapsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSwapsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSwapsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSwapsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSwapsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSwapsRequestValidationError) ErrorName() string { return "GetSwapsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSwapsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSwapsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSwapsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSwapsRequestValidationError{}

// Validate checks the field values on GetSwapsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSwapsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSwapsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSwapsResponseMultiError, or nil if none found.
func (m *GetSwapsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSwapsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSwaps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSwapsResponseValidationError{
						field:  fmt.Sprintf("Swaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSwapsResponseValidationError{
						field:  fmt.Sprintf("Swaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSwapsResponseValidationError{
					field:  fmt.Sprintf("Swaps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSwapsResponseMultiError(errors)
	}

	return nil
}

// GetSwapsResponseMultiError is an error wrapping multiple validation errors
// returned by GetSwapsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSwapsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSwapsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSwapsResponseMultiError) AllErrors() []error { return m }

// GetSwapsResponseValidationError is the validation error returned by
// GetSwapsResponse.Validate if the designated constraints aren't met.
type GetSwapsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSwapsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSwapsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSwapsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSwapsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSwapsResponseValidationError) ErrorName() string { return "GetSwapsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSwapsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSwapsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSwapsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSwapsResponseValidationError{}

// Validate checks the field values on GetSwapStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSwapStatusHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSwapStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSwapStatusHistoryRequestMultiError, or nil if none found.
func (m *GetSwapStatusHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSwapStatusHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SwapId

	if len(errors) > 0 {
		return GetSwapStatusHistoryRequestMultiError(errors)
	}

	return nil
}

// GetSwapStatusHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetSwapStatusHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSwapStatusHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSwapStatusHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSwapStatusHistoryRequestMultiError) AllErrors() []error { return m }

// GetSwapStatusHistoryRequestValidationError is the validation error returned
// by GetSwapStatusHistoryRequest.Validate if the designated constraints
// aren't met.
type GetSwapStatusHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSwapStatusHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSwapStatusHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSwapStatusHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSwapStatusHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSwapStatusHistoryRequestValidationError) ErrorName() string {
	return "GetSwapStatusHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSwapStatusHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSwapStatusHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSwapStatusHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSwapStatusHistoryRequestValidationError{}

// Validate checks the field values on GetSwapStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSwapStatusHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSwapStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSwapStatusHistoryResponseMultiError, or nil if none found.
func (m *GetSwapStatusHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSwapStatusHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatusHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSwapStatusHistoryResponseValidationError{
						field:  fmt.Sprintf("StatusHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSwapStatusHistoryResponseValidationError{
						field:  fmt.Sprintf("StatusHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSwapStatusHistoryResponseValidationError{
					field:  fmt.Sprintf("StatusHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSwapStatusHistoryResponseMultiError(errors)
	}

	return nil
}

// GetSwapStatusHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetSwapStatusHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSwapStatusHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSwapStatusHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSwapStatusHistoryResponseMultiError) AllErrors() []error { return m }

// GetSwapStatusHistoryResponseValidationError is the validation error returned
// by GetSwapStatusHistoryResponse.Validate if the designated constraints
// aren't met.
type GetSwapStatusHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSwapStatusHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSwapStatusHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSwapStatusHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSwapStatusHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSwapStatusHistoryResponseValidationError) ErrorName() string {
	return "GetSwapStatusHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSwapStatusHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSwapStatusHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSwapStatusHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSwapStatusHistoryResponseValidationError{}

// Validate checks the field values on ChangeManualSwapStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeManualSwapStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeManualSwapStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeManualSwapStatusRequestMultiError, or nil if none found.
func (m *ChangeManualSwapStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeManualSwapStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SwapId

	// no validation rules for Status

	if len(errors) > 0 {
		return ChangeManualSwapStatusRequestMultiError(errors)
	}

	return nil
}

// ChangeManualSwapStatusRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeManualSwapStatusRequest.ValidateAll()
// if the designated constraints aren't met.
type ChangeManualSwapStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeManualSwapStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeManualSwapStatusRequestMultiError) AllErrors() []error { return m }

// ChangeManualSwapStatusRequestValidationError is the validation error
// returned by ChangeManualSwapStatusRequest.Validate if the designated
// constraints aren't met.
type ChangeManualSwapStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeManualSwapStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeManualSwapStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeManualSwapStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeManualSwapStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeManualSwapStatusRequestValidationError) ErrorName() string {
	return "ChangeManualSwapStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeManualSwapStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeManualSwapStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeManualSwapStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeManualSwapStatusRequestValidationError{}

// Validate checks the field values on ChangeManualSwapStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeManualSwapStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeManualSwapStatusResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChangeManualSwapStatusResponseMultiError, or nil if none found.
func (m *ChangeManualSwapStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeManualSwapStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeManualSwapStatusResponseMultiError(errors)
	}

	return nil
}

// ChangeManualSwapStatusResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeManualSwapStatusResponse.ValidateAll()
// if the designated constraints aren't met.
type ChangeManualSwapStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeManualSwapStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeManualSwapStatusResponseMultiError) AllErrors() []error { return m }

// ChangeManualSwapStatusResponseValidationError is the validation error
// returned by ChangeManualSwapStatusResponse.Validate if the designated
// constraints aren't met.
type ChangeManualSwapStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeManualSwapStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeManualSwapStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeManualSwapStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeManualSwapStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeManualSwapStatusResponseValidationError) ErrorName() string {
	return "ChangeManualSwapStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeManualSwapStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeManualSwapStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeManualSwapStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeManualSwapStatusResponseValidationError{}

// Validate checks the field values on GetSwapStatusHistoryResponse_HistoryItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSwapStatusHistoryResponse_HistoryItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetSwapStatusHistoryResponse_HistoryItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetSwapStatusHistoryResponse_HistoryItemMultiError, or nil if none found.
func (m *GetSwapStatusHistoryResponse_HistoryItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSwapStatusHistoryResponse_HistoryItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetSetAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSwapStatusHistoryResponse_HistoryItemValidationError{
					field:  "SetAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSwapStatusHistoryResponse_HistoryItemValidationError{
					field:  "SetAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSwapStatusHistoryResponse_HistoryItemValidationError{
				field:  "SetAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSwapStatusHistoryResponse_HistoryItemMultiError(errors)
	}

	return nil
}

// GetSwapStatusHistoryResponse_HistoryItemMultiError is an error wrapping
// multiple validation errors returned by
// GetSwapStatusHistoryResponse_HistoryItem.ValidateAll() if the designated
// constraints aren't met.
type GetSwapStatusHistoryResponse_HistoryItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSwapStatusHistoryResponse_HistoryItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSwapStatusHistoryResponse_HistoryItemMultiError) AllErrors() []error { return m }

// GetSwapStatusHistoryResponse_HistoryItemValidationError is the validation
// error returned by GetSwapStatusHistoryResponse_HistoryItem.Validate if the
// designated constraints aren't met.
type GetSwapStatusHistoryResponse_HistoryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSwapStatusHistoryResponse_HistoryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSwapStatusHistoryResponse_HistoryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSwapStatusHistoryResponse_HistoryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSwapStatusHistoryResponse_HistoryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSwapStatusHistoryResponse_HistoryItemValidationError) ErrorName() string {
	return "GetSwapStatusHistoryResponse_HistoryItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSwapStatusHistoryResponse_HistoryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSwapStatusHistoryResponse_HistoryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSwapStatusHistoryResponse_HistoryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSwapStatusHistoryResponse_HistoryItemValidationError{}
