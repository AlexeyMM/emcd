// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: protocol/proto/swapAdmin.proto

package swapAdmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_GetBalanceByCoin_FullMethodName            = "/swapAdmin.AdminService/GetBalanceByCoin"
	AdminService_TransferBetweenAccountTypes_FullMethodName = "/swapAdmin.AdminService/TransferBetweenAccountTypes"
	AdminService_PlaceOrderForUSDT_FullMethodName           = "/swapAdmin.AdminService/PlaceOrderForUSDT"
	AdminService_CheckOrder_FullMethodName                  = "/swapAdmin.AdminService/CheckOrder"
	AdminService_Withdraw_FullMethodName                    = "/swapAdmin.AdminService/Withdraw"
	AdminService_GetWithdrawalLink_FullMethodName           = "/swapAdmin.AdminService/GetWithdrawalLink"
	AdminService_RequestAQuote_FullMethodName               = "/swapAdmin.AdminService/RequestAQuote"
	AdminService_ConfirmAQuote_FullMethodName               = "/swapAdmin.AdminService/ConfirmAQuote"
	AdminService_GetConvertStatus_FullMethodName            = "/swapAdmin.AdminService/GetConvertStatus"
	AdminService_GetSwaps_FullMethodName                    = "/swapAdmin.AdminService/GetSwaps"
	AdminService_GetSwapStatusHistory_FullMethodName        = "/swapAdmin.AdminService/GetSwapStatusHistory"
	AdminService_ChangeManualSwapStatus_FullMethodName      = "/swapAdmin.AdminService/ChangeManualSwapStatus"
	AdminService_SetDestinationAddress_FullMethodName       = "/swapAdmin.AdminService/SetDestinationAddress"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	GetBalanceByCoin(ctx context.Context, in *GetBalanceByCoinRequest, opts ...grpc.CallOption) (*GetBalanceByCoinResponse, error)
	TransferBetweenAccountTypes(ctx context.Context, in *TransferBetweenAccountTypesRequest, opts ...grpc.CallOption) (*TransferBetweenAccountTypesResponse, error)
	PlaceOrderForUSDT(ctx context.Context, in *PlaceOrderForUSDTRequest, opts ...grpc.CallOption) (*PlaceOrderForUSDTResponse, error)
	CheckOrder(ctx context.Context, in *CheckOrderRequest, opts ...grpc.CallOption) (*CheckOrderResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	GetWithdrawalLink(ctx context.Context, in *GetWithdrawalLinkRequest, opts ...grpc.CallOption) (*GetWithdrawalLinkResponse, error)
	RequestAQuote(ctx context.Context, in *RequestAQuoteRequest, opts ...grpc.CallOption) (*RequestAQuoteResponse, error)
	ConfirmAQuote(ctx context.Context, in *ConfirmAQuoteRequest, opts ...grpc.CallOption) (*ConfirmAQuoteResponse, error)
	GetConvertStatus(ctx context.Context, in *GetConvertStatusRequest, opts ...grpc.CallOption) (*GetConvertStatusResponse, error)
	GetSwaps(ctx context.Context, in *GetSwapsRequest, opts ...grpc.CallOption) (*GetSwapsResponse, error)
	GetSwapStatusHistory(ctx context.Context, in *GetSwapStatusHistoryRequest, opts ...grpc.CallOption) (*GetSwapStatusHistoryResponse, error)
	ChangeManualSwapStatus(ctx context.Context, in *ChangeManualSwapStatusRequest, opts ...grpc.CallOption) (*ChangeManualSwapStatusResponse, error)
	SetDestinationAddress(ctx context.Context, in *SetDestinationAddressRequest, opts ...grpc.CallOption) (*SetDestinationAddressResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetBalanceByCoin(ctx context.Context, in *GetBalanceByCoinRequest, opts ...grpc.CallOption) (*GetBalanceByCoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceByCoinResponse)
	err := c.cc.Invoke(ctx, AdminService_GetBalanceByCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TransferBetweenAccountTypes(ctx context.Context, in *TransferBetweenAccountTypesRequest, opts ...grpc.CallOption) (*TransferBetweenAccountTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferBetweenAccountTypesResponse)
	err := c.cc.Invoke(ctx, AdminService_TransferBetweenAccountTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PlaceOrderForUSDT(ctx context.Context, in *PlaceOrderForUSDTRequest, opts ...grpc.CallOption) (*PlaceOrderForUSDTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceOrderForUSDTResponse)
	err := c.cc.Invoke(ctx, AdminService_PlaceOrderForUSDT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CheckOrder(ctx context.Context, in *CheckOrderRequest, opts ...grpc.CallOption) (*CheckOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckOrderResponse)
	err := c.cc.Invoke(ctx, AdminService_CheckOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, AdminService_Withdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetWithdrawalLink(ctx context.Context, in *GetWithdrawalLinkRequest, opts ...grpc.CallOption) (*GetWithdrawalLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawalLinkResponse)
	err := c.cc.Invoke(ctx, AdminService_GetWithdrawalLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RequestAQuote(ctx context.Context, in *RequestAQuoteRequest, opts ...grpc.CallOption) (*RequestAQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAQuoteResponse)
	err := c.cc.Invoke(ctx, AdminService_RequestAQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ConfirmAQuote(ctx context.Context, in *ConfirmAQuoteRequest, opts ...grpc.CallOption) (*ConfirmAQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmAQuoteResponse)
	err := c.cc.Invoke(ctx, AdminService_ConfirmAQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetConvertStatus(ctx context.Context, in *GetConvertStatusRequest, opts ...grpc.CallOption) (*GetConvertStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConvertStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_GetConvertStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSwaps(ctx context.Context, in *GetSwapsRequest, opts ...grpc.CallOption) (*GetSwapsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwapsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSwaps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSwapStatusHistory(ctx context.Context, in *GetSwapStatusHistoryRequest, opts ...grpc.CallOption) (*GetSwapStatusHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwapStatusHistoryResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSwapStatusHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ChangeManualSwapStatus(ctx context.Context, in *ChangeManualSwapStatusRequest, opts ...grpc.CallOption) (*ChangeManualSwapStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeManualSwapStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_ChangeManualSwapStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDestinationAddress(ctx context.Context, in *SetDestinationAddressRequest, opts ...grpc.CallOption) (*SetDestinationAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDestinationAddressResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDestinationAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	GetBalanceByCoin(context.Context, *GetBalanceByCoinRequest) (*GetBalanceByCoinResponse, error)
	TransferBetweenAccountTypes(context.Context, *TransferBetweenAccountTypesRequest) (*TransferBetweenAccountTypesResponse, error)
	PlaceOrderForUSDT(context.Context, *PlaceOrderForUSDTRequest) (*PlaceOrderForUSDTResponse, error)
	CheckOrder(context.Context, *CheckOrderRequest) (*CheckOrderResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	GetWithdrawalLink(context.Context, *GetWithdrawalLinkRequest) (*GetWithdrawalLinkResponse, error)
	RequestAQuote(context.Context, *RequestAQuoteRequest) (*RequestAQuoteResponse, error)
	ConfirmAQuote(context.Context, *ConfirmAQuoteRequest) (*ConfirmAQuoteResponse, error)
	GetConvertStatus(context.Context, *GetConvertStatusRequest) (*GetConvertStatusResponse, error)
	GetSwaps(context.Context, *GetSwapsRequest) (*GetSwapsResponse, error)
	GetSwapStatusHistory(context.Context, *GetSwapStatusHistoryRequest) (*GetSwapStatusHistoryResponse, error)
	ChangeManualSwapStatus(context.Context, *ChangeManualSwapStatusRequest) (*ChangeManualSwapStatusResponse, error)
	SetDestinationAddress(context.Context, *SetDestinationAddressRequest) (*SetDestinationAddressResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) GetBalanceByCoin(context.Context, *GetBalanceByCoinRequest) (*GetBalanceByCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceByCoin not implemented")
}
func (UnimplementedAdminServiceServer) TransferBetweenAccountTypes(context.Context, *TransferBetweenAccountTypesRequest) (*TransferBetweenAccountTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBetweenAccountTypes not implemented")
}
func (UnimplementedAdminServiceServer) PlaceOrderForUSDT(context.Context, *PlaceOrderForUSDTRequest) (*PlaceOrderForUSDTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrderForUSDT not implemented")
}
func (UnimplementedAdminServiceServer) CheckOrder(context.Context, *CheckOrderRequest) (*CheckOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrder not implemented")
}
func (UnimplementedAdminServiceServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedAdminServiceServer) GetWithdrawalLink(context.Context, *GetWithdrawalLinkRequest) (*GetWithdrawalLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalLink not implemented")
}
func (UnimplementedAdminServiceServer) RequestAQuote(context.Context, *RequestAQuoteRequest) (*RequestAQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAQuote not implemented")
}
func (UnimplementedAdminServiceServer) ConfirmAQuote(context.Context, *ConfirmAQuoteRequest) (*ConfirmAQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAQuote not implemented")
}
func (UnimplementedAdminServiceServer) GetConvertStatus(context.Context, *GetConvertStatusRequest) (*GetConvertStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConvertStatus not implemented")
}
func (UnimplementedAdminServiceServer) GetSwaps(context.Context, *GetSwapsRequest) (*GetSwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwaps not implemented")
}
func (UnimplementedAdminServiceServer) GetSwapStatusHistory(context.Context, *GetSwapStatusHistoryRequest) (*GetSwapStatusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapStatusHistory not implemented")
}
func (UnimplementedAdminServiceServer) ChangeManualSwapStatus(context.Context, *ChangeManualSwapStatusRequest) (*ChangeManualSwapStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeManualSwapStatus not implemented")
}
func (UnimplementedAdminServiceServer) SetDestinationAddress(context.Context, *SetDestinationAddressRequest) (*SetDestinationAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDestinationAddress not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetBalanceByCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceByCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetBalanceByCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetBalanceByCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetBalanceByCoin(ctx, req.(*GetBalanceByCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TransferBetweenAccountTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferBetweenAccountTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TransferBetweenAccountTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TransferBetweenAccountTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TransferBetweenAccountTypes(ctx, req.(*TransferBetweenAccountTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PlaceOrderForUSDT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderForUSDTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PlaceOrderForUSDT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_PlaceOrderForUSDT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PlaceOrderForUSDT(ctx, req.(*PlaceOrderForUSDTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CheckOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CheckOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CheckOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CheckOrder(ctx, req.(*CheckOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetWithdrawalLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetWithdrawalLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetWithdrawalLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetWithdrawalLink(ctx, req.(*GetWithdrawalLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RequestAQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RequestAQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RequestAQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RequestAQuote(ctx, req.(*RequestAQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ConfirmAQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmAQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ConfirmAQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ConfirmAQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ConfirmAQuote(ctx, req.(*ConfirmAQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetConvertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConvertStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetConvertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetConvertStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetConvertStatus(ctx, req.(*GetConvertStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSwaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSwaps(ctx, req.(*GetSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSwapStatusHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSwapStatusHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSwapStatusHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSwapStatusHistory(ctx, req.(*GetSwapStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ChangeManualSwapStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeManualSwapStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ChangeManualSwapStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ChangeManualSwapStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ChangeManualSwapStatus(ctx, req.(*ChangeManualSwapStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDestinationAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDestinationAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDestinationAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDestinationAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDestinationAddress(ctx, req.(*SetDestinationAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swapAdmin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalanceByCoin",
			Handler:    _AdminService_GetBalanceByCoin_Handler,
		},
		{
			MethodName: "TransferBetweenAccountTypes",
			Handler:    _AdminService_TransferBetweenAccountTypes_Handler,
		},
		{
			MethodName: "PlaceOrderForUSDT",
			Handler:    _AdminService_PlaceOrderForUSDT_Handler,
		},
		{
			MethodName: "CheckOrder",
			Handler:    _AdminService_CheckOrder_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _AdminService_Withdraw_Handler,
		},
		{
			MethodName: "GetWithdrawalLink",
			Handler:    _AdminService_GetWithdrawalLink_Handler,
		},
		{
			MethodName: "RequestAQuote",
			Handler:    _AdminService_RequestAQuote_Handler,
		},
		{
			MethodName: "ConfirmAQuote",
			Handler:    _AdminService_ConfirmAQuote_Handler,
		},
		{
			MethodName: "GetConvertStatus",
			Handler:    _AdminService_GetConvertStatus_Handler,
		},
		{
			MethodName: "GetSwaps",
			Handler:    _AdminService_GetSwaps_Handler,
		},
		{
			MethodName: "GetSwapStatusHistory",
			Handler:    _AdminService_GetSwapStatusHistory_Handler,
		},
		{
			MethodName: "ChangeManualSwapStatus",
			Handler:    _AdminService_ChangeManualSwapStatus_Handler,
		},
		{
			MethodName: "SetDestinationAddress",
			Handler:    _AdminService_SetDestinationAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/proto/swapAdmin.proto",
}
