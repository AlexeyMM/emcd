// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0
// source: protocol/proto/swapAdmin.proto

package swapAdmin

import (
	swap "code.emcdtech.com/b2b/swap/protocol/swap"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountType int32

const (
	AccountType_UNKNOWN AccountType = 0
	AccountType_FUND    AccountType = 1
	AccountType_UNIFIED AccountType = 2
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FUND",
		2: "UNIFIED",
	}
	AccountType_value = map[string]int32{
		"UNKNOWN": 0,
		"FUND":    1,
		"UNIFIED": 2,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_swapAdmin_proto_enumTypes[0].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_protocol_proto_swapAdmin_proto_enumTypes[0]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{0}
}

type OrderStatus int32

const (
	OrderStatus_ORDER_UNKNOWN          OrderStatus = 0
	OrderStatus_ORDER_CREATED          OrderStatus = 1
	OrderStatus_ORDER_PENDING          OrderStatus = 2
	OrderStatus_ORDER_FILLED           OrderStatus = 3 // success, ордер заполнен в полном объёме
	OrderStatus_ORDER_PARTIALLY_FILLED OrderStatus = 4 // success, но ордер заполнен не в полном объёме
	OrderStatus_ORDER_FAILED           OrderStatus = 5
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_UNKNOWN",
		1: "ORDER_CREATED",
		2: "ORDER_PENDING",
		3: "ORDER_FILLED",
		4: "ORDER_PARTIALLY_FILLED",
		5: "ORDER_FAILED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_UNKNOWN":          0,
		"ORDER_CREATED":          1,
		"ORDER_PENDING":          2,
		"ORDER_FILLED":           3,
		"ORDER_PARTIALLY_FILLED": 4,
		"ORDER_FAILED":           5,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_swapAdmin_proto_enumTypes[1].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_protocol_proto_swapAdmin_proto_enumTypes[1]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{1}
}

type Direction int32

const (
	Direction_DIRECTION_UNKNOWN Direction = 0
	Direction_SELL              Direction = 1
	Direction_BUY               Direction = 2
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "DIRECTION_UNKNOWN",
		1: "SELL",
		2: "BUY",
	}
	Direction_value = map[string]int32{
		"DIRECTION_UNKNOWN": 0,
		"SELL":              1,
		"BUY":               2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_proto_swapAdmin_proto_enumTypes[2].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_protocol_proto_swapAdmin_proto_enumTypes[2]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{2}
}

type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CoinFrom    string                 `protobuf:"bytes,3,opt,name=coin_from,json=coinFrom,proto3" json:"coin_from,omitempty"`
	CoinTo      string                 `protobuf:"bytes,4,opt,name=coin_to,json=coinTo,proto3" json:"coin_to,omitempty"`
	NetworkFrom string                 `protobuf:"bytes,5,opt,name=network_from,json=networkFrom,proto3" json:"network_from,omitempty"`
	NetworkTo   string                 `protobuf:"bytes,6,opt,name=network_to,json=networkTo,proto3" json:"network_to,omitempty"`
	AddressFrom *swap.AddressData      `protobuf:"bytes,7,opt,name=address_from,json=addressFrom,proto3" json:"address_from,omitempty"`
	AddressTo   *swap.AddressData      `protobuf:"bytes,8,opt,name=address_to,json=addressTo,proto3" json:"address_to,omitempty"`
	AmountFrom  string                 `protobuf:"bytes,9,opt,name=amount_from,json=amountFrom,proto3" json:"amount_from,omitempty"`
	AmountTo    string                 `protobuf:"bytes,10,opt,name=amount_to,json=amountTo,proto3" json:"amount_to,omitempty"`
	Status      swap.SwapStatus        `protobuf:"varint,11,opt,name=status,proto3,enum=swap.SwapStatus" json:"status,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PartnerId   string                 `protobuf:"bytes,14,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{0}
}

func (x *Swap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Swap) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Swap) GetCoinFrom() string {
	if x != nil {
		return x.CoinFrom
	}
	return ""
}

func (x *Swap) GetCoinTo() string {
	if x != nil {
		return x.CoinTo
	}
	return ""
}

func (x *Swap) GetNetworkFrom() string {
	if x != nil {
		return x.NetworkFrom
	}
	return ""
}

func (x *Swap) GetNetworkTo() string {
	if x != nil {
		return x.NetworkTo
	}
	return ""
}

func (x *Swap) GetAddressFrom() *swap.AddressData {
	if x != nil {
		return x.AddressFrom
	}
	return nil
}

func (x *Swap) GetAddressTo() *swap.AddressData {
	if x != nil {
		return x.AddressTo
	}
	return nil
}

func (x *Swap) GetAmountFrom() string {
	if x != nil {
		return x.AmountFrom
	}
	return ""
}

func (x *Swap) GetAmountTo() string {
	if x != nil {
		return x.AmountTo
	}
	return ""
}

func (x *Swap) GetStatus() swap.SwapStatus {
	if x != nil {
		return x.Status
	}
	return swap.SwapStatus(0)
}

func (x *Swap) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Swap) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Swap) GetPartnerId() string {
	if x != nil {
		return x.PartnerId
	}
	return ""
}

type GetBalanceByCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType AccountType `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=swapAdmin.AccountType" json:"account_type,omitempty"`
	Coin        string      `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *GetBalanceByCoinRequest) Reset() {
	*x = GetBalanceByCoinRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceByCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceByCoinRequest) ProtoMessage() {}

func (x *GetBalanceByCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceByCoinRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceByCoinRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{1}
}

func (x *GetBalanceByCoinRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_UNKNOWN
}

func (x *GetBalanceByCoinRequest) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

type GetBalanceByCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GetBalanceByCoinResponse) Reset() {
	*x = GetBalanceByCoinResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceByCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceByCoinResponse) ProtoMessage() {}

func (x *GetBalanceByCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceByCoinResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceByCoinResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{2}
}

func (x *GetBalanceByCoinResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type TransferBetweenAccountTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccountType AccountType `protobuf:"varint,1,opt,name=from_account_type,json=fromAccountType,proto3,enum=swapAdmin.AccountType" json:"from_account_type,omitempty"`
	ToAccountType   AccountType `protobuf:"varint,2,opt,name=to_account_type,json=toAccountType,proto3,enum=swapAdmin.AccountType" json:"to_account_type,omitempty"`
	Coin            string      `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Amount          string      `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransferBetweenAccountTypesRequest) Reset() {
	*x = TransferBetweenAccountTypesRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferBetweenAccountTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferBetweenAccountTypesRequest) ProtoMessage() {}

func (x *TransferBetweenAccountTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferBetweenAccountTypesRequest.ProtoReflect.Descriptor instead.
func (*TransferBetweenAccountTypesRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{3}
}

func (x *TransferBetweenAccountTypesRequest) GetFromAccountType() AccountType {
	if x != nil {
		return x.FromAccountType
	}
	return AccountType_UNKNOWN
}

func (x *TransferBetweenAccountTypesRequest) GetToAccountType() AccountType {
	if x != nil {
		return x.ToAccountType
	}
	return AccountType_UNKNOWN
}

func (x *TransferBetweenAccountTypesRequest) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *TransferBetweenAccountTypesRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type TransferBetweenAccountTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferBetweenAccountTypesResponse) Reset() {
	*x = TransferBetweenAccountTypesResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferBetweenAccountTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferBetweenAccountTypesResponse) ProtoMessage() {}

func (x *TransferBetweenAccountTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferBetweenAccountTypesResponse.ProtoReflect.Descriptor instead.
func (*TransferBetweenAccountTypesResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{4}
}

type PlaceOrderForUSDTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin      string    `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"` // coin, который нужно купить/продать за USDT
	Direction Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=swapAdmin.Direction" json:"direction,omitempty"`
	Amount    string    `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PlaceOrderForUSDTRequest) Reset() {
	*x = PlaceOrderForUSDTRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaceOrderForUSDTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceOrderForUSDTRequest) ProtoMessage() {}

func (x *PlaceOrderForUSDTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceOrderForUSDTRequest.ProtoReflect.Descriptor instead.
func (*PlaceOrderForUSDTRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{5}
}

func (x *PlaceOrderForUSDTRequest) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *PlaceOrderForUSDTRequest) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_DIRECTION_UNKNOWN
}

func (x *PlaceOrderForUSDTRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type PlaceOrderForUSDTResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *PlaceOrderForUSDTResponse) Reset() {
	*x = PlaceOrderForUSDTResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaceOrderForUSDTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceOrderForUSDTResponse) ProtoMessage() {}

func (x *PlaceOrderForUSDTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceOrderForUSDTResponse.ProtoReflect.Descriptor instead.
func (*PlaceOrderForUSDTResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{6}
}

func (x *PlaceOrderForUSDTResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type CheckOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CheckOrderRequest) Reset() {
	*x = CheckOrderRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOrderRequest) ProtoMessage() {}

func (x *CheckOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOrderRequest.ProtoReflect.Descriptor instead.
func (*CheckOrderRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{7}
}

func (x *CheckOrderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status OrderStatus `protobuf:"varint,1,opt,name=status,proto3,enum=swapAdmin.OrderStatus" json:"status,omitempty"`
}

func (x *CheckOrderResponse) Reset() {
	*x = CheckOrderResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOrderResponse) ProtoMessage() {}

func (x *CheckOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOrderResponse.ProtoReflect.Descriptor instead.
func (*CheckOrderResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{8}
}

func (x *CheckOrderResponse) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_UNKNOWN
}

type WithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapId string `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
}

func (x *WithdrawRequest) Reset() {
	*x = WithdrawRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawRequest) ProtoMessage() {}

func (x *WithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawRequest.ProtoReflect.Descriptor instead.
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{9}
}

func (x *WithdrawRequest) GetSwapId() string {
	if x != nil {
		return x.SwapId
	}
	return ""
}

type WithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawalId int32 `protobuf:"varint,1,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
}

func (x *WithdrawResponse) Reset() {
	*x = WithdrawResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawResponse) ProtoMessage() {}

func (x *WithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawResponse.ProtoReflect.Descriptor instead.
func (*WithdrawResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{10}
}

func (x *WithdrawResponse) GetWithdrawalId() int32 {
	if x != nil {
		return x.WithdrawalId
	}
	return 0
}

type GetWithdrawalLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawalId int32 `protobuf:"varint,1,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
}

func (x *GetWithdrawalLinkRequest) Reset() {
	*x = GetWithdrawalLinkRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWithdrawalLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawalLinkRequest) ProtoMessage() {}

func (x *GetWithdrawalLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawalLinkRequest.ProtoReflect.Descriptor instead.
func (*GetWithdrawalLinkRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{11}
}

func (x *GetWithdrawalLinkRequest) GetWithdrawalId() int32 {
	if x != nil {
		return x.WithdrawalId
	}
	return 0
}

type GetWithdrawalLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"` // линк на explorer, если он нам известен, если нет, hash_id
}

func (x *GetWithdrawalLinkResponse) Reset() {
	*x = GetWithdrawalLinkResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWithdrawalLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithdrawalLinkResponse) ProtoMessage() {}

func (x *GetWithdrawalLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithdrawalLinkResponse.ProtoReflect.Descriptor instead.
func (*GetWithdrawalLinkResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{12}
}

func (x *GetWithdrawalLinkResponse) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type RequestAQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        string      `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To          string      `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	AccountType AccountType `protobuf:"varint,3,opt,name=accountType,proto3,enum=swapAdmin.AccountType" json:"accountType,omitempty"`
	Amount      string      `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RequestAQuoteRequest) Reset() {
	*x = RequestAQuoteRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestAQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAQuoteRequest) ProtoMessage() {}

func (x *RequestAQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAQuoteRequest.ProtoReflect.Descriptor instead.
func (*RequestAQuoteRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{13}
}

func (x *RequestAQuoteRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *RequestAQuoteRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *RequestAQuoteRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_UNKNOWN
}

func (x *RequestAQuoteRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type RequestAQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rate        string                 `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	FromAmount  string                 `protobuf:"bytes,3,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ToAmount    string                 `protobuf:"bytes,4,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
}

func (x *RequestAQuoteResponse) Reset() {
	*x = RequestAQuoteResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestAQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAQuoteResponse) ProtoMessage() {}

func (x *RequestAQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAQuoteResponse.ProtoReflect.Descriptor instead.
func (*RequestAQuoteResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{14}
}

func (x *RequestAQuoteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestAQuoteResponse) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *RequestAQuoteResponse) GetFromAmount() string {
	if x != nil {
		return x.FromAmount
	}
	return ""
}

func (x *RequestAQuoteResponse) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *RequestAQuoteResponse) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

type ConfirmAQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfirmAQuoteRequest) Reset() {
	*x = ConfirmAQuoteRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmAQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmAQuoteRequest) ProtoMessage() {}

func (x *ConfirmAQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmAQuoteRequest.ProtoReflect.Descriptor instead.
func (*ConfirmAQuoteRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{15}
}

func (x *ConfirmAQuoteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ConfirmAQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ConfirmAQuoteResponse) Reset() {
	*x = ConfirmAQuoteResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmAQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmAQuoteResponse) ProtoMessage() {}

func (x *ConfirmAQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmAQuoteResponse.ProtoReflect.Descriptor instead.
func (*ConfirmAQuoteResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{16}
}

func (x *ConfirmAQuoteResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetConvertStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountType AccountType `protobuf:"varint,2,opt,name=accountType,proto3,enum=swapAdmin.AccountType" json:"accountType,omitempty"`
}

func (x *GetConvertStatusRequest) Reset() {
	*x = GetConvertStatusRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConvertStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConvertStatusRequest) ProtoMessage() {}

func (x *GetConvertStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConvertStatusRequest.ProtoReflect.Descriptor instead.
func (*GetConvertStatusRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{17}
}

func (x *GetConvertStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetConvertStatusRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_UNKNOWN
}

type GetConvertStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetConvertStatusResponse) Reset() {
	*x = GetConvertStatusResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConvertStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConvertStatusResponse) ProtoMessage() {}

func (x *GetConvertStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConvertStatusResponse.ProtoReflect.Descriptor instead.
func (*GetConvertStatusResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{18}
}

func (x *GetConvertStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetSwapsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserId      *string                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Email       *string                `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
	AddressFrom *string                `protobuf:"bytes,4,opt,name=address_from,json=addressFrom,proto3,oneof" json:"address_from,omitempty"`
	From        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=from,proto3,oneof" json:"from,omitempty"`
	To          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=to,proto3,oneof" json:"to,omitempty"`
	Offset      int32                  `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetSwapsRequest) Reset() {
	*x = GetSwapsRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSwapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapsRequest) ProtoMessage() {}

func (x *GetSwapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapsRequest.ProtoReflect.Descriptor instead.
func (*GetSwapsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{19}
}

func (x *GetSwapsRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GetSwapsRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GetSwapsRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *GetSwapsRequest) GetAddressFrom() string {
	if x != nil && x.AddressFrom != nil {
		return *x.AddressFrom
	}
	return ""
}

func (x *GetSwapsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetSwapsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetSwapsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSwapsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSwapsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swaps []*Swap `protobuf:"bytes,1,rep,name=swaps,proto3" json:"swaps,omitempty"`
	Total int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetSwapsResponse) Reset() {
	*x = GetSwapsResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSwapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapsResponse) ProtoMessage() {}

func (x *GetSwapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapsResponse.ProtoReflect.Descriptor instead.
func (*GetSwapsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{20}
}

func (x *GetSwapsResponse) GetSwaps() []*Swap {
	if x != nil {
		return x.Swaps
	}
	return nil
}

func (x *GetSwapsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetSwapStatusHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapId string `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
}

func (x *GetSwapStatusHistoryRequest) Reset() {
	*x = GetSwapStatusHistoryRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSwapStatusHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapStatusHistoryRequest) ProtoMessage() {}

func (x *GetSwapStatusHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapStatusHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetSwapStatusHistoryRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{21}
}

func (x *GetSwapStatusHistoryRequest) GetSwapId() string {
	if x != nil {
		return x.SwapId
	}
	return ""
}

type GetSwapStatusHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusHistory []*GetSwapStatusHistoryResponse_HistoryItem `protobuf:"bytes,1,rep,name=statusHistory,proto3" json:"statusHistory,omitempty"`
}

func (x *GetSwapStatusHistoryResponse) Reset() {
	*x = GetSwapStatusHistoryResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSwapStatusHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapStatusHistoryResponse) ProtoMessage() {}

func (x *GetSwapStatusHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapStatusHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetSwapStatusHistoryResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{22}
}

func (x *GetSwapStatusHistoryResponse) GetStatusHistory() []*GetSwapStatusHistoryResponse_HistoryItem {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

type ChangeManualSwapStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapId string          `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
	Status swap.SwapStatus `protobuf:"varint,2,opt,name=status,proto3,enum=swap.SwapStatus" json:"status,omitempty"`
}

func (x *ChangeManualSwapStatusRequest) Reset() {
	*x = ChangeManualSwapStatusRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeManualSwapStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeManualSwapStatusRequest) ProtoMessage() {}

func (x *ChangeManualSwapStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeManualSwapStatusRequest.ProtoReflect.Descriptor instead.
func (*ChangeManualSwapStatusRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{23}
}

func (x *ChangeManualSwapStatusRequest) GetSwapId() string {
	if x != nil {
		return x.SwapId
	}
	return ""
}

func (x *ChangeManualSwapStatusRequest) GetStatus() swap.SwapStatus {
	if x != nil {
		return x.Status
	}
	return swap.SwapStatus(0)
}

type ChangeManualSwapStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeManualSwapStatusResponse) Reset() {
	*x = ChangeManualSwapStatusResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeManualSwapStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeManualSwapStatusResponse) ProtoMessage() {}

func (x *ChangeManualSwapStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeManualSwapStatusResponse.ProtoReflect.Descriptor instead.
func (*ChangeManualSwapStatusResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{24}
}

type SetDestinationAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapId  string  `protobuf:"bytes,1,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
	Address *string `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Tag     *string `protobuf:"bytes,3,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
}

func (x *SetDestinationAddressRequest) Reset() {
	*x = SetDestinationAddressRequest{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDestinationAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDestinationAddressRequest) ProtoMessage() {}

func (x *SetDestinationAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDestinationAddressRequest.ProtoReflect.Descriptor instead.
func (*SetDestinationAddressRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{25}
}

func (x *SetDestinationAddressRequest) GetSwapId() string {
	if x != nil {
		return x.SwapId
	}
	return ""
}

func (x *SetDestinationAddressRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *SetDestinationAddressRequest) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

type SetDestinationAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDestinationAddressResponse) Reset() {
	*x = SetDestinationAddressResponse{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDestinationAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDestinationAddressResponse) ProtoMessage() {}

func (x *SetDestinationAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDestinationAddressResponse.ProtoReflect.Descriptor instead.
func (*SetDestinationAddressResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{26}
}

type GetSwapStatusHistoryResponse_HistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status swap.SwapStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=swap.SwapStatus" json:"status,omitempty"`
	SetAt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=set_at,json=setAt,proto3" json:"set_at,omitempty"`
}

func (x *GetSwapStatusHistoryResponse_HistoryItem) Reset() {
	*x = GetSwapStatusHistoryResponse_HistoryItem{}
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSwapStatusHistoryResponse_HistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapStatusHistoryResponse_HistoryItem) ProtoMessage() {}

func (x *GetSwapStatusHistoryResponse_HistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_swapAdmin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapStatusHistoryResponse_HistoryItem.ProtoReflect.Descriptor instead.
func (*GetSwapStatusHistoryResponse_HistoryItem) Descriptor() ([]byte, []int) {
	return file_protocol_proto_swapAdmin_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GetSwapStatusHistoryResponse_HistoryItem) GetStatus() swap.SwapStatus {
	if x != nil {
		return x.Status
	}
	return swap.SwapStatus(0)
}

func (x *GetSwapStatusHistoryResponse_HistoryItem) GetSetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SetAt
	}
	return nil
}

var File_protocol_proto_swapAdmin_proto protoreflect.FileDescriptor

var file_protocol_proto_swapAdmin_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x04, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x6f, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x77,
	0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x68, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x32, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd4, 0x01, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x74,
	0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a,
	0x0a, 0x18, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x55,
	0x53, 0x44, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x32,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x19, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x55, 0x53, 0x44, 0x54, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a,
	0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x77, 0x61, 0x70, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x10, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0x3f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x26,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x41, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xd9, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x36, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x77, 0x61, 0x70, 0x49, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x6a, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x65, 0x74, 0x41, 0x74, 0x22, 0x62, 0x0a,
	0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x77, 0x61, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x77, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x31, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x86, 0x01, 0x0a, 0x0b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x2a, 0x35, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x02, 0x32, 0xe1, 0x09, 0x0a, 0x0c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x22, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x77, 0x61, 0x70,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x55, 0x53, 0x44, 0x54,
	0x12, 0x23, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x55, 0x53, 0x44, 0x54, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x55,
	0x53, 0x44, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x73, 0x77,
	0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x77, 0x61, 0x70,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1a, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x23, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x77,
	0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x41, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x77,
	0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e,
	0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x39, 0x5a, 0x37, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x63, 0x64, 0x74, 0x65, 0x63, 0x68,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x32, 0x62, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x3b, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_protocol_proto_swapAdmin_proto_rawDescOnce sync.Once
	file_protocol_proto_swapAdmin_proto_rawDescData = file_protocol_proto_swapAdmin_proto_rawDesc
)

func file_protocol_proto_swapAdmin_proto_rawDescGZIP() []byte {
	file_protocol_proto_swapAdmin_proto_rawDescOnce.Do(func() {
		file_protocol_proto_swapAdmin_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_swapAdmin_proto_rawDescData)
	})
	return file_protocol_proto_swapAdmin_proto_rawDescData
}

var file_protocol_proto_swapAdmin_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protocol_proto_swapAdmin_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_protocol_proto_swapAdmin_proto_goTypes = []any{
	(AccountType)(0),                                 // 0: swapAdmin.AccountType
	(OrderStatus)(0),                                 // 1: swapAdmin.OrderStatus
	(Direction)(0),                                   // 2: swapAdmin.Direction
	(*Swap)(nil),                                     // 3: swapAdmin.Swap
	(*GetBalanceByCoinRequest)(nil),                  // 4: swapAdmin.GetBalanceByCoinRequest
	(*GetBalanceByCoinResponse)(nil),                 // 5: swapAdmin.GetBalanceByCoinResponse
	(*TransferBetweenAccountTypesRequest)(nil),       // 6: swapAdmin.TransferBetweenAccountTypesRequest
	(*TransferBetweenAccountTypesResponse)(nil),      // 7: swapAdmin.TransferBetweenAccountTypesResponse
	(*PlaceOrderForUSDTRequest)(nil),                 // 8: swapAdmin.PlaceOrderForUSDTRequest
	(*PlaceOrderForUSDTResponse)(nil),                // 9: swapAdmin.PlaceOrderForUSDTResponse
	(*CheckOrderRequest)(nil),                        // 10: swapAdmin.CheckOrderRequest
	(*CheckOrderResponse)(nil),                       // 11: swapAdmin.CheckOrderResponse
	(*WithdrawRequest)(nil),                          // 12: swapAdmin.WithdrawRequest
	(*WithdrawResponse)(nil),                         // 13: swapAdmin.WithdrawResponse
	(*GetWithdrawalLinkRequest)(nil),                 // 14: swapAdmin.GetWithdrawalLinkRequest
	(*GetWithdrawalLinkResponse)(nil),                // 15: swapAdmin.GetWithdrawalLinkResponse
	(*RequestAQuoteRequest)(nil),                     // 16: swapAdmin.RequestAQuoteRequest
	(*RequestAQuoteResponse)(nil),                    // 17: swapAdmin.RequestAQuoteResponse
	(*ConfirmAQuoteRequest)(nil),                     // 18: swapAdmin.ConfirmAQuoteRequest
	(*ConfirmAQuoteResponse)(nil),                    // 19: swapAdmin.ConfirmAQuoteResponse
	(*GetConvertStatusRequest)(nil),                  // 20: swapAdmin.GetConvertStatusRequest
	(*GetConvertStatusResponse)(nil),                 // 21: swapAdmin.GetConvertStatusResponse
	(*GetSwapsRequest)(nil),                          // 22: swapAdmin.GetSwapsRequest
	(*GetSwapsResponse)(nil),                         // 23: swapAdmin.GetSwapsResponse
	(*GetSwapStatusHistoryRequest)(nil),              // 24: swapAdmin.GetSwapStatusHistoryRequest
	(*GetSwapStatusHistoryResponse)(nil),             // 25: swapAdmin.GetSwapStatusHistoryResponse
	(*ChangeManualSwapStatusRequest)(nil),            // 26: swapAdmin.ChangeManualSwapStatusRequest
	(*ChangeManualSwapStatusResponse)(nil),           // 27: swapAdmin.ChangeManualSwapStatusResponse
	(*SetDestinationAddressRequest)(nil),             // 28: swapAdmin.SetDestinationAddressRequest
	(*SetDestinationAddressResponse)(nil),            // 29: swapAdmin.SetDestinationAddressResponse
	(*GetSwapStatusHistoryResponse_HistoryItem)(nil), // 30: swapAdmin.GetSwapStatusHistoryResponse.HistoryItem
	(*swap.AddressData)(nil),                         // 31: swap.AddressData
	(swap.SwapStatus)(0),                             // 32: swap.SwapStatus
	(*timestamppb.Timestamp)(nil),                    // 33: google.protobuf.Timestamp
}
var file_protocol_proto_swapAdmin_proto_depIdxs = []int32{
	31, // 0: swapAdmin.Swap.address_from:type_name -> swap.AddressData
	31, // 1: swapAdmin.Swap.address_to:type_name -> swap.AddressData
	32, // 2: swapAdmin.Swap.status:type_name -> swap.SwapStatus
	33, // 3: swapAdmin.Swap.start_time:type_name -> google.protobuf.Timestamp
	33, // 4: swapAdmin.Swap.end_time:type_name -> google.protobuf.Timestamp
	0,  // 5: swapAdmin.GetBalanceByCoinRequest.account_type:type_name -> swapAdmin.AccountType
	0,  // 6: swapAdmin.TransferBetweenAccountTypesRequest.from_account_type:type_name -> swapAdmin.AccountType
	0,  // 7: swapAdmin.TransferBetweenAccountTypesRequest.to_account_type:type_name -> swapAdmin.AccountType
	2,  // 8: swapAdmin.PlaceOrderForUSDTRequest.direction:type_name -> swapAdmin.Direction
	1,  // 9: swapAdmin.CheckOrderResponse.status:type_name -> swapAdmin.OrderStatus
	0,  // 10: swapAdmin.RequestAQuoteRequest.accountType:type_name -> swapAdmin.AccountType
	33, // 11: swapAdmin.RequestAQuoteResponse.expired_time:type_name -> google.protobuf.Timestamp
	0,  // 12: swapAdmin.GetConvertStatusRequest.accountType:type_name -> swapAdmin.AccountType
	33, // 13: swapAdmin.GetSwapsRequest.from:type_name -> google.protobuf.Timestamp
	33, // 14: swapAdmin.GetSwapsRequest.to:type_name -> google.protobuf.Timestamp
	3,  // 15: swapAdmin.GetSwapsResponse.swaps:type_name -> swapAdmin.Swap
	30, // 16: swapAdmin.GetSwapStatusHistoryResponse.statusHistory:type_name -> swapAdmin.GetSwapStatusHistoryResponse.HistoryItem
	32, // 17: swapAdmin.ChangeManualSwapStatusRequest.status:type_name -> swap.SwapStatus
	32, // 18: swapAdmin.GetSwapStatusHistoryResponse.HistoryItem.status:type_name -> swap.SwapStatus
	33, // 19: swapAdmin.GetSwapStatusHistoryResponse.HistoryItem.set_at:type_name -> google.protobuf.Timestamp
	4,  // 20: swapAdmin.AdminService.GetBalanceByCoin:input_type -> swapAdmin.GetBalanceByCoinRequest
	6,  // 21: swapAdmin.AdminService.TransferBetweenAccountTypes:input_type -> swapAdmin.TransferBetweenAccountTypesRequest
	8,  // 22: swapAdmin.AdminService.PlaceOrderForUSDT:input_type -> swapAdmin.PlaceOrderForUSDTRequest
	10, // 23: swapAdmin.AdminService.CheckOrder:input_type -> swapAdmin.CheckOrderRequest
	12, // 24: swapAdmin.AdminService.Withdraw:input_type -> swapAdmin.WithdrawRequest
	14, // 25: swapAdmin.AdminService.GetWithdrawalLink:input_type -> swapAdmin.GetWithdrawalLinkRequest
	16, // 26: swapAdmin.AdminService.RequestAQuote:input_type -> swapAdmin.RequestAQuoteRequest
	18, // 27: swapAdmin.AdminService.ConfirmAQuote:input_type -> swapAdmin.ConfirmAQuoteRequest
	20, // 28: swapAdmin.AdminService.GetConvertStatus:input_type -> swapAdmin.GetConvertStatusRequest
	22, // 29: swapAdmin.AdminService.GetSwaps:input_type -> swapAdmin.GetSwapsRequest
	24, // 30: swapAdmin.AdminService.GetSwapStatusHistory:input_type -> swapAdmin.GetSwapStatusHistoryRequest
	26, // 31: swapAdmin.AdminService.ChangeManualSwapStatus:input_type -> swapAdmin.ChangeManualSwapStatusRequest
	28, // 32: swapAdmin.AdminService.SetDestinationAddress:input_type -> swapAdmin.SetDestinationAddressRequest
	5,  // 33: swapAdmin.AdminService.GetBalanceByCoin:output_type -> swapAdmin.GetBalanceByCoinResponse
	7,  // 34: swapAdmin.AdminService.TransferBetweenAccountTypes:output_type -> swapAdmin.TransferBetweenAccountTypesResponse
	9,  // 35: swapAdmin.AdminService.PlaceOrderForUSDT:output_type -> swapAdmin.PlaceOrderForUSDTResponse
	11, // 36: swapAdmin.AdminService.CheckOrder:output_type -> swapAdmin.CheckOrderResponse
	13, // 37: swapAdmin.AdminService.Withdraw:output_type -> swapAdmin.WithdrawResponse
	15, // 38: swapAdmin.AdminService.GetWithdrawalLink:output_type -> swapAdmin.GetWithdrawalLinkResponse
	17, // 39: swapAdmin.AdminService.RequestAQuote:output_type -> swapAdmin.RequestAQuoteResponse
	19, // 40: swapAdmin.AdminService.ConfirmAQuote:output_type -> swapAdmin.ConfirmAQuoteResponse
	21, // 41: swapAdmin.AdminService.GetConvertStatus:output_type -> swapAdmin.GetConvertStatusResponse
	23, // 42: swapAdmin.AdminService.GetSwaps:output_type -> swapAdmin.GetSwapsResponse
	25, // 43: swapAdmin.AdminService.GetSwapStatusHistory:output_type -> swapAdmin.GetSwapStatusHistoryResponse
	27, // 44: swapAdmin.AdminService.ChangeManualSwapStatus:output_type -> swapAdmin.ChangeManualSwapStatusResponse
	29, // 45: swapAdmin.AdminService.SetDestinationAddress:output_type -> swapAdmin.SetDestinationAddressResponse
	33, // [33:46] is the sub-list for method output_type
	20, // [20:33] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_protocol_proto_swapAdmin_proto_init() }
func file_protocol_proto_swapAdmin_proto_init() {
	if File_protocol_proto_swapAdmin_proto != nil {
		return
	}
	file_protocol_proto_swapAdmin_proto_msgTypes[19].OneofWrappers = []any{}
	file_protocol_proto_swapAdmin_proto_msgTypes[25].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_swapAdmin_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_proto_swapAdmin_proto_goTypes,
		DependencyIndexes: file_protocol_proto_swapAdmin_proto_depIdxs,
		EnumInfos:         file_protocol_proto_swapAdmin_proto_enumTypes,
		MessageInfos:      file_protocol_proto_swapAdmin_proto_msgTypes,
	}.Build()
	File_protocol_proto_swapAdmin_proto = out.File
	file_protocol_proto_swapAdmin_proto_rawDesc = nil
	file_protocol_proto_swapAdmin_proto_goTypes = nil
	file_protocol_proto_swapAdmin_proto_depIdxs = nil
}
