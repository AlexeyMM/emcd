// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderFee is an autogenerated mock type for the OrderFee type
type MockOrderFee struct {
	mock.Mock
}

type MockOrderFee_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderFee) EXPECT() *MockOrderFee_Expecter {
	return &MockOrderFee_Expecter{mock: &_m.Mock}
}

// GetFee provides a mock function with given fields: ctx, symbol
func (_m *MockOrderFee) GetFee(ctx context.Context, symbol string) (*model.Fee, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetFee")
	}

	var r0 *model.Fee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Fee, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Fee); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Fee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderFee_GetFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFee'
type MockOrderFee_GetFee_Call struct {
	*mock.Call
}

// GetFee is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol string
func (_e *MockOrderFee_Expecter) GetFee(ctx interface{}, symbol interface{}) *MockOrderFee_GetFee_Call {
	return &MockOrderFee_GetFee_Call{Call: _e.mock.On("GetFee", ctx, symbol)}
}

func (_c *MockOrderFee_GetFee_Call) Run(run func(ctx context.Context, symbol string)) *MockOrderFee_GetFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOrderFee_GetFee_Call) Return(_a0 *model.Fee, _a1 error) *MockOrderFee_GetFee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderFee_GetFee_Call) RunAndReturn(run func(context.Context, string) (*model.Fee, error)) *MockOrderFee_GetFee_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAll provides a mock function with given fields: ctx, fee
func (_m *MockOrderFee) UpdateAll(ctx context.Context, fee map[string]*model.Fee) error {
	ret := _m.Called(ctx, fee)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]*model.Fee) error); ok {
		r0 = rf(ctx, fee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderFee_UpdateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAll'
type MockOrderFee_UpdateAll_Call struct {
	*mock.Call
}

// UpdateAll is a helper method to define mock.On call
//   - ctx context.Context
//   - fee map[string]*model.Fee
func (_e *MockOrderFee_Expecter) UpdateAll(ctx interface{}, fee interface{}) *MockOrderFee_UpdateAll_Call {
	return &MockOrderFee_UpdateAll_Call{Call: _e.mock.On("UpdateAll", ctx, fee)}
}

func (_c *MockOrderFee_UpdateAll_Call) Run(run func(ctx context.Context, fee map[string]*model.Fee)) *MockOrderFee_UpdateAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]*model.Fee))
	})
	return _c
}

func (_c *MockOrderFee_UpdateAll_Call) Return(_a0 error) *MockOrderFee_UpdateAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderFee_UpdateAll_Call) RunAndReturn(run func(context.Context, map[string]*model.Fee) error) *MockOrderFee_UpdateAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderFee creates a new instance of MockOrderFee. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderFee(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderFee {
	mock := &MockOrderFee{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
