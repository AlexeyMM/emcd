// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"

	transactor "code.emcdtech.com/emcd/sdk/pg"
)

// MockUser is an autogenerated mock type for the User type
type MockUser struct {
	mock.Mock
}

type MockUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUser) EXPECT() *MockUser_Expecter {
	return &MockUser_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, user
func (_m *MockUser) Add(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockUser_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUser_Expecter) Add(ctx interface{}, user interface{}) *MockUser_Add_Call {
	return &MockUser_Add_Call{Call: _e.mock.On("Add", ctx, user)}
}

func (_c *MockUser_Add_Call) Run(run func(ctx context.Context, user *model.User)) *MockUser_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockUser_Add_Call) Return(_a0 error) *MockUser_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_Add_Call) RunAndReturn(run func(context.Context, *model.User) error) *MockUser_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Runner provides a mock function with given fields: ctx
func (_m *MockUser) Runner(ctx context.Context) transactor.PgxQueryRunner {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Runner")
	}

	var r0 transactor.PgxQueryRunner
	if rf, ok := ret.Get(0).(func(context.Context) transactor.PgxQueryRunner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transactor.PgxQueryRunner)
		}
	}

	return r0
}

// MockUser_Runner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Runner'
type MockUser_Runner_Call struct {
	*mock.Call
}

// Runner is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUser_Expecter) Runner(ctx interface{}) *MockUser_Runner_Call {
	return &MockUser_Runner_Call{Call: _e.mock.On("Runner", ctx)}
}

func (_c *MockUser_Runner_Call) Run(run func(ctx context.Context)) *MockUser_Runner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUser_Runner_Call) Return(_a0 transactor.PgxQueryRunner) *MockUser_Runner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_Runner_Call) RunAndReturn(run func(context.Context) transactor.PgxQueryRunner) *MockUser_Runner_Call {
	_c.Call.Return(run)
	return _c
}

// WithinTransaction provides a mock function with given fields: ctx, txFn
func (_m *MockUser) WithinTransaction(ctx context.Context, txFn func(context.Context) error) error {
	ret := _m.Called(ctx, txFn)

	if len(ret) == 0 {
		panic("no return value specified for WithinTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, txFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_WithinTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransaction'
type MockUser_WithinTransaction_Call struct {
	*mock.Call
}

// WithinTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txFn func(context.Context) error
func (_e *MockUser_Expecter) WithinTransaction(ctx interface{}, txFn interface{}) *MockUser_WithinTransaction_Call {
	return &MockUser_WithinTransaction_Call{Call: _e.mock.On("WithinTransaction", ctx, txFn)}
}

func (_c *MockUser_WithinTransaction_Call) Run(run func(ctx context.Context, txFn func(context.Context) error)) *MockUser_WithinTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *MockUser_WithinTransaction_Call) Return(_a0 error) *MockUser_WithinTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_WithinTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *MockUser_WithinTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithinTransactionWithOptions provides a mock function with given fields: ctx, txFn, opts
func (_m *MockUser) WithinTransactionWithOptions(ctx context.Context, txFn func(context.Context) error, opts pgx.TxOptions) error {
	ret := _m.Called(ctx, txFn, opts)

	if len(ret) == 0 {
		panic("no return value specified for WithinTransactionWithOptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error, pgx.TxOptions) error); ok {
		r0 = rf(ctx, txFn, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_WithinTransactionWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransactionWithOptions'
type MockUser_WithinTransactionWithOptions_Call struct {
	*mock.Call
}

// WithinTransactionWithOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - txFn func(context.Context) error
//   - opts pgx.TxOptions
func (_e *MockUser_Expecter) WithinTransactionWithOptions(ctx interface{}, txFn interface{}, opts interface{}) *MockUser_WithinTransactionWithOptions_Call {
	return &MockUser_WithinTransactionWithOptions_Call{Call: _e.mock.On("WithinTransactionWithOptions", ctx, txFn, opts)}
}

func (_c *MockUser_WithinTransactionWithOptions_Call) Run(run func(ctx context.Context, txFn func(context.Context) error, opts pgx.TxOptions)) *MockUser_WithinTransactionWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error), args[2].(pgx.TxOptions))
	})
	return _c
}

func (_c *MockUser_WithinTransactionWithOptions_Call) Return(_a0 error) *MockUser_WithinTransactionWithOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_WithinTransactionWithOptions_Call) RunAndReturn(run func(context.Context, func(context.Context) error, pgx.TxOptions) error) *MockUser_WithinTransactionWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUser creates a new instance of MockUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUser {
	mock := &MockUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
