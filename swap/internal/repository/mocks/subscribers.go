// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	model "code.emcdtech.com/b2b/swap/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockSubscribers is an autogenerated mock type for the Subscribers type
type MockSubscribers struct {
	mock.Mock
}

type MockSubscribers_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscribers) EXPECT() *MockSubscribers_Expecter {
	return &MockSubscribers_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: swapID, clientID, ch
func (_m *MockSubscribers) Add(swapID uuid.UUID, clientID uuid.UUID, ch chan model.PublicStatus) {
	_m.Called(swapID, clientID, ch)
}

// MockSubscribers_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockSubscribers_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - swapID uuid.UUID
//   - clientID uuid.UUID
//   - ch chan model.PublicStatus
func (_e *MockSubscribers_Expecter) Add(swapID interface{}, clientID interface{}, ch interface{}) *MockSubscribers_Add_Call {
	return &MockSubscribers_Add_Call{Call: _e.mock.On("Add", swapID, clientID, ch)}
}

func (_c *MockSubscribers_Add_Call) Run(run func(swapID uuid.UUID, clientID uuid.UUID, ch chan model.PublicStatus)) *MockSubscribers_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(chan model.PublicStatus))
	})
	return _c
}

func (_c *MockSubscribers_Add_Call) Return() *MockSubscribers_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscribers_Add_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, chan model.PublicStatus)) *MockSubscribers_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: swapID, clientID
func (_m *MockSubscribers) Delete(swapID uuid.UUID, clientID uuid.UUID) {
	_m.Called(swapID, clientID)
}

// MockSubscribers_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSubscribers_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - swapID uuid.UUID
//   - clientID uuid.UUID
func (_e *MockSubscribers_Expecter) Delete(swapID interface{}, clientID interface{}) *MockSubscribers_Delete_Call {
	return &MockSubscribers_Delete_Call{Call: _e.mock.On("Delete", swapID, clientID)}
}

func (_c *MockSubscribers_Delete_Call) Run(run func(swapID uuid.UUID, clientID uuid.UUID)) *MockSubscribers_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubscribers_Delete_Call) Return() *MockSubscribers_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSubscribers_Delete_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID)) *MockSubscribers_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySwapID provides a mock function with given fields: swapID
func (_m *MockSubscribers) GetBySwapID(swapID uuid.UUID) []*model.Subscriber {
	ret := _m.Called(swapID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySwapID")
	}

	var r0 []*model.Subscriber
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*model.Subscriber); ok {
		r0 = rf(swapID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Subscriber)
		}
	}

	return r0
}

// MockSubscribers_GetBySwapID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySwapID'
type MockSubscribers_GetBySwapID_Call struct {
	*mock.Call
}

// GetBySwapID is a helper method to define mock.On call
//   - swapID uuid.UUID
func (_e *MockSubscribers_Expecter) GetBySwapID(swapID interface{}) *MockSubscribers_GetBySwapID_Call {
	return &MockSubscribers_GetBySwapID_Call{Call: _e.mock.On("GetBySwapID", swapID)}
}

func (_c *MockSubscribers_GetBySwapID_Call) Run(run func(swapID uuid.UUID)) *MockSubscribers_GetBySwapID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubscribers_GetBySwapID_Call) Return(_a0 []*model.Subscriber) *MockSubscribers_GetBySwapID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscribers_GetBySwapID_Call) RunAndReturn(run func(uuid.UUID) []*model.Subscriber) *MockSubscribers_GetBySwapID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscribers creates a new instance of MockSubscribers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscribers(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscribers {
	mock := &MockSubscribers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
