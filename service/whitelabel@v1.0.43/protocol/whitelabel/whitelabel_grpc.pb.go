// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: protocol/whitelabel.proto

package whitelabel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WhitelabelService_GetByID_FullMethodName                = "/whitelabel.WhitelabelService/GetByID"
	WhitelabelService_GetAll_FullMethodName                 = "/whitelabel.WhitelabelService/GetAll"
	WhitelabelService_Create_FullMethodName                 = "/whitelabel.WhitelabelService/Create"
	WhitelabelService_Update_FullMethodName                 = "/whitelabel.WhitelabelService/Update"
	WhitelabelService_Delete_FullMethodName                 = "/whitelabel.WhitelabelService/Delete"
	WhitelabelService_GetBySegmentID_FullMethodName         = "/whitelabel.WhitelabelService/GetBySegmentID"
	WhitelabelService_GetByUserID_FullMethodName            = "/whitelabel.WhitelabelService/GetByUserID"
	WhitelabelService_GetByOrigin_FullMethodName            = "/whitelabel.WhitelabelService/GetByOrigin"
	WhitelabelService_CheckByUserID_FullMethodName          = "/whitelabel.WhitelabelService/CheckByUserID"
	WhitelabelService_CheckByUserIDAndOrigin_FullMethodName = "/whitelabel.WhitelabelService/CheckByUserIDAndOrigin"
	WhitelabelService_GetV2WLs_FullMethodName               = "/whitelabel.WhitelabelService/GetV2WLs"
	WhitelabelService_GetConfigByOrigin_FullMethodName      = "/whitelabel.WhitelabelService/GetConfigByOrigin"
	WhitelabelService_SetConfigByRefID_FullMethodName       = "/whitelabel.WhitelabelService/SetConfigByRefID"
	WhitelabelService_SetAllowOrigin_FullMethodName         = "/whitelabel.WhitelabelService/SetAllowOrigin"
	WhitelabelService_GetAllowOrigins_FullMethodName        = "/whitelabel.WhitelabelService/GetAllowOrigins"
	WhitelabelService_SetStratum_FullMethodName             = "/whitelabel.WhitelabelService/SetStratum"
	WhitelabelService_GetFullByUserID_FullMethodName        = "/whitelabel.WhitelabelService/GetFullByUserID"
	WhitelabelService_GetCoins_FullMethodName               = "/whitelabel.WhitelabelService/GetCoins"
	WhitelabelService_AddCoin_FullMethodName                = "/whitelabel.WhitelabelService/AddCoin"
	WhitelabelService_DeleteCoin_FullMethodName             = "/whitelabel.WhitelabelService/DeleteCoin"
	WhitelabelService_GetStratumList_FullMethodName         = "/whitelabel.WhitelabelService/GetStratumList"
)

// WhitelabelServiceClient is the client API for WhitelabelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhitelabelServiceClient interface {
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetBySegmentID(ctx context.Context, in *GetBySegmentIDRequest, opts ...grpc.CallOption) (*GetWLResponse, error)
	GetByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (*GetWLResponse, error)
	GetByOrigin(ctx context.Context, in *GetByOriginRequest, opts ...grpc.CallOption) (*GetWLResponse, error)
	CheckByUserID(ctx context.Context, in *CheckByUserIDRequest, opts ...grpc.CallOption) (*CheckWLResponse, error)
	CheckByUserIDAndOrigin(ctx context.Context, in *CheckByUserIDAndOriginRequest, opts ...grpc.CallOption) (*CheckWLResponse, error)
	GetV2WLs(ctx context.Context, in *GetV2WLsRequest, opts ...grpc.CallOption) (*GetV2WLsResponse, error)
	GetConfigByOrigin(ctx context.Context, in *GetConfigByOriginRequest, opts ...grpc.CallOption) (*WLConfigResponse, error)
	SetConfigByRefID(ctx context.Context, in *SetConfigByRefIDRequest, opts ...grpc.CallOption) (*SetConfigByRefIDResponse, error)
	SetAllowOrigin(ctx context.Context, in *AllowOrigin, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetAllowOrigins(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAllowOriginsResponse, error)
	SetStratum(ctx context.Context, in *Stratum, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetFullByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (*GetWLResponse, error)
	GetCoins(ctx context.Context, in *GetCoinsRequest, opts ...grpc.CallOption) (*GetCoinsResponse, error)
	AddCoin(ctx context.Context, in *AddCoinRequest, opts ...grpc.CallOption) (*AddCoinResponse, error)
	DeleteCoin(ctx context.Context, in *DeleteCoinRequest, opts ...grpc.CallOption) (*DeleteCoinResponse, error)
	GetStratumList(ctx context.Context, in *GetStratumListRequest, opts ...grpc.CallOption) (*GetStratumListResponse, error)
}

type whitelabelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhitelabelServiceClient(cc grpc.ClientConnInterface) WhitelabelServiceClient {
	return &whitelabelServiceClient{cc}
}

func (c *whitelabelServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIDResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetBySegmentID(ctx context.Context, in *GetBySegmentIDRequest, opts ...grpc.CallOption) (*GetWLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWLResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetBySegmentID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (*GetWLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWLResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetByOrigin(ctx context.Context, in *GetByOriginRequest, opts ...grpc.CallOption) (*GetWLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWLResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetByOrigin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) CheckByUserID(ctx context.Context, in *CheckByUserIDRequest, opts ...grpc.CallOption) (*CheckWLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckWLResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_CheckByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) CheckByUserIDAndOrigin(ctx context.Context, in *CheckByUserIDAndOriginRequest, opts ...grpc.CallOption) (*CheckWLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckWLResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_CheckByUserIDAndOrigin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetV2WLs(ctx context.Context, in *GetV2WLsRequest, opts ...grpc.CallOption) (*GetV2WLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetV2WLsResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetV2WLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetConfigByOrigin(ctx context.Context, in *GetConfigByOriginRequest, opts ...grpc.CallOption) (*WLConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WLConfigResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetConfigByOrigin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) SetConfigByRefID(ctx context.Context, in *SetConfigByRefIDRequest, opts ...grpc.CallOption) (*SetConfigByRefIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConfigByRefIDResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_SetConfigByRefID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) SetAllowOrigin(ctx context.Context, in *AllowOrigin, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_SetAllowOrigin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetAllowOrigins(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetAllowOriginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllowOriginsResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetAllowOrigins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) SetStratum(ctx context.Context, in *Stratum, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_SetStratum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetFullByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (*GetWLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWLResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetFullByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetCoins(ctx context.Context, in *GetCoinsRequest, opts ...grpc.CallOption) (*GetCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoinsResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) AddCoin(ctx context.Context, in *AddCoinRequest, opts ...grpc.CallOption) (*AddCoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCoinResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_AddCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) DeleteCoin(ctx context.Context, in *DeleteCoinRequest, opts ...grpc.CallOption) (*DeleteCoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCoinResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_DeleteCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whitelabelServiceClient) GetStratumList(ctx context.Context, in *GetStratumListRequest, opts ...grpc.CallOption) (*GetStratumListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStratumListResponse)
	err := c.cc.Invoke(ctx, WhitelabelService_GetStratumList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhitelabelServiceServer is the server API for WhitelabelService service.
// All implementations must embed UnimplementedWhitelabelServiceServer
// for forward compatibility
type WhitelabelServiceServer interface {
	GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetBySegmentID(context.Context, *GetBySegmentIDRequest) (*GetWLResponse, error)
	GetByUserID(context.Context, *GetByUserIDRequest) (*GetWLResponse, error)
	GetByOrigin(context.Context, *GetByOriginRequest) (*GetWLResponse, error)
	CheckByUserID(context.Context, *CheckByUserIDRequest) (*CheckWLResponse, error)
	CheckByUserIDAndOrigin(context.Context, *CheckByUserIDAndOriginRequest) (*CheckWLResponse, error)
	GetV2WLs(context.Context, *GetV2WLsRequest) (*GetV2WLsResponse, error)
	GetConfigByOrigin(context.Context, *GetConfigByOriginRequest) (*WLConfigResponse, error)
	SetConfigByRefID(context.Context, *SetConfigByRefIDRequest) (*SetConfigByRefIDResponse, error)
	SetAllowOrigin(context.Context, *AllowOrigin) (*SuccessResponse, error)
	GetAllowOrigins(context.Context, *EmptyRequest) (*GetAllowOriginsResponse, error)
	SetStratum(context.Context, *Stratum) (*SuccessResponse, error)
	GetFullByUserID(context.Context, *GetByUserIDRequest) (*GetWLResponse, error)
	GetCoins(context.Context, *GetCoinsRequest) (*GetCoinsResponse, error)
	AddCoin(context.Context, *AddCoinRequest) (*AddCoinResponse, error)
	DeleteCoin(context.Context, *DeleteCoinRequest) (*DeleteCoinResponse, error)
	GetStratumList(context.Context, *GetStratumListRequest) (*GetStratumListResponse, error)
	mustEmbedUnimplementedWhitelabelServiceServer()
}

// UnimplementedWhitelabelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWhitelabelServiceServer struct {
}

func (UnimplementedWhitelabelServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedWhitelabelServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWhitelabelServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWhitelabelServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetBySegmentID(context.Context, *GetBySegmentIDRequest) (*GetWLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySegmentID not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetByUserID(context.Context, *GetByUserIDRequest) (*GetWLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserID not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetByOrigin(context.Context, *GetByOriginRequest) (*GetWLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOrigin not implemented")
}
func (UnimplementedWhitelabelServiceServer) CheckByUserID(context.Context, *CheckByUserIDRequest) (*CheckWLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckByUserID not implemented")
}
func (UnimplementedWhitelabelServiceServer) CheckByUserIDAndOrigin(context.Context, *CheckByUserIDAndOriginRequest) (*CheckWLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckByUserIDAndOrigin not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetV2WLs(context.Context, *GetV2WLsRequest) (*GetV2WLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetV2WLs not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetConfigByOrigin(context.Context, *GetConfigByOriginRequest) (*WLConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigByOrigin not implemented")
}
func (UnimplementedWhitelabelServiceServer) SetConfigByRefID(context.Context, *SetConfigByRefIDRequest) (*SetConfigByRefIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigByRefID not implemented")
}
func (UnimplementedWhitelabelServiceServer) SetAllowOrigin(context.Context, *AllowOrigin) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllowOrigin not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetAllowOrigins(context.Context, *EmptyRequest) (*GetAllowOriginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowOrigins not implemented")
}
func (UnimplementedWhitelabelServiceServer) SetStratum(context.Context, *Stratum) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStratum not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetFullByUserID(context.Context, *GetByUserIDRequest) (*GetWLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullByUserID not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetCoins(context.Context, *GetCoinsRequest) (*GetCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoins not implemented")
}
func (UnimplementedWhitelabelServiceServer) AddCoin(context.Context, *AddCoinRequest) (*AddCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoin not implemented")
}
func (UnimplementedWhitelabelServiceServer) DeleteCoin(context.Context, *DeleteCoinRequest) (*DeleteCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoin not implemented")
}
func (UnimplementedWhitelabelServiceServer) GetStratumList(context.Context, *GetStratumListRequest) (*GetStratumListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStratumList not implemented")
}
func (UnimplementedWhitelabelServiceServer) mustEmbedUnimplementedWhitelabelServiceServer() {}

// UnsafeWhitelabelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhitelabelServiceServer will
// result in compilation errors.
type UnsafeWhitelabelServiceServer interface {
	mustEmbedUnimplementedWhitelabelServiceServer()
}

func RegisterWhitelabelServiceServer(s grpc.ServiceRegistrar, srv WhitelabelServiceServer) {
	s.RegisterService(&WhitelabelService_ServiceDesc, srv)
}

func _WhitelabelService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetBySegmentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySegmentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetBySegmentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetBySegmentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetBySegmentID(ctx, req.(*GetBySegmentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetByUserID(ctx, req.(*GetByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetByOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetByOrigin(ctx, req.(*GetByOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_CheckByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).CheckByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_CheckByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).CheckByUserID(ctx, req.(*CheckByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_CheckByUserIDAndOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckByUserIDAndOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).CheckByUserIDAndOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_CheckByUserIDAndOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).CheckByUserIDAndOrigin(ctx, req.(*CheckByUserIDAndOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetV2WLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetV2WLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetV2WLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetV2WLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetV2WLs(ctx, req.(*GetV2WLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetConfigByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigByOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetConfigByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetConfigByOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetConfigByOrigin(ctx, req.(*GetConfigByOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_SetConfigByRefID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigByRefIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).SetConfigByRefID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_SetConfigByRefID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).SetConfigByRefID(ctx, req.(*SetConfigByRefIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_SetAllowOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowOrigin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).SetAllowOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_SetAllowOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).SetAllowOrigin(ctx, req.(*AllowOrigin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetAllowOrigins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetAllowOrigins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetAllowOrigins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetAllowOrigins(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_SetStratum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stratum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).SetStratum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_SetStratum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).SetStratum(ctx, req.(*Stratum))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetFullByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetFullByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetFullByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetFullByUserID(ctx, req.(*GetByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetCoins(ctx, req.(*GetCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_AddCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).AddCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_AddCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).AddCoin(ctx, req.(*AddCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_DeleteCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).DeleteCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_DeleteCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).DeleteCoin(ctx, req.(*DeleteCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhitelabelService_GetStratumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStratumListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServiceServer).GetStratumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhitelabelService_GetStratumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServiceServer).GetStratumList(ctx, req.(*GetStratumListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WhitelabelService_ServiceDesc is the grpc.ServiceDesc for WhitelabelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhitelabelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whitelabel.WhitelabelService",
	HandlerType: (*WhitelabelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _WhitelabelService_GetByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _WhitelabelService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _WhitelabelService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WhitelabelService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WhitelabelService_Delete_Handler,
		},
		{
			MethodName: "GetBySegmentID",
			Handler:    _WhitelabelService_GetBySegmentID_Handler,
		},
		{
			MethodName: "GetByUserID",
			Handler:    _WhitelabelService_GetByUserID_Handler,
		},
		{
			MethodName: "GetByOrigin",
			Handler:    _WhitelabelService_GetByOrigin_Handler,
		},
		{
			MethodName: "CheckByUserID",
			Handler:    _WhitelabelService_CheckByUserID_Handler,
		},
		{
			MethodName: "CheckByUserIDAndOrigin",
			Handler:    _WhitelabelService_CheckByUserIDAndOrigin_Handler,
		},
		{
			MethodName: "GetV2WLs",
			Handler:    _WhitelabelService_GetV2WLs_Handler,
		},
		{
			MethodName: "GetConfigByOrigin",
			Handler:    _WhitelabelService_GetConfigByOrigin_Handler,
		},
		{
			MethodName: "SetConfigByRefID",
			Handler:    _WhitelabelService_SetConfigByRefID_Handler,
		},
		{
			MethodName: "SetAllowOrigin",
			Handler:    _WhitelabelService_SetAllowOrigin_Handler,
		},
		{
			MethodName: "GetAllowOrigins",
			Handler:    _WhitelabelService_GetAllowOrigins_Handler,
		},
		{
			MethodName: "SetStratum",
			Handler:    _WhitelabelService_SetStratum_Handler,
		},
		{
			MethodName: "GetFullByUserID",
			Handler:    _WhitelabelService_GetFullByUserID_Handler,
		},
		{
			MethodName: "GetCoins",
			Handler:    _WhitelabelService_GetCoins_Handler,
		},
		{
			MethodName: "AddCoin",
			Handler:    _WhitelabelService_AddCoin_Handler,
		},
		{
			MethodName: "DeleteCoin",
			Handler:    _WhitelabelService_DeleteCoin_Handler,
		},
		{
			MethodName: "GetStratumList",
			Handler:    _WhitelabelService_GetStratumList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/whitelabel.proto",
}
