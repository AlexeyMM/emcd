// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: protocol/proto/coin.proto

package coin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoinService_GetCoinIDFromLegacyID_FullMethodName = "/coin.CoinService/GetCoinIDFromLegacyID"
	CoinService_GetCoin_FullMethodName               = "/coin.CoinService/GetCoin"
	CoinService_GetCoins_FullMethodName              = "/coin.CoinService/GetCoins"
	CoinService_GetWithdrawalFee_FullMethodName      = "/coin.CoinService/GetWithdrawalFee"
)

// CoinServiceClient is the client API for CoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinServiceClient interface {
	// Deprecated: Do not use.
	GetCoinIDFromLegacyID(ctx context.Context, in *GetCoinIDFromLegacyIDRequest, opts ...grpc.CallOption) (*GetCoinIDFromLegacyIDResponse, error)
	GetCoin(ctx context.Context, in *GetCoinRequest, opts ...grpc.CallOption) (*GetCoinResponse, error)
	GetCoins(ctx context.Context, in *GetCoinsRequest, opts ...grpc.CallOption) (*GetCoinsResponse, error)
	GetWithdrawalFee(ctx context.Context, in *RequestGetWithdrawalFee, opts ...grpc.CallOption) (*ResponseGetWithdrawalFee, error)
}

type coinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinServiceClient(cc grpc.ClientConnInterface) CoinServiceClient {
	return &coinServiceClient{cc}
}

// Deprecated: Do not use.
func (c *coinServiceClient) GetCoinIDFromLegacyID(ctx context.Context, in *GetCoinIDFromLegacyIDRequest, opts ...grpc.CallOption) (*GetCoinIDFromLegacyIDResponse, error) {
	out := new(GetCoinIDFromLegacyIDResponse)
	err := c.cc.Invoke(ctx, CoinService_GetCoinIDFromLegacyID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) GetCoin(ctx context.Context, in *GetCoinRequest, opts ...grpc.CallOption) (*GetCoinResponse, error) {
	out := new(GetCoinResponse)
	err := c.cc.Invoke(ctx, CoinService_GetCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) GetCoins(ctx context.Context, in *GetCoinsRequest, opts ...grpc.CallOption) (*GetCoinsResponse, error) {
	out := new(GetCoinsResponse)
	err := c.cc.Invoke(ctx, CoinService_GetCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) GetWithdrawalFee(ctx context.Context, in *RequestGetWithdrawalFee, opts ...grpc.CallOption) (*ResponseGetWithdrawalFee, error) {
	out := new(ResponseGetWithdrawalFee)
	err := c.cc.Invoke(ctx, CoinService_GetWithdrawalFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinServiceServer is the server API for CoinService service.
// All implementations must embed UnimplementedCoinServiceServer
// for forward compatibility
type CoinServiceServer interface {
	// Deprecated: Do not use.
	GetCoinIDFromLegacyID(context.Context, *GetCoinIDFromLegacyIDRequest) (*GetCoinIDFromLegacyIDResponse, error)
	GetCoin(context.Context, *GetCoinRequest) (*GetCoinResponse, error)
	GetCoins(context.Context, *GetCoinsRequest) (*GetCoinsResponse, error)
	GetWithdrawalFee(context.Context, *RequestGetWithdrawalFee) (*ResponseGetWithdrawalFee, error)
	mustEmbedUnimplementedCoinServiceServer()
}

// UnimplementedCoinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoinServiceServer struct {
}

func (UnimplementedCoinServiceServer) GetCoinIDFromLegacyID(context.Context, *GetCoinIDFromLegacyIDRequest) (*GetCoinIDFromLegacyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinIDFromLegacyID not implemented")
}
func (UnimplementedCoinServiceServer) GetCoin(context.Context, *GetCoinRequest) (*GetCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoin not implemented")
}
func (UnimplementedCoinServiceServer) GetCoins(context.Context, *GetCoinsRequest) (*GetCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoins not implemented")
}
func (UnimplementedCoinServiceServer) GetWithdrawalFee(context.Context, *RequestGetWithdrawalFee) (*ResponseGetWithdrawalFee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalFee not implemented")
}
func (UnimplementedCoinServiceServer) mustEmbedUnimplementedCoinServiceServer() {}

// UnsafeCoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinServiceServer will
// result in compilation errors.
type UnsafeCoinServiceServer interface {
	mustEmbedUnimplementedCoinServiceServer()
}

func RegisterCoinServiceServer(s grpc.ServiceRegistrar, srv CoinServiceServer) {
	s.RegisterService(&CoinService_ServiceDesc, srv)
}

func _CoinService_GetCoinIDFromLegacyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinIDFromLegacyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetCoinIDFromLegacyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetCoinIDFromLegacyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetCoinIDFromLegacyID(ctx, req.(*GetCoinIDFromLegacyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_GetCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetCoin(ctx, req.(*GetCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_GetCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetCoins(ctx, req.(*GetCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_GetWithdrawalFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetWithdrawalFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).GetWithdrawalFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_GetWithdrawalFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).GetWithdrawalFee(ctx, req.(*RequestGetWithdrawalFee))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinService_ServiceDesc is the grpc.ServiceDesc for CoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coin.CoinService",
	HandlerType: (*CoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoinIDFromLegacyID",
			Handler:    _CoinService_GetCoinIDFromLegacyID_Handler,
		},
		{
			MethodName: "GetCoin",
			Handler:    _CoinService_GetCoin_Handler,
		},
		{
			MethodName: "GetCoins",
			Handler:    _CoinService_GetCoins_Handler,
		},
		{
			MethodName: "GetWithdrawalFee",
			Handler:    _CoinService_GetWithdrawalFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/proto/coin.proto",
}
