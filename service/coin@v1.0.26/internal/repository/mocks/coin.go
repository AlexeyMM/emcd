// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "code.emcdtech.com/emcd/service/coin/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCoin is an autogenerated mock type for the Coin type
type MockCoin struct {
	mock.Mock
}

// GetCoin provides a mock function with given fields: ctx, coinID
func (_m *MockCoin) GetCoin(ctx context.Context, coinID string) (*model.Coin, error) {
	ret := _m.Called(ctx, coinID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoin")
	}

	var r0 *model.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Coin, error)); ok {
		return rf(ctx, coinID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Coin); ok {
		r0 = rf(ctx, coinID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, coinID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoinFromLegacyID provides a mock function with given fields: ctx, legacyCoinID
func (_m *MockCoin) GetCoinFromLegacyID(ctx context.Context, legacyCoinID int32) (*model.Coin, error) {
	ret := _m.Called(ctx, legacyCoinID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinFromLegacyID")
	}

	var r0 *model.Coin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*model.Coin, error)); ok {
		return rf(ctx, legacyCoinID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *model.Coin); ok {
		r0 = rf(ctx, legacyCoinID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, legacyCoinID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoinNetwork provides a mock function with given fields: ctx, coinID, networkID
func (_m *MockCoin) GetCoinNetwork(ctx context.Context, coinID string, networkID string) (*model.CoinNetwork, error) {
	ret := _m.Called(ctx, coinID, networkID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinNetwork")
	}

	var r0 *model.CoinNetwork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.CoinNetwork, error)); ok {
		return rf(ctx, coinID, networkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.CoinNetwork); ok {
		r0 = rf(ctx, coinID, networkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CoinNetwork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, coinID, networkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoins provides a mock function with given fields: ctx, limit, offset
func (_m *MockCoin) GetCoins(ctx context.Context, limit int32, offset int32) ([]*model.Coin, int32, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetCoins")
	}

	var r0 []*model.Coin
	var r1 int32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]*model.Coin, int32, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []*model.Coin); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Coin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) int32); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, int32) error); ok {
		r2 = rf(ctx, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCoinsNetworks provides a mock function with given fields: ctx
func (_m *MockCoin) GetCoinsNetworks(ctx context.Context) ([]*model.CoinNetwork, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsNetworks")
	}

	var r0 []*model.CoinNetwork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.CoinNetwork, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.CoinNetwork); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CoinNetwork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockCoin creates a new instance of MockCoin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoin(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoin {
	mock := &MockCoin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
