// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protocol/accounting/accounting.proto

package accounting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AccountingService_ViewBalance_FullMethodName                       = "/accounting.AccountingService/ViewBalance"
	AccountingService_ChangeBalance_FullMethodName                     = "/accounting.AccountingService/ChangeBalance"
	AccountingService_ChangeMultipleBalance_FullMethodName             = "/accounting.AccountingService/ChangeMultipleBalance"
	AccountingService_GetBalances_FullMethodName                       = "/accounting.AccountingService/GetBalances"
	AccountingService_GetBalanceByCoin_FullMethodName                  = "/accounting.AccountingService/GetBalanceByCoin"
	AccountingService_GetPaid_FullMethodName                           = "/accounting.AccountingService/GetPaid"
	AccountingService_GetCoinsSummary_FullMethodName                   = "/accounting.AccountingService/GetCoinsSummary"
	AccountingService_FindOperations_FullMethodName                    = "/accounting.AccountingService/FindOperations"
	AccountingService_FindBatchOperations_FullMethodName               = "/accounting.AccountingService/FindBatchOperations"
	AccountingService_FindTransactions_FullMethodName                  = "/accounting.AccountingService/FindTransactions"
	AccountingService_FindTransactionsByCollectorFilter_FullMethodName = "/accounting.AccountingService/FindTransactionsByCollectorFilter"
	AccountingService_GetTransactionsByActionID_FullMethodName         = "/accounting.AccountingService/GetTransactionsByActionID"
	AccountingService_FindTransactionsWithBlocks_FullMethodName        = "/accounting.AccountingService/FindTransactionsWithBlocks"
	AccountingService_GetTransactionByID_FullMethodName                = "/accounting.AccountingService/GetTransactionByID"
	AccountingService_GetTransactionIDByAction_FullMethodName          = "/accounting.AccountingService/GetTransactionIDByAction"
	AccountingService_FindOperationsAndTransactions_FullMethodName     = "/accounting.AccountingService/FindOperationsAndTransactions"
	AccountingService_FindPayoutsForBlock_FullMethodName               = "/accounting.AccountingService/FindPayoutsForBlock"
	AccountingService_GetCurrentPayoutsBlock_FullMethodName            = "/accounting.AccountingService/GetCurrentPayoutsBlock"
	AccountingService_GetFreePayouts_FullMethodName                    = "/accounting.AccountingService/GetFreePayouts"
	AccountingService_GetCurrentPayoutsList_FullMethodName             = "/accounting.AccountingService/GetCurrentPayoutsList"
	AccountingService_GetCurrentReferralsPayoutsList_FullMethodName    = "/accounting.AccountingService/GetCurrentReferralsPayoutsList"
	AccountingService_CheckFreePayoutTransaction_FullMethodName        = "/accounting.AccountingService/CheckFreePayoutTransaction"
	AccountingService_CheckPayoutBlockStatus_FullMethodName            = "/accounting.AccountingService/CheckPayoutBlockStatus"
	AccountingService_CheckIncomeOperations_FullMethodName             = "/accounting.AccountingService/CheckIncomeOperations"
	AccountingService_CheckOthers_FullMethodName                       = "/accounting.AccountingService/CheckOthers"
	AccountingService_GetAveragePaid_FullMethodName                    = "/accounting.AccountingService/GetAveragePaid"
	AccountingService_GetBalanceBeforeTransaction_FullMethodName       = "/accounting.AccountingService/GetBalanceBeforeTransaction"
	AccountingService_GetServiceUserData_FullMethodName                = "/accounting.AccountingService/GetServiceUserData"
	AccountingService_FindLastBlockTimeBalances_FullMethodName         = "/accounting.AccountingService/FindLastBlockTimeBalances"
	AccountingService_FindBalancesDiffMining_FullMethodName            = "/accounting.AccountingService/FindBalancesDiffMining"
	AccountingService_FindBalancesDiffWallet_FullMethodName            = "/accounting.AccountingService/FindBalancesDiffWallet"
	AccountingService_GetHistory_FullMethodName                        = "/accounting.AccountingService/GetHistory"
	AccountingService_CheckPayoutsLimit_FullMethodName                 = "/accounting.AccountingService/CheckPayoutsLimit"
	AccountingService_GetPayoutsBlockStatus_FullMethodName             = "/accounting.AccountingService/GetPayoutsBlockStatus"
	AccountingService_SetPayoutsBlockStatus_FullMethodName             = "/accounting.AccountingService/SetPayoutsBlockStatus"
	AccountingService_ListTransactions_FullMethodName                  = "/accounting.AccountingService/ListTransactions"
	AccountingService_GetUserAccount_FullMethodName                    = "/accounting.AccountingService/GetUserAccount"
	AccountingService_GetUserAccounts_FullMethodName                   = "/accounting.AccountingService/GetUserAccounts"
	AccountingService_GetIncomesHashrateByDate_FullMethodName          = "/accounting.AccountingService/GetIncomesHashrateByDate"
	AccountingService_GetCoinsOperationsSum_FullMethodName             = "/accounting.AccountingService/GetCoinsOperationsSum"
	AccountingService_GetTransactionOperationsIntegrity_FullMethodName = "/accounting.AccountingService/GetTransactionOperationsIntegrity"
	AccountingService_GetCheckTransactionCoins_FullMethodName          = "/accounting.AccountingService/GetCheckTransactionCoins"
	AccountingService_GetCheckFreezePayoutsBlocks_FullMethodName       = "/accounting.AccountingService/GetCheckFreezePayoutsBlocks"
)

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingServiceClient interface {
	// Balances
	ViewBalance(ctx context.Context, in *ViewBalanceRequest, opts ...grpc.CallOption) (*ViewBalanceResponse, error)
	ChangeBalance(ctx context.Context, in *ChangeBalanceRequest, opts ...grpc.CallOption) (*ChangeBalanceResponse, error)
	ChangeMultipleBalance(ctx context.Context, in *ChangeMultipleBalanceRequest, opts ...grpc.CallOption) (*ChangeMultipleBalanceResponse, error)
	GetBalances(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*GetBalancesResponse, error)
	GetBalanceByCoin(ctx context.Context, in *GetBalanceByCoinRequest, opts ...grpc.CallOption) (*GetBalanceByCoinResponse, error)
	GetPaid(ctx context.Context, in *GetPaidRequest, opts ...grpc.CallOption) (*GetPaidResponse, error)
	GetCoinsSummary(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*GetCoinsSummaryResponse, error)
	// Data selection
	FindOperations(ctx context.Context, in *FindOperationsRequest, opts ...grpc.CallOption) (*FindOperationsResponse, error)
	FindBatchOperations(ctx context.Context, in *FindBatchOperationsRequest, opts ...grpc.CallOption) (*FindBatchOperationsResponse, error)
	FindTransactions(ctx context.Context, in *FindTransactionsRequest, opts ...grpc.CallOption) (*FindTransactionsResponse, error)
	FindTransactionsByCollectorFilter(ctx context.Context, in *TransactionCollectorFilter, opts ...grpc.CallOption) (*TransactionMultiResponse, error)
	GetTransactionsByActionID(ctx context.Context, in *GetTransactionsByActionIDRequest, opts ...grpc.CallOption) (*GetTransactionsByActionIDResponse, error)
	FindTransactionsWithBlocks(ctx context.Context, in *FindTransactionsWithBlocksRequest, opts ...grpc.CallOption) (*FindTransactionsWithBlocksResponse, error)
	GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*GetTransactionByIDResponse, error)
	GetTransactionIDByAction(ctx context.Context, in *GetTransactionIDByActionRequest, opts ...grpc.CallOption) (*GetTransactionIDByActionResponse, error)
	FindOperationsAndTransactions(ctx context.Context, in *FindOperationsAndTransactionsRequest, opts ...grpc.CallOption) (*FindOperationsAndTransactionsResponse, error)
	// Data selection for payouts
	FindPayoutsForBlock(ctx context.Context, in *FindPayoutsForBlockRequest, opts ...grpc.CallOption) (*FindPayoutsForBlockResponse, error)
	GetCurrentPayoutsBlock(ctx context.Context, in *GetCurrentPayoutsBlockRequest, opts ...grpc.CallOption) (*GetCurrentPayoutsBlockResponse, error)
	GetFreePayouts(ctx context.Context, in *GetFreePayoutsRequest, opts ...grpc.CallOption) (*GetFreePayoutsResponse, error)
	GetCurrentPayoutsList(ctx context.Context, in *GetCurrentPayoutsListRequest, opts ...grpc.CallOption) (*GetCurrentPayoutsListResponse, error)
	GetCurrentReferralsPayoutsList(ctx context.Context, in *GetCurrentReferralsPayoutsListRequest, opts ...grpc.CallOption) (*GetCurrentReferralsPayoutsListResponse, error)
	CheckFreePayoutTransaction(ctx context.Context, in *CheckFreePayoutTransactionRequest, opts ...grpc.CallOption) (*CheckFreePayoutTransactionResponse, error)
	CheckPayoutBlockStatus(ctx context.Context, in *CheckPayoutBlockStatusRequest, opts ...grpc.CallOption) (*CheckPayoutBlockStatusResponse, error)
	CheckIncomeOperations(ctx context.Context, in *CheckIncomeOperationsRequest, opts ...grpc.CallOption) (*CheckIncomeOperationsResponse, error)
	CheckOthers(ctx context.Context, in *CheckOthersRequest, opts ...grpc.CallOption) (*CheckOthersResponse, error)
	GetAveragePaid(ctx context.Context, in *GetAveragePaidRequest, opts ...grpc.CallOption) (*GetAveragePaidResponse, error)
	GetBalanceBeforeTransaction(ctx context.Context, in *GetBalanceBeforeTransactionRequest, opts ...grpc.CallOption) (*GetBalanceBeforeTransactionResponse, error)
	GetServiceUserData(ctx context.Context, in *GetServiceUserDataRequest, opts ...grpc.CallOption) (*GetServiceUserDataResponse, error)
	// Analytics
	FindLastBlockTimeBalances(ctx context.Context, in *FindLastBlockTimeBalancesRequest, opts ...grpc.CallOption) (*FindLastBlockTimeBalancesResponse, error)
	FindBalancesDiffMining(ctx context.Context, in *FindBalancesDiffMiningRequest, opts ...grpc.CallOption) (*FindBalancesDiffMiningResponse, error)
	FindBalancesDiffWallet(ctx context.Context, in *FindBalancesDiffWalletRequest, opts ...grpc.CallOption) (*FindBalancesDiffWalletResponse, error)
	// History
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	// Payouts Limits
	CheckPayoutsLimit(ctx context.Context, in *CheckPayoutsLimitRequest, opts ...grpc.CallOption) (*CheckPayoutsLimitResponse, error)
	GetPayoutsBlockStatus(ctx context.Context, in *GetPayoutsBlockStatusRequest, opts ...grpc.CallOption) (*GetPayoutsBlockStatusResponse, error)
	SetPayoutsBlockStatus(ctx context.Context, in *SetPayoutsBlockStatusRequest, opts ...grpc.CallOption) (*SetPayoutsBlockStatusResponse, error)
	// API for work transaction
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	// API for work account
	// deprecated, use UserAccountService.GetUserAccountById
	GetUserAccount(ctx context.Context, in *GetUserAccountRequest, opts ...grpc.CallOption) (*GetUserAccountResponse, error)
	// deprecated, use UserAccountService.GetUserAccountsByUuid
	GetUserAccounts(ctx context.Context, in *GetUserAccountsRequest, opts ...grpc.CallOption) (*GetUserAccountsResponse, error)
	// Checker section
	GetIncomesHashrateByDate(ctx context.Context, in *GetIncomesHashrateRequest, opts ...grpc.CallOption) (*GetIncomesHashrateResponse, error)
	GetCoinsOperationsSum(ctx context.Context, in *GetCoinsOperationsSumRequest, opts ...grpc.CallOption) (*GetCoinsOperationsSumResponse, error)
	GetTransactionOperationsIntegrity(ctx context.Context, in *GetTransactionOperationsIntegrityRequest, opts ...grpc.CallOption) (*GetTransactionOperationsIntegrityResponse, error)
	GetCheckTransactionCoins(ctx context.Context, in *GetCheckTransactionCoinsRequest, opts ...grpc.CallOption) (*GetCheckTransactionCoinsResponse, error)
	GetCheckFreezePayoutsBlocks(ctx context.Context, in *GetCheckFreezePayoutsBlocksRequest, opts ...grpc.CallOption) (*GetCheckFreezePayoutsBlocksResponse, error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) ViewBalance(ctx context.Context, in *ViewBalanceRequest, opts ...grpc.CallOption) (*ViewBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewBalanceResponse)
	err := c.cc.Invoke(ctx, AccountingService_ViewBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ChangeBalance(ctx context.Context, in *ChangeBalanceRequest, opts ...grpc.CallOption) (*ChangeBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeBalanceResponse)
	err := c.cc.Invoke(ctx, AccountingService_ChangeBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ChangeMultipleBalance(ctx context.Context, in *ChangeMultipleBalanceRequest, opts ...grpc.CallOption) (*ChangeMultipleBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeMultipleBalanceResponse)
	err := c.cc.Invoke(ctx, AccountingService_ChangeMultipleBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetBalances(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*GetBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalancesResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetBalanceByCoin(ctx context.Context, in *GetBalanceByCoinRequest, opts ...grpc.CallOption) (*GetBalanceByCoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceByCoinResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetBalanceByCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetPaid(ctx context.Context, in *GetPaidRequest, opts ...grpc.CallOption) (*GetPaidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaidResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetPaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetCoinsSummary(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*GetCoinsSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoinsSummaryResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetCoinsSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindOperations(ctx context.Context, in *FindOperationsRequest, opts ...grpc.CallOption) (*FindOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOperationsResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindBatchOperations(ctx context.Context, in *FindBatchOperationsRequest, opts ...grpc.CallOption) (*FindBatchOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindBatchOperationsResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindBatchOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindTransactions(ctx context.Context, in *FindTransactionsRequest, opts ...grpc.CallOption) (*FindTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTransactionsResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindTransactionsByCollectorFilter(ctx context.Context, in *TransactionCollectorFilter, opts ...grpc.CallOption) (*TransactionMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionMultiResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindTransactionsByCollectorFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetTransactionsByActionID(ctx context.Context, in *GetTransactionsByActionIDRequest, opts ...grpc.CallOption) (*GetTransactionsByActionIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsByActionIDResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetTransactionsByActionID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindTransactionsWithBlocks(ctx context.Context, in *FindTransactionsWithBlocksRequest, opts ...grpc.CallOption) (*FindTransactionsWithBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTransactionsWithBlocksResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindTransactionsWithBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*GetTransactionByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionByIDResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetTransactionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetTransactionIDByAction(ctx context.Context, in *GetTransactionIDByActionRequest, opts ...grpc.CallOption) (*GetTransactionIDByActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionIDByActionResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetTransactionIDByAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindOperationsAndTransactions(ctx context.Context, in *FindOperationsAndTransactionsRequest, opts ...grpc.CallOption) (*FindOperationsAndTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOperationsAndTransactionsResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindOperationsAndTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindPayoutsForBlock(ctx context.Context, in *FindPayoutsForBlockRequest, opts ...grpc.CallOption) (*FindPayoutsForBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPayoutsForBlockResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindPayoutsForBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetCurrentPayoutsBlock(ctx context.Context, in *GetCurrentPayoutsBlockRequest, opts ...grpc.CallOption) (*GetCurrentPayoutsBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentPayoutsBlockResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetCurrentPayoutsBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetFreePayouts(ctx context.Context, in *GetFreePayoutsRequest, opts ...grpc.CallOption) (*GetFreePayoutsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFreePayoutsResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetFreePayouts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetCurrentPayoutsList(ctx context.Context, in *GetCurrentPayoutsListRequest, opts ...grpc.CallOption) (*GetCurrentPayoutsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentPayoutsListResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetCurrentPayoutsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetCurrentReferralsPayoutsList(ctx context.Context, in *GetCurrentReferralsPayoutsListRequest, opts ...grpc.CallOption) (*GetCurrentReferralsPayoutsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentReferralsPayoutsListResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetCurrentReferralsPayoutsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CheckFreePayoutTransaction(ctx context.Context, in *CheckFreePayoutTransactionRequest, opts ...grpc.CallOption) (*CheckFreePayoutTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckFreePayoutTransactionResponse)
	err := c.cc.Invoke(ctx, AccountingService_CheckFreePayoutTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CheckPayoutBlockStatus(ctx context.Context, in *CheckPayoutBlockStatusRequest, opts ...grpc.CallOption) (*CheckPayoutBlockStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPayoutBlockStatusResponse)
	err := c.cc.Invoke(ctx, AccountingService_CheckPayoutBlockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CheckIncomeOperations(ctx context.Context, in *CheckIncomeOperationsRequest, opts ...grpc.CallOption) (*CheckIncomeOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIncomeOperationsResponse)
	err := c.cc.Invoke(ctx, AccountingService_CheckIncomeOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CheckOthers(ctx context.Context, in *CheckOthersRequest, opts ...grpc.CallOption) (*CheckOthersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckOthersResponse)
	err := c.cc.Invoke(ctx, AccountingService_CheckOthers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetAveragePaid(ctx context.Context, in *GetAveragePaidRequest, opts ...grpc.CallOption) (*GetAveragePaidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAveragePaidResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetAveragePaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetBalanceBeforeTransaction(ctx context.Context, in *GetBalanceBeforeTransactionRequest, opts ...grpc.CallOption) (*GetBalanceBeforeTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceBeforeTransactionResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetBalanceBeforeTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetServiceUserData(ctx context.Context, in *GetServiceUserDataRequest, opts ...grpc.CallOption) (*GetServiceUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceUserDataResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetServiceUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindLastBlockTimeBalances(ctx context.Context, in *FindLastBlockTimeBalancesRequest, opts ...grpc.CallOption) (*FindLastBlockTimeBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindLastBlockTimeBalancesResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindLastBlockTimeBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindBalancesDiffMining(ctx context.Context, in *FindBalancesDiffMiningRequest, opts ...grpc.CallOption) (*FindBalancesDiffMiningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindBalancesDiffMiningResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindBalancesDiffMining_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FindBalancesDiffWallet(ctx context.Context, in *FindBalancesDiffWalletRequest, opts ...grpc.CallOption) (*FindBalancesDiffWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindBalancesDiffWalletResponse)
	err := c.cc.Invoke(ctx, AccountingService_FindBalancesDiffWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CheckPayoutsLimit(ctx context.Context, in *CheckPayoutsLimitRequest, opts ...grpc.CallOption) (*CheckPayoutsLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPayoutsLimitResponse)
	err := c.cc.Invoke(ctx, AccountingService_CheckPayoutsLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetPayoutsBlockStatus(ctx context.Context, in *GetPayoutsBlockStatusRequest, opts ...grpc.CallOption) (*GetPayoutsBlockStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayoutsBlockStatusResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetPayoutsBlockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) SetPayoutsBlockStatus(ctx context.Context, in *SetPayoutsBlockStatusRequest, opts ...grpc.CallOption) (*SetPayoutsBlockStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPayoutsBlockStatusResponse)
	err := c.cc.Invoke(ctx, AccountingService_SetPayoutsBlockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, AccountingService_ListTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetUserAccount(ctx context.Context, in *GetUserAccountRequest, opts ...grpc.CallOption) (*GetUserAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAccountResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetUserAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetUserAccounts(ctx context.Context, in *GetUserAccountsRequest, opts ...grpc.CallOption) (*GetUserAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAccountsResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetUserAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetIncomesHashrateByDate(ctx context.Context, in *GetIncomesHashrateRequest, opts ...grpc.CallOption) (*GetIncomesHashrateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIncomesHashrateResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetIncomesHashrateByDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetCoinsOperationsSum(ctx context.Context, in *GetCoinsOperationsSumRequest, opts ...grpc.CallOption) (*GetCoinsOperationsSumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoinsOperationsSumResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetCoinsOperationsSum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetTransactionOperationsIntegrity(ctx context.Context, in *GetTransactionOperationsIntegrityRequest, opts ...grpc.CallOption) (*GetTransactionOperationsIntegrityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionOperationsIntegrityResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetTransactionOperationsIntegrity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetCheckTransactionCoins(ctx context.Context, in *GetCheckTransactionCoinsRequest, opts ...grpc.CallOption) (*GetCheckTransactionCoinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCheckTransactionCoinsResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetCheckTransactionCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetCheckFreezePayoutsBlocks(ctx context.Context, in *GetCheckFreezePayoutsBlocksRequest, opts ...grpc.CallOption) (*GetCheckFreezePayoutsBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCheckFreezePayoutsBlocksResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetCheckFreezePayoutsBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility
type AccountingServiceServer interface {
	// Balances
	ViewBalance(context.Context, *ViewBalanceRequest) (*ViewBalanceResponse, error)
	ChangeBalance(context.Context, *ChangeBalanceRequest) (*ChangeBalanceResponse, error)
	ChangeMultipleBalance(context.Context, *ChangeMultipleBalanceRequest) (*ChangeMultipleBalanceResponse, error)
	GetBalances(context.Context, *UserIDRequest) (*GetBalancesResponse, error)
	GetBalanceByCoin(context.Context, *GetBalanceByCoinRequest) (*GetBalanceByCoinResponse, error)
	GetPaid(context.Context, *GetPaidRequest) (*GetPaidResponse, error)
	GetCoinsSummary(context.Context, *UserIDRequest) (*GetCoinsSummaryResponse, error)
	// Data selection
	FindOperations(context.Context, *FindOperationsRequest) (*FindOperationsResponse, error)
	FindBatchOperations(context.Context, *FindBatchOperationsRequest) (*FindBatchOperationsResponse, error)
	FindTransactions(context.Context, *FindTransactionsRequest) (*FindTransactionsResponse, error)
	FindTransactionsByCollectorFilter(context.Context, *TransactionCollectorFilter) (*TransactionMultiResponse, error)
	GetTransactionsByActionID(context.Context, *GetTransactionsByActionIDRequest) (*GetTransactionsByActionIDResponse, error)
	FindTransactionsWithBlocks(context.Context, *FindTransactionsWithBlocksRequest) (*FindTransactionsWithBlocksResponse, error)
	GetTransactionByID(context.Context, *GetTransactionByIDRequest) (*GetTransactionByIDResponse, error)
	GetTransactionIDByAction(context.Context, *GetTransactionIDByActionRequest) (*GetTransactionIDByActionResponse, error)
	FindOperationsAndTransactions(context.Context, *FindOperationsAndTransactionsRequest) (*FindOperationsAndTransactionsResponse, error)
	// Data selection for payouts
	FindPayoutsForBlock(context.Context, *FindPayoutsForBlockRequest) (*FindPayoutsForBlockResponse, error)
	GetCurrentPayoutsBlock(context.Context, *GetCurrentPayoutsBlockRequest) (*GetCurrentPayoutsBlockResponse, error)
	GetFreePayouts(context.Context, *GetFreePayoutsRequest) (*GetFreePayoutsResponse, error)
	GetCurrentPayoutsList(context.Context, *GetCurrentPayoutsListRequest) (*GetCurrentPayoutsListResponse, error)
	GetCurrentReferralsPayoutsList(context.Context, *GetCurrentReferralsPayoutsListRequest) (*GetCurrentReferralsPayoutsListResponse, error)
	CheckFreePayoutTransaction(context.Context, *CheckFreePayoutTransactionRequest) (*CheckFreePayoutTransactionResponse, error)
	CheckPayoutBlockStatus(context.Context, *CheckPayoutBlockStatusRequest) (*CheckPayoutBlockStatusResponse, error)
	CheckIncomeOperations(context.Context, *CheckIncomeOperationsRequest) (*CheckIncomeOperationsResponse, error)
	CheckOthers(context.Context, *CheckOthersRequest) (*CheckOthersResponse, error)
	GetAveragePaid(context.Context, *GetAveragePaidRequest) (*GetAveragePaidResponse, error)
	GetBalanceBeforeTransaction(context.Context, *GetBalanceBeforeTransactionRequest) (*GetBalanceBeforeTransactionResponse, error)
	GetServiceUserData(context.Context, *GetServiceUserDataRequest) (*GetServiceUserDataResponse, error)
	// Analytics
	FindLastBlockTimeBalances(context.Context, *FindLastBlockTimeBalancesRequest) (*FindLastBlockTimeBalancesResponse, error)
	FindBalancesDiffMining(context.Context, *FindBalancesDiffMiningRequest) (*FindBalancesDiffMiningResponse, error)
	FindBalancesDiffWallet(context.Context, *FindBalancesDiffWalletRequest) (*FindBalancesDiffWalletResponse, error)
	// History
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	// Payouts Limits
	CheckPayoutsLimit(context.Context, *CheckPayoutsLimitRequest) (*CheckPayoutsLimitResponse, error)
	GetPayoutsBlockStatus(context.Context, *GetPayoutsBlockStatusRequest) (*GetPayoutsBlockStatusResponse, error)
	SetPayoutsBlockStatus(context.Context, *SetPayoutsBlockStatusRequest) (*SetPayoutsBlockStatusResponse, error)
	// API for work transaction
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	// API for work account
	// deprecated, use UserAccountService.GetUserAccountById
	GetUserAccount(context.Context, *GetUserAccountRequest) (*GetUserAccountResponse, error)
	// deprecated, use UserAccountService.GetUserAccountsByUuid
	GetUserAccounts(context.Context, *GetUserAccountsRequest) (*GetUserAccountsResponse, error)
	// Checker section
	GetIncomesHashrateByDate(context.Context, *GetIncomesHashrateRequest) (*GetIncomesHashrateResponse, error)
	GetCoinsOperationsSum(context.Context, *GetCoinsOperationsSumRequest) (*GetCoinsOperationsSumResponse, error)
	GetTransactionOperationsIntegrity(context.Context, *GetTransactionOperationsIntegrityRequest) (*GetTransactionOperationsIntegrityResponse, error)
	GetCheckTransactionCoins(context.Context, *GetCheckTransactionCoinsRequest) (*GetCheckTransactionCoinsResponse, error)
	GetCheckFreezePayoutsBlocks(context.Context, *GetCheckFreezePayoutsBlocksRequest) (*GetCheckFreezePayoutsBlocksResponse, error)
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountingServiceServer struct {
}

func (UnimplementedAccountingServiceServer) ViewBalance(context.Context, *ViewBalanceRequest) (*ViewBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewBalance not implemented")
}
func (UnimplementedAccountingServiceServer) ChangeBalance(context.Context, *ChangeBalanceRequest) (*ChangeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBalance not implemented")
}
func (UnimplementedAccountingServiceServer) ChangeMultipleBalance(context.Context, *ChangeMultipleBalanceRequest) (*ChangeMultipleBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMultipleBalance not implemented")
}
func (UnimplementedAccountingServiceServer) GetBalances(context.Context, *UserIDRequest) (*GetBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalances not implemented")
}
func (UnimplementedAccountingServiceServer) GetBalanceByCoin(context.Context, *GetBalanceByCoinRequest) (*GetBalanceByCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceByCoin not implemented")
}
func (UnimplementedAccountingServiceServer) GetPaid(context.Context, *GetPaidRequest) (*GetPaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaid not implemented")
}
func (UnimplementedAccountingServiceServer) GetCoinsSummary(context.Context, *UserIDRequest) (*GetCoinsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinsSummary not implemented")
}
func (UnimplementedAccountingServiceServer) FindOperations(context.Context, *FindOperationsRequest) (*FindOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOperations not implemented")
}
func (UnimplementedAccountingServiceServer) FindBatchOperations(context.Context, *FindBatchOperationsRequest) (*FindBatchOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBatchOperations not implemented")
}
func (UnimplementedAccountingServiceServer) FindTransactions(context.Context, *FindTransactionsRequest) (*FindTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransactions not implemented")
}
func (UnimplementedAccountingServiceServer) FindTransactionsByCollectorFilter(context.Context, *TransactionCollectorFilter) (*TransactionMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransactionsByCollectorFilter not implemented")
}
func (UnimplementedAccountingServiceServer) GetTransactionsByActionID(context.Context, *GetTransactionsByActionIDRequest) (*GetTransactionsByActionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByActionID not implemented")
}
func (UnimplementedAccountingServiceServer) FindTransactionsWithBlocks(context.Context, *FindTransactionsWithBlocksRequest) (*FindTransactionsWithBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransactionsWithBlocks not implemented")
}
func (UnimplementedAccountingServiceServer) GetTransactionByID(context.Context, *GetTransactionByIDRequest) (*GetTransactionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByID not implemented")
}
func (UnimplementedAccountingServiceServer) GetTransactionIDByAction(context.Context, *GetTransactionIDByActionRequest) (*GetTransactionIDByActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionIDByAction not implemented")
}
func (UnimplementedAccountingServiceServer) FindOperationsAndTransactions(context.Context, *FindOperationsAndTransactionsRequest) (*FindOperationsAndTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOperationsAndTransactions not implemented")
}
func (UnimplementedAccountingServiceServer) FindPayoutsForBlock(context.Context, *FindPayoutsForBlockRequest) (*FindPayoutsForBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPayoutsForBlock not implemented")
}
func (UnimplementedAccountingServiceServer) GetCurrentPayoutsBlock(context.Context, *GetCurrentPayoutsBlockRequest) (*GetCurrentPayoutsBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentPayoutsBlock not implemented")
}
func (UnimplementedAccountingServiceServer) GetFreePayouts(context.Context, *GetFreePayoutsRequest) (*GetFreePayoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreePayouts not implemented")
}
func (UnimplementedAccountingServiceServer) GetCurrentPayoutsList(context.Context, *GetCurrentPayoutsListRequest) (*GetCurrentPayoutsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentPayoutsList not implemented")
}
func (UnimplementedAccountingServiceServer) GetCurrentReferralsPayoutsList(context.Context, *GetCurrentReferralsPayoutsListRequest) (*GetCurrentReferralsPayoutsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentReferralsPayoutsList not implemented")
}
func (UnimplementedAccountingServiceServer) CheckFreePayoutTransaction(context.Context, *CheckFreePayoutTransactionRequest) (*CheckFreePayoutTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFreePayoutTransaction not implemented")
}
func (UnimplementedAccountingServiceServer) CheckPayoutBlockStatus(context.Context, *CheckPayoutBlockStatusRequest) (*CheckPayoutBlockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPayoutBlockStatus not implemented")
}
func (UnimplementedAccountingServiceServer) CheckIncomeOperations(context.Context, *CheckIncomeOperationsRequest) (*CheckIncomeOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIncomeOperations not implemented")
}
func (UnimplementedAccountingServiceServer) CheckOthers(context.Context, *CheckOthersRequest) (*CheckOthersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOthers not implemented")
}
func (UnimplementedAccountingServiceServer) GetAveragePaid(context.Context, *GetAveragePaidRequest) (*GetAveragePaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAveragePaid not implemented")
}
func (UnimplementedAccountingServiceServer) GetBalanceBeforeTransaction(context.Context, *GetBalanceBeforeTransactionRequest) (*GetBalanceBeforeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceBeforeTransaction not implemented")
}
func (UnimplementedAccountingServiceServer) GetServiceUserData(context.Context, *GetServiceUserDataRequest) (*GetServiceUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceUserData not implemented")
}
func (UnimplementedAccountingServiceServer) FindLastBlockTimeBalances(context.Context, *FindLastBlockTimeBalancesRequest) (*FindLastBlockTimeBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLastBlockTimeBalances not implemented")
}
func (UnimplementedAccountingServiceServer) FindBalancesDiffMining(context.Context, *FindBalancesDiffMiningRequest) (*FindBalancesDiffMiningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBalancesDiffMining not implemented")
}
func (UnimplementedAccountingServiceServer) FindBalancesDiffWallet(context.Context, *FindBalancesDiffWalletRequest) (*FindBalancesDiffWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBalancesDiffWallet not implemented")
}
func (UnimplementedAccountingServiceServer) GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedAccountingServiceServer) CheckPayoutsLimit(context.Context, *CheckPayoutsLimitRequest) (*CheckPayoutsLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPayoutsLimit not implemented")
}
func (UnimplementedAccountingServiceServer) GetPayoutsBlockStatus(context.Context, *GetPayoutsBlockStatusRequest) (*GetPayoutsBlockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayoutsBlockStatus not implemented")
}
func (UnimplementedAccountingServiceServer) SetPayoutsBlockStatus(context.Context, *SetPayoutsBlockStatusRequest) (*SetPayoutsBlockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayoutsBlockStatus not implemented")
}
func (UnimplementedAccountingServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedAccountingServiceServer) GetUserAccount(context.Context, *GetUserAccountRequest) (*GetUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccount not implemented")
}
func (UnimplementedAccountingServiceServer) GetUserAccounts(context.Context, *GetUserAccountsRequest) (*GetUserAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccounts not implemented")
}
func (UnimplementedAccountingServiceServer) GetIncomesHashrateByDate(context.Context, *GetIncomesHashrateRequest) (*GetIncomesHashrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomesHashrateByDate not implemented")
}
func (UnimplementedAccountingServiceServer) GetCoinsOperationsSum(context.Context, *GetCoinsOperationsSumRequest) (*GetCoinsOperationsSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinsOperationsSum not implemented")
}
func (UnimplementedAccountingServiceServer) GetTransactionOperationsIntegrity(context.Context, *GetTransactionOperationsIntegrityRequest) (*GetTransactionOperationsIntegrityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionOperationsIntegrity not implemented")
}
func (UnimplementedAccountingServiceServer) GetCheckTransactionCoins(context.Context, *GetCheckTransactionCoinsRequest) (*GetCheckTransactionCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckTransactionCoins not implemented")
}
func (UnimplementedAccountingServiceServer) GetCheckFreezePayoutsBlocks(context.Context, *GetCheckFreezePayoutsBlocksRequest) (*GetCheckFreezePayoutsBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckFreezePayoutsBlocks not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_ViewBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ViewBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ViewBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ViewBalance(ctx, req.(*ViewBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ChangeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ChangeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ChangeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ChangeBalance(ctx, req.(*ChangeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ChangeMultipleBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMultipleBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ChangeMultipleBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ChangeMultipleBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ChangeMultipleBalance(ctx, req.(*ChangeMultipleBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetBalances(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetBalanceByCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceByCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetBalanceByCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetBalanceByCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetBalanceByCoin(ctx, req.(*GetBalanceByCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetPaid(ctx, req.(*GetPaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetCoinsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetCoinsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetCoinsSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetCoinsSummary(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindOperations(ctx, req.(*FindOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindBatchOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBatchOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindBatchOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindBatchOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindBatchOperations(ctx, req.(*FindBatchOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindTransactions(ctx, req.(*FindTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindTransactionsByCollectorFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionCollectorFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindTransactionsByCollectorFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindTransactionsByCollectorFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindTransactionsByCollectorFilter(ctx, req.(*TransactionCollectorFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetTransactionsByActionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByActionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetTransactionsByActionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetTransactionsByActionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetTransactionsByActionID(ctx, req.(*GetTransactionsByActionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindTransactionsWithBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTransactionsWithBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindTransactionsWithBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindTransactionsWithBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindTransactionsWithBlocks(ctx, req.(*FindTransactionsWithBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetTransactionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetTransactionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetTransactionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetTransactionByID(ctx, req.(*GetTransactionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetTransactionIDByAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionIDByActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetTransactionIDByAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetTransactionIDByAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetTransactionIDByAction(ctx, req.(*GetTransactionIDByActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindOperationsAndTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOperationsAndTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindOperationsAndTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindOperationsAndTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindOperationsAndTransactions(ctx, req.(*FindOperationsAndTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindPayoutsForBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPayoutsForBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindPayoutsForBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindPayoutsForBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindPayoutsForBlock(ctx, req.(*FindPayoutsForBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetCurrentPayoutsBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentPayoutsBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetCurrentPayoutsBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetCurrentPayoutsBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetCurrentPayoutsBlock(ctx, req.(*GetCurrentPayoutsBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetFreePayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFreePayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetFreePayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetFreePayouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetFreePayouts(ctx, req.(*GetFreePayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetCurrentPayoutsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentPayoutsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetCurrentPayoutsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetCurrentPayoutsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetCurrentPayoutsList(ctx, req.(*GetCurrentPayoutsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetCurrentReferralsPayoutsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentReferralsPayoutsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetCurrentReferralsPayoutsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetCurrentReferralsPayoutsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetCurrentReferralsPayoutsList(ctx, req.(*GetCurrentReferralsPayoutsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CheckFreePayoutTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFreePayoutTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CheckFreePayoutTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CheckFreePayoutTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CheckFreePayoutTransaction(ctx, req.(*CheckFreePayoutTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CheckPayoutBlockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPayoutBlockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CheckPayoutBlockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CheckPayoutBlockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CheckPayoutBlockStatus(ctx, req.(*CheckPayoutBlockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CheckIncomeOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIncomeOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CheckIncomeOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CheckIncomeOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CheckIncomeOperations(ctx, req.(*CheckIncomeOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CheckOthers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOthersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CheckOthers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CheckOthers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CheckOthers(ctx, req.(*CheckOthersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetAveragePaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAveragePaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetAveragePaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetAveragePaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetAveragePaid(ctx, req.(*GetAveragePaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetBalanceBeforeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceBeforeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetBalanceBeforeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetBalanceBeforeTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetBalanceBeforeTransaction(ctx, req.(*GetBalanceBeforeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetServiceUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetServiceUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetServiceUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetServiceUserData(ctx, req.(*GetServiceUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindLastBlockTimeBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLastBlockTimeBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindLastBlockTimeBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindLastBlockTimeBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindLastBlockTimeBalances(ctx, req.(*FindLastBlockTimeBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindBalancesDiffMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBalancesDiffMiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindBalancesDiffMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindBalancesDiffMining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindBalancesDiffMining(ctx, req.(*FindBalancesDiffMiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FindBalancesDiffWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBalancesDiffWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FindBalancesDiffWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_FindBalancesDiffWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FindBalancesDiffWallet(ctx, req.(*FindBalancesDiffWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CheckPayoutsLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPayoutsLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CheckPayoutsLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CheckPayoutsLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CheckPayoutsLimit(ctx, req.(*CheckPayoutsLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetPayoutsBlockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayoutsBlockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetPayoutsBlockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetPayoutsBlockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetPayoutsBlockStatus(ctx, req.(*GetPayoutsBlockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_SetPayoutsBlockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPayoutsBlockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).SetPayoutsBlockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_SetPayoutsBlockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).SetPayoutsBlockStatus(ctx, req.(*SetPayoutsBlockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetUserAccount(ctx, req.(*GetUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetUserAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetUserAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetUserAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetUserAccounts(ctx, req.(*GetUserAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetIncomesHashrateByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomesHashrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetIncomesHashrateByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetIncomesHashrateByDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetIncomesHashrateByDate(ctx, req.(*GetIncomesHashrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetCoinsOperationsSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinsOperationsSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetCoinsOperationsSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetCoinsOperationsSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetCoinsOperationsSum(ctx, req.(*GetCoinsOperationsSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetTransactionOperationsIntegrity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionOperationsIntegrityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetTransactionOperationsIntegrity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetTransactionOperationsIntegrity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetTransactionOperationsIntegrity(ctx, req.(*GetTransactionOperationsIntegrityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetCheckTransactionCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckTransactionCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetCheckTransactionCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetCheckTransactionCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetCheckTransactionCoins(ctx, req.(*GetCheckTransactionCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetCheckFreezePayoutsBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckFreezePayoutsBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetCheckFreezePayoutsBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetCheckFreezePayoutsBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetCheckFreezePayoutsBlocks(ctx, req.(*GetCheckFreezePayoutsBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViewBalance",
			Handler:    _AccountingService_ViewBalance_Handler,
		},
		{
			MethodName: "ChangeBalance",
			Handler:    _AccountingService_ChangeBalance_Handler,
		},
		{
			MethodName: "ChangeMultipleBalance",
			Handler:    _AccountingService_ChangeMultipleBalance_Handler,
		},
		{
			MethodName: "GetBalances",
			Handler:    _AccountingService_GetBalances_Handler,
		},
		{
			MethodName: "GetBalanceByCoin",
			Handler:    _AccountingService_GetBalanceByCoin_Handler,
		},
		{
			MethodName: "GetPaid",
			Handler:    _AccountingService_GetPaid_Handler,
		},
		{
			MethodName: "GetCoinsSummary",
			Handler:    _AccountingService_GetCoinsSummary_Handler,
		},
		{
			MethodName: "FindOperations",
			Handler:    _AccountingService_FindOperations_Handler,
		},
		{
			MethodName: "FindBatchOperations",
			Handler:    _AccountingService_FindBatchOperations_Handler,
		},
		{
			MethodName: "FindTransactions",
			Handler:    _AccountingService_FindTransactions_Handler,
		},
		{
			MethodName: "FindTransactionsByCollectorFilter",
			Handler:    _AccountingService_FindTransactionsByCollectorFilter_Handler,
		},
		{
			MethodName: "GetTransactionsByActionID",
			Handler:    _AccountingService_GetTransactionsByActionID_Handler,
		},
		{
			MethodName: "FindTransactionsWithBlocks",
			Handler:    _AccountingService_FindTransactionsWithBlocks_Handler,
		},
		{
			MethodName: "GetTransactionByID",
			Handler:    _AccountingService_GetTransactionByID_Handler,
		},
		{
			MethodName: "GetTransactionIDByAction",
			Handler:    _AccountingService_GetTransactionIDByAction_Handler,
		},
		{
			MethodName: "FindOperationsAndTransactions",
			Handler:    _AccountingService_FindOperationsAndTransactions_Handler,
		},
		{
			MethodName: "FindPayoutsForBlock",
			Handler:    _AccountingService_FindPayoutsForBlock_Handler,
		},
		{
			MethodName: "GetCurrentPayoutsBlock",
			Handler:    _AccountingService_GetCurrentPayoutsBlock_Handler,
		},
		{
			MethodName: "GetFreePayouts",
			Handler:    _AccountingService_GetFreePayouts_Handler,
		},
		{
			MethodName: "GetCurrentPayoutsList",
			Handler:    _AccountingService_GetCurrentPayoutsList_Handler,
		},
		{
			MethodName: "GetCurrentReferralsPayoutsList",
			Handler:    _AccountingService_GetCurrentReferralsPayoutsList_Handler,
		},
		{
			MethodName: "CheckFreePayoutTransaction",
			Handler:    _AccountingService_CheckFreePayoutTransaction_Handler,
		},
		{
			MethodName: "CheckPayoutBlockStatus",
			Handler:    _AccountingService_CheckPayoutBlockStatus_Handler,
		},
		{
			MethodName: "CheckIncomeOperations",
			Handler:    _AccountingService_CheckIncomeOperations_Handler,
		},
		{
			MethodName: "CheckOthers",
			Handler:    _AccountingService_CheckOthers_Handler,
		},
		{
			MethodName: "GetAveragePaid",
			Handler:    _AccountingService_GetAveragePaid_Handler,
		},
		{
			MethodName: "GetBalanceBeforeTransaction",
			Handler:    _AccountingService_GetBalanceBeforeTransaction_Handler,
		},
		{
			MethodName: "GetServiceUserData",
			Handler:    _AccountingService_GetServiceUserData_Handler,
		},
		{
			MethodName: "FindLastBlockTimeBalances",
			Handler:    _AccountingService_FindLastBlockTimeBalances_Handler,
		},
		{
			MethodName: "FindBalancesDiffMining",
			Handler:    _AccountingService_FindBalancesDiffMining_Handler,
		},
		{
			MethodName: "FindBalancesDiffWallet",
			Handler:    _AccountingService_FindBalancesDiffWallet_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _AccountingService_GetHistory_Handler,
		},
		{
			MethodName: "CheckPayoutsLimit",
			Handler:    _AccountingService_CheckPayoutsLimit_Handler,
		},
		{
			MethodName: "GetPayoutsBlockStatus",
			Handler:    _AccountingService_GetPayoutsBlockStatus_Handler,
		},
		{
			MethodName: "SetPayoutsBlockStatus",
			Handler:    _AccountingService_SetPayoutsBlockStatus_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _AccountingService_ListTransactions_Handler,
		},
		{
			MethodName: "GetUserAccount",
			Handler:    _AccountingService_GetUserAccount_Handler,
		},
		{
			MethodName: "GetUserAccounts",
			Handler:    _AccountingService_GetUserAccounts_Handler,
		},
		{
			MethodName: "GetIncomesHashrateByDate",
			Handler:    _AccountingService_GetIncomesHashrateByDate_Handler,
		},
		{
			MethodName: "GetCoinsOperationsSum",
			Handler:    _AccountingService_GetCoinsOperationsSum_Handler,
		},
		{
			MethodName: "GetTransactionOperationsIntegrity",
			Handler:    _AccountingService_GetTransactionOperationsIntegrity_Handler,
		},
		{
			MethodName: "GetCheckTransactionCoins",
			Handler:    _AccountingService_GetCheckTransactionCoins_Handler,
		},
		{
			MethodName: "GetCheckFreezePayoutsBlocks",
			Handler:    _AccountingService_GetCheckFreezePayoutsBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/accounting/accounting.proto",
}
