// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: protocol/user_account/user_account.proto

package user_account

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserAccountOneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id пользователя
	//
	// Deprecated: Marked as deprecated in protocol/user_account/user_account.proto.
	UserId int32 `protobuf:"varint,100,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// id пользователя в формате uuid
	UserIdNew string `protobuf:"bytes,1,opt,name=user_id_new,json=userIdNew,proto3" json:"user_id_new,omitempty"`
	// тип аккаунта (Platform, Pool, Coinhold, Referral, Block, Hedge, P2P)
	AccountTypeId int32 `protobuf:"varint,2,opt,name=account_type_id,json=accountTypeId,proto3" json:"account_type_id,omitempty"`
	// ?
	Minpay float64 `protobuf:"fixed64,3,opt,name=minpay,proto3" json:"minpay,omitempty"`
	// адрес
	Address *string `protobuf:"bytes,4,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// ?
	Img1 *float64 `protobuf:"fixed64,5,opt,name=img1,proto3,oneof" json:"img1,omitempty"`
	// ?
	Img2 *float64 `protobuf:"fixed64,6,opt,name=img2,proto3,oneof" json:"img2,omitempty"`
	// ?
	Fee *float64 `protobuf:"fixed64,7,opt,name=fee,proto3,oneof" json:"fee,omitempty"`
	// монета
	CoinNew string `protobuf:"bytes,8,opt,name=coin_new,json=coinNew,proto3" json:"coin_new,omitempty"`
}

func (x *UserAccountOneRequest) Reset() {
	*x = UserAccountOneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountOneRequest) ProtoMessage() {}

func (x *UserAccountOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountOneRequest.ProtoReflect.Descriptor instead.
func (*UserAccountOneRequest) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in protocol/user_account/user_account.proto.
func (x *UserAccountOneRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAccountOneRequest) GetUserIdNew() string {
	if x != nil {
		return x.UserIdNew
	}
	return ""
}

func (x *UserAccountOneRequest) GetAccountTypeId() int32 {
	if x != nil {
		return x.AccountTypeId
	}
	return 0
}

func (x *UserAccountOneRequest) GetMinpay() float64 {
	if x != nil {
		return x.Minpay
	}
	return 0
}

func (x *UserAccountOneRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *UserAccountOneRequest) GetImg1() float64 {
	if x != nil && x.Img1 != nil {
		return *x.Img1
	}
	return 0
}

func (x *UserAccountOneRequest) GetImg2() float64 {
	if x != nil && x.Img2 != nil {
		return *x.Img2
	}
	return 0
}

func (x *UserAccountOneRequest) GetFee() float64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *UserAccountOneRequest) GetCoinNew() string {
	if x != nil {
		return x.CoinNew
	}
	return ""
}

type UserAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// тип аккаунта (Platform, Pool, Coinhold, Referral, Block, Hedge, P2P)
	AccountTypeId int32 `protobuf:"varint,2,opt,name=account_type_id,json=accountTypeId,proto3" json:"account_type_id,omitempty"`
	// ?
	Minpay float64 `protobuf:"fixed64,3,opt,name=minpay,proto3" json:"minpay,omitempty"`
	// адрес
	Address *string `protobuf:"bytes,4,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// ?
	Img1 *float64 `protobuf:"fixed64,5,opt,name=img1,proto3,oneof" json:"img1,omitempty"`
	// ?
	Img2 *float64 `protobuf:"fixed64,6,opt,name=img2,proto3,oneof" json:"img2,omitempty"`
	// ?
	Fee *float64 `protobuf:"fixed64,7,opt,name=fee,proto3,oneof" json:"fee,omitempty"`
	// монета
	CoinNew string `protobuf:"bytes,8,opt,name=coin_new,json=coinNew,proto3" json:"coin_new,omitempty"`
}

func (x *UserAccountRequest) Reset() {
	*x = UserAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountRequest) ProtoMessage() {}

func (x *UserAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountRequest.ProtoReflect.Descriptor instead.
func (*UserAccountRequest) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{1}
}

func (x *UserAccountRequest) GetAccountTypeId() int32 {
	if x != nil {
		return x.AccountTypeId
	}
	return 0
}

func (x *UserAccountRequest) GetMinpay() float64 {
	if x != nil {
		return x.Minpay
	}
	return 0
}

func (x *UserAccountRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *UserAccountRequest) GetImg1() float64 {
	if x != nil && x.Img1 != nil {
		return *x.Img1
	}
	return 0
}

func (x *UserAccountRequest) GetImg2() float64 {
	if x != nil && x.Img2 != nil {
		return *x.Img2
	}
	return 0
}

func (x *UserAccountRequest) GetFee() float64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *UserAccountRequest) GetCoinNew() string {
	if x != nil {
		return x.CoinNew
	}
	return ""
}

type UserAccountConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id пользователя в формате uuid
	UserIdNew string `protobuf:"bytes,1,opt,name=user_id_new,json=userIdNew,proto3" json:"user_id_new,omitempty"`
	// монета
	CoinNew string `protobuf:"bytes,2,opt,name=coin_new,json=coinNew,proto3" json:"coin_new,omitempty"`
	// тип аккаунта
	AccountTypeId int32 `protobuf:"varint,3,opt,name=account_type_id,json=accountTypeId,proto3" json:"account_type_id,omitempty"`
}

func (x *UserAccountConstraintRequest) Reset() {
	*x = UserAccountConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountConstraintRequest) ProtoMessage() {}

func (x *UserAccountConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountConstraintRequest.ProtoReflect.Descriptor instead.
func (*UserAccountConstraintRequest) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{2}
}

func (x *UserAccountConstraintRequest) GetUserIdNew() string {
	if x != nil {
		return x.UserIdNew
	}
	return ""
}

func (x *UserAccountConstraintRequest) GetCoinNew() string {
	if x != nil {
		return x.CoinNew
	}
	return ""
}

func (x *UserAccountConstraintRequest) GetAccountTypeId() int32 {
	if x != nil {
		return x.AccountTypeId
	}
	return 0
}

type UserAccountMultiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id пользователя
	//
	// Deprecated: Marked as deprecated in protocol/user_account/user_account.proto.
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// id пользователя в формате uuid
	UserIdNew string `protobuf:"bytes,2,opt,name=user_id_new,json=userIdNew,proto3" json:"user_id_new,omitempty"`
	// пользовательские аккаунты
	UserAccounts []*UserAccountRequest `protobuf:"bytes,3,rep,name=user_accounts,json=userAccounts,proto3" json:"user_accounts,omitempty"`
}

func (x *UserAccountMultiRequest) Reset() {
	*x = UserAccountMultiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountMultiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountMultiRequest) ProtoMessage() {}

func (x *UserAccountMultiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountMultiRequest.ProtoReflect.Descriptor instead.
func (*UserAccountMultiRequest) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in protocol/user_account/user_account.proto.
func (x *UserAccountMultiRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserAccountMultiRequest) GetUserIdNew() string {
	if x != nil {
		return x.UserIdNew
	}
	return ""
}

func (x *UserAccountMultiRequest) GetUserAccounts() []*UserAccountRequest {
	if x != nil {
		return x.UserAccounts
	}
	return nil
}

type UserAccountId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id универсальный
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserAccountId) Reset() {
	*x = UserAccountId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountId) ProtoMessage() {}

func (x *UserAccountId) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountId.ProtoReflect.Descriptor instead.
func (*UserAccountId) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{4}
}

func (x *UserAccountId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserAccountUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid универсальный
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *UserAccountUuid) Reset() {
	*x = UserAccountUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountUuid) ProtoMessage() {}

func (x *UserAccountUuid) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountUuid.ProtoReflect.Descriptor instead.
func (*UserAccountUuid) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{5}
}

func (x *UserAccountUuid) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type UserAccountPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// количество в запросе к бд
	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// сдвиг в запросе к бд
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *UserAccountPagination) Reset() {
	*x = UserAccountPagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountPagination) ProtoMessage() {}

func (x *UserAccountPagination) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountPagination.ProtoReflect.Descriptor instead.
func (*UserAccountPagination) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{6}
}

func (x *UserAccountPagination) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserAccountPagination) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type UserAccountFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// идентификатор
	Id *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// id пользователя, deprecated
	UserId *int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// тип аккаунта
	AccountTypeId *int32 `protobuf:"varint,4,opt,name=account_type_id,json=accountTypeId,proto3,oneof" json:"account_type_id,omitempty"`
	// id пользователя в формате uuid
	UserIdNew *string `protobuf:"bytes,5,opt,name=user_id_new,json=userIdNew,proto3,oneof" json:"user_id_new,omitempty"`
	// монета
	CoinNew *string `protobuf:"bytes,6,opt,name=coin_new,json=coinNew,proto3,oneof" json:"coin_new,omitempty"`
	// пагинация
	Pagination *UserAccountPagination `protobuf:"bytes,7,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	// флаг активность
	IsActive *bool `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
}

func (x *UserAccountFilter) Reset() {
	*x = UserAccountFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountFilter) ProtoMessage() {}

func (x *UserAccountFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountFilter.ProtoReflect.Descriptor instead.
func (*UserAccountFilter) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{7}
}

func (x *UserAccountFilter) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UserAccountFilter) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UserAccountFilter) GetAccountTypeId() int32 {
	if x != nil && x.AccountTypeId != nil {
		return *x.AccountTypeId
	}
	return 0
}

func (x *UserAccountFilter) GetUserIdNew() string {
	if x != nil && x.UserIdNew != nil {
		return *x.UserIdNew
	}
	return ""
}

func (x *UserAccountFilter) GetCoinNew() string {
	if x != nil && x.CoinNew != nil {
		return *x.CoinNew
	}
	return ""
}

func (x *UserAccountFilter) GetPagination() *UserAccountPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *UserAccountFilter) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

// id serial4 NOT NULL,
// user_id int4 NOT NULL,
// coin_id int4 NOT NULL,
// account_type_id int4 NOT NULL,
// minpay numeric NOT NULL,
// address varchar NULL,
// changed_at timestamp NULL,
// img1 numeric NULL,
// img2 numeric NULL,
// is_active bool NULL,
// created_at timestamp DEFAULT now() NULL,
// updated_at timestamp DEFAULT now() NULL,
// fee numeric DEFAULT 0.015 NULL,
type UserAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// идентификатор
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// id пользователя, deprecated
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// id монеты, deprecated
	//
	// Deprecated: Marked as deprecated in protocol/user_account/user_account.proto.
	CoinId int32 `protobuf:"varint,3,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	// тип аккаунта (Platform, Pool, Coinhold, Referral, Block, Hedge, P2P)
	AccountTypeId int32 `protobuf:"varint,4,opt,name=account_type_id,json=accountTypeId,proto3" json:"account_type_id,omitempty"`
	// ?
	Minpay float64 `protobuf:"fixed64,5,opt,name=minpay,proto3" json:"minpay,omitempty"`
	// адрес
	Address *string `protobuf:"bytes,6,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// ?
	ChangedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=changed_at,json=changedAt,proto3,oneof" json:"changed_at,omitempty"`
	// ?
	Img1 *float64 `protobuf:"fixed64,8,opt,name=img1,proto3,oneof" json:"img1,omitempty"`
	// ?
	Img2 *float64 `protobuf:"fixed64,9,opt,name=img2,proto3,oneof" json:"img2,omitempty"`
	// ?
	IsActive *bool `protobuf:"varint,10,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	// ?
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// ?
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	// ?
	Fee *float64 `protobuf:"fixed64,13,opt,name=fee,proto3,oneof" json:"fee,omitempty"`
	// id пользователя в формате uuid
	UserIdNew string `protobuf:"bytes,14,opt,name=user_id_new,json=userIdNew,proto3" json:"user_id_new,omitempty"`
	// монета
	CoinNew string `protobuf:"bytes,15,opt,name=coin_new,json=coinNew,proto3" json:"coin_new,omitempty"`
}

func (x *UserAccountResponse) Reset() {
	*x = UserAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountResponse) ProtoMessage() {}

func (x *UserAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountResponse.ProtoReflect.Descriptor instead.
func (*UserAccountResponse) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{8}
}

func (x *UserAccountResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAccountResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// Deprecated: Marked as deprecated in protocol/user_account/user_account.proto.
func (x *UserAccountResponse) GetCoinId() int32 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *UserAccountResponse) GetAccountTypeId() int32 {
	if x != nil {
		return x.AccountTypeId
	}
	return 0
}

func (x *UserAccountResponse) GetMinpay() float64 {
	if x != nil {
		return x.Minpay
	}
	return 0
}

func (x *UserAccountResponse) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *UserAccountResponse) GetChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedAt
	}
	return nil
}

func (x *UserAccountResponse) GetImg1() float64 {
	if x != nil && x.Img1 != nil {
		return *x.Img1
	}
	return 0
}

func (x *UserAccountResponse) GetImg2() float64 {
	if x != nil && x.Img2 != nil {
		return *x.Img2
	}
	return 0
}

func (x *UserAccountResponse) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *UserAccountResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserAccountResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserAccountResponse) GetFee() float64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *UserAccountResponse) GetUserIdNew() string {
	if x != nil {
		return x.UserIdNew
	}
	return ""
}

func (x *UserAccountResponse) GetCoinNew() string {
	if x != nil {
		return x.CoinNew
	}
	return ""
}

type UserAccountMultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// пользовательские аккаунты
	UserAccounts []*UserAccountResponse `protobuf:"bytes,1,rep,name=user_accounts,json=userAccounts,proto3" json:"user_accounts,omitempty"`
	// общее количество
	TotalCount *uint64 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
}

func (x *UserAccountMultiResponse) Reset() {
	*x = UserAccountMultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_user_account_user_account_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountMultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountMultiResponse) ProtoMessage() {}

func (x *UserAccountMultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_user_account_user_account_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountMultiResponse.ProtoReflect.Descriptor instead.
func (*UserAccountMultiResponse) Descriptor() ([]byte, []int) {
	return file_protocol_user_account_user_account_proto_rawDescGZIP(), []int{9}
}

func (x *UserAccountMultiResponse) GetUserAccounts() []*UserAccountResponse {
	if x != nil {
		return x.UserAccounts
	}
	return nil
}

func (x *UserAccountMultiResponse) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

var File_protocol_user_account_user_account_proto protoreflect.FileDescriptor

var file_protocol_user_account_user_account_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x02, 0x0a, 0x15, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x65, 0x77,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x70,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x70, 0x61, 0x79,
	0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x04, 0x69, 0x6d, 0x67, 0x31, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e,
	0x4e, 0x65, 0x77, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6d, 0x67, 0x31, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6d, 0x67,
	0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x65, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x70,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x70, 0x61, 0x79,
	0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x04, 0x69, 0x6d, 0x67, 0x31, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e,
	0x4e, 0x65, 0x77, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6d, 0x67, 0x31, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6d, 0x67,
	0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x65, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x69, 0x6e, 0x4e, 0x65, 0x77, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x01,
	0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x4e, 0x65, 0x77, 0x12, 0x45, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x1f, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x85, 0x03, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x65,
	0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x4e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x69,
	0x6e, 0x4e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x81, 0x05, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x70, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x70,
	0x61, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x02, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x31, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x6d,
	0x67, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x07, 0x52, 0x03, 0x66, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6d, 0x67, 0x31, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x69, 0x6d, 0x67, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x65, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0xe2, 0x04, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x26, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x1a, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protocol_user_account_user_account_proto_rawDescOnce sync.Once
	file_protocol_user_account_user_account_proto_rawDescData = file_protocol_user_account_user_account_proto_rawDesc
)

func file_protocol_user_account_user_account_proto_rawDescGZIP() []byte {
	file_protocol_user_account_user_account_proto_rawDescOnce.Do(func() {
		file_protocol_user_account_user_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_user_account_user_account_proto_rawDescData)
	})
	return file_protocol_user_account_user_account_proto_rawDescData
}

var file_protocol_user_account_user_account_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protocol_user_account_user_account_proto_goTypes = []any{
	(*UserAccountOneRequest)(nil),        // 0: user_account.UserAccountOneRequest
	(*UserAccountRequest)(nil),           // 1: user_account.UserAccountRequest
	(*UserAccountConstraintRequest)(nil), // 2: user_account.UserAccountConstraintRequest
	(*UserAccountMultiRequest)(nil),      // 3: user_account.UserAccountMultiRequest
	(*UserAccountId)(nil),                // 4: user_account.UserAccountId
	(*UserAccountUuid)(nil),              // 5: user_account.UserAccountUuid
	(*UserAccountPagination)(nil),        // 6: user_account.UserAccountPagination
	(*UserAccountFilter)(nil),            // 7: user_account.UserAccountFilter
	(*UserAccountResponse)(nil),          // 8: user_account.UserAccountResponse
	(*UserAccountMultiResponse)(nil),     // 9: user_account.UserAccountMultiResponse
	(*timestamppb.Timestamp)(nil),        // 10: google.protobuf.Timestamp
}
var file_protocol_user_account_user_account_proto_depIdxs = []int32{
	1,  // 0: user_account.UserAccountMultiRequest.user_accounts:type_name -> user_account.UserAccountRequest
	6,  // 1: user_account.UserAccountFilter.pagination:type_name -> user_account.UserAccountPagination
	10, // 2: user_account.UserAccountResponse.changed_at:type_name -> google.protobuf.Timestamp
	10, // 3: user_account.UserAccountResponse.created_at:type_name -> google.protobuf.Timestamp
	10, // 4: user_account.UserAccountResponse.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 5: user_account.UserAccountMultiResponse.user_accounts:type_name -> user_account.UserAccountResponse
	3,  // 6: user_account.UserAccountService.CreateUserAccounts:input_type -> user_account.UserAccountMultiRequest
	0,  // 7: user_account.UserAccountService.GetOrCreateUserAccount:input_type -> user_account.UserAccountOneRequest
	7,  // 8: user_account.UserAccountService.GetUserAccountsByFilter:input_type -> user_account.UserAccountFilter
	4,  // 9: user_account.UserAccountService.GetUserAccountById:input_type -> user_account.UserAccountId
	2,  // 10: user_account.UserAccountService.GetUserAccountByConstraint:input_type -> user_account.UserAccountConstraintRequest
	5,  // 11: user_account.UserAccountService.GetUserAccountsByUuid:input_type -> user_account.UserAccountUuid
	9,  // 12: user_account.UserAccountService.CreateUserAccounts:output_type -> user_account.UserAccountMultiResponse
	8,  // 13: user_account.UserAccountService.GetOrCreateUserAccount:output_type -> user_account.UserAccountResponse
	9,  // 14: user_account.UserAccountService.GetUserAccountsByFilter:output_type -> user_account.UserAccountMultiResponse
	8,  // 15: user_account.UserAccountService.GetUserAccountById:output_type -> user_account.UserAccountResponse
	8,  // 16: user_account.UserAccountService.GetUserAccountByConstraint:output_type -> user_account.UserAccountResponse
	9,  // 17: user_account.UserAccountService.GetUserAccountsByUuid:output_type -> user_account.UserAccountMultiResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_protocol_user_account_user_account_proto_init() }
func file_protocol_user_account_user_account_proto_init() {
	if File_protocol_user_account_user_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_user_account_user_account_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountOneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountMultiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountPagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_user_account_user_account_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccountMultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_user_account_user_account_proto_msgTypes[0].OneofWrappers = []any{}
	file_protocol_user_account_user_account_proto_msgTypes[1].OneofWrappers = []any{}
	file_protocol_user_account_user_account_proto_msgTypes[7].OneofWrappers = []any{}
	file_protocol_user_account_user_account_proto_msgTypes[8].OneofWrappers = []any{}
	file_protocol_user_account_user_account_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_user_account_user_account_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_user_account_user_account_proto_goTypes,
		DependencyIndexes: file_protocol_user_account_user_account_proto_depIdxs,
		MessageInfos:      file_protocol_user_account_user_account_proto_msgTypes,
	}.Build()
	File_protocol_user_account_user_account_proto = out.File
	file_protocol_user_account_user_account_proto_rawDesc = nil
	file_protocol_user_account_user_account_proto_goTypes = nil
	file_protocol_user_account_user_account_proto_depIdxs = nil
}
