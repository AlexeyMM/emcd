// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCoin is an autogenerated mock type for the Coin type
type MockCoin struct {
	mock.Mock
}

type MockCoin_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoin) EXPECT() *MockCoin_Expecter {
	return &MockCoin_Expecter{mock: &_m.Mock}
}

// GetCoinIDFromLegacyID provides a mock function with given fields: ctx, legacyCoinId
func (_m *MockCoin) GetCoinIDFromLegacyID(ctx context.Context, legacyCoinId int) (string, error) {
	ret := _m.Called(ctx, legacyCoinId)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinIDFromLegacyID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (string, error)); ok {
		return rf(ctx, legacyCoinId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = rf(ctx, legacyCoinId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, legacyCoinId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoin_GetCoinIDFromLegacyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoinIDFromLegacyID'
type MockCoin_GetCoinIDFromLegacyID_Call struct {
	*mock.Call
}

// GetCoinIDFromLegacyID is a helper method to define mock.On call
//   - ctx context.Context
//   - legacyCoinId int
func (_e *MockCoin_Expecter) GetCoinIDFromLegacyID(ctx interface{}, legacyCoinId interface{}) *MockCoin_GetCoinIDFromLegacyID_Call {
	return &MockCoin_GetCoinIDFromLegacyID_Call{Call: _e.mock.On("GetCoinIDFromLegacyID", ctx, legacyCoinId)}
}

func (_c *MockCoin_GetCoinIDFromLegacyID_Call) Run(run func(ctx context.Context, legacyCoinId int)) *MockCoin_GetCoinIDFromLegacyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockCoin_GetCoinIDFromLegacyID_Call) Return(_a0 string, _a1 error) *MockCoin_GetCoinIDFromLegacyID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCoin_GetCoinIDFromLegacyID_Call) RunAndReturn(run func(context.Context, int) (string, error)) *MockCoin_GetCoinIDFromLegacyID_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdByCode provides a mock function with given fields: ctx, coin
func (_m *MockCoin) GetIdByCode(ctx context.Context, coin string) (int, error) {
	ret := _m.Called(ctx, coin)

	if len(ret) == 0 {
		panic("no return value specified for GetIdByCode")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, coin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, coin)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, coin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoin_GetIdByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdByCode'
type MockCoin_GetIdByCode_Call struct {
	*mock.Call
}

// GetIdByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - coin string
func (_e *MockCoin_Expecter) GetIdByCode(ctx interface{}, coin interface{}) *MockCoin_GetIdByCode_Call {
	return &MockCoin_GetIdByCode_Call{Call: _e.mock.On("GetIdByCode", ctx, coin)}
}

func (_c *MockCoin_GetIdByCode_Call) Run(run func(ctx context.Context, coin string)) *MockCoin_GetIdByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCoin_GetIdByCode_Call) Return(_a0 int, _a1 error) *MockCoin_GetIdByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCoin_GetIdByCode_Call) RunAndReturn(run func(context.Context, string) (int, error)) *MockCoin_GetIdByCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCoin creates a new instance of MockCoin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoin(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoin {
	mock := &MockCoin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
