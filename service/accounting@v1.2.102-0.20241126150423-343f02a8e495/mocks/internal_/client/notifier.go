// Code generated by mockery v2.43.2. DO NOT EDIT.

package client

import mock "github.com/stretchr/testify/mock"

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

type MockNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifier) EXPECT() *MockNotifier_Expecter {
	return &MockNotifier_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: channelName, message
func (_m *MockNotifier) SendMessage(channelName []string, message string) {
	_m.Called(channelName, message)
}

// MockNotifier_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockNotifier_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - channelName []string
//   - message string
func (_e *MockNotifier_Expecter) SendMessage(channelName interface{}, message interface{}) *MockNotifier_SendMessage_Call {
	return &MockNotifier_SendMessage_Call{Call: _e.mock.On("SendMessage", channelName, message)}
}

func (_c *MockNotifier_SendMessage_Call) Run(run func(channelName []string, message string)) *MockNotifier_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string))
	})
	return _c
}

func (_c *MockNotifier_SendMessage_Call) Return() *MockNotifier_SendMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_SendMessage_Call) RunAndReturn(run func([]string, string)) *MockNotifier_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
