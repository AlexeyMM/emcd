// Code generated by mockery v2.43.2. DO NOT EDIT.

package service

import (
	context "context"

	referral "code.emcdtech.com/emcd/service/accounting/protocol/referral"
	mock "github.com/stretchr/testify/mock"
)

// MockReferral is an autogenerated mock type for the Referral type
type MockReferral struct {
	mock.Mock
}

type MockReferral_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReferral) EXPECT() *MockReferral_Expecter {
	return &MockReferral_Expecter{mock: &_m.Mock}
}

// GetReferralsStatistic provides a mock function with given fields: ctx, req
func (_m *MockReferral) GetReferralsStatistic(ctx context.Context, req *referral.GetReferralsStatisticRequest) (*referral.GetReferralsStatisticResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetReferralsStatistic")
	}

	var r0 *referral.GetReferralsStatisticResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *referral.GetReferralsStatisticRequest) (*referral.GetReferralsStatisticResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *referral.GetReferralsStatisticRequest) *referral.GetReferralsStatisticResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*referral.GetReferralsStatisticResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *referral.GetReferralsStatisticRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReferral_GetReferralsStatistic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferralsStatistic'
type MockReferral_GetReferralsStatistic_Call struct {
	*mock.Call
}

// GetReferralsStatistic is a helper method to define mock.On call
//   - ctx context.Context
//   - req *referral.GetReferralsStatisticRequest
func (_e *MockReferral_Expecter) GetReferralsStatistic(ctx interface{}, req interface{}) *MockReferral_GetReferralsStatistic_Call {
	return &MockReferral_GetReferralsStatistic_Call{Call: _e.mock.On("GetReferralsStatistic", ctx, req)}
}

func (_c *MockReferral_GetReferralsStatistic_Call) Run(run func(ctx context.Context, req *referral.GetReferralsStatisticRequest)) *MockReferral_GetReferralsStatistic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*referral.GetReferralsStatisticRequest))
	})
	return _c
}

func (_c *MockReferral_GetReferralsStatistic_Call) Return(_a0 *referral.GetReferralsStatisticResponse, _a1 error) *MockReferral_GetReferralsStatistic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReferral_GetReferralsStatistic_Call) RunAndReturn(run func(context.Context, *referral.GetReferralsStatisticRequest) (*referral.GetReferralsStatisticResponse, error)) *MockReferral_GetReferralsStatistic_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReferral creates a new instance of MockReferral. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReferral(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReferral {
	mock := &MockReferral{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
