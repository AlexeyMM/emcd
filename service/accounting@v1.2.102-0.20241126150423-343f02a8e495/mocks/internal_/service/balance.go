// Code generated by mockery v2.43.2. DO NOT EDIT.

package service

import (
	context "context"

	accounting "code.emcdtech.com/emcd/service/accounting/protocol/accounting"

	decimal "github.com/shopspring/decimal"

	enum "code.emcdtech.com/emcd/service/accounting/model/enum"

	mock "github.com/stretchr/testify/mock"

	model "code.emcdtech.com/emcd/service/accounting/model"

	time "time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MockBalance is an autogenerated mock type for the Balance type
type MockBalance struct {
	mock.Mock
}

type MockBalance_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBalance) EXPECT() *MockBalance_Expecter {
	return &MockBalance_Expecter{mock: &_m.Mock}
}

// Change provides a mock function with given fields: ctx, transactions
func (_m *MockBalance) Change(ctx context.Context, transactions []*accounting.Transaction) error {
	ret := _m.Called(ctx, transactions)

	if len(ret) == 0 {
		panic("no return value specified for Change")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.Transaction) error); ok {
		r0 = rf(ctx, transactions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBalance_Change_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Change'
type MockBalance_Change_Call struct {
	*mock.Call
}

// Change is a helper method to define mock.On call
//   - ctx context.Context
//   - transactions []*accounting.Transaction
func (_e *MockBalance_Expecter) Change(ctx interface{}, transactions interface{}) *MockBalance_Change_Call {
	return &MockBalance_Change_Call{Call: _e.mock.On("Change", ctx, transactions)}
}

func (_c *MockBalance_Change_Call) Run(run func(ctx context.Context, transactions []*accounting.Transaction)) *MockBalance_Change_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*accounting.Transaction))
	})
	return _c
}

func (_c *MockBalance_Change_Call) Return(_a0 error) *MockBalance_Change_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalance_Change_Call) RunAndReturn(run func(context.Context, []*accounting.Transaction) error) *MockBalance_Change_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeMultiple provides a mock function with given fields: ctx, trs
func (_m *MockBalance) ChangeMultiple(ctx context.Context, trs []*accounting.Transaction) error {
	ret := _m.Called(ctx, trs)

	if len(ret) == 0 {
		panic("no return value specified for ChangeMultiple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.Transaction) error); ok {
		r0 = rf(ctx, trs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBalance_ChangeMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeMultiple'
type MockBalance_ChangeMultiple_Call struct {
	*mock.Call
}

// ChangeMultiple is a helper method to define mock.On call
//   - ctx context.Context
//   - trs []*accounting.Transaction
func (_e *MockBalance_Expecter) ChangeMultiple(ctx interface{}, trs interface{}) *MockBalance_ChangeMultiple_Call {
	return &MockBalance_ChangeMultiple_Call{Call: _e.mock.On("ChangeMultiple", ctx, trs)}
}

func (_c *MockBalance_ChangeMultiple_Call) Run(run func(ctx context.Context, trs []*accounting.Transaction)) *MockBalance_ChangeMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*accounting.Transaction))
	})
	return _c
}

func (_c *MockBalance_ChangeMultiple_Call) Return(_a0 error) *MockBalance_ChangeMultiple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalance_ChangeMultiple_Call) RunAndReturn(run func(context.Context, []*accounting.Transaction) error) *MockBalance_ChangeMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// FindBalancesDiffMining provides a mock function with given fields: ctx, data
func (_m *MockBalance) FindBalancesDiffMining(ctx context.Context, data []*accounting.UserBeforePayoutMining) ([]*accounting.UserMiningDiff, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for FindBalancesDiffMining")
	}

	var r0 []*accounting.UserMiningDiff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserBeforePayoutMining) ([]*accounting.UserMiningDiff, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserBeforePayoutMining) []*accounting.UserMiningDiff); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.UserMiningDiff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*accounting.UserBeforePayoutMining) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_FindBalancesDiffMining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBalancesDiffMining'
type MockBalance_FindBalancesDiffMining_Call struct {
	*mock.Call
}

// FindBalancesDiffMining is a helper method to define mock.On call
//   - ctx context.Context
//   - data []*accounting.UserBeforePayoutMining
func (_e *MockBalance_Expecter) FindBalancesDiffMining(ctx interface{}, data interface{}) *MockBalance_FindBalancesDiffMining_Call {
	return &MockBalance_FindBalancesDiffMining_Call{Call: _e.mock.On("FindBalancesDiffMining", ctx, data)}
}

func (_c *MockBalance_FindBalancesDiffMining_Call) Run(run func(ctx context.Context, data []*accounting.UserBeforePayoutMining)) *MockBalance_FindBalancesDiffMining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*accounting.UserBeforePayoutMining))
	})
	return _c
}

func (_c *MockBalance_FindBalancesDiffMining_Call) Return(_a0 []*accounting.UserMiningDiff, _a1 error) *MockBalance_FindBalancesDiffMining_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_FindBalancesDiffMining_Call) RunAndReturn(run func(context.Context, []*accounting.UserBeforePayoutMining) ([]*accounting.UserMiningDiff, error)) *MockBalance_FindBalancesDiffMining_Call {
	_c.Call.Return(run)
	return _c
}

// FindBalancesDiffWallet provides a mock function with given fields: ctx, data
func (_m *MockBalance) FindBalancesDiffWallet(ctx context.Context, data []*accounting.UserBeforePayoutWallet) ([]*accounting.UserWalletDiff, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for FindBalancesDiffWallet")
	}

	var r0 []*accounting.UserWalletDiff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserBeforePayoutWallet) ([]*accounting.UserWalletDiff, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserBeforePayoutWallet) []*accounting.UserWalletDiff); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.UserWalletDiff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*accounting.UserBeforePayoutWallet) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_FindBalancesDiffWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBalancesDiffWallet'
type MockBalance_FindBalancesDiffWallet_Call struct {
	*mock.Call
}

// FindBalancesDiffWallet is a helper method to define mock.On call
//   - ctx context.Context
//   - data []*accounting.UserBeforePayoutWallet
func (_e *MockBalance_Expecter) FindBalancesDiffWallet(ctx interface{}, data interface{}) *MockBalance_FindBalancesDiffWallet_Call {
	return &MockBalance_FindBalancesDiffWallet_Call{Call: _e.mock.On("FindBalancesDiffWallet", ctx, data)}
}

func (_c *MockBalance_FindBalancesDiffWallet_Call) Run(run func(ctx context.Context, data []*accounting.UserBeforePayoutWallet)) *MockBalance_FindBalancesDiffWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*accounting.UserBeforePayoutWallet))
	})
	return _c
}

func (_c *MockBalance_FindBalancesDiffWallet_Call) Return(_a0 []*accounting.UserWalletDiff, _a1 error) *MockBalance_FindBalancesDiffWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_FindBalancesDiffWallet_Call) RunAndReturn(run func(context.Context, []*accounting.UserBeforePayoutWallet) ([]*accounting.UserWalletDiff, error)) *MockBalance_FindBalancesDiffWallet_Call {
	_c.Call.Return(run)
	return _c
}

// FindBatchOperations provides a mock function with given fields: ctx, usersWithCoins
func (_m *MockBalance) FindBatchOperations(ctx context.Context, usersWithCoins []*accounting.UserIDCoinID) ([]*accounting.BatchOperationSelection, error) {
	ret := _m.Called(ctx, usersWithCoins)

	if len(ret) == 0 {
		panic("no return value specified for FindBatchOperations")
	}

	var r0 []*accounting.BatchOperationSelection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserIDCoinID) ([]*accounting.BatchOperationSelection, error)); ok {
		return rf(ctx, usersWithCoins)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserIDCoinID) []*accounting.BatchOperationSelection); ok {
		r0 = rf(ctx, usersWithCoins)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.BatchOperationSelection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*accounting.UserIDCoinID) error); ok {
		r1 = rf(ctx, usersWithCoins)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_FindBatchOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBatchOperations'
type MockBalance_FindBatchOperations_Call struct {
	*mock.Call
}

// FindBatchOperations is a helper method to define mock.On call
//   - ctx context.Context
//   - usersWithCoins []*accounting.UserIDCoinID
func (_e *MockBalance_Expecter) FindBatchOperations(ctx interface{}, usersWithCoins interface{}) *MockBalance_FindBatchOperations_Call {
	return &MockBalance_FindBatchOperations_Call{Call: _e.mock.On("FindBatchOperations", ctx, usersWithCoins)}
}

func (_c *MockBalance_FindBatchOperations_Call) Run(run func(ctx context.Context, usersWithCoins []*accounting.UserIDCoinID)) *MockBalance_FindBatchOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*accounting.UserIDCoinID))
	})
	return _c
}

func (_c *MockBalance_FindBatchOperations_Call) Return(_a0 []*accounting.BatchOperationSelection, _a1 error) *MockBalance_FindBatchOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_FindBatchOperations_Call) RunAndReturn(run func(context.Context, []*accounting.UserIDCoinID) ([]*accounting.BatchOperationSelection, error)) *MockBalance_FindBatchOperations_Call {
	_c.Call.Return(run)
	return _c
}

// FindLastBlockTimeBalances provides a mock function with given fields: ctx, userAccountIDs
func (_m *MockBalance) FindLastBlockTimeBalances(ctx context.Context, userAccountIDs []int64) ([]*accounting.UserBlockTimeBalance, error) {
	ret := _m.Called(ctx, userAccountIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindLastBlockTimeBalances")
	}

	var r0 []*accounting.UserBlockTimeBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]*accounting.UserBlockTimeBalance, error)); ok {
		return rf(ctx, userAccountIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*accounting.UserBlockTimeBalance); ok {
		r0 = rf(ctx, userAccountIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.UserBlockTimeBalance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, userAccountIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_FindLastBlockTimeBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLastBlockTimeBalances'
type MockBalance_FindLastBlockTimeBalances_Call struct {
	*mock.Call
}

// FindLastBlockTimeBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - userAccountIDs []int64
func (_e *MockBalance_Expecter) FindLastBlockTimeBalances(ctx interface{}, userAccountIDs interface{}) *MockBalance_FindLastBlockTimeBalances_Call {
	return &MockBalance_FindLastBlockTimeBalances_Call{Call: _e.mock.On("FindLastBlockTimeBalances", ctx, userAccountIDs)}
}

func (_c *MockBalance_FindLastBlockTimeBalances_Call) Run(run func(ctx context.Context, userAccountIDs []int64)) *MockBalance_FindLastBlockTimeBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockBalance_FindLastBlockTimeBalances_Call) Return(_a0 []*accounting.UserBlockTimeBalance, _a1 error) *MockBalance_FindLastBlockTimeBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_FindLastBlockTimeBalances_Call) RunAndReturn(run func(context.Context, []int64) ([]*accounting.UserBlockTimeBalance, error)) *MockBalance_FindLastBlockTimeBalances_Call {
	_c.Call.Return(run)
	return _c
}

// FindOperations provides a mock function with given fields: ctx, userID, coinID
func (_m *MockBalance) FindOperations(ctx context.Context, userID int64, coinID string) ([]*accounting.OperationSelectionWithBlock, error) {
	ret := _m.Called(ctx, userID, coinID)

	if len(ret) == 0 {
		panic("no return value specified for FindOperations")
	}

	var r0 []*accounting.OperationSelectionWithBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) ([]*accounting.OperationSelectionWithBlock, error)); ok {
		return rf(ctx, userID, coinID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []*accounting.OperationSelectionWithBlock); ok {
		r0 = rf(ctx, userID, coinID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.OperationSelectionWithBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, userID, coinID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_FindOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOperations'
type MockBalance_FindOperations_Call struct {
	*mock.Call
}

// FindOperations is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - coinID string
func (_e *MockBalance_Expecter) FindOperations(ctx interface{}, userID interface{}, coinID interface{}) *MockBalance_FindOperations_Call {
	return &MockBalance_FindOperations_Call{Call: _e.mock.On("FindOperations", ctx, userID, coinID)}
}

func (_c *MockBalance_FindOperations_Call) Run(run func(ctx context.Context, userID int64, coinID string)) *MockBalance_FindOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockBalance_FindOperations_Call) Return(_a0 []*accounting.OperationSelectionWithBlock, _a1 error) *MockBalance_FindOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_FindOperations_Call) RunAndReturn(run func(context.Context, int64, string) ([]*accounting.OperationSelectionWithBlock, error)) *MockBalance_FindOperations_Call {
	_c.Call.Return(run)
	return _c
}

// FindOperationsAndTransactions provides a mock function with given fields: ctx, request
func (_m *MockBalance) FindOperationsAndTransactions(ctx context.Context, request *model.OperationWithTransactionQuery) ([]*model.OperationWithTransaction, int64, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FindOperationsAndTransactions")
	}

	var r0 []*model.OperationWithTransaction
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OperationWithTransactionQuery) ([]*model.OperationWithTransaction, int64, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OperationWithTransactionQuery) []*model.OperationWithTransaction); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OperationWithTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OperationWithTransactionQuery) int64); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.OperationWithTransactionQuery) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBalance_FindOperationsAndTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOperationsAndTransactions'
type MockBalance_FindOperationsAndTransactions_Call struct {
	*mock.Call
}

// FindOperationsAndTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - request *model.OperationWithTransactionQuery
func (_e *MockBalance_Expecter) FindOperationsAndTransactions(ctx interface{}, request interface{}) *MockBalance_FindOperationsAndTransactions_Call {
	return &MockBalance_FindOperationsAndTransactions_Call{Call: _e.mock.On("FindOperationsAndTransactions", ctx, request)}
}

func (_c *MockBalance_FindOperationsAndTransactions_Call) Run(run func(ctx context.Context, request *model.OperationWithTransactionQuery)) *MockBalance_FindOperationsAndTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.OperationWithTransactionQuery))
	})
	return _c
}

func (_c *MockBalance_FindOperationsAndTransactions_Call) Return(_a0 []*model.OperationWithTransaction, _a1 int64, _a2 error) *MockBalance_FindOperationsAndTransactions_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBalance_FindOperationsAndTransactions_Call) RunAndReturn(run func(context.Context, *model.OperationWithTransactionQuery) ([]*model.OperationWithTransaction, int64, error)) *MockBalance_FindOperationsAndTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// FindTransactions provides a mock function with given fields: ctx, types, userID, accountTypeID, coinIDs, from
func (_m *MockBalance) FindTransactions(ctx context.Context, types []int64, userID int64, accountTypeID int64, coinIDs []string, from *timestamppb.Timestamp) ([]*accounting.Transaction, error) {
	ret := _m.Called(ctx, types, userID, accountTypeID, coinIDs, from)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactions")
	}

	var r0 []*accounting.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, int64, int64, []string, *timestamppb.Timestamp) ([]*accounting.Transaction, error)); ok {
		return rf(ctx, types, userID, accountTypeID, coinIDs, from)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64, int64, int64, []string, *timestamppb.Timestamp) []*accounting.Transaction); ok {
		r0 = rf(ctx, types, userID, accountTypeID, coinIDs, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64, int64, int64, []string, *timestamppb.Timestamp) error); ok {
		r1 = rf(ctx, types, userID, accountTypeID, coinIDs, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_FindTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTransactions'
type MockBalance_FindTransactions_Call struct {
	*mock.Call
}

// FindTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - types []int64
//   - userID int64
//   - accountTypeID int64
//   - coinIDs []string
//   - from *timestamppb.Timestamp
func (_e *MockBalance_Expecter) FindTransactions(ctx interface{}, types interface{}, userID interface{}, accountTypeID interface{}, coinIDs interface{}, from interface{}) *MockBalance_FindTransactions_Call {
	return &MockBalance_FindTransactions_Call{Call: _e.mock.On("FindTransactions", ctx, types, userID, accountTypeID, coinIDs, from)}
}

func (_c *MockBalance_FindTransactions_Call) Run(run func(ctx context.Context, types []int64, userID int64, accountTypeID int64, coinIDs []string, from *timestamppb.Timestamp)) *MockBalance_FindTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64), args[2].(int64), args[3].(int64), args[4].([]string), args[5].(*timestamppb.Timestamp))
	})
	return _c
}

func (_c *MockBalance_FindTransactions_Call) Return(_a0 []*accounting.Transaction, _a1 error) *MockBalance_FindTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_FindTransactions_Call) RunAndReturn(run func(context.Context, []int64, int64, int64, []string, *timestamppb.Timestamp) ([]*accounting.Transaction, error)) *MockBalance_FindTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// FindTransactionsByCollectorFilter provides a mock function with given fields: ctx, filter
func (_m *MockBalance) FindTransactionsByCollectorFilter(ctx context.Context, filter *model.TransactionCollectorFilter) (*uint64, []*accounting.Transaction, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionsByCollectorFilter")
	}

	var r0 *uint64
	var r1 []*accounting.Transaction
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TransactionCollectorFilter) (*uint64, []*accounting.Transaction, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TransactionCollectorFilter) *uint64); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TransactionCollectorFilter) []*accounting.Transaction); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*accounting.Transaction)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.TransactionCollectorFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBalance_FindTransactionsByCollectorFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTransactionsByCollectorFilter'
type MockBalance_FindTransactionsByCollectorFilter_Call struct {
	*mock.Call
}

// FindTransactionsByCollectorFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.TransactionCollectorFilter
func (_e *MockBalance_Expecter) FindTransactionsByCollectorFilter(ctx interface{}, filter interface{}) *MockBalance_FindTransactionsByCollectorFilter_Call {
	return &MockBalance_FindTransactionsByCollectorFilter_Call{Call: _e.mock.On("FindTransactionsByCollectorFilter", ctx, filter)}
}

func (_c *MockBalance_FindTransactionsByCollectorFilter_Call) Run(run func(ctx context.Context, filter *model.TransactionCollectorFilter)) *MockBalance_FindTransactionsByCollectorFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.TransactionCollectorFilter))
	})
	return _c
}

func (_c *MockBalance_FindTransactionsByCollectorFilter_Call) Return(_a0 *uint64, _a1 []*accounting.Transaction, _a2 error) *MockBalance_FindTransactionsByCollectorFilter_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBalance_FindTransactionsByCollectorFilter_Call) RunAndReturn(run func(context.Context, *model.TransactionCollectorFilter) (*uint64, []*accounting.Transaction, error)) *MockBalance_FindTransactionsByCollectorFilter_Call {
	_c.Call.Return(run)
	return _c
}

// FindTransactionsWithBlocks provides a mock function with given fields: ctx, blockedTill
func (_m *MockBalance) FindTransactionsWithBlocks(ctx context.Context, blockedTill *timestamppb.Timestamp) ([]*accounting.TransactionSelectionWithBlock, error) {
	ret := _m.Called(ctx, blockedTill)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionsWithBlocks")
	}

	var r0 []*accounting.TransactionSelectionWithBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestamppb.Timestamp) ([]*accounting.TransactionSelectionWithBlock, error)); ok {
		return rf(ctx, blockedTill)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestamppb.Timestamp) []*accounting.TransactionSelectionWithBlock); ok {
		r0 = rf(ctx, blockedTill)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.TransactionSelectionWithBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestamppb.Timestamp) error); ok {
		r1 = rf(ctx, blockedTill)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_FindTransactionsWithBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTransactionsWithBlocks'
type MockBalance_FindTransactionsWithBlocks_Call struct {
	*mock.Call
}

// FindTransactionsWithBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - blockedTill *timestamppb.Timestamp
func (_e *MockBalance_Expecter) FindTransactionsWithBlocks(ctx interface{}, blockedTill interface{}) *MockBalance_FindTransactionsWithBlocks_Call {
	return &MockBalance_FindTransactionsWithBlocks_Call{Call: _e.mock.On("FindTransactionsWithBlocks", ctx, blockedTill)}
}

func (_c *MockBalance_FindTransactionsWithBlocks_Call) Run(run func(ctx context.Context, blockedTill *timestamppb.Timestamp)) *MockBalance_FindTransactionsWithBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*timestamppb.Timestamp))
	})
	return _c
}

func (_c *MockBalance_FindTransactionsWithBlocks_Call) Return(_a0 []*accounting.TransactionSelectionWithBlock, _a1 error) *MockBalance_FindTransactionsWithBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_FindTransactionsWithBlocks_Call) RunAndReturn(run func(context.Context, *timestamppb.Timestamp) ([]*accounting.TransactionSelectionWithBlock, error)) *MockBalance_FindTransactionsWithBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalanceBeforeTransaction provides a mock function with given fields: ctx, accountID, transactionID
func (_m *MockBalance) GetBalanceBeforeTransaction(ctx context.Context, accountID int64, transactionID int64) (decimal.Decimal, error) {
	ret := _m.Called(ctx, accountID, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceBeforeTransaction")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (decimal.Decimal, error)); ok {
		return rf(ctx, accountID, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) decimal.Decimal); ok {
		r0 = rf(ctx, accountID, transactionID)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, accountID, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_GetBalanceBeforeTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceBeforeTransaction'
type MockBalance_GetBalanceBeforeTransaction_Call struct {
	*mock.Call
}

// GetBalanceBeforeTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
//   - transactionID int64
func (_e *MockBalance_Expecter) GetBalanceBeforeTransaction(ctx interface{}, accountID interface{}, transactionID interface{}) *MockBalance_GetBalanceBeforeTransaction_Call {
	return &MockBalance_GetBalanceBeforeTransaction_Call{Call: _e.mock.On("GetBalanceBeforeTransaction", ctx, accountID, transactionID)}
}

func (_c *MockBalance_GetBalanceBeforeTransaction_Call) Run(run func(ctx context.Context, accountID int64, transactionID int64)) *MockBalance_GetBalanceBeforeTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockBalance_GetBalanceBeforeTransaction_Call) Return(_a0 decimal.Decimal, _a1 error) *MockBalance_GetBalanceBeforeTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_GetBalanceBeforeTransaction_Call) RunAndReturn(run func(context.Context, int64, int64) (decimal.Decimal, error)) *MockBalance_GetBalanceBeforeTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalanceByCoin provides a mock function with given fields: ctx, userID, coin
func (_m *MockBalance) GetBalanceByCoin(ctx context.Context, userID int32, coin string) (*model.Balance, error) {
	ret := _m.Called(ctx, userID, coin)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceByCoin")
	}

	var r0 *model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) (*model.Balance, error)); ok {
		return rf(ctx, userID, coin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) *model.Balance); ok {
		r0 = rf(ctx, userID, coin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) error); ok {
		r1 = rf(ctx, userID, coin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_GetBalanceByCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceByCoin'
type MockBalance_GetBalanceByCoin_Call struct {
	*mock.Call
}

// GetBalanceByCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int32
//   - coin string
func (_e *MockBalance_Expecter) GetBalanceByCoin(ctx interface{}, userID interface{}, coin interface{}) *MockBalance_GetBalanceByCoin_Call {
	return &MockBalance_GetBalanceByCoin_Call{Call: _e.mock.On("GetBalanceByCoin", ctx, userID, coin)}
}

func (_c *MockBalance_GetBalanceByCoin_Call) Run(run func(ctx context.Context, userID int32, coin string)) *MockBalance_GetBalanceByCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *MockBalance_GetBalanceByCoin_Call) Return(_a0 *model.Balance, _a1 error) *MockBalance_GetBalanceByCoin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_GetBalanceByCoin_Call) RunAndReturn(run func(context.Context, int32, string) (*model.Balance, error)) *MockBalance_GetBalanceByCoin_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalances provides a mock function with given fields: ctx, userID
func (_m *MockBalance) GetBalances(ctx context.Context, userID int32) ([]*model.Balance, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalances")
	}

	var r0 []*model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*model.Balance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*model.Balance); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_GetBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalances'
type MockBalance_GetBalances_Call struct {
	*mock.Call
}

// GetBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int32
func (_e *MockBalance_Expecter) GetBalances(ctx interface{}, userID interface{}) *MockBalance_GetBalances_Call {
	return &MockBalance_GetBalances_Call{Call: _e.mock.On("GetBalances", ctx, userID)}
}

func (_c *MockBalance_GetBalances_Call) Run(run func(ctx context.Context, userID int32)) *MockBalance_GetBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockBalance_GetBalances_Call) Return(_a0 []*model.Balance, _a1 error) *MockBalance_GetBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_GetBalances_Call) RunAndReturn(run func(context.Context, int32) ([]*model.Balance, error)) *MockBalance_GetBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoinsSummary provides a mock function with given fields: ctx, userID
func (_m *MockBalance) GetCoinsSummary(ctx context.Context, userID int32) ([]*model.CoinSummary, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsSummary")
	}

	var r0 []*model.CoinSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*model.CoinSummary, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*model.CoinSummary); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CoinSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_GetCoinsSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoinsSummary'
type MockBalance_GetCoinsSummary_Call struct {
	*mock.Call
}

// GetCoinsSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int32
func (_e *MockBalance_Expecter) GetCoinsSummary(ctx interface{}, userID interface{}) *MockBalance_GetCoinsSummary_Call {
	return &MockBalance_GetCoinsSummary_Call{Call: _e.mock.On("GetCoinsSummary", ctx, userID)}
}

func (_c *MockBalance_GetCoinsSummary_Call) Run(run func(ctx context.Context, userID int32)) *MockBalance_GetCoinsSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockBalance_GetCoinsSummary_Call) Return(_a0 []*model.CoinSummary, _a1 error) *MockBalance_GetCoinsSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_GetCoinsSummary_Call) RunAndReturn(run func(context.Context, int32) ([]*model.CoinSummary, error)) *MockBalance_GetCoinsSummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaid provides a mock function with given fields: ctx, userID, coin, from, to
func (_m *MockBalance) GetPaid(ctx context.Context, userID int32, coin string, from time.Time, to time.Time) (decimal.Decimal, error) {
	ret := _m.Called(ctx, userID, coin, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetPaid")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time, time.Time) (decimal.Decimal, error)); ok {
		return rf(ctx, userID, coin, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time, time.Time) decimal.Decimal); ok {
		r0 = rf(ctx, userID, coin, from, to)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, coin, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_GetPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaid'
type MockBalance_GetPaid_Call struct {
	*mock.Call
}

// GetPaid is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int32
//   - coin string
//   - from time.Time
//   - to time.Time
func (_e *MockBalance_Expecter) GetPaid(ctx interface{}, userID interface{}, coin interface{}, from interface{}, to interface{}) *MockBalance_GetPaid_Call {
	return &MockBalance_GetPaid_Call{Call: _e.mock.On("GetPaid", ctx, userID, coin, from, to)}
}

func (_c *MockBalance_GetPaid_Call) Run(run func(ctx context.Context, userID int32, coin string, from time.Time, to time.Time)) *MockBalance_GetPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string), args[3].(time.Time), args[4].(time.Time))
	})
	return _c
}

func (_c *MockBalance_GetPaid_Call) Return(_a0 decimal.Decimal, _a1 error) *MockBalance_GetPaid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_GetPaid_Call) RunAndReturn(run func(context.Context, int32, string, time.Time, time.Time) (decimal.Decimal, error)) *MockBalance_GetPaid_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function with given fields: ctx, id
func (_m *MockBalance) GetTransactionByID(ctx context.Context, id int64) (*accounting.TransactionSelectionWithBlock, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *accounting.TransactionSelectionWithBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*accounting.TransactionSelectionWithBlock, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *accounting.TransactionSelectionWithBlock); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.TransactionSelectionWithBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type MockBalance_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockBalance_Expecter) GetTransactionByID(ctx interface{}, id interface{}) *MockBalance_GetTransactionByID_Call {
	return &MockBalance_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, id)}
}

func (_c *MockBalance_GetTransactionByID_Call) Run(run func(ctx context.Context, id int64)) *MockBalance_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockBalance_GetTransactionByID_Call) Return(_a0 *accounting.TransactionSelectionWithBlock, _a1 error) *MockBalance_GetTransactionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_GetTransactionByID_Call) RunAndReturn(run func(context.Context, int64) (*accounting.TransactionSelectionWithBlock, error)) *MockBalance_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionIDByAction provides a mock function with given fields: ctx, actionID, txType, amount
func (_m *MockBalance) GetTransactionIDByAction(ctx context.Context, actionID string, txType int, amount string) (int64, error) {
	ret := _m.Called(ctx, actionID, txType, amount)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionIDByAction")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) (int64, error)); ok {
		return rf(ctx, actionID, txType, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) int64); ok {
		r0 = rf(ctx, actionID, txType, amount)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) error); ok {
		r1 = rf(ctx, actionID, txType, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_GetTransactionIDByAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionIDByAction'
type MockBalance_GetTransactionIDByAction_Call struct {
	*mock.Call
}

// GetTransactionIDByAction is a helper method to define mock.On call
//   - ctx context.Context
//   - actionID string
//   - txType int
//   - amount string
func (_e *MockBalance_Expecter) GetTransactionIDByAction(ctx interface{}, actionID interface{}, txType interface{}, amount interface{}) *MockBalance_GetTransactionIDByAction_Call {
	return &MockBalance_GetTransactionIDByAction_Call{Call: _e.mock.On("GetTransactionIDByAction", ctx, actionID, txType, amount)}
}

func (_c *MockBalance_GetTransactionIDByAction_Call) Run(run func(ctx context.Context, actionID string, txType int, amount string)) *MockBalance_GetTransactionIDByAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MockBalance_GetTransactionIDByAction_Call) Return(_a0 int64, _a1 error) *MockBalance_GetTransactionIDByAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_GetTransactionIDByAction_Call) RunAndReturn(run func(context.Context, string, int, string) (int64, error)) *MockBalance_GetTransactionIDByAction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsByActionID provides a mock function with given fields: ctx, actionID
func (_m *MockBalance) GetTransactionsByActionID(ctx context.Context, actionID string) ([]*accounting.Transaction, error) {
	ret := _m.Called(ctx, actionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByActionID")
	}

	var r0 []*accounting.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*accounting.Transaction, error)); ok {
		return rf(ctx, actionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*accounting.Transaction); ok {
		r0 = rf(ctx, actionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, actionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_GetTransactionsByActionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByActionID'
type MockBalance_GetTransactionsByActionID_Call struct {
	*mock.Call
}

// GetTransactionsByActionID is a helper method to define mock.On call
//   - ctx context.Context
//   - actionID string
func (_e *MockBalance_Expecter) GetTransactionsByActionID(ctx interface{}, actionID interface{}) *MockBalance_GetTransactionsByActionID_Call {
	return &MockBalance_GetTransactionsByActionID_Call{Call: _e.mock.On("GetTransactionsByActionID", ctx, actionID)}
}

func (_c *MockBalance_GetTransactionsByActionID_Call) Run(run func(ctx context.Context, actionID string)) *MockBalance_GetTransactionsByActionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBalance_GetTransactionsByActionID_Call) Return(_a0 []*accounting.Transaction, _a1 error) *MockBalance_GetTransactionsByActionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_GetTransactionsByActionID_Call) RunAndReturn(run func(context.Context, string) ([]*accounting.Transaction, error)) *MockBalance_GetTransactionsByActionID_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with given fields: ctx, userID, accountTypeID, coinID, totalBalance
func (_m *MockBalance) View(ctx context.Context, userID int64, accountTypeID enum.AccountTypeId, coinID string, totalBalance bool) (decimal.Decimal, error) {
	ret := _m.Called(ctx, userID, accountTypeID, coinID, totalBalance)

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, enum.AccountTypeId, string, bool) (decimal.Decimal, error)); ok {
		return rf(ctx, userID, accountTypeID, coinID, totalBalance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, enum.AccountTypeId, string, bool) decimal.Decimal); ok {
		r0 = rf(ctx, userID, accountTypeID, coinID, totalBalance)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, enum.AccountTypeId, string, bool) error); ok {
		r1 = rf(ctx, userID, accountTypeID, coinID, totalBalance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBalance_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockBalance_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - accountTypeID enum.AccountTypeId
//   - coinID string
//   - totalBalance bool
func (_e *MockBalance_Expecter) View(ctx interface{}, userID interface{}, accountTypeID interface{}, coinID interface{}, totalBalance interface{}) *MockBalance_View_Call {
	return &MockBalance_View_Call{Call: _e.mock.On("View", ctx, userID, accountTypeID, coinID, totalBalance)}
}

func (_c *MockBalance_View_Call) Run(run func(ctx context.Context, userID int64, accountTypeID enum.AccountTypeId, coinID string, totalBalance bool)) *MockBalance_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(enum.AccountTypeId), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockBalance_View_Call) Return(_a0 decimal.Decimal, _a1 error) *MockBalance_View_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalance_View_Call) RunAndReturn(run func(context.Context, int64, enum.AccountTypeId, string, bool) (decimal.Decimal, error)) *MockBalance_View_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBalance creates a new instance of MockBalance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBalance(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBalance {
	mock := &MockBalance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
