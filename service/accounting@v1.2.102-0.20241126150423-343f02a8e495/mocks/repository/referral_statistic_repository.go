// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.emcdtech.com/emcd/service/accounting/model"
	mock "github.com/stretchr/testify/mock"

	referral "code.emcdtech.com/emcd/service/accounting/protocol/referral"
)

// MockReferralStatisticRepository is an autogenerated mock type for the ReferralStatisticRepository type
type MockReferralStatisticRepository struct {
	mock.Mock
}

type MockReferralStatisticRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReferralStatisticRepository) EXPECT() *MockReferralStatisticRepository_Expecter {
	return &MockReferralStatisticRepository_Expecter{mock: &_m.Mock}
}

// GetReferralsStatistic provides a mock function with given fields: ctx, client, data
func (_m *MockReferralStatisticRepository) GetReferralsStatistic(ctx context.Context, client referral.AccountingReferralServiceClient, data model.ReferralsStatisticInput) (model.ReferralsStatisticOutput, error) {
	ret := _m.Called(ctx, client, data)

	if len(ret) == 0 {
		panic("no return value specified for GetReferralsStatistic")
	}

	var r0 model.ReferralsStatisticOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, referral.AccountingReferralServiceClient, model.ReferralsStatisticInput) (model.ReferralsStatisticOutput, error)); ok {
		return rf(ctx, client, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, referral.AccountingReferralServiceClient, model.ReferralsStatisticInput) model.ReferralsStatisticOutput); ok {
		r0 = rf(ctx, client, data)
	} else {
		r0 = ret.Get(0).(model.ReferralsStatisticOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, referral.AccountingReferralServiceClient, model.ReferralsStatisticInput) error); ok {
		r1 = rf(ctx, client, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReferralStatisticRepository_GetReferralsStatistic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferralsStatistic'
type MockReferralStatisticRepository_GetReferralsStatistic_Call struct {
	*mock.Call
}

// GetReferralsStatistic is a helper method to define mock.On call
//   - ctx context.Context
//   - client referral.AccountingReferralServiceClient
//   - data model.ReferralsStatisticInput
func (_e *MockReferralStatisticRepository_Expecter) GetReferralsStatistic(ctx interface{}, client interface{}, data interface{}) *MockReferralStatisticRepository_GetReferralsStatistic_Call {
	return &MockReferralStatisticRepository_GetReferralsStatistic_Call{Call: _e.mock.On("GetReferralsStatistic", ctx, client, data)}
}

func (_c *MockReferralStatisticRepository_GetReferralsStatistic_Call) Run(run func(ctx context.Context, client referral.AccountingReferralServiceClient, data model.ReferralsStatisticInput)) *MockReferralStatisticRepository_GetReferralsStatistic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(referral.AccountingReferralServiceClient), args[2].(model.ReferralsStatisticInput))
	})
	return _c
}

func (_c *MockReferralStatisticRepository_GetReferralsStatistic_Call) Return(_a0 model.ReferralsStatisticOutput, _a1 error) *MockReferralStatisticRepository_GetReferralsStatistic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReferralStatisticRepository_GetReferralsStatistic_Call) RunAndReturn(run func(context.Context, referral.AccountingReferralServiceClient, model.ReferralsStatisticInput) (model.ReferralsStatisticOutput, error)) *MockReferralStatisticRepository_GetReferralsStatistic_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReferralStatisticRepository creates a new instance of MockReferralStatisticRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReferralStatisticRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReferralStatisticRepository {
	mock := &MockReferralStatisticRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
