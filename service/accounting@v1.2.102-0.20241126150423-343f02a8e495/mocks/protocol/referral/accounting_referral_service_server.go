// Code generated by mockery v2.43.2. DO NOT EDIT.

package referral

import (
	context "context"

	referral "code.emcdtech.com/emcd/service/accounting/protocol/referral"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountingReferralServiceServer is an autogenerated mock type for the AccountingReferralServiceServer type
type MockAccountingReferralServiceServer struct {
	mock.Mock
}

type MockAccountingReferralServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingReferralServiceServer) EXPECT() *MockAccountingReferralServiceServer_Expecter {
	return &MockAccountingReferralServiceServer_Expecter{mock: &_m.Mock}
}

// GetReferralsStatistic provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingReferralServiceServer) GetReferralsStatistic(_a0 context.Context, _a1 *referral.GetReferralsStatisticRequest) (*referral.GetReferralsStatisticResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetReferralsStatistic")
	}

	var r0 *referral.GetReferralsStatisticResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *referral.GetReferralsStatisticRequest) (*referral.GetReferralsStatisticResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *referral.GetReferralsStatisticRequest) *referral.GetReferralsStatisticResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*referral.GetReferralsStatisticResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *referral.GetReferralsStatisticRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingReferralServiceServer_GetReferralsStatistic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReferralsStatistic'
type MockAccountingReferralServiceServer_GetReferralsStatistic_Call struct {
	*mock.Call
}

// GetReferralsStatistic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *referral.GetReferralsStatisticRequest
func (_e *MockAccountingReferralServiceServer_Expecter) GetReferralsStatistic(_a0 interface{}, _a1 interface{}) *MockAccountingReferralServiceServer_GetReferralsStatistic_Call {
	return &MockAccountingReferralServiceServer_GetReferralsStatistic_Call{Call: _e.mock.On("GetReferralsStatistic", _a0, _a1)}
}

func (_c *MockAccountingReferralServiceServer_GetReferralsStatistic_Call) Run(run func(_a0 context.Context, _a1 *referral.GetReferralsStatisticRequest)) *MockAccountingReferralServiceServer_GetReferralsStatistic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*referral.GetReferralsStatisticRequest))
	})
	return _c
}

func (_c *MockAccountingReferralServiceServer_GetReferralsStatistic_Call) Return(_a0 *referral.GetReferralsStatisticResponse, _a1 error) *MockAccountingReferralServiceServer_GetReferralsStatistic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingReferralServiceServer_GetReferralsStatistic_Call) RunAndReturn(run func(context.Context, *referral.GetReferralsStatisticRequest) (*referral.GetReferralsStatisticResponse, error)) *MockAccountingReferralServiceServer_GetReferralsStatistic_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAccountingReferralServiceServer provides a mock function with given fields:
func (_m *MockAccountingReferralServiceServer) mustEmbedUnimplementedAccountingReferralServiceServer() {
	_m.Called()
}

// MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAccountingReferralServiceServer'
type MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAccountingReferralServiceServer is a helper method to define mock.On call
func (_e *MockAccountingReferralServiceServer_Expecter) mustEmbedUnimplementedAccountingReferralServiceServer() *MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call {
	return &MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAccountingReferralServiceServer")}
}

func (_c *MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call) Run(run func()) *MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call) Return() *MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call) RunAndReturn(run func()) *MockAccountingReferralServiceServer_mustEmbedUnimplementedAccountingReferralServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingReferralServiceServer creates a new instance of MockAccountingReferralServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingReferralServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingReferralServiceServer {
	mock := &MockAccountingReferralServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
