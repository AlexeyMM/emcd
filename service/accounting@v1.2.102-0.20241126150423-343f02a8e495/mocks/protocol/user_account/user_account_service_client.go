// Code generated by mockery v2.43.2. DO NOT EDIT.

package user_account

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	user_account "code.emcdtech.com/emcd/service/accounting/protocol/user_account"
)

// MockUserAccountServiceClient is an autogenerated mock type for the UserAccountServiceClient type
type MockUserAccountServiceClient struct {
	mock.Mock
}

type MockUserAccountServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAccountServiceClient) EXPECT() *MockUserAccountServiceClient_Expecter {
	return &MockUserAccountServiceClient_Expecter{mock: &_m.Mock}
}

// CreateUserAccounts provides a mock function with given fields: ctx, in, opts
func (_m *MockUserAccountServiceClient) CreateUserAccounts(ctx context.Context, in *user_account.UserAccountMultiRequest, opts ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAccounts")
	}

	var r0 *user_account.UserAccountMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountMultiRequest, ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountMultiRequest, ...grpc.CallOption) *user_account.UserAccountMultiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountMultiRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_CreateUserAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserAccounts'
type MockUserAccountServiceClient_CreateUserAccounts_Call struct {
	*mock.Call
}

// CreateUserAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user_account.UserAccountMultiRequest
//   - opts ...grpc.CallOption
func (_e *MockUserAccountServiceClient_Expecter) CreateUserAccounts(ctx interface{}, in interface{}, opts ...interface{}) *MockUserAccountServiceClient_CreateUserAccounts_Call {
	return &MockUserAccountServiceClient_CreateUserAccounts_Call{Call: _e.mock.On("CreateUserAccounts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserAccountServiceClient_CreateUserAccounts_Call) Run(run func(ctx context.Context, in *user_account.UserAccountMultiRequest, opts ...grpc.CallOption)) *MockUserAccountServiceClient_CreateUserAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user_account.UserAccountMultiRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserAccountServiceClient_CreateUserAccounts_Call) Return(_a0 *user_account.UserAccountMultiResponse, _a1 error) *MockUserAccountServiceClient_CreateUserAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_CreateUserAccounts_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountMultiRequest, ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error)) *MockUserAccountServiceClient_CreateUserAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateUserAccount provides a mock function with given fields: ctx, in, opts
func (_m *MockUserAccountServiceClient) GetOrCreateUserAccount(ctx context.Context, in *user_account.UserAccountOneRequest, opts ...grpc.CallOption) (*user_account.UserAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateUserAccount")
	}

	var r0 *user_account.UserAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountOneRequest, ...grpc.CallOption) (*user_account.UserAccountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountOneRequest, ...grpc.CallOption) *user_account.UserAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountOneRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_GetOrCreateUserAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateUserAccount'
type MockUserAccountServiceClient_GetOrCreateUserAccount_Call struct {
	*mock.Call
}

// GetOrCreateUserAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user_account.UserAccountOneRequest
//   - opts ...grpc.CallOption
func (_e *MockUserAccountServiceClient_Expecter) GetOrCreateUserAccount(ctx interface{}, in interface{}, opts ...interface{}) *MockUserAccountServiceClient_GetOrCreateUserAccount_Call {
	return &MockUserAccountServiceClient_GetOrCreateUserAccount_Call{Call: _e.mock.On("GetOrCreateUserAccount",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserAccountServiceClient_GetOrCreateUserAccount_Call) Run(run func(ctx context.Context, in *user_account.UserAccountOneRequest, opts ...grpc.CallOption)) *MockUserAccountServiceClient_GetOrCreateUserAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user_account.UserAccountOneRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserAccountServiceClient_GetOrCreateUserAccount_Call) Return(_a0 *user_account.UserAccountResponse, _a1 error) *MockUserAccountServiceClient_GetOrCreateUserAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_GetOrCreateUserAccount_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountOneRequest, ...grpc.CallOption) (*user_account.UserAccountResponse, error)) *MockUserAccountServiceClient_GetOrCreateUserAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountByConstraint provides a mock function with given fields: ctx, in, opts
func (_m *MockUserAccountServiceClient) GetUserAccountByConstraint(ctx context.Context, in *user_account.UserAccountConstraintRequest, opts ...grpc.CallOption) (*user_account.UserAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountByConstraint")
	}

	var r0 *user_account.UserAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountConstraintRequest, ...grpc.CallOption) (*user_account.UserAccountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountConstraintRequest, ...grpc.CallOption) *user_account.UserAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountConstraintRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_GetUserAccountByConstraint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountByConstraint'
type MockUserAccountServiceClient_GetUserAccountByConstraint_Call struct {
	*mock.Call
}

// GetUserAccountByConstraint is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user_account.UserAccountConstraintRequest
//   - opts ...grpc.CallOption
func (_e *MockUserAccountServiceClient_Expecter) GetUserAccountByConstraint(ctx interface{}, in interface{}, opts ...interface{}) *MockUserAccountServiceClient_GetUserAccountByConstraint_Call {
	return &MockUserAccountServiceClient_GetUserAccountByConstraint_Call{Call: _e.mock.On("GetUserAccountByConstraint",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserAccountServiceClient_GetUserAccountByConstraint_Call) Run(run func(ctx context.Context, in *user_account.UserAccountConstraintRequest, opts ...grpc.CallOption)) *MockUserAccountServiceClient_GetUserAccountByConstraint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user_account.UserAccountConstraintRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccountByConstraint_Call) Return(_a0 *user_account.UserAccountResponse, _a1 error) *MockUserAccountServiceClient_GetUserAccountByConstraint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccountByConstraint_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountConstraintRequest, ...grpc.CallOption) (*user_account.UserAccountResponse, error)) *MockUserAccountServiceClient_GetUserAccountByConstraint_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountById provides a mock function with given fields: ctx, in, opts
func (_m *MockUserAccountServiceClient) GetUserAccountById(ctx context.Context, in *user_account.UserAccountId, opts ...grpc.CallOption) (*user_account.UserAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountById")
	}

	var r0 *user_account.UserAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountId, ...grpc.CallOption) (*user_account.UserAccountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountId, ...grpc.CallOption) *user_account.UserAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_GetUserAccountById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountById'
type MockUserAccountServiceClient_GetUserAccountById_Call struct {
	*mock.Call
}

// GetUserAccountById is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user_account.UserAccountId
//   - opts ...grpc.CallOption
func (_e *MockUserAccountServiceClient_Expecter) GetUserAccountById(ctx interface{}, in interface{}, opts ...interface{}) *MockUserAccountServiceClient_GetUserAccountById_Call {
	return &MockUserAccountServiceClient_GetUserAccountById_Call{Call: _e.mock.On("GetUserAccountById",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserAccountServiceClient_GetUserAccountById_Call) Run(run func(ctx context.Context, in *user_account.UserAccountId, opts ...grpc.CallOption)) *MockUserAccountServiceClient_GetUserAccountById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user_account.UserAccountId), variadicArgs...)
	})
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccountById_Call) Return(_a0 *user_account.UserAccountResponse, _a1 error) *MockUserAccountServiceClient_GetUserAccountById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccountById_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountId, ...grpc.CallOption) (*user_account.UserAccountResponse, error)) *MockUserAccountServiceClient_GetUserAccountById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountsByFilter provides a mock function with given fields: ctx, in, opts
func (_m *MockUserAccountServiceClient) GetUserAccountsByFilter(ctx context.Context, in *user_account.UserAccountFilter, opts ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountsByFilter")
	}

	var r0 *user_account.UserAccountMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountFilter, ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountFilter, ...grpc.CallOption) *user_account.UserAccountMultiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountFilter, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_GetUserAccountsByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountsByFilter'
type MockUserAccountServiceClient_GetUserAccountsByFilter_Call struct {
	*mock.Call
}

// GetUserAccountsByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user_account.UserAccountFilter
//   - opts ...grpc.CallOption
func (_e *MockUserAccountServiceClient_Expecter) GetUserAccountsByFilter(ctx interface{}, in interface{}, opts ...interface{}) *MockUserAccountServiceClient_GetUserAccountsByFilter_Call {
	return &MockUserAccountServiceClient_GetUserAccountsByFilter_Call{Call: _e.mock.On("GetUserAccountsByFilter",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserAccountServiceClient_GetUserAccountsByFilter_Call) Run(run func(ctx context.Context, in *user_account.UserAccountFilter, opts ...grpc.CallOption)) *MockUserAccountServiceClient_GetUserAccountsByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user_account.UserAccountFilter), variadicArgs...)
	})
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccountsByFilter_Call) Return(_a0 *user_account.UserAccountMultiResponse, _a1 error) *MockUserAccountServiceClient_GetUserAccountsByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccountsByFilter_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountFilter, ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error)) *MockUserAccountServiceClient_GetUserAccountsByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountsByUuid provides a mock function with given fields: ctx, in, opts
func (_m *MockUserAccountServiceClient) GetUserAccountsByUuid(ctx context.Context, in *user_account.UserAccountUuid, opts ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountsByUuid")
	}

	var r0 *user_account.UserAccountMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountUuid, ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountUuid, ...grpc.CallOption) *user_account.UserAccountMultiResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountUuid, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_GetUserAccountsByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountsByUuid'
type MockUserAccountServiceClient_GetUserAccountsByUuid_Call struct {
	*mock.Call
}

// GetUserAccountsByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - in *user_account.UserAccountUuid
//   - opts ...grpc.CallOption
func (_e *MockUserAccountServiceClient_Expecter) GetUserAccountsByUuid(ctx interface{}, in interface{}, opts ...interface{}) *MockUserAccountServiceClient_GetUserAccountsByUuid_Call {
	return &MockUserAccountServiceClient_GetUserAccountsByUuid_Call{Call: _e.mock.On("GetUserAccountsByUuid",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserAccountServiceClient_GetUserAccountsByUuid_Call) Run(run func(ctx context.Context, in *user_account.UserAccountUuid, opts ...grpc.CallOption)) *MockUserAccountServiceClient_GetUserAccountsByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*user_account.UserAccountUuid), variadicArgs...)
	})
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccountsByUuid_Call) Return(_a0 *user_account.UserAccountMultiResponse, _a1 error) *MockUserAccountServiceClient_GetUserAccountsByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccountsByUuid_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountUuid, ...grpc.CallOption) (*user_account.UserAccountMultiResponse, error)) *MockUserAccountServiceClient_GetUserAccountsByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserAccountServiceClient creates a new instance of MockUserAccountServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAccountServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAccountServiceClient {
	mock := &MockUserAccountServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
