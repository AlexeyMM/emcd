// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	context "context"

	accounting "code.emcdtech.com/emcd/service/accounting/protocol/accounting"

	decimal "github.com/shopspring/decimal"

	enum "code.emcdtech.com/emcd/service/accounting/model/enum"

	mock "github.com/stretchr/testify/mock"

	model "code.emcdtech.com/emcd/service/accounting/model"

	time "time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MockBalance is an autogenerated mock type for the Balance type
type MockBalance struct {
	mock.Mock
}

// Change provides a mock function with given fields: ctx, transactions
func (_m *MockBalance) Change(ctx context.Context, transactions []*accounting.Transaction) error {
	ret := _m.Called(ctx, transactions)

	if len(ret) == 0 {
		panic("no return value specified for Change")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.Transaction) error); ok {
		r0 = rf(ctx, transactions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeMultiple provides a mock function with given fields: ctx, trs
func (_m *MockBalance) ChangeMultiple(ctx context.Context, trs []*accounting.Transaction) error {
	ret := _m.Called(ctx, trs)

	if len(ret) == 0 {
		panic("no return value specified for ChangeMultiple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.Transaction) error); ok {
		r0 = rf(ctx, trs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBalancesDiffMining provides a mock function with given fields: ctx, data
func (_m *MockBalance) FindBalancesDiffMining(ctx context.Context, data []*accounting.UserBeforePayoutMining) ([]*accounting.UserMiningDiff, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for FindBalancesDiffMining")
	}

	var r0 []*accounting.UserMiningDiff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserBeforePayoutMining) ([]*accounting.UserMiningDiff, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserBeforePayoutMining) []*accounting.UserMiningDiff); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.UserMiningDiff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*accounting.UserBeforePayoutMining) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBalancesDiffWallet provides a mock function with given fields: ctx, data
func (_m *MockBalance) FindBalancesDiffWallet(ctx context.Context, data []*accounting.UserBeforePayoutWallet) ([]*accounting.UserWalletDiff, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for FindBalancesDiffWallet")
	}

	var r0 []*accounting.UserWalletDiff
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserBeforePayoutWallet) ([]*accounting.UserWalletDiff, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserBeforePayoutWallet) []*accounting.UserWalletDiff); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.UserWalletDiff)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*accounting.UserBeforePayoutWallet) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBatchOperations provides a mock function with given fields: ctx, usersWithCoins
func (_m *MockBalance) FindBatchOperations(ctx context.Context, usersWithCoins []*accounting.UserIDCoinID) ([]*accounting.BatchOperationSelection, error) {
	ret := _m.Called(ctx, usersWithCoins)

	if len(ret) == 0 {
		panic("no return value specified for FindBatchOperations")
	}

	var r0 []*accounting.BatchOperationSelection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserIDCoinID) ([]*accounting.BatchOperationSelection, error)); ok {
		return rf(ctx, usersWithCoins)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*accounting.UserIDCoinID) []*accounting.BatchOperationSelection); ok {
		r0 = rf(ctx, usersWithCoins)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.BatchOperationSelection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*accounting.UserIDCoinID) error); ok {
		r1 = rf(ctx, usersWithCoins)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastBlockTimeBalances provides a mock function with given fields: ctx, userAccountIDs
func (_m *MockBalance) FindLastBlockTimeBalances(ctx context.Context, userAccountIDs []int64) ([]*accounting.UserBlockTimeBalance, error) {
	ret := _m.Called(ctx, userAccountIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindLastBlockTimeBalances")
	}

	var r0 []*accounting.UserBlockTimeBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]*accounting.UserBlockTimeBalance, error)); ok {
		return rf(ctx, userAccountIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*accounting.UserBlockTimeBalance); ok {
		r0 = rf(ctx, userAccountIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.UserBlockTimeBalance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, userAccountIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOperations provides a mock function with given fields: ctx, userID, coinID
func (_m *MockBalance) FindOperations(ctx context.Context, userID int64, coinID string) ([]*accounting.OperationSelectionWithBlock, error) {
	ret := _m.Called(ctx, userID, coinID)

	if len(ret) == 0 {
		panic("no return value specified for FindOperations")
	}

	var r0 []*accounting.OperationSelectionWithBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) ([]*accounting.OperationSelectionWithBlock, error)); ok {
		return rf(ctx, userID, coinID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []*accounting.OperationSelectionWithBlock); ok {
		r0 = rf(ctx, userID, coinID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.OperationSelectionWithBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, userID, coinID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOperationsAndTransactions provides a mock function with given fields: ctx, request
func (_m *MockBalance) FindOperationsAndTransactions(ctx context.Context, request *model.OperationWithTransactionQuery) ([]*model.OperationWithTransaction, int64, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FindOperationsAndTransactions")
	}

	var r0 []*model.OperationWithTransaction
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OperationWithTransactionQuery) ([]*model.OperationWithTransaction, int64, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OperationWithTransactionQuery) []*model.OperationWithTransaction); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OperationWithTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OperationWithTransactionQuery) int64); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.OperationWithTransactionQuery) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindTransactions provides a mock function with given fields: ctx, types, userID, accountTypeID, coinIDs, from
func (_m *MockBalance) FindTransactions(ctx context.Context, types []int64, userID int64, accountTypeID int64, coinIDs []string, from *timestamppb.Timestamp) ([]*accounting.Transaction, error) {
	ret := _m.Called(ctx, types, userID, accountTypeID, coinIDs, from)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactions")
	}

	var r0 []*accounting.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, int64, int64, []string, *timestamppb.Timestamp) ([]*accounting.Transaction, error)); ok {
		return rf(ctx, types, userID, accountTypeID, coinIDs, from)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64, int64, int64, []string, *timestamppb.Timestamp) []*accounting.Transaction); ok {
		r0 = rf(ctx, types, userID, accountTypeID, coinIDs, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64, int64, int64, []string, *timestamppb.Timestamp) error); ok {
		r1 = rf(ctx, types, userID, accountTypeID, coinIDs, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransactionsWithBlocks provides a mock function with given fields: ctx, blockedTill
func (_m *MockBalance) FindTransactionsWithBlocks(ctx context.Context, blockedTill *timestamppb.Timestamp) ([]*accounting.TransactionSelectionWithBlock, error) {
	ret := _m.Called(ctx, blockedTill)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionsWithBlocks")
	}

	var r0 []*accounting.TransactionSelectionWithBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestamppb.Timestamp) ([]*accounting.TransactionSelectionWithBlock, error)); ok {
		return rf(ctx, blockedTill)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestamppb.Timestamp) []*accounting.TransactionSelectionWithBlock); ok {
		r0 = rf(ctx, blockedTill)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.TransactionSelectionWithBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestamppb.Timestamp) error); ok {
		r1 = rf(ctx, blockedTill)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceBeforeTransaction provides a mock function with given fields: ctx, accountID, transactionID
func (_m *MockBalance) GetBalanceBeforeTransaction(ctx context.Context, accountID int64, transactionID int64) (decimal.Decimal, error) {
	ret := _m.Called(ctx, accountID, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceBeforeTransaction")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (decimal.Decimal, error)); ok {
		return rf(ctx, accountID, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) decimal.Decimal); ok {
		r0 = rf(ctx, accountID, transactionID)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, accountID, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceByCoin provides a mock function with given fields: ctx, userID, coin
func (_m *MockBalance) GetBalanceByCoin(ctx context.Context, userID int32, coin string) (*model.Balance, error) {
	ret := _m.Called(ctx, userID, coin)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceByCoin")
	}

	var r0 *model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) (*model.Balance, error)); ok {
		return rf(ctx, userID, coin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) *model.Balance); ok {
		r0 = rf(ctx, userID, coin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) error); ok {
		r1 = rf(ctx, userID, coin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalances provides a mock function with given fields: ctx, userID
func (_m *MockBalance) GetBalances(ctx context.Context, userID int32) ([]*model.Balance, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalances")
	}

	var r0 []*model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*model.Balance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*model.Balance); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoinsSummary provides a mock function with given fields: ctx, userID
func (_m *MockBalance) GetCoinsSummary(ctx context.Context, userID int32) ([]*model.CoinSummary, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsSummary")
	}

	var r0 []*model.CoinSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*model.CoinSummary, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*model.CoinSummary); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CoinSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaid provides a mock function with given fields: ctx, userID, coin, from, to
func (_m *MockBalance) GetPaid(ctx context.Context, userID int32, coin string, from time.Time, to time.Time) (decimal.Decimal, error) {
	ret := _m.Called(ctx, userID, coin, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetPaid")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time, time.Time) (decimal.Decimal, error)); ok {
		return rf(ctx, userID, coin, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time, time.Time) decimal.Decimal); ok {
		r0 = rf(ctx, userID, coin, from, to)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, coin, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: ctx, id
func (_m *MockBalance) GetTransactionByID(ctx context.Context, id int64) (*accounting.TransactionSelectionWithBlock, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *accounting.TransactionSelectionWithBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*accounting.TransactionSelectionWithBlock, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *accounting.TransactionSelectionWithBlock); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.TransactionSelectionWithBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionIDByAction provides a mock function with given fields: ctx, actionID, txType, amount
func (_m *MockBalance) GetTransactionIDByAction(ctx context.Context, actionID string, txType int, amount string) (int64, error) {
	ret := _m.Called(ctx, actionID, txType, amount)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionIDByAction")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) (int64, error)); ok {
		return rf(ctx, actionID, txType, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) int64); ok {
		r0 = rf(ctx, actionID, txType, amount)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) error); ok {
		r1 = rf(ctx, actionID, txType, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByActionID provides a mock function with given fields: ctx, actionID
func (_m *MockBalance) GetTransactionsByActionID(ctx context.Context, actionID string) ([]*accounting.Transaction, error) {
	ret := _m.Called(ctx, actionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByActionID")
	}

	var r0 []*accounting.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*accounting.Transaction, error)); ok {
		return rf(ctx, actionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*accounting.Transaction); ok {
		r0 = rf(ctx, actionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounting.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, actionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// View provides a mock function with given fields: ctx, userID, accountTypeID, coinID, totalBalance
func (_m *MockBalance) View(ctx context.Context, userID int64, accountTypeID enum.AccountTypeId, coinID string, totalBalance bool) (decimal.Decimal, error) {
	ret := _m.Called(ctx, userID, accountTypeID, coinID, totalBalance)

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, enum.AccountTypeId, string, bool) (decimal.Decimal, error)); ok {
		return rf(ctx, userID, accountTypeID, coinID, totalBalance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, enum.AccountTypeId, string, bool) decimal.Decimal); ok {
		r0 = rf(ctx, userID, accountTypeID, coinID, totalBalance)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, enum.AccountTypeId, string, bool) error); ok {
		r1 = rf(ctx, userID, accountTypeID, coinID, totalBalance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBalance creates a new instance of MockBalance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBalance(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBalance {
	mock := &MockBalance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
