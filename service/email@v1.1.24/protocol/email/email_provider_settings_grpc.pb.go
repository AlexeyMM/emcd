// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protocol/proto/email_provider_settings.proto

package email

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailProviderSettingsService_CreateEmailProviderSetting_FullMethodName = "/email.EmailProviderSettingsService/CreateEmailProviderSetting"
	EmailProviderSettingsService_GetEmailProviderSetting_FullMethodName    = "/email.EmailProviderSettingsService/GetEmailProviderSetting"
	EmailProviderSettingsService_UpdateEmailProviderSetting_FullMethodName = "/email.EmailProviderSettingsService/UpdateEmailProviderSetting"
	EmailProviderSettingsService_DeleteEmailProviderSetting_FullMethodName = "/email.EmailProviderSettingsService/DeleteEmailProviderSetting"
	EmailProviderSettingsService_ListEmailProviderSettings_FullMethodName  = "/email.EmailProviderSettingsService/ListEmailProviderSettings"
)

// EmailProviderSettingsServiceClient is the client API for EmailProviderSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EmailProviderSettingsService сервис отвечает за настройку поддерживаемых email провайдеров по отправке писем
// по white label
type EmailProviderSettingsServiceClient interface {
	CreateEmailProviderSetting(ctx context.Context, in *CreateEmailProviderSettingRequest, opts ...grpc.CallOption) (*CreateEmailProviderSettingResponse, error)
	GetEmailProviderSetting(ctx context.Context, in *GetEmailProviderSettingRequest, opts ...grpc.CallOption) (*GetEmailProviderSettingResponse, error)
	UpdateEmailProviderSetting(ctx context.Context, in *UpdateEmailProviderSettingRequest, opts ...grpc.CallOption) (*UpdateEmailProviderSettingResponse, error)
	DeleteEmailProviderSetting(ctx context.Context, in *DeleteEmailProviderSettingRequest, opts ...grpc.CallOption) (*DeleteEmailProviderSettingResponse, error)
	ListEmailProviderSettings(ctx context.Context, in *ListEmailProviderSettingsRequest, opts ...grpc.CallOption) (*ListEmailProviderSettingsResponse, error)
}

type emailProviderSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailProviderSettingsServiceClient(cc grpc.ClientConnInterface) EmailProviderSettingsServiceClient {
	return &emailProviderSettingsServiceClient{cc}
}

func (c *emailProviderSettingsServiceClient) CreateEmailProviderSetting(ctx context.Context, in *CreateEmailProviderSettingRequest, opts ...grpc.CallOption) (*CreateEmailProviderSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEmailProviderSettingResponse)
	err := c.cc.Invoke(ctx, EmailProviderSettingsService_CreateEmailProviderSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailProviderSettingsServiceClient) GetEmailProviderSetting(ctx context.Context, in *GetEmailProviderSettingRequest, opts ...grpc.CallOption) (*GetEmailProviderSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailProviderSettingResponse)
	err := c.cc.Invoke(ctx, EmailProviderSettingsService_GetEmailProviderSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailProviderSettingsServiceClient) UpdateEmailProviderSetting(ctx context.Context, in *UpdateEmailProviderSettingRequest, opts ...grpc.CallOption) (*UpdateEmailProviderSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailProviderSettingResponse)
	err := c.cc.Invoke(ctx, EmailProviderSettingsService_UpdateEmailProviderSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailProviderSettingsServiceClient) DeleteEmailProviderSetting(ctx context.Context, in *DeleteEmailProviderSettingRequest, opts ...grpc.CallOption) (*DeleteEmailProviderSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEmailProviderSettingResponse)
	err := c.cc.Invoke(ctx, EmailProviderSettingsService_DeleteEmailProviderSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailProviderSettingsServiceClient) ListEmailProviderSettings(ctx context.Context, in *ListEmailProviderSettingsRequest, opts ...grpc.CallOption) (*ListEmailProviderSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailProviderSettingsResponse)
	err := c.cc.Invoke(ctx, EmailProviderSettingsService_ListEmailProviderSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailProviderSettingsServiceServer is the server API for EmailProviderSettingsService service.
// All implementations must embed UnimplementedEmailProviderSettingsServiceServer
// for forward compatibility.
//
// EmailProviderSettingsService сервис отвечает за настройку поддерживаемых email провайдеров по отправке писем
// по white label
type EmailProviderSettingsServiceServer interface {
	CreateEmailProviderSetting(context.Context, *CreateEmailProviderSettingRequest) (*CreateEmailProviderSettingResponse, error)
	GetEmailProviderSetting(context.Context, *GetEmailProviderSettingRequest) (*GetEmailProviderSettingResponse, error)
	UpdateEmailProviderSetting(context.Context, *UpdateEmailProviderSettingRequest) (*UpdateEmailProviderSettingResponse, error)
	DeleteEmailProviderSetting(context.Context, *DeleteEmailProviderSettingRequest) (*DeleteEmailProviderSettingResponse, error)
	ListEmailProviderSettings(context.Context, *ListEmailProviderSettingsRequest) (*ListEmailProviderSettingsResponse, error)
	mustEmbedUnimplementedEmailProviderSettingsServiceServer()
}

// UnimplementedEmailProviderSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailProviderSettingsServiceServer struct{}

func (UnimplementedEmailProviderSettingsServiceServer) CreateEmailProviderSetting(context.Context, *CreateEmailProviderSettingRequest) (*CreateEmailProviderSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailProviderSetting not implemented")
}
func (UnimplementedEmailProviderSettingsServiceServer) GetEmailProviderSetting(context.Context, *GetEmailProviderSettingRequest) (*GetEmailProviderSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailProviderSetting not implemented")
}
func (UnimplementedEmailProviderSettingsServiceServer) UpdateEmailProviderSetting(context.Context, *UpdateEmailProviderSettingRequest) (*UpdateEmailProviderSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailProviderSetting not implemented")
}
func (UnimplementedEmailProviderSettingsServiceServer) DeleteEmailProviderSetting(context.Context, *DeleteEmailProviderSettingRequest) (*DeleteEmailProviderSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailProviderSetting not implemented")
}
func (UnimplementedEmailProviderSettingsServiceServer) ListEmailProviderSettings(context.Context, *ListEmailProviderSettingsRequest) (*ListEmailProviderSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailProviderSettings not implemented")
}
func (UnimplementedEmailProviderSettingsServiceServer) mustEmbedUnimplementedEmailProviderSettingsServiceServer() {
}
func (UnimplementedEmailProviderSettingsServiceServer) testEmbeddedByValue() {}

// UnsafeEmailProviderSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailProviderSettingsServiceServer will
// result in compilation errors.
type UnsafeEmailProviderSettingsServiceServer interface {
	mustEmbedUnimplementedEmailProviderSettingsServiceServer()
}

func RegisterEmailProviderSettingsServiceServer(s grpc.ServiceRegistrar, srv EmailProviderSettingsServiceServer) {
	// If the following call panics, it indicates UnimplementedEmailProviderSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailProviderSettingsService_ServiceDesc, srv)
}

func _EmailProviderSettingsService_CreateEmailProviderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailProviderSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailProviderSettingsServiceServer).CreateEmailProviderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailProviderSettingsService_CreateEmailProviderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailProviderSettingsServiceServer).CreateEmailProviderSetting(ctx, req.(*CreateEmailProviderSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailProviderSettingsService_GetEmailProviderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailProviderSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailProviderSettingsServiceServer).GetEmailProviderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailProviderSettingsService_GetEmailProviderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailProviderSettingsServiceServer).GetEmailProviderSetting(ctx, req.(*GetEmailProviderSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailProviderSettingsService_UpdateEmailProviderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailProviderSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailProviderSettingsServiceServer).UpdateEmailProviderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailProviderSettingsService_UpdateEmailProviderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailProviderSettingsServiceServer).UpdateEmailProviderSetting(ctx, req.(*UpdateEmailProviderSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailProviderSettingsService_DeleteEmailProviderSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailProviderSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailProviderSettingsServiceServer).DeleteEmailProviderSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailProviderSettingsService_DeleteEmailProviderSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailProviderSettingsServiceServer).DeleteEmailProviderSetting(ctx, req.(*DeleteEmailProviderSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailProviderSettingsService_ListEmailProviderSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailProviderSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailProviderSettingsServiceServer).ListEmailProviderSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailProviderSettingsService_ListEmailProviderSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailProviderSettingsServiceServer).ListEmailProviderSettings(ctx, req.(*ListEmailProviderSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailProviderSettingsService_ServiceDesc is the grpc.ServiceDesc for EmailProviderSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailProviderSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email.EmailProviderSettingsService",
	HandlerType: (*EmailProviderSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmailProviderSetting",
			Handler:    _EmailProviderSettingsService_CreateEmailProviderSetting_Handler,
		},
		{
			MethodName: "GetEmailProviderSetting",
			Handler:    _EmailProviderSettingsService_GetEmailProviderSetting_Handler,
		},
		{
			MethodName: "UpdateEmailProviderSetting",
			Handler:    _EmailProviderSettingsService_UpdateEmailProviderSetting_Handler,
		},
		{
			MethodName: "DeleteEmailProviderSetting",
			Handler:    _EmailProviderSettingsService_DeleteEmailProviderSetting_Handler,
		},
		{
			MethodName: "ListEmailProviderSettings",
			Handler:    _EmailProviderSettingsService_ListEmailProviderSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/proto/email_provider_settings.proto",
}
