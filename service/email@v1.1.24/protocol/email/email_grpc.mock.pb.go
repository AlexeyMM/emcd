// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/email/email_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source protocol/email/email_grpc.pb.go -destination protocol/email/email_grpc.mock.pb.go -package email
//

// Package email is a generated GoMock package.
package email

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEmailServiceClient is a mock of EmailServiceClient interface.
type MockEmailServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceClientMockRecorder
	isgomock struct{}
}

// MockEmailServiceClientMockRecorder is the mock recorder for MockEmailServiceClient.
type MockEmailServiceClientMockRecorder struct {
	mock *MockEmailServiceClient
}

// NewMockEmailServiceClient creates a new mock instance.
func NewMockEmailServiceClient(ctrl *gomock.Controller) *MockEmailServiceClient {
	mock := &MockEmailServiceClient{ctrl: ctrl}
	mock.recorder = &MockEmailServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceClient) EXPECT() *MockEmailServiceClientMockRecorder {
	return m.recorder
}

// ListMessages mocks base method.
func (m *MockEmailServiceClient) ListMessages(ctx context.Context, in *GetSentEmailMessagesByEmailRequest, opts ...grpc.CallOption) (*GetSentEmailMessagesByEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMessages", varargs...)
	ret0, _ := ret[0].(*GetSentEmailMessagesByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockEmailServiceClientMockRecorder) ListMessages(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockEmailServiceClient)(nil).ListMessages), varargs...)
}

// SendChangeEmail mocks base method.
func (m *MockEmailServiceClient) SendChangeEmail(ctx context.Context, in *SendChangeEmailRequest, opts ...grpc.CallOption) (*SendChangeEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendChangeEmail", varargs...)
	ret0, _ := ret[0].(*SendChangeEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChangeEmail indicates an expected call of SendChangeEmail.
func (mr *MockEmailServiceClientMockRecorder) SendChangeEmail(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChangeEmail", reflect.TypeOf((*MockEmailServiceClient)(nil).SendChangeEmail), varargs...)
}

// SendGoogleTwoFaOff mocks base method.
func (m *MockEmailServiceClient) SendGoogleTwoFaOff(ctx context.Context, in *SendGoogleTwoFaOffRequest, opts ...grpc.CallOption) (*SendGoogleTwoFaOffResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendGoogleTwoFaOff", varargs...)
	ret0, _ := ret[0].(*SendGoogleTwoFaOffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendGoogleTwoFaOff indicates an expected call of SendGoogleTwoFaOff.
func (mr *MockEmailServiceClientMockRecorder) SendGoogleTwoFaOff(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGoogleTwoFaOff", reflect.TypeOf((*MockEmailServiceClient)(nil).SendGoogleTwoFaOff), varargs...)
}

// SendGoogleTwoFaOn mocks base method.
func (m *MockEmailServiceClient) SendGoogleTwoFaOn(ctx context.Context, in *SendGoogleTwoFaOnRequest, opts ...grpc.CallOption) (*SendGoogleTwoFaOnResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendGoogleTwoFaOn", varargs...)
	ret0, _ := ret[0].(*SendGoogleTwoFaOnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendGoogleTwoFaOn indicates an expected call of SendGoogleTwoFaOn.
func (mr *MockEmailServiceClientMockRecorder) SendGoogleTwoFaOn(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGoogleTwoFaOn", reflect.TypeOf((*MockEmailServiceClient)(nil).SendGoogleTwoFaOn), varargs...)
}

// SendInitialSwapMessage mocks base method.
func (m *MockEmailServiceClient) SendInitialSwapMessage(ctx context.Context, in *SendInitialSwapMessageRequest, opts ...grpc.CallOption) (*SendInitialSwapMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendInitialSwapMessage", varargs...)
	ret0, _ := ret[0].(*SendInitialSwapMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInitialSwapMessage indicates an expected call of SendInitialSwapMessage.
func (mr *MockEmailServiceClientMockRecorder) SendInitialSwapMessage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInitialSwapMessage", reflect.TypeOf((*MockEmailServiceClient)(nil).SendInitialSwapMessage), varargs...)
}

// SendMobileTwoFaOff mocks base method.
func (m *MockEmailServiceClient) SendMobileTwoFaOff(ctx context.Context, in *SendMobileTwoFaOffRequest, opts ...grpc.CallOption) (*SendMobileTwoFaOffResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMobileTwoFaOff", varargs...)
	ret0, _ := ret[0].(*SendMobileTwoFaOffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMobileTwoFaOff indicates an expected call of SendMobileTwoFaOff.
func (mr *MockEmailServiceClientMockRecorder) SendMobileTwoFaOff(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMobileTwoFaOff", reflect.TypeOf((*MockEmailServiceClient)(nil).SendMobileTwoFaOff), varargs...)
}

// SendMobileTwoFaOn mocks base method.
func (m *MockEmailServiceClient) SendMobileTwoFaOn(ctx context.Context, in *SendMobileTwoFaOnRequest, opts ...grpc.CallOption) (*SendMobileTwoFaOnResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMobileTwoFaOn", varargs...)
	ret0, _ := ret[0].(*SendMobileTwoFaOnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMobileTwoFaOn indicates an expected call of SendMobileTwoFaOn.
func (mr *MockEmailServiceClientMockRecorder) SendMobileTwoFaOn(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMobileTwoFaOn", reflect.TypeOf((*MockEmailServiceClient)(nil).SendMobileTwoFaOn), varargs...)
}

// SendPasswordChange mocks base method.
func (m *MockEmailServiceClient) SendPasswordChange(ctx context.Context, in *SendPasswordChangeRequest, opts ...grpc.CallOption) (*SendPasswordChangeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendPasswordChange", varargs...)
	ret0, _ := ret[0].(*SendPasswordChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPasswordChange indicates an expected call of SendPasswordChange.
func (mr *MockEmailServiceClientMockRecorder) SendPasswordChange(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordChange", reflect.TypeOf((*MockEmailServiceClient)(nil).SendPasswordChange), varargs...)
}

// SendPasswordRestoration mocks base method.
func (m *MockEmailServiceClient) SendPasswordRestoration(ctx context.Context, in *SendPasswordRestorationRequest, opts ...grpc.CallOption) (*SendPasswordRestorationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendPasswordRestoration", varargs...)
	ret0, _ := ret[0].(*SendPasswordRestorationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPasswordRestoration indicates an expected call of SendPasswordRestoration.
func (mr *MockEmailServiceClientMockRecorder) SendPasswordRestoration(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordRestoration", reflect.TypeOf((*MockEmailServiceClient)(nil).SendPasswordRestoration), varargs...)
}

// SendPhoneDelete mocks base method.
func (m *MockEmailServiceClient) SendPhoneDelete(ctx context.Context, in *SendPhoneDeleteRequest, opts ...grpc.CallOption) (*SendPhoneDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendPhoneDelete", varargs...)
	ret0, _ := ret[0].(*SendPhoneDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPhoneDelete indicates an expected call of SendPhoneDelete.
func (mr *MockEmailServiceClientMockRecorder) SendPhoneDelete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPhoneDelete", reflect.TypeOf((*MockEmailServiceClient)(nil).SendPhoneDelete), varargs...)
}

// SendReferralRewardPayouts mocks base method.
func (m *MockEmailServiceClient) SendReferralRewardPayouts(ctx context.Context, in *SendReferralRewardPayoutsRequest, opts ...grpc.CallOption) (*SendReferralRewardPayoutsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendReferralRewardPayouts", varargs...)
	ret0, _ := ret[0].(*SendReferralRewardPayoutsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendReferralRewardPayouts indicates an expected call of SendReferralRewardPayouts.
func (mr *MockEmailServiceClientMockRecorder) SendReferralRewardPayouts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReferralRewardPayouts", reflect.TypeOf((*MockEmailServiceClient)(nil).SendReferralRewardPayouts), varargs...)
}

// SendRegister mocks base method.
func (m *MockEmailServiceClient) SendRegister(ctx context.Context, in *SendRegisterRequest, opts ...grpc.CallOption) (*SendRegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendRegister", varargs...)
	ret0, _ := ret[0].(*SendRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegister indicates an expected call of SendRegister.
func (mr *MockEmailServiceClientMockRecorder) SendRegister(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegister", reflect.TypeOf((*MockEmailServiceClient)(nil).SendRegister), varargs...)
}

// SendStatisticsReport mocks base method.
func (m *MockEmailServiceClient) SendStatisticsReport(ctx context.Context, in *SendStatisticsReportRequest, opts ...grpc.CallOption) (*SendStatisticsReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendStatisticsReport", varargs...)
	ret0, _ := ret[0].(*SendStatisticsReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendStatisticsReport indicates an expected call of SendStatisticsReport.
func (mr *MockEmailServiceClientMockRecorder) SendStatisticsReport(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStatisticsReport", reflect.TypeOf((*MockEmailServiceClient)(nil).SendStatisticsReport), varargs...)
}

// SendSuccessfulSwapMessage mocks base method.
func (m *MockEmailServiceClient) SendSuccessfulSwapMessage(ctx context.Context, in *SendSuccessfulSwapMessageRequest, opts ...grpc.CallOption) (*SendSuccessfulSwapMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendSuccessfulSwapMessage", varargs...)
	ret0, _ := ret[0].(*SendSuccessfulSwapMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSuccessfulSwapMessage indicates an expected call of SendSuccessfulSwapMessage.
func (mr *MockEmailServiceClientMockRecorder) SendSuccessfulSwapMessage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSuccessfulSwapMessage", reflect.TypeOf((*MockEmailServiceClient)(nil).SendSuccessfulSwapMessage), varargs...)
}

// SendSwapSupportMessage mocks base method.
func (m *MockEmailServiceClient) SendSwapSupportMessage(ctx context.Context, in *SendSwapSupportMessageRequest, opts ...grpc.CallOption) (*SendSwapSupportMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendSwapSupportMessage", varargs...)
	ret0, _ := ret[0].(*SendSwapSupportMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSwapSupportMessage indicates an expected call of SendSwapSupportMessage.
func (mr *MockEmailServiceClientMockRecorder) SendSwapSupportMessage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSwapSupportMessage", reflect.TypeOf((*MockEmailServiceClient)(nil).SendSwapSupportMessage), varargs...)
}

// SendUserHashrateDecreased mocks base method.
func (m *MockEmailServiceClient) SendUserHashrateDecreased(ctx context.Context, in *SendUserHashrateDecreasedRequest, opts ...grpc.CallOption) (*SendUserHashrateDecreasedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendUserHashrateDecreased", varargs...)
	ret0, _ := ret[0].(*SendUserHashrateDecreasedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUserHashrateDecreased indicates an expected call of SendUserHashrateDecreased.
func (mr *MockEmailServiceClientMockRecorder) SendUserHashrateDecreased(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserHashrateDecreased", reflect.TypeOf((*MockEmailServiceClient)(nil).SendUserHashrateDecreased), varargs...)
}

// SendWalletChangedAddress mocks base method.
func (m *MockEmailServiceClient) SendWalletChangedAddress(ctx context.Context, in *SendWalletChangedAddressRequest, opts ...grpc.CallOption) (*SendWalletChangedAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendWalletChangedAddress", varargs...)
	ret0, _ := ret[0].(*SendWalletChangedAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWalletChangedAddress indicates an expected call of SendWalletChangedAddress.
func (mr *MockEmailServiceClientMockRecorder) SendWalletChangedAddress(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWalletChangedAddress", reflect.TypeOf((*MockEmailServiceClient)(nil).SendWalletChangedAddress), varargs...)
}

// SendWorkerChangedState mocks base method.
func (m *MockEmailServiceClient) SendWorkerChangedState(ctx context.Context, in *SendWorkerChangedStateRequest, opts ...grpc.CallOption) (*SendWorkerChangedStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendWorkerChangedState", varargs...)
	ret0, _ := ret[0].(*SendWorkerChangedStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWorkerChangedState indicates an expected call of SendWorkerChangedState.
func (mr *MockEmailServiceClientMockRecorder) SendWorkerChangedState(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkerChangedState", reflect.TypeOf((*MockEmailServiceClient)(nil).SendWorkerChangedState), varargs...)
}

// MockEmailServiceServer is a mock of EmailServiceServer interface.
type MockEmailServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceServerMockRecorder
	isgomock struct{}
}

// MockEmailServiceServerMockRecorder is the mock recorder for MockEmailServiceServer.
type MockEmailServiceServerMockRecorder struct {
	mock *MockEmailServiceServer
}

// NewMockEmailServiceServer creates a new mock instance.
func NewMockEmailServiceServer(ctrl *gomock.Controller) *MockEmailServiceServer {
	mock := &MockEmailServiceServer{ctrl: ctrl}
	mock.recorder = &MockEmailServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceServer) EXPECT() *MockEmailServiceServerMockRecorder {
	return m.recorder
}

// ListMessages mocks base method.
func (m *MockEmailServiceServer) ListMessages(arg0 context.Context, arg1 *GetSentEmailMessagesByEmailRequest) (*GetSentEmailMessagesByEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", arg0, arg1)
	ret0, _ := ret[0].(*GetSentEmailMessagesByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockEmailServiceServerMockRecorder) ListMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockEmailServiceServer)(nil).ListMessages), arg0, arg1)
}

// SendChangeEmail mocks base method.
func (m *MockEmailServiceServer) SendChangeEmail(arg0 context.Context, arg1 *SendChangeEmailRequest) (*SendChangeEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChangeEmail", arg0, arg1)
	ret0, _ := ret[0].(*SendChangeEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChangeEmail indicates an expected call of SendChangeEmail.
func (mr *MockEmailServiceServerMockRecorder) SendChangeEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChangeEmail", reflect.TypeOf((*MockEmailServiceServer)(nil).SendChangeEmail), arg0, arg1)
}

// SendGoogleTwoFaOff mocks base method.
func (m *MockEmailServiceServer) SendGoogleTwoFaOff(arg0 context.Context, arg1 *SendGoogleTwoFaOffRequest) (*SendGoogleTwoFaOffResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGoogleTwoFaOff", arg0, arg1)
	ret0, _ := ret[0].(*SendGoogleTwoFaOffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendGoogleTwoFaOff indicates an expected call of SendGoogleTwoFaOff.
func (mr *MockEmailServiceServerMockRecorder) SendGoogleTwoFaOff(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGoogleTwoFaOff", reflect.TypeOf((*MockEmailServiceServer)(nil).SendGoogleTwoFaOff), arg0, arg1)
}

// SendGoogleTwoFaOn mocks base method.
func (m *MockEmailServiceServer) SendGoogleTwoFaOn(arg0 context.Context, arg1 *SendGoogleTwoFaOnRequest) (*SendGoogleTwoFaOnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGoogleTwoFaOn", arg0, arg1)
	ret0, _ := ret[0].(*SendGoogleTwoFaOnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendGoogleTwoFaOn indicates an expected call of SendGoogleTwoFaOn.
func (mr *MockEmailServiceServerMockRecorder) SendGoogleTwoFaOn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGoogleTwoFaOn", reflect.TypeOf((*MockEmailServiceServer)(nil).SendGoogleTwoFaOn), arg0, arg1)
}

// SendInitialSwapMessage mocks base method.
func (m *MockEmailServiceServer) SendInitialSwapMessage(arg0 context.Context, arg1 *SendInitialSwapMessageRequest) (*SendInitialSwapMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInitialSwapMessage", arg0, arg1)
	ret0, _ := ret[0].(*SendInitialSwapMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInitialSwapMessage indicates an expected call of SendInitialSwapMessage.
func (mr *MockEmailServiceServerMockRecorder) SendInitialSwapMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInitialSwapMessage", reflect.TypeOf((*MockEmailServiceServer)(nil).SendInitialSwapMessage), arg0, arg1)
}

// SendMobileTwoFaOff mocks base method.
func (m *MockEmailServiceServer) SendMobileTwoFaOff(arg0 context.Context, arg1 *SendMobileTwoFaOffRequest) (*SendMobileTwoFaOffResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMobileTwoFaOff", arg0, arg1)
	ret0, _ := ret[0].(*SendMobileTwoFaOffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMobileTwoFaOff indicates an expected call of SendMobileTwoFaOff.
func (mr *MockEmailServiceServerMockRecorder) SendMobileTwoFaOff(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMobileTwoFaOff", reflect.TypeOf((*MockEmailServiceServer)(nil).SendMobileTwoFaOff), arg0, arg1)
}

// SendMobileTwoFaOn mocks base method.
func (m *MockEmailServiceServer) SendMobileTwoFaOn(arg0 context.Context, arg1 *SendMobileTwoFaOnRequest) (*SendMobileTwoFaOnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMobileTwoFaOn", arg0, arg1)
	ret0, _ := ret[0].(*SendMobileTwoFaOnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMobileTwoFaOn indicates an expected call of SendMobileTwoFaOn.
func (mr *MockEmailServiceServerMockRecorder) SendMobileTwoFaOn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMobileTwoFaOn", reflect.TypeOf((*MockEmailServiceServer)(nil).SendMobileTwoFaOn), arg0, arg1)
}

// SendPasswordChange mocks base method.
func (m *MockEmailServiceServer) SendPasswordChange(arg0 context.Context, arg1 *SendPasswordChangeRequest) (*SendPasswordChangeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordChange", arg0, arg1)
	ret0, _ := ret[0].(*SendPasswordChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPasswordChange indicates an expected call of SendPasswordChange.
func (mr *MockEmailServiceServerMockRecorder) SendPasswordChange(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordChange", reflect.TypeOf((*MockEmailServiceServer)(nil).SendPasswordChange), arg0, arg1)
}

// SendPasswordRestoration mocks base method.
func (m *MockEmailServiceServer) SendPasswordRestoration(arg0 context.Context, arg1 *SendPasswordRestorationRequest) (*SendPasswordRestorationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordRestoration", arg0, arg1)
	ret0, _ := ret[0].(*SendPasswordRestorationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPasswordRestoration indicates an expected call of SendPasswordRestoration.
func (mr *MockEmailServiceServerMockRecorder) SendPasswordRestoration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordRestoration", reflect.TypeOf((*MockEmailServiceServer)(nil).SendPasswordRestoration), arg0, arg1)
}

// SendPhoneDelete mocks base method.
func (m *MockEmailServiceServer) SendPhoneDelete(arg0 context.Context, arg1 *SendPhoneDeleteRequest) (*SendPhoneDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPhoneDelete", arg0, arg1)
	ret0, _ := ret[0].(*SendPhoneDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPhoneDelete indicates an expected call of SendPhoneDelete.
func (mr *MockEmailServiceServerMockRecorder) SendPhoneDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPhoneDelete", reflect.TypeOf((*MockEmailServiceServer)(nil).SendPhoneDelete), arg0, arg1)
}

// SendReferralRewardPayouts mocks base method.
func (m *MockEmailServiceServer) SendReferralRewardPayouts(arg0 context.Context, arg1 *SendReferralRewardPayoutsRequest) (*SendReferralRewardPayoutsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReferralRewardPayouts", arg0, arg1)
	ret0, _ := ret[0].(*SendReferralRewardPayoutsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendReferralRewardPayouts indicates an expected call of SendReferralRewardPayouts.
func (mr *MockEmailServiceServerMockRecorder) SendReferralRewardPayouts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReferralRewardPayouts", reflect.TypeOf((*MockEmailServiceServer)(nil).SendReferralRewardPayouts), arg0, arg1)
}

// SendRegister mocks base method.
func (m *MockEmailServiceServer) SendRegister(arg0 context.Context, arg1 *SendRegisterRequest) (*SendRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegister", arg0, arg1)
	ret0, _ := ret[0].(*SendRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRegister indicates an expected call of SendRegister.
func (mr *MockEmailServiceServerMockRecorder) SendRegister(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegister", reflect.TypeOf((*MockEmailServiceServer)(nil).SendRegister), arg0, arg1)
}

// SendStatisticsReport mocks base method.
func (m *MockEmailServiceServer) SendStatisticsReport(arg0 context.Context, arg1 *SendStatisticsReportRequest) (*SendStatisticsReportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendStatisticsReport", arg0, arg1)
	ret0, _ := ret[0].(*SendStatisticsReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendStatisticsReport indicates an expected call of SendStatisticsReport.
func (mr *MockEmailServiceServerMockRecorder) SendStatisticsReport(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStatisticsReport", reflect.TypeOf((*MockEmailServiceServer)(nil).SendStatisticsReport), arg0, arg1)
}

// SendSuccessfulSwapMessage mocks base method.
func (m *MockEmailServiceServer) SendSuccessfulSwapMessage(arg0 context.Context, arg1 *SendSuccessfulSwapMessageRequest) (*SendSuccessfulSwapMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSuccessfulSwapMessage", arg0, arg1)
	ret0, _ := ret[0].(*SendSuccessfulSwapMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSuccessfulSwapMessage indicates an expected call of SendSuccessfulSwapMessage.
func (mr *MockEmailServiceServerMockRecorder) SendSuccessfulSwapMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSuccessfulSwapMessage", reflect.TypeOf((*MockEmailServiceServer)(nil).SendSuccessfulSwapMessage), arg0, arg1)
}

// SendSwapSupportMessage mocks base method.
func (m *MockEmailServiceServer) SendSwapSupportMessage(arg0 context.Context, arg1 *SendSwapSupportMessageRequest) (*SendSwapSupportMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSwapSupportMessage", arg0, arg1)
	ret0, _ := ret[0].(*SendSwapSupportMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSwapSupportMessage indicates an expected call of SendSwapSupportMessage.
func (mr *MockEmailServiceServerMockRecorder) SendSwapSupportMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSwapSupportMessage", reflect.TypeOf((*MockEmailServiceServer)(nil).SendSwapSupportMessage), arg0, arg1)
}

// SendUserHashrateDecreased mocks base method.
func (m *MockEmailServiceServer) SendUserHashrateDecreased(arg0 context.Context, arg1 *SendUserHashrateDecreasedRequest) (*SendUserHashrateDecreasedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserHashrateDecreased", arg0, arg1)
	ret0, _ := ret[0].(*SendUserHashrateDecreasedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUserHashrateDecreased indicates an expected call of SendUserHashrateDecreased.
func (mr *MockEmailServiceServerMockRecorder) SendUserHashrateDecreased(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserHashrateDecreased", reflect.TypeOf((*MockEmailServiceServer)(nil).SendUserHashrateDecreased), arg0, arg1)
}

// SendWalletChangedAddress mocks base method.
func (m *MockEmailServiceServer) SendWalletChangedAddress(arg0 context.Context, arg1 *SendWalletChangedAddressRequest) (*SendWalletChangedAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWalletChangedAddress", arg0, arg1)
	ret0, _ := ret[0].(*SendWalletChangedAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWalletChangedAddress indicates an expected call of SendWalletChangedAddress.
func (mr *MockEmailServiceServerMockRecorder) SendWalletChangedAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWalletChangedAddress", reflect.TypeOf((*MockEmailServiceServer)(nil).SendWalletChangedAddress), arg0, arg1)
}

// SendWorkerChangedState mocks base method.
func (m *MockEmailServiceServer) SendWorkerChangedState(arg0 context.Context, arg1 *SendWorkerChangedStateRequest) (*SendWorkerChangedStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWorkerChangedState", arg0, arg1)
	ret0, _ := ret[0].(*SendWorkerChangedStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWorkerChangedState indicates an expected call of SendWorkerChangedState.
func (mr *MockEmailServiceServerMockRecorder) SendWorkerChangedState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkerChangedState", reflect.TypeOf((*MockEmailServiceServer)(nil).SendWorkerChangedState), arg0, arg1)
}

// mustEmbedUnimplementedEmailServiceServer mocks base method.
func (m *MockEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailServiceServer")
}

// mustEmbedUnimplementedEmailServiceServer indicates an expected call of mustEmbedUnimplementedEmailServiceServer.
func (mr *MockEmailServiceServerMockRecorder) mustEmbedUnimplementedEmailServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailServiceServer", reflect.TypeOf((*MockEmailServiceServer)(nil).mustEmbedUnimplementedEmailServiceServer))
}

// MockUnsafeEmailServiceServer is a mock of UnsafeEmailServiceServer interface.
type MockUnsafeEmailServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEmailServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeEmailServiceServerMockRecorder is the mock recorder for MockUnsafeEmailServiceServer.
type MockUnsafeEmailServiceServerMockRecorder struct {
	mock *MockUnsafeEmailServiceServer
}

// NewMockUnsafeEmailServiceServer creates a new mock instance.
func NewMockUnsafeEmailServiceServer(ctrl *gomock.Controller) *MockUnsafeEmailServiceServer {
	mock := &MockUnsafeEmailServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEmailServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEmailServiceServer) EXPECT() *MockUnsafeEmailServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEmailServiceServer mocks base method.
func (m *MockUnsafeEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailServiceServer")
}

// mustEmbedUnimplementedEmailServiceServer indicates an expected call of mustEmbedUnimplementedEmailServiceServer.
func (mr *MockUnsafeEmailServiceServerMockRecorder) mustEmbedUnimplementedEmailServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailServiceServer", reflect.TypeOf((*MockUnsafeEmailServiceServer)(nil).mustEmbedUnimplementedEmailServiceServer))
}
