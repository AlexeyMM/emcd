// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protocol/proto/email_template.proto

package email

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailTemplateService_CreateEmailTemplate_FullMethodName = "/email.EmailTemplateService/CreateEmailTemplate"
	EmailTemplateService_GetEmailTemplate_FullMethodName    = "/email.EmailTemplateService/GetEmailTemplate"
	EmailTemplateService_UpdateEmailTemplate_FullMethodName = "/email.EmailTemplateService/UpdateEmailTemplate"
	EmailTemplateService_DeleteEmailTemplate_FullMethodName = "/email.EmailTemplateService/DeleteEmailTemplate"
	EmailTemplateService_ListEmailTemplate_FullMethodName   = "/email.EmailTemplateService/ListEmailTemplate"
)

// EmailTemplateServiceClient is the client API for EmailTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EmailTemplateService сервис по работе с шаблонами писем
type EmailTemplateServiceClient interface {
	CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...grpc.CallOption) (*CreateEmailTemplateResponse, error)
	GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*GetEmailTemplateResponse, error)
	UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*UpdateEmailTemplateResponse, error)
	DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*DeleteEmailTemplateResponse, error)
	ListEmailTemplate(ctx context.Context, in *ListEmailTemplateRequest, opts ...grpc.CallOption) (*ListEmailTemplateResponse, error)
}

type emailTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailTemplateServiceClient(cc grpc.ClientConnInterface) EmailTemplateServiceClient {
	return &emailTemplateServiceClient{cc}
}

func (c *emailTemplateServiceClient) CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...grpc.CallOption) (*CreateEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailTemplateService_CreateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailTemplateServiceClient) GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*GetEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailTemplateService_GetEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailTemplateServiceClient) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*UpdateEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailTemplateService_UpdateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailTemplateServiceClient) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*DeleteEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailTemplateService_DeleteEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailTemplateServiceClient) ListEmailTemplate(ctx context.Context, in *ListEmailTemplateRequest, opts ...grpc.CallOption) (*ListEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailTemplateService_ListEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailTemplateServiceServer is the server API for EmailTemplateService service.
// All implementations must embed UnimplementedEmailTemplateServiceServer
// for forward compatibility.
//
// EmailTemplateService сервис по работе с шаблонами писем
type EmailTemplateServiceServer interface {
	CreateEmailTemplate(context.Context, *CreateEmailTemplateRequest) (*CreateEmailTemplateResponse, error)
	GetEmailTemplate(context.Context, *GetEmailTemplateRequest) (*GetEmailTemplateResponse, error)
	UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest) (*UpdateEmailTemplateResponse, error)
	DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest) (*DeleteEmailTemplateResponse, error)
	ListEmailTemplate(context.Context, *ListEmailTemplateRequest) (*ListEmailTemplateResponse, error)
	mustEmbedUnimplementedEmailTemplateServiceServer()
}

// UnimplementedEmailTemplateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailTemplateServiceServer struct{}

func (UnimplementedEmailTemplateServiceServer) CreateEmailTemplate(context.Context, *CreateEmailTemplateRequest) (*CreateEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailTemplate not implemented")
}
func (UnimplementedEmailTemplateServiceServer) GetEmailTemplate(context.Context, *GetEmailTemplateRequest) (*GetEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplate not implemented")
}
func (UnimplementedEmailTemplateServiceServer) UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest) (*UpdateEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTemplate not implemented")
}
func (UnimplementedEmailTemplateServiceServer) DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest) (*DeleteEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailTemplate not implemented")
}
func (UnimplementedEmailTemplateServiceServer) ListEmailTemplate(context.Context, *ListEmailTemplateRequest) (*ListEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailTemplate not implemented")
}
func (UnimplementedEmailTemplateServiceServer) mustEmbedUnimplementedEmailTemplateServiceServer() {}
func (UnimplementedEmailTemplateServiceServer) testEmbeddedByValue()                              {}

// UnsafeEmailTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailTemplateServiceServer will
// result in compilation errors.
type UnsafeEmailTemplateServiceServer interface {
	mustEmbedUnimplementedEmailTemplateServiceServer()
}

func RegisterEmailTemplateServiceServer(s grpc.ServiceRegistrar, srv EmailTemplateServiceServer) {
	// If the following call panics, it indicates UnimplementedEmailTemplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailTemplateService_ServiceDesc, srv)
}

func _EmailTemplateService_CreateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTemplateServiceServer).CreateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTemplateService_CreateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTemplateServiceServer).CreateEmailTemplate(ctx, req.(*CreateEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailTemplateService_GetEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTemplateServiceServer).GetEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTemplateService_GetEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTemplateServiceServer).GetEmailTemplate(ctx, req.(*GetEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailTemplateService_UpdateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTemplateServiceServer).UpdateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTemplateService_UpdateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTemplateServiceServer).UpdateEmailTemplate(ctx, req.(*UpdateEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailTemplateService_DeleteEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTemplateServiceServer).DeleteEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTemplateService_DeleteEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTemplateServiceServer).DeleteEmailTemplate(ctx, req.(*DeleteEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailTemplateService_ListEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailTemplateServiceServer).ListEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailTemplateService_ListEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailTemplateServiceServer).ListEmailTemplate(ctx, req.(*ListEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailTemplateService_ServiceDesc is the grpc.ServiceDesc for EmailTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email.EmailTemplateService",
	HandlerType: (*EmailTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmailTemplate",
			Handler:    _EmailTemplateService_CreateEmailTemplate_Handler,
		},
		{
			MethodName: "GetEmailTemplate",
			Handler:    _EmailTemplateService_GetEmailTemplate_Handler,
		},
		{
			MethodName: "UpdateEmailTemplate",
			Handler:    _EmailTemplateService_UpdateEmailTemplate_Handler,
		},
		{
			MethodName: "DeleteEmailTemplate",
			Handler:    _EmailTemplateService_DeleteEmailTemplate_Handler,
		},
		{
			MethodName: "ListEmailTemplate",
			Handler:    _EmailTemplateService_ListEmailTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/proto/email_template.proto",
}
