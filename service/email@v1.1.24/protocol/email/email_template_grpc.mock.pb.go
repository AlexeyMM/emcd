// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/email/email_template_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source protocol/email/email_template_grpc.pb.go -destination protocol/email/email_template_grpc.mock.pb.go -package email
//

// Package email is a generated GoMock package.
package email

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEmailTemplateServiceClient is a mock of EmailTemplateServiceClient interface.
type MockEmailTemplateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailTemplateServiceClientMockRecorder
	isgomock struct{}
}

// MockEmailTemplateServiceClientMockRecorder is the mock recorder for MockEmailTemplateServiceClient.
type MockEmailTemplateServiceClientMockRecorder struct {
	mock *MockEmailTemplateServiceClient
}

// NewMockEmailTemplateServiceClient creates a new mock instance.
func NewMockEmailTemplateServiceClient(ctrl *gomock.Controller) *MockEmailTemplateServiceClient {
	mock := &MockEmailTemplateServiceClient{ctrl: ctrl}
	mock.recorder = &MockEmailTemplateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailTemplateServiceClient) EXPECT() *MockEmailTemplateServiceClientMockRecorder {
	return m.recorder
}

// CreateEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceClient) CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...grpc.CallOption) (*CreateEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmailTemplate", varargs...)
	ret0, _ := ret[0].(*CreateEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailTemplate indicates an expected call of CreateEmailTemplate.
func (mr *MockEmailTemplateServiceClientMockRecorder) CreateEmailTemplate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceClient)(nil).CreateEmailTemplate), varargs...)
}

// DeleteEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceClient) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*DeleteEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailTemplate", varargs...)
	ret0, _ := ret[0].(*DeleteEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailTemplate indicates an expected call of DeleteEmailTemplate.
func (mr *MockEmailTemplateServiceClientMockRecorder) DeleteEmailTemplate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceClient)(nil).DeleteEmailTemplate), varargs...)
}

// GetEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceClient) GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*GetEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailTemplate", varargs...)
	ret0, _ := ret[0].(*GetEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailTemplate indicates an expected call of GetEmailTemplate.
func (mr *MockEmailTemplateServiceClientMockRecorder) GetEmailTemplate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceClient)(nil).GetEmailTemplate), varargs...)
}

// ListEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceClient) ListEmailTemplate(ctx context.Context, in *ListEmailTemplateRequest, opts ...grpc.CallOption) (*ListEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailTemplate", varargs...)
	ret0, _ := ret[0].(*ListEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailTemplate indicates an expected call of ListEmailTemplate.
func (mr *MockEmailTemplateServiceClientMockRecorder) ListEmailTemplate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceClient)(nil).ListEmailTemplate), varargs...)
}

// UpdateEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceClient) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*UpdateEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEmailTemplate", varargs...)
	ret0, _ := ret[0].(*UpdateEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailTemplate indicates an expected call of UpdateEmailTemplate.
func (mr *MockEmailTemplateServiceClientMockRecorder) UpdateEmailTemplate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceClient)(nil).UpdateEmailTemplate), varargs...)
}

// MockEmailTemplateServiceServer is a mock of EmailTemplateServiceServer interface.
type MockEmailTemplateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailTemplateServiceServerMockRecorder
	isgomock struct{}
}

// MockEmailTemplateServiceServerMockRecorder is the mock recorder for MockEmailTemplateServiceServer.
type MockEmailTemplateServiceServerMockRecorder struct {
	mock *MockEmailTemplateServiceServer
}

// NewMockEmailTemplateServiceServer creates a new mock instance.
func NewMockEmailTemplateServiceServer(ctrl *gomock.Controller) *MockEmailTemplateServiceServer {
	mock := &MockEmailTemplateServiceServer{ctrl: ctrl}
	mock.recorder = &MockEmailTemplateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailTemplateServiceServer) EXPECT() *MockEmailTemplateServiceServerMockRecorder {
	return m.recorder
}

// CreateEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceServer) CreateEmailTemplate(arg0 context.Context, arg1 *CreateEmailTemplateRequest) (*CreateEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(*CreateEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailTemplate indicates an expected call of CreateEmailTemplate.
func (mr *MockEmailTemplateServiceServerMockRecorder) CreateEmailTemplate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceServer)(nil).CreateEmailTemplate), arg0, arg1)
}

// DeleteEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceServer) DeleteEmailTemplate(arg0 context.Context, arg1 *DeleteEmailTemplateRequest) (*DeleteEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(*DeleteEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailTemplate indicates an expected call of DeleteEmailTemplate.
func (mr *MockEmailTemplateServiceServerMockRecorder) DeleteEmailTemplate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceServer)(nil).DeleteEmailTemplate), arg0, arg1)
}

// GetEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceServer) GetEmailTemplate(arg0 context.Context, arg1 *GetEmailTemplateRequest) (*GetEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(*GetEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailTemplate indicates an expected call of GetEmailTemplate.
func (mr *MockEmailTemplateServiceServerMockRecorder) GetEmailTemplate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceServer)(nil).GetEmailTemplate), arg0, arg1)
}

// ListEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceServer) ListEmailTemplate(arg0 context.Context, arg1 *ListEmailTemplateRequest) (*ListEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(*ListEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailTemplate indicates an expected call of ListEmailTemplate.
func (mr *MockEmailTemplateServiceServerMockRecorder) ListEmailTemplate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceServer)(nil).ListEmailTemplate), arg0, arg1)
}

// UpdateEmailTemplate mocks base method.
func (m *MockEmailTemplateServiceServer) UpdateEmailTemplate(arg0 context.Context, arg1 *UpdateEmailTemplateRequest) (*UpdateEmailTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailTemplate", arg0, arg1)
	ret0, _ := ret[0].(*UpdateEmailTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailTemplate indicates an expected call of UpdateEmailTemplate.
func (mr *MockEmailTemplateServiceServerMockRecorder) UpdateEmailTemplate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailTemplate", reflect.TypeOf((*MockEmailTemplateServiceServer)(nil).UpdateEmailTemplate), arg0, arg1)
}

// mustEmbedUnimplementedEmailTemplateServiceServer mocks base method.
func (m *MockEmailTemplateServiceServer) mustEmbedUnimplementedEmailTemplateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailTemplateServiceServer")
}

// mustEmbedUnimplementedEmailTemplateServiceServer indicates an expected call of mustEmbedUnimplementedEmailTemplateServiceServer.
func (mr *MockEmailTemplateServiceServerMockRecorder) mustEmbedUnimplementedEmailTemplateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailTemplateServiceServer", reflect.TypeOf((*MockEmailTemplateServiceServer)(nil).mustEmbedUnimplementedEmailTemplateServiceServer))
}

// MockUnsafeEmailTemplateServiceServer is a mock of UnsafeEmailTemplateServiceServer interface.
type MockUnsafeEmailTemplateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEmailTemplateServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeEmailTemplateServiceServerMockRecorder is the mock recorder for MockUnsafeEmailTemplateServiceServer.
type MockUnsafeEmailTemplateServiceServerMockRecorder struct {
	mock *MockUnsafeEmailTemplateServiceServer
}

// NewMockUnsafeEmailTemplateServiceServer creates a new mock instance.
func NewMockUnsafeEmailTemplateServiceServer(ctrl *gomock.Controller) *MockUnsafeEmailTemplateServiceServer {
	mock := &MockUnsafeEmailTemplateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEmailTemplateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEmailTemplateServiceServer) EXPECT() *MockUnsafeEmailTemplateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEmailTemplateServiceServer mocks base method.
func (m *MockUnsafeEmailTemplateServiceServer) mustEmbedUnimplementedEmailTemplateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailTemplateServiceServer")
}

// mustEmbedUnimplementedEmailTemplateServiceServer indicates an expected call of mustEmbedUnimplementedEmailTemplateServiceServer.
func (mr *MockUnsafeEmailTemplateServiceServerMockRecorder) mustEmbedUnimplementedEmailTemplateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailTemplateServiceServer", reflect.TypeOf((*MockUnsafeEmailTemplateServiceServer)(nil).mustEmbedUnimplementedEmailTemplateServiceServer))
}
