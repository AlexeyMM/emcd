// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/proto/email_provider_settings.proto

package email

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmailProviderSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailProviderSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailProviderSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailProviderSettingMultiError, or nil if none found.
func (m *EmailProviderSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailProviderSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhiteLabelId

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EmailProviderSettingValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EmailProviderSettingValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmailProviderSettingValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EmailProviderSettingMultiError(errors)
	}

	return nil
}

// EmailProviderSettingMultiError is an error wrapping multiple validation
// errors returned by EmailProviderSetting.ValidateAll() if the designated
// constraints aren't met.
type EmailProviderSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailProviderSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailProviderSettingMultiError) AllErrors() []error { return m }

// EmailProviderSettingValidationError is the validation error returned by
// EmailProviderSetting.Validate if the designated constraints aren't met.
type EmailProviderSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailProviderSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailProviderSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailProviderSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailProviderSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailProviderSettingValidationError) ErrorName() string {
	return "EmailProviderSettingValidationError"
}

// Error satisfies the builtin error interface
func (e EmailProviderSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailProviderSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailProviderSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailProviderSettingValidationError{}

// Validate checks the field values on CreateEmailProviderSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEmailProviderSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmailProviderSettingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEmailProviderSettingRequestMultiError, or nil if none found.
func (m *CreateEmailProviderSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmailProviderSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEmailProviderSettingRequestValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEmailProviderSettingRequestValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEmailProviderSettingRequestValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEmailProviderSettingRequestMultiError(errors)
	}

	return nil
}

// CreateEmailProviderSettingRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateEmailProviderSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEmailProviderSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmailProviderSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmailProviderSettingRequestMultiError) AllErrors() []error { return m }

// CreateEmailProviderSettingRequestValidationError is the validation error
// returned by CreateEmailProviderSettingRequest.Validate if the designated
// constraints aren't met.
type CreateEmailProviderSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmailProviderSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmailProviderSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmailProviderSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmailProviderSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmailProviderSettingRequestValidationError) ErrorName() string {
	return "CreateEmailProviderSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmailProviderSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmailProviderSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmailProviderSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmailProviderSettingRequestValidationError{}

// Validate checks the field values on CreateEmailProviderSettingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEmailProviderSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmailProviderSettingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEmailProviderSettingResponseMultiError, or nil if none found.
func (m *CreateEmailProviderSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmailProviderSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateEmailProviderSettingResponseMultiError(errors)
	}

	return nil
}

// CreateEmailProviderSettingResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateEmailProviderSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEmailProviderSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmailProviderSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmailProviderSettingResponseMultiError) AllErrors() []error { return m }

// CreateEmailProviderSettingResponseValidationError is the validation error
// returned by CreateEmailProviderSettingResponse.Validate if the designated
// constraints aren't met.
type CreateEmailProviderSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmailProviderSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmailProviderSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmailProviderSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmailProviderSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmailProviderSettingResponseValidationError) ErrorName() string {
	return "CreateEmailProviderSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmailProviderSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmailProviderSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmailProviderSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmailProviderSettingResponseValidationError{}

// Validate checks the field values on GetEmailProviderSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailProviderSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailProviderSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEmailProviderSettingRequestMultiError, or nil if none found.
func (m *GetEmailProviderSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailProviderSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhiteLabelId

	if len(errors) > 0 {
		return GetEmailProviderSettingRequestMultiError(errors)
	}

	return nil
}

// GetEmailProviderSettingRequestMultiError is an error wrapping multiple
// validation errors returned by GetEmailProviderSettingRequest.ValidateAll()
// if the designated constraints aren't met.
type GetEmailProviderSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailProviderSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailProviderSettingRequestMultiError) AllErrors() []error { return m }

// GetEmailProviderSettingRequestValidationError is the validation error
// returned by GetEmailProviderSettingRequest.Validate if the designated
// constraints aren't met.
type GetEmailProviderSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailProviderSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailProviderSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailProviderSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailProviderSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailProviderSettingRequestValidationError) ErrorName() string {
	return "GetEmailProviderSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailProviderSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailProviderSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailProviderSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailProviderSettingRequestValidationError{}

// Validate checks the field values on GetEmailProviderSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailProviderSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailProviderSettingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEmailProviderSettingResponseMultiError, or nil if none found.
func (m *GetEmailProviderSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailProviderSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEmailProviderSettingResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEmailProviderSettingResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEmailProviderSettingResponseValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEmailProviderSettingResponseMultiError(errors)
	}

	return nil
}

// GetEmailProviderSettingResponseMultiError is an error wrapping multiple
// validation errors returned by GetEmailProviderSettingResponse.ValidateAll()
// if the designated constraints aren't met.
type GetEmailProviderSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailProviderSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailProviderSettingResponseMultiError) AllErrors() []error { return m }

// GetEmailProviderSettingResponseValidationError is the validation error
// returned by GetEmailProviderSettingResponse.Validate if the designated
// constraints aren't met.
type GetEmailProviderSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailProviderSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailProviderSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailProviderSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailProviderSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailProviderSettingResponseValidationError) ErrorName() string {
	return "GetEmailProviderSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailProviderSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailProviderSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailProviderSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailProviderSettingResponseValidationError{}

// Validate checks the field values on UpdateEmailProviderSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEmailProviderSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailProviderSettingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEmailProviderSettingRequestMultiError, or nil if none found.
func (m *UpdateEmailProviderSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailProviderSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEmailProviderSettingRequestValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEmailProviderSettingRequestValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEmailProviderSettingRequestValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEmailProviderSettingRequestMultiError(errors)
	}

	return nil
}

// UpdateEmailProviderSettingRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEmailProviderSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmailProviderSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailProviderSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailProviderSettingRequestMultiError) AllErrors() []error { return m }

// UpdateEmailProviderSettingRequestValidationError is the validation error
// returned by UpdateEmailProviderSettingRequest.Validate if the designated
// constraints aren't met.
type UpdateEmailProviderSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailProviderSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailProviderSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailProviderSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailProviderSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailProviderSettingRequestValidationError) ErrorName() string {
	return "UpdateEmailProviderSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailProviderSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailProviderSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailProviderSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailProviderSettingRequestValidationError{}

// Validate checks the field values on UpdateEmailProviderSettingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEmailProviderSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailProviderSettingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEmailProviderSettingResponseMultiError, or nil if none found.
func (m *UpdateEmailProviderSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailProviderSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEmailProviderSettingResponseMultiError(errors)
	}

	return nil
}

// UpdateEmailProviderSettingResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEmailProviderSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmailProviderSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailProviderSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailProviderSettingResponseMultiError) AllErrors() []error { return m }

// UpdateEmailProviderSettingResponseValidationError is the validation error
// returned by UpdateEmailProviderSettingResponse.Validate if the designated
// constraints aren't met.
type UpdateEmailProviderSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailProviderSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailProviderSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailProviderSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailProviderSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailProviderSettingResponseValidationError) ErrorName() string {
	return "UpdateEmailProviderSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailProviderSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailProviderSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailProviderSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailProviderSettingResponseValidationError{}

// Validate checks the field values on DeleteEmailProviderSettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEmailProviderSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmailProviderSettingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEmailProviderSettingRequestMultiError, or nil if none found.
func (m *DeleteEmailProviderSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmailProviderSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhiteLabelId

	if len(errors) > 0 {
		return DeleteEmailProviderSettingRequestMultiError(errors)
	}

	return nil
}

// DeleteEmailProviderSettingRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEmailProviderSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEmailProviderSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmailProviderSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmailProviderSettingRequestMultiError) AllErrors() []error { return m }

// DeleteEmailProviderSettingRequestValidationError is the validation error
// returned by DeleteEmailProviderSettingRequest.Validate if the designated
// constraints aren't met.
type DeleteEmailProviderSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmailProviderSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmailProviderSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmailProviderSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmailProviderSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmailProviderSettingRequestValidationError) ErrorName() string {
	return "DeleteEmailProviderSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmailProviderSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmailProviderSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmailProviderSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmailProviderSettingRequestValidationError{}

// Validate checks the field values on DeleteEmailProviderSettingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEmailProviderSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmailProviderSettingResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEmailProviderSettingResponseMultiError, or nil if none found.
func (m *DeleteEmailProviderSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmailProviderSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEmailProviderSettingResponseMultiError(errors)
	}

	return nil
}

// DeleteEmailProviderSettingResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEmailProviderSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEmailProviderSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmailProviderSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmailProviderSettingResponseMultiError) AllErrors() []error { return m }

// DeleteEmailProviderSettingResponseValidationError is the validation error
// returned by DeleteEmailProviderSettingResponse.Validate if the designated
// constraints aren't met.
type DeleteEmailProviderSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmailProviderSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmailProviderSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmailProviderSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmailProviderSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmailProviderSettingResponseValidationError) ErrorName() string {
	return "DeleteEmailProviderSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmailProviderSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmailProviderSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmailProviderSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmailProviderSettingResponseValidationError{}

// Validate checks the field values on ListEmailProviderSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListEmailProviderSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmailProviderSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEmailProviderSettingsRequestMultiError, or nil if none found.
func (m *ListEmailProviderSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmailProviderSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListEmailProviderSettingsRequestMultiError(errors)
	}

	return nil
}

// ListEmailProviderSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListEmailProviderSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEmailProviderSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmailProviderSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmailProviderSettingsRequestMultiError) AllErrors() []error { return m }

// ListEmailProviderSettingsRequestValidationError is the validation error
// returned by ListEmailProviderSettingsRequest.Validate if the designated
// constraints aren't met.
type ListEmailProviderSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmailProviderSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmailProviderSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmailProviderSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmailProviderSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmailProviderSettingsRequestValidationError) ErrorName() string {
	return "ListEmailProviderSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmailProviderSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmailProviderSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmailProviderSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmailProviderSettingsRequestValidationError{}

// Validate checks the field values on ListEmailProviderSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListEmailProviderSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmailProviderSettingsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListEmailProviderSettingsResponseMultiError, or nil if none found.
func (m *ListEmailProviderSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmailProviderSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	for idx, item := range m.GetSettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEmailProviderSettingsResponseValidationError{
						field:  fmt.Sprintf("Settings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEmailProviderSettingsResponseValidationError{
						field:  fmt.Sprintf("Settings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEmailProviderSettingsResponseValidationError{
					field:  fmt.Sprintf("Settings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEmailProviderSettingsResponseMultiError(errors)
	}

	return nil
}

// ListEmailProviderSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListEmailProviderSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEmailProviderSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmailProviderSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmailProviderSettingsResponseMultiError) AllErrors() []error { return m }

// ListEmailProviderSettingsResponseValidationError is the validation error
// returned by ListEmailProviderSettingsResponse.Validate if the designated
// constraints aren't met.
type ListEmailProviderSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmailProviderSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmailProviderSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmailProviderSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmailProviderSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmailProviderSettingsResponseValidationError) ErrorName() string {
	return "ListEmailProviderSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmailProviderSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmailProviderSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmailProviderSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmailProviderSettingsResponseValidationError{}

// Validate checks the field values on EmailProviderSetting_SMTP with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailProviderSetting_SMTP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailProviderSetting_SMTP with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailProviderSetting_SMTPMultiError, or nil if none found.
func (m *EmailProviderSetting_SMTP) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailProviderSetting_SMTP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for FromAddress

	// no validation rules for FromAddressDisplayedAs

	if len(errors) > 0 {
		return EmailProviderSetting_SMTPMultiError(errors)
	}

	return nil
}

// EmailProviderSetting_SMTPMultiError is an error wrapping multiple validation
// errors returned by EmailProviderSetting_SMTP.ValidateAll() if the
// designated constraints aren't met.
type EmailProviderSetting_SMTPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailProviderSetting_SMTPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailProviderSetting_SMTPMultiError) AllErrors() []error { return m }

// EmailProviderSetting_SMTPValidationError is the validation error returned by
// EmailProviderSetting_SMTP.Validate if the designated constraints aren't met.
type EmailProviderSetting_SMTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailProviderSetting_SMTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailProviderSetting_SMTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailProviderSetting_SMTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailProviderSetting_SMTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailProviderSetting_SMTPValidationError) ErrorName() string {
	return "EmailProviderSetting_SMTPValidationError"
}

// Error satisfies the builtin error interface
func (e EmailProviderSetting_SMTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailProviderSetting_SMTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailProviderSetting_SMTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailProviderSetting_SMTPValidationError{}

// Validate checks the field values on EmailProviderSetting_Mailgun with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailProviderSetting_Mailgun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailProviderSetting_Mailgun with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailProviderSetting_MailgunMultiError, or nil if none found.
func (m *EmailProviderSetting_Mailgun) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailProviderSetting_Mailgun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for ApiKey

	// no validation rules for ApiBase

	// no validation rules for FromAddress

	// no validation rules for FromAddressDisplayedAs

	if len(errors) > 0 {
		return EmailProviderSetting_MailgunMultiError(errors)
	}

	return nil
}

// EmailProviderSetting_MailgunMultiError is an error wrapping multiple
// validation errors returned by EmailProviderSetting_Mailgun.ValidateAll() if
// the designated constraints aren't met.
type EmailProviderSetting_MailgunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailProviderSetting_MailgunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailProviderSetting_MailgunMultiError) AllErrors() []error { return m }

// EmailProviderSetting_MailgunValidationError is the validation error returned
// by EmailProviderSetting_Mailgun.Validate if the designated constraints
// aren't met.
type EmailProviderSetting_MailgunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailProviderSetting_MailgunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailProviderSetting_MailgunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailProviderSetting_MailgunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailProviderSetting_MailgunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailProviderSetting_MailgunValidationError) ErrorName() string {
	return "EmailProviderSetting_MailgunValidationError"
}

// Error satisfies the builtin error interface
func (e EmailProviderSetting_MailgunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailProviderSetting_Mailgun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailProviderSetting_MailgunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailProviderSetting_MailgunValidationError{}

// Validate checks the field values on EmailProviderSetting_Provider with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailProviderSetting_Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailProviderSetting_Provider with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EmailProviderSetting_ProviderMultiError, or nil if none found.
func (m *EmailProviderSetting_Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailProviderSetting_Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *EmailProviderSetting_Provider_Smtp:
		if v == nil {
			err := EmailProviderSetting_ProviderValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSmtp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EmailProviderSetting_ProviderValidationError{
						field:  "Smtp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EmailProviderSetting_ProviderValidationError{
						field:  "Smtp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSmtp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmailProviderSetting_ProviderValidationError{
					field:  "Smtp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EmailProviderSetting_Provider_Mailgun:
		if v == nil {
			err := EmailProviderSetting_ProviderValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMailgun()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EmailProviderSetting_ProviderValidationError{
						field:  "Mailgun",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EmailProviderSetting_ProviderValidationError{
						field:  "Mailgun",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMailgun()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmailProviderSetting_ProviderValidationError{
					field:  "Mailgun",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EmailProviderSetting_ProviderMultiError(errors)
	}

	return nil
}

// EmailProviderSetting_ProviderMultiError is an error wrapping multiple
// validation errors returned by EmailProviderSetting_Provider.ValidateAll()
// if the designated constraints aren't met.
type EmailProviderSetting_ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailProviderSetting_ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailProviderSetting_ProviderMultiError) AllErrors() []error { return m }

// EmailProviderSetting_ProviderValidationError is the validation error
// returned by EmailProviderSetting_Provider.Validate if the designated
// constraints aren't met.
type EmailProviderSetting_ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailProviderSetting_ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailProviderSetting_ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailProviderSetting_ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailProviderSetting_ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailProviderSetting_ProviderValidationError) ErrorName() string {
	return "EmailProviderSetting_ProviderValidationError"
}

// Error satisfies the builtin error interface
func (e EmailProviderSetting_ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailProviderSetting_Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailProviderSetting_ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailProviderSetting_ProviderValidationError{}
