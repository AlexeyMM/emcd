// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/proto/email.proto

package email

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendPasswordRestorationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPasswordRestorationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPasswordRestorationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendPasswordRestorationRequestMultiError, or nil if none found.
func (m *SendPasswordRestorationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPasswordRestorationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendPasswordRestorationRequestMultiError(errors)
	}

	return nil
}

// SendPasswordRestorationRequestMultiError is an error wrapping multiple
// validation errors returned by SendPasswordRestorationRequest.ValidateAll()
// if the designated constraints aren't met.
type SendPasswordRestorationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPasswordRestorationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPasswordRestorationRequestMultiError) AllErrors() []error { return m }

// SendPasswordRestorationRequestValidationError is the validation error
// returned by SendPasswordRestorationRequest.Validate if the designated
// constraints aren't met.
type SendPasswordRestorationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordRestorationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordRestorationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordRestorationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordRestorationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordRestorationRequestValidationError) ErrorName() string {
	return "SendPasswordRestorationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordRestorationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordRestorationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordRestorationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordRestorationRequestValidationError{}

// Validate checks the field values on SendPasswordRestorationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPasswordRestorationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPasswordRestorationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendPasswordRestorationResponseMultiError, or nil if none found.
func (m *SendPasswordRestorationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPasswordRestorationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendPasswordRestorationResponseMultiError(errors)
	}

	return nil
}

// SendPasswordRestorationResponseMultiError is an error wrapping multiple
// validation errors returned by SendPasswordRestorationResponse.ValidateAll()
// if the designated constraints aren't met.
type SendPasswordRestorationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPasswordRestorationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPasswordRestorationResponseMultiError) AllErrors() []error { return m }

// SendPasswordRestorationResponseValidationError is the validation error
// returned by SendPasswordRestorationResponse.Validate if the designated
// constraints aren't met.
type SendPasswordRestorationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordRestorationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordRestorationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordRestorationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordRestorationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordRestorationResponseValidationError) ErrorName() string {
	return "SendPasswordRestorationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordRestorationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordRestorationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordRestorationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordRestorationResponseValidationError{}

// Validate checks the field values on SendWorkerChangedStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendWorkerChangedStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendWorkerChangedStateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendWorkerChangedStateRequestMultiError, or nil if none found.
func (m *SendWorkerChangedStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendWorkerChangedStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkerName

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for IsOn

	// no validation rules for Coin

	// no validation rules for Language

	// no validation rules for WhiteLabelID

	if all {
		switch v := interface{}(m.GetStateChangedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendWorkerChangedStateRequestValidationError{
					field:  "StateChangedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendWorkerChangedStateRequestValidationError{
					field:  "StateChangedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStateChangedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendWorkerChangedStateRequestValidationError{
				field:  "StateChangedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendWorkerChangedStateRequestMultiError(errors)
	}

	return nil
}

// SendWorkerChangedStateRequestMultiError is an error wrapping multiple
// validation errors returned by SendWorkerChangedStateRequest.ValidateAll()
// if the designated constraints aren't met.
type SendWorkerChangedStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendWorkerChangedStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendWorkerChangedStateRequestMultiError) AllErrors() []error { return m }

// SendWorkerChangedStateRequestValidationError is the validation error
// returned by SendWorkerChangedStateRequest.Validate if the designated
// constraints aren't met.
type SendWorkerChangedStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendWorkerChangedStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendWorkerChangedStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendWorkerChangedStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendWorkerChangedStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendWorkerChangedStateRequestValidationError) ErrorName() string {
	return "SendWorkerChangedStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendWorkerChangedStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendWorkerChangedStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendWorkerChangedStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendWorkerChangedStateRequestValidationError{}

// Validate checks the field values on SendWorkerChangedStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendWorkerChangedStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendWorkerChangedStateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendWorkerChangedStateResponseMultiError, or nil if none found.
func (m *SendWorkerChangedStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendWorkerChangedStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendWorkerChangedStateResponseMultiError(errors)
	}

	return nil
}

// SendWorkerChangedStateResponseMultiError is an error wrapping multiple
// validation errors returned by SendWorkerChangedStateResponse.ValidateAll()
// if the designated constraints aren't met.
type SendWorkerChangedStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendWorkerChangedStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendWorkerChangedStateResponseMultiError) AllErrors() []error { return m }

// SendWorkerChangedStateResponseValidationError is the validation error
// returned by SendWorkerChangedStateResponse.Validate if the designated
// constraints aren't met.
type SendWorkerChangedStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendWorkerChangedStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendWorkerChangedStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendWorkerChangedStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendWorkerChangedStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendWorkerChangedStateResponseValidationError) ErrorName() string {
	return "SendWorkerChangedStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendWorkerChangedStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendWorkerChangedStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendWorkerChangedStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendWorkerChangedStateResponseValidationError{}

// Validate checks the field values on SendWalletChangedAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendWalletChangedAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendWalletChangedAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendWalletChangedAddressRequestMultiError, or nil if none found.
func (m *SendWalletChangedAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendWalletChangedAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for CoinCode

	// no validation rules for Domain

	// no validation rules for UserId

	if len(errors) > 0 {
		return SendWalletChangedAddressRequestMultiError(errors)
	}

	return nil
}

// SendWalletChangedAddressRequestMultiError is an error wrapping multiple
// validation errors returned by SendWalletChangedAddressRequest.ValidateAll()
// if the designated constraints aren't met.
type SendWalletChangedAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendWalletChangedAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendWalletChangedAddressRequestMultiError) AllErrors() []error { return m }

// SendWalletChangedAddressRequestValidationError is the validation error
// returned by SendWalletChangedAddressRequest.Validate if the designated
// constraints aren't met.
type SendWalletChangedAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendWalletChangedAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendWalletChangedAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendWalletChangedAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendWalletChangedAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendWalletChangedAddressRequestValidationError) ErrorName() string {
	return "SendWalletChangedAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendWalletChangedAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendWalletChangedAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendWalletChangedAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendWalletChangedAddressRequestValidationError{}

// Validate checks the field values on SendWalletChangedAddressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendWalletChangedAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendWalletChangedAddressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendWalletChangedAddressResponseMultiError, or nil if none found.
func (m *SendWalletChangedAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendWalletChangedAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendWalletChangedAddressResponseMultiError(errors)
	}

	return nil
}

// SendWalletChangedAddressResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendWalletChangedAddressResponse.ValidateAll() if the designated
// constraints aren't met.
type SendWalletChangedAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendWalletChangedAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendWalletChangedAddressResponseMultiError) AllErrors() []error { return m }

// SendWalletChangedAddressResponseValidationError is the validation error
// returned by SendWalletChangedAddressResponse.Validate if the designated
// constraints aren't met.
type SendWalletChangedAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendWalletChangedAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendWalletChangedAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendWalletChangedAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendWalletChangedAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendWalletChangedAddressResponseValidationError) ErrorName() string {
	return "SendWalletChangedAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendWalletChangedAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendWalletChangedAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendWalletChangedAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendWalletChangedAddressResponseValidationError{}

// Validate checks the field values on SendRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendRegisterRequestMultiError, or nil if none found.
func (m *SendRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhiteLabelID

	// no validation rules for Token

	// no validation rules for Email

	// no validation rules for Language

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendRegisterRequestMultiError(errors)
	}

	return nil
}

// SendRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by SendRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type SendRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRegisterRequestMultiError) AllErrors() []error { return m }

// SendRegisterRequestValidationError is the validation error returned by
// SendRegisterRequest.Validate if the designated constraints aren't met.
type SendRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRegisterRequestValidationError) ErrorName() string {
	return "SendRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRegisterRequestValidationError{}

// Validate checks the field values on SendRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendRegisterResponseMultiError, or nil if none found.
func (m *SendRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendRegisterResponseMultiError(errors)
	}

	return nil
}

// SendRegisterResponseMultiError is an error wrapping multiple validation
// errors returned by SendRegisterResponse.ValidateAll() if the designated
// constraints aren't met.
type SendRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRegisterResponseMultiError) AllErrors() []error { return m }

// SendRegisterResponseValidationError is the validation error returned by
// SendRegisterResponse.Validate if the designated constraints aren't met.
type SendRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRegisterResponseValidationError) ErrorName() string {
	return "SendRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRegisterResponseValidationError{}

// Validate checks the field values on SendMobileTwoFaOffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMobileTwoFaOffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMobileTwoFaOffRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMobileTwoFaOffRequestMultiError, or nil if none found.
func (m *SendMobileTwoFaOffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMobileTwoFaOffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendMobileTwoFaOffRequestMultiError(errors)
	}

	return nil
}

// SendMobileTwoFaOffRequestMultiError is an error wrapping multiple validation
// errors returned by SendMobileTwoFaOffRequest.ValidateAll() if the
// designated constraints aren't met.
type SendMobileTwoFaOffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMobileTwoFaOffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMobileTwoFaOffRequestMultiError) AllErrors() []error { return m }

// SendMobileTwoFaOffRequestValidationError is the validation error returned by
// SendMobileTwoFaOffRequest.Validate if the designated constraints aren't met.
type SendMobileTwoFaOffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMobileTwoFaOffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMobileTwoFaOffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMobileTwoFaOffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMobileTwoFaOffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMobileTwoFaOffRequestValidationError) ErrorName() string {
	return "SendMobileTwoFaOffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMobileTwoFaOffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMobileTwoFaOffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMobileTwoFaOffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMobileTwoFaOffRequestValidationError{}

// Validate checks the field values on SendMobileTwoFaOffResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMobileTwoFaOffResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMobileTwoFaOffResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMobileTwoFaOffResponseMultiError, or nil if none found.
func (m *SendMobileTwoFaOffResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMobileTwoFaOffResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendMobileTwoFaOffResponseMultiError(errors)
	}

	return nil
}

// SendMobileTwoFaOffResponseMultiError is an error wrapping multiple
// validation errors returned by SendMobileTwoFaOffResponse.ValidateAll() if
// the designated constraints aren't met.
type SendMobileTwoFaOffResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMobileTwoFaOffResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMobileTwoFaOffResponseMultiError) AllErrors() []error { return m }

// SendMobileTwoFaOffResponseValidationError is the validation error returned
// by SendMobileTwoFaOffResponse.Validate if the designated constraints aren't met.
type SendMobileTwoFaOffResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMobileTwoFaOffResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMobileTwoFaOffResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMobileTwoFaOffResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMobileTwoFaOffResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMobileTwoFaOffResponseValidationError) ErrorName() string {
	return "SendMobileTwoFaOffResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMobileTwoFaOffResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMobileTwoFaOffResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMobileTwoFaOffResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMobileTwoFaOffResponseValidationError{}

// Validate checks the field values on SendMobileTwoFaOnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMobileTwoFaOnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMobileTwoFaOnRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMobileTwoFaOnRequestMultiError, or nil if none found.
func (m *SendMobileTwoFaOnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMobileTwoFaOnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendMobileTwoFaOnRequestMultiError(errors)
	}

	return nil
}

// SendMobileTwoFaOnRequestMultiError is an error wrapping multiple validation
// errors returned by SendMobileTwoFaOnRequest.ValidateAll() if the designated
// constraints aren't met.
type SendMobileTwoFaOnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMobileTwoFaOnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMobileTwoFaOnRequestMultiError) AllErrors() []error { return m }

// SendMobileTwoFaOnRequestValidationError is the validation error returned by
// SendMobileTwoFaOnRequest.Validate if the designated constraints aren't met.
type SendMobileTwoFaOnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMobileTwoFaOnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMobileTwoFaOnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMobileTwoFaOnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMobileTwoFaOnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMobileTwoFaOnRequestValidationError) ErrorName() string {
	return "SendMobileTwoFaOnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMobileTwoFaOnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMobileTwoFaOnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMobileTwoFaOnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMobileTwoFaOnRequestValidationError{}

// Validate checks the field values on SendMobileTwoFaOnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMobileTwoFaOnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMobileTwoFaOnResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMobileTwoFaOnResponseMultiError, or nil if none found.
func (m *SendMobileTwoFaOnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMobileTwoFaOnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendMobileTwoFaOnResponseMultiError(errors)
	}

	return nil
}

// SendMobileTwoFaOnResponseMultiError is an error wrapping multiple validation
// errors returned by SendMobileTwoFaOnResponse.ValidateAll() if the
// designated constraints aren't met.
type SendMobileTwoFaOnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMobileTwoFaOnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMobileTwoFaOnResponseMultiError) AllErrors() []error { return m }

// SendMobileTwoFaOnResponseValidationError is the validation error returned by
// SendMobileTwoFaOnResponse.Validate if the designated constraints aren't met.
type SendMobileTwoFaOnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMobileTwoFaOnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMobileTwoFaOnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMobileTwoFaOnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMobileTwoFaOnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMobileTwoFaOnResponseValidationError) ErrorName() string {
	return "SendMobileTwoFaOnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMobileTwoFaOnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMobileTwoFaOnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMobileTwoFaOnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMobileTwoFaOnResponseValidationError{}

// Validate checks the field values on SendGoogleTwoFaOffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGoogleTwoFaOffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGoogleTwoFaOffRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGoogleTwoFaOffRequestMultiError, or nil if none found.
func (m *SendGoogleTwoFaOffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGoogleTwoFaOffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendGoogleTwoFaOffRequestMultiError(errors)
	}

	return nil
}

// SendGoogleTwoFaOffRequestMultiError is an error wrapping multiple validation
// errors returned by SendGoogleTwoFaOffRequest.ValidateAll() if the
// designated constraints aren't met.
type SendGoogleTwoFaOffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGoogleTwoFaOffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGoogleTwoFaOffRequestMultiError) AllErrors() []error { return m }

// SendGoogleTwoFaOffRequestValidationError is the validation error returned by
// SendGoogleTwoFaOffRequest.Validate if the designated constraints aren't met.
type SendGoogleTwoFaOffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGoogleTwoFaOffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGoogleTwoFaOffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGoogleTwoFaOffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGoogleTwoFaOffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGoogleTwoFaOffRequestValidationError) ErrorName() string {
	return "SendGoogleTwoFaOffRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGoogleTwoFaOffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGoogleTwoFaOffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGoogleTwoFaOffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGoogleTwoFaOffRequestValidationError{}

// Validate checks the field values on SendGoogleTwoFaOffResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGoogleTwoFaOffResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGoogleTwoFaOffResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGoogleTwoFaOffResponseMultiError, or nil if none found.
func (m *SendGoogleTwoFaOffResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGoogleTwoFaOffResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendGoogleTwoFaOffResponseMultiError(errors)
	}

	return nil
}

// SendGoogleTwoFaOffResponseMultiError is an error wrapping multiple
// validation errors returned by SendGoogleTwoFaOffResponse.ValidateAll() if
// the designated constraints aren't met.
type SendGoogleTwoFaOffResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGoogleTwoFaOffResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGoogleTwoFaOffResponseMultiError) AllErrors() []error { return m }

// SendGoogleTwoFaOffResponseValidationError is the validation error returned
// by SendGoogleTwoFaOffResponse.Validate if the designated constraints aren't met.
type SendGoogleTwoFaOffResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGoogleTwoFaOffResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGoogleTwoFaOffResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGoogleTwoFaOffResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGoogleTwoFaOffResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGoogleTwoFaOffResponseValidationError) ErrorName() string {
	return "SendGoogleTwoFaOffResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGoogleTwoFaOffResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGoogleTwoFaOffResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGoogleTwoFaOffResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGoogleTwoFaOffResponseValidationError{}

// Validate checks the field values on SendGoogleTwoFaOnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGoogleTwoFaOnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGoogleTwoFaOnRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGoogleTwoFaOnRequestMultiError, or nil if none found.
func (m *SendGoogleTwoFaOnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGoogleTwoFaOnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendGoogleTwoFaOnRequestMultiError(errors)
	}

	return nil
}

// SendGoogleTwoFaOnRequestMultiError is an error wrapping multiple validation
// errors returned by SendGoogleTwoFaOnRequest.ValidateAll() if the designated
// constraints aren't met.
type SendGoogleTwoFaOnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGoogleTwoFaOnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGoogleTwoFaOnRequestMultiError) AllErrors() []error { return m }

// SendGoogleTwoFaOnRequestValidationError is the validation error returned by
// SendGoogleTwoFaOnRequest.Validate if the designated constraints aren't met.
type SendGoogleTwoFaOnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGoogleTwoFaOnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGoogleTwoFaOnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGoogleTwoFaOnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGoogleTwoFaOnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGoogleTwoFaOnRequestValidationError) ErrorName() string {
	return "SendGoogleTwoFaOnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendGoogleTwoFaOnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGoogleTwoFaOnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGoogleTwoFaOnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGoogleTwoFaOnRequestValidationError{}

// Validate checks the field values on SendGoogleTwoFaOnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendGoogleTwoFaOnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendGoogleTwoFaOnResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendGoogleTwoFaOnResponseMultiError, or nil if none found.
func (m *SendGoogleTwoFaOnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendGoogleTwoFaOnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendGoogleTwoFaOnResponseMultiError(errors)
	}

	return nil
}

// SendGoogleTwoFaOnResponseMultiError is an error wrapping multiple validation
// errors returned by SendGoogleTwoFaOnResponse.ValidateAll() if the
// designated constraints aren't met.
type SendGoogleTwoFaOnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendGoogleTwoFaOnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendGoogleTwoFaOnResponseMultiError) AllErrors() []error { return m }

// SendGoogleTwoFaOnResponseValidationError is the validation error returned by
// SendGoogleTwoFaOnResponse.Validate if the designated constraints aren't met.
type SendGoogleTwoFaOnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendGoogleTwoFaOnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendGoogleTwoFaOnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendGoogleTwoFaOnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendGoogleTwoFaOnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendGoogleTwoFaOnResponseValidationError) ErrorName() string {
	return "SendGoogleTwoFaOnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendGoogleTwoFaOnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendGoogleTwoFaOnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendGoogleTwoFaOnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendGoogleTwoFaOnResponseValidationError{}

// Validate checks the field values on SendUserHashrateDecreasedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendUserHashrateDecreasedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserHashrateDecreasedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendUserHashrateDecreasedRequestMultiError, or nil if none found.
func (m *SendUserHashrateDecreasedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserHashrateDecreasedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for DecreasedBy

	// no validation rules for Coin

	// no validation rules for WhiteLabelID

	// no validation rules for Language

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendUserHashrateDecreasedRequestMultiError(errors)
	}

	return nil
}

// SendUserHashrateDecreasedRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendUserHashrateDecreasedRequest.ValidateAll() if the designated
// constraints aren't met.
type SendUserHashrateDecreasedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserHashrateDecreasedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserHashrateDecreasedRequestMultiError) AllErrors() []error { return m }

// SendUserHashrateDecreasedRequestValidationError is the validation error
// returned by SendUserHashrateDecreasedRequest.Validate if the designated
// constraints aren't met.
type SendUserHashrateDecreasedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserHashrateDecreasedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserHashrateDecreasedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserHashrateDecreasedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserHashrateDecreasedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserHashrateDecreasedRequestValidationError) ErrorName() string {
	return "SendUserHashrateDecreasedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserHashrateDecreasedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserHashrateDecreasedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserHashrateDecreasedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserHashrateDecreasedRequestValidationError{}

// Validate checks the field values on SendUserHashrateDecreasedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendUserHashrateDecreasedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserHashrateDecreasedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendUserHashrateDecreasedResponseMultiError, or nil if none found.
func (m *SendUserHashrateDecreasedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserHashrateDecreasedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendUserHashrateDecreasedResponseMultiError(errors)
	}

	return nil
}

// SendUserHashrateDecreasedResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendUserHashrateDecreasedResponse.ValidateAll() if the designated
// constraints aren't met.
type SendUserHashrateDecreasedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserHashrateDecreasedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserHashrateDecreasedResponseMultiError) AllErrors() []error { return m }

// SendUserHashrateDecreasedResponseValidationError is the validation error
// returned by SendUserHashrateDecreasedResponse.Validate if the designated
// constraints aren't met.
type SendUserHashrateDecreasedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserHashrateDecreasedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserHashrateDecreasedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserHashrateDecreasedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserHashrateDecreasedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserHashrateDecreasedResponseValidationError) ErrorName() string {
	return "SendUserHashrateDecreasedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserHashrateDecreasedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserHashrateDecreasedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserHashrateDecreasedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserHashrateDecreasedResponseValidationError{}

// Validate checks the field values on GetSentEmailMessagesByEmailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSentEmailMessagesByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSentEmailMessagesByEmailRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSentEmailMessagesByEmailRequestMultiError, or nil if none found.
func (m *GetSentEmailMessagesByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSentEmailMessagesByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skip

	// no validation rules for Take

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if len(errors) > 0 {
		return GetSentEmailMessagesByEmailRequestMultiError(errors)
	}

	return nil
}

// GetSentEmailMessagesByEmailRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSentEmailMessagesByEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSentEmailMessagesByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSentEmailMessagesByEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSentEmailMessagesByEmailRequestMultiError) AllErrors() []error { return m }

// GetSentEmailMessagesByEmailRequestValidationError is the validation error
// returned by GetSentEmailMessagesByEmailRequest.Validate if the designated
// constraints aren't met.
type GetSentEmailMessagesByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSentEmailMessagesByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSentEmailMessagesByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSentEmailMessagesByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSentEmailMessagesByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSentEmailMessagesByEmailRequestValidationError) ErrorName() string {
	return "GetSentEmailMessagesByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSentEmailMessagesByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSentEmailMessagesByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSentEmailMessagesByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSentEmailMessagesByEmailRequestValidationError{}

// Validate checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Email) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmailMultiError, or nil if none found.
func (m *Email) ValidateAll() error {
	return m.validate(true)
}

func (m *Email) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EmailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EmailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmailValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EmailMultiError(errors)
	}

	return nil
}

// EmailMultiError is an error wrapping multiple validation errors returned by
// Email.ValidateAll() if the designated constraints aren't met.
type EmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailMultiError) AllErrors() []error { return m }

// EmailValidationError is the validation error returned by Email.Validate if
// the designated constraints aren't met.
type EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailValidationError) ErrorName() string { return "EmailValidationError" }

// Error satisfies the builtin error interface
func (e EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailValidationError{}

// Validate checks the field values on GetSentEmailMessagesByEmailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSentEmailMessagesByEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSentEmailMessagesByEmailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSentEmailMessagesByEmailResponseMultiError, or nil if none found.
func (m *GetSentEmailMessagesByEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSentEmailMessagesByEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSentEmailMessagesByEmailResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSentEmailMessagesByEmailResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSentEmailMessagesByEmailResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetSentEmailMessagesByEmailResponseMultiError(errors)
	}

	return nil
}

// GetSentEmailMessagesByEmailResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetSentEmailMessagesByEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSentEmailMessagesByEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSentEmailMessagesByEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSentEmailMessagesByEmailResponseMultiError) AllErrors() []error { return m }

// GetSentEmailMessagesByEmailResponseValidationError is the validation error
// returned by GetSentEmailMessagesByEmailResponse.Validate if the designated
// constraints aren't met.
type GetSentEmailMessagesByEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSentEmailMessagesByEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSentEmailMessagesByEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSentEmailMessagesByEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSentEmailMessagesByEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSentEmailMessagesByEmailResponseValidationError) ErrorName() string {
	return "GetSentEmailMessagesByEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSentEmailMessagesByEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSentEmailMessagesByEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSentEmailMessagesByEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSentEmailMessagesByEmailResponseValidationError{}

// Validate checks the field values on SendPasswordChangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPasswordChangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPasswordChangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPasswordChangeRequestMultiError, or nil if none found.
func (m *SendPasswordChangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPasswordChangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendPasswordChangeRequestMultiError(errors)
	}

	return nil
}

// SendPasswordChangeRequestMultiError is an error wrapping multiple validation
// errors returned by SendPasswordChangeRequest.ValidateAll() if the
// designated constraints aren't met.
type SendPasswordChangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPasswordChangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPasswordChangeRequestMultiError) AllErrors() []error { return m }

// SendPasswordChangeRequestValidationError is the validation error returned by
// SendPasswordChangeRequest.Validate if the designated constraints aren't met.
type SendPasswordChangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordChangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordChangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordChangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordChangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordChangeRequestValidationError) ErrorName() string {
	return "SendPasswordChangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordChangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordChangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordChangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordChangeRequestValidationError{}

// Validate checks the field values on SendPasswordChangeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPasswordChangeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPasswordChangeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPasswordChangeResponseMultiError, or nil if none found.
func (m *SendPasswordChangeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPasswordChangeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendPasswordChangeResponseMultiError(errors)
	}

	return nil
}

// SendPasswordChangeResponseMultiError is an error wrapping multiple
// validation errors returned by SendPasswordChangeResponse.ValidateAll() if
// the designated constraints aren't met.
type SendPasswordChangeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPasswordChangeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPasswordChangeResponseMultiError) AllErrors() []error { return m }

// SendPasswordChangeResponseValidationError is the validation error returned
// by SendPasswordChangeResponse.Validate if the designated constraints aren't met.
type SendPasswordChangeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordChangeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordChangeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordChangeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordChangeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordChangeResponseValidationError) ErrorName() string {
	return "SendPasswordChangeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordChangeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordChangeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordChangeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordChangeResponseValidationError{}

// Validate checks the field values on SendPhoneDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPhoneDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPhoneDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPhoneDeleteRequestMultiError, or nil if none found.
func (m *SendPhoneDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPhoneDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendPhoneDeleteRequestMultiError(errors)
	}

	return nil
}

// SendPhoneDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by SendPhoneDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SendPhoneDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPhoneDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPhoneDeleteRequestMultiError) AllErrors() []error { return m }

// SendPhoneDeleteRequestValidationError is the validation error returned by
// SendPhoneDeleteRequest.Validate if the designated constraints aren't met.
type SendPhoneDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPhoneDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPhoneDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPhoneDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPhoneDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPhoneDeleteRequestValidationError) ErrorName() string {
	return "SendPhoneDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendPhoneDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPhoneDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPhoneDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPhoneDeleteRequestValidationError{}

// Validate checks the field values on SendPhoneDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPhoneDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPhoneDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPhoneDeleteResponseMultiError, or nil if none found.
func (m *SendPhoneDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPhoneDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendPhoneDeleteResponseMultiError(errors)
	}

	return nil
}

// SendPhoneDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by SendPhoneDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type SendPhoneDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPhoneDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPhoneDeleteResponseMultiError) AllErrors() []error { return m }

// SendPhoneDeleteResponseValidationError is the validation error returned by
// SendPhoneDeleteResponse.Validate if the designated constraints aren't met.
type SendPhoneDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPhoneDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPhoneDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPhoneDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPhoneDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPhoneDeleteResponseValidationError) ErrorName() string {
	return "SendPhoneDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendPhoneDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPhoneDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPhoneDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPhoneDeleteResponseValidationError{}

// Validate checks the field values on Attachment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attachment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttachmentMultiError, or
// nil if none found.
func (m *Attachment) ValidateAll() error {
	return m.validate(true)
}

func (m *Attachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Body

	if len(errors) > 0 {
		return AttachmentMultiError(errors)
	}

	return nil
}

// AttachmentMultiError is an error wrapping multiple validation errors
// returned by Attachment.ValidateAll() if the designated constraints aren't met.
type AttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentMultiError) AllErrors() []error { return m }

// AttachmentValidationError is the validation error returned by
// Attachment.Validate if the designated constraints aren't met.
type AttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentValidationError) ErrorName() string { return "AttachmentValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentValidationError{}

// Validate checks the field values on SendReferralRewardPayoutsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendReferralRewardPayoutsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendReferralRewardPayoutsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendReferralRewardPayoutsRequestMultiError, or nil if none found.
func (m *SendReferralRewardPayoutsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendReferralRewardPayoutsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendReferralRewardPayoutsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendReferralRewardPayoutsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendReferralRewardPayoutsRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendReferralRewardPayoutsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendReferralRewardPayoutsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendReferralRewardPayoutsRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendReferralRewardPayoutsRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendReferralRewardPayoutsRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendReferralRewardPayoutsRequestValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Domain

	// no validation rules for UserId

	if len(errors) > 0 {
		return SendReferralRewardPayoutsRequestMultiError(errors)
	}

	return nil
}

// SendReferralRewardPayoutsRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendReferralRewardPayoutsRequest.ValidateAll() if the designated
// constraints aren't met.
type SendReferralRewardPayoutsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendReferralRewardPayoutsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendReferralRewardPayoutsRequestMultiError) AllErrors() []error { return m }

// SendReferralRewardPayoutsRequestValidationError is the validation error
// returned by SendReferralRewardPayoutsRequest.Validate if the designated
// constraints aren't met.
type SendReferralRewardPayoutsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendReferralRewardPayoutsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendReferralRewardPayoutsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendReferralRewardPayoutsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendReferralRewardPayoutsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendReferralRewardPayoutsRequestValidationError) ErrorName() string {
	return "SendReferralRewardPayoutsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendReferralRewardPayoutsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendReferralRewardPayoutsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendReferralRewardPayoutsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendReferralRewardPayoutsRequestValidationError{}

// Validate checks the field values on SendReferralRewardPayoutsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendReferralRewardPayoutsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendReferralRewardPayoutsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendReferralRewardPayoutsResponseMultiError, or nil if none found.
func (m *SendReferralRewardPayoutsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendReferralRewardPayoutsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendReferralRewardPayoutsResponseMultiError(errors)
	}

	return nil
}

// SendReferralRewardPayoutsResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendReferralRewardPayoutsResponse.ValidateAll() if the designated
// constraints aren't met.
type SendReferralRewardPayoutsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendReferralRewardPayoutsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendReferralRewardPayoutsResponseMultiError) AllErrors() []error { return m }

// SendReferralRewardPayoutsResponseValidationError is the validation error
// returned by SendReferralRewardPayoutsResponse.Validate if the designated
// constraints aren't met.
type SendReferralRewardPayoutsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendReferralRewardPayoutsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendReferralRewardPayoutsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendReferralRewardPayoutsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendReferralRewardPayoutsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendReferralRewardPayoutsResponseValidationError) ErrorName() string {
	return "SendReferralRewardPayoutsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendReferralRewardPayoutsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendReferralRewardPayoutsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendReferralRewardPayoutsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendReferralRewardPayoutsResponseValidationError{}

// Validate checks the field values on SendChangeEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendChangeEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendChangeEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendChangeEmailRequestMultiError, or nil if none found.
func (m *SendChangeEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendChangeEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhiteLabelID

	// no validation rules for Token

	// no validation rules for Email

	// no validation rules for Language

	// no validation rules for Domain

	if len(errors) > 0 {
		return SendChangeEmailRequestMultiError(errors)
	}

	return nil
}

// SendChangeEmailRequestMultiError is an error wrapping multiple validation
// errors returned by SendChangeEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type SendChangeEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendChangeEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendChangeEmailRequestMultiError) AllErrors() []error { return m }

// SendChangeEmailRequestValidationError is the validation error returned by
// SendChangeEmailRequest.Validate if the designated constraints aren't met.
type SendChangeEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendChangeEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendChangeEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendChangeEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendChangeEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendChangeEmailRequestValidationError) ErrorName() string {
	return "SendChangeEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendChangeEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendChangeEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendChangeEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendChangeEmailRequestValidationError{}

// Validate checks the field values on SendChangeEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendChangeEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendChangeEmailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendChangeEmailResponseMultiError, or nil if none found.
func (m *SendChangeEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendChangeEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendChangeEmailResponseMultiError(errors)
	}

	return nil
}

// SendChangeEmailResponseMultiError is an error wrapping multiple validation
// errors returned by SendChangeEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type SendChangeEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendChangeEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendChangeEmailResponseMultiError) AllErrors() []error { return m }

// SendChangeEmailResponseValidationError is the validation error returned by
// SendChangeEmailResponse.Validate if the designated constraints aren't met.
type SendChangeEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendChangeEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendChangeEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendChangeEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendChangeEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendChangeEmailResponseValidationError) ErrorName() string {
	return "SendChangeEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendChangeEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendChangeEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendChangeEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendChangeEmailResponseValidationError{}

// Validate checks the field values on SendStatisticsReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStatisticsReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStatisticsReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendStatisticsReportRequestMultiError, or nil if none found.
func (m *SendStatisticsReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStatisticsReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Language

	// no validation rules for ReportLink

	// no validation rules for ReportType

	if len(errors) > 0 {
		return SendStatisticsReportRequestMultiError(errors)
	}

	return nil
}

// SendStatisticsReportRequestMultiError is an error wrapping multiple
// validation errors returned by SendStatisticsReportRequest.ValidateAll() if
// the designated constraints aren't met.
type SendStatisticsReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStatisticsReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStatisticsReportRequestMultiError) AllErrors() []error { return m }

// SendStatisticsReportRequestValidationError is the validation error returned
// by SendStatisticsReportRequest.Validate if the designated constraints
// aren't met.
type SendStatisticsReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStatisticsReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStatisticsReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStatisticsReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStatisticsReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStatisticsReportRequestValidationError) ErrorName() string {
	return "SendStatisticsReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendStatisticsReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStatisticsReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStatisticsReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStatisticsReportRequestValidationError{}

// Validate checks the field values on SendStatisticsReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendStatisticsReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendStatisticsReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendStatisticsReportResponseMultiError, or nil if none found.
func (m *SendStatisticsReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendStatisticsReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendStatisticsReportResponseMultiError(errors)
	}

	return nil
}

// SendStatisticsReportResponseMultiError is an error wrapping multiple
// validation errors returned by SendStatisticsReportResponse.ValidateAll() if
// the designated constraints aren't met.
type SendStatisticsReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendStatisticsReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendStatisticsReportResponseMultiError) AllErrors() []error { return m }

// SendStatisticsReportResponseValidationError is the validation error returned
// by SendStatisticsReportResponse.Validate if the designated constraints
// aren't met.
type SendStatisticsReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendStatisticsReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendStatisticsReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendStatisticsReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendStatisticsReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendStatisticsReportResponseValidationError) ErrorName() string {
	return "SendStatisticsReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendStatisticsReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendStatisticsReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendStatisticsReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendStatisticsReportResponseValidationError{}

// Validate checks the field values on SendSwapSupportMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSwapSupportMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSwapSupportMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendSwapSupportMessageRequestMultiError, or nil if none found.
func (m *SendSwapSupportMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSwapSupportMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for UserEmail

	// no validation rules for Text

	if len(errors) > 0 {
		return SendSwapSupportMessageRequestMultiError(errors)
	}

	return nil
}

// SendSwapSupportMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendSwapSupportMessageRequest.ValidateAll()
// if the designated constraints aren't met.
type SendSwapSupportMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSwapSupportMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSwapSupportMessageRequestMultiError) AllErrors() []error { return m }

// SendSwapSupportMessageRequestValidationError is the validation error
// returned by SendSwapSupportMessageRequest.Validate if the designated
// constraints aren't met.
type SendSwapSupportMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSwapSupportMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSwapSupportMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSwapSupportMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSwapSupportMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSwapSupportMessageRequestValidationError) ErrorName() string {
	return "SendSwapSupportMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendSwapSupportMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSwapSupportMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSwapSupportMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSwapSupportMessageRequestValidationError{}

// Validate checks the field values on SendSwapSupportMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSwapSupportMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSwapSupportMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendSwapSupportMessageResponseMultiError, or nil if none found.
func (m *SendSwapSupportMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSwapSupportMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendSwapSupportMessageResponseMultiError(errors)
	}

	return nil
}

// SendSwapSupportMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendSwapSupportMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type SendSwapSupportMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSwapSupportMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSwapSupportMessageResponseMultiError) AllErrors() []error { return m }

// SendSwapSupportMessageResponseValidationError is the validation error
// returned by SendSwapSupportMessageResponse.Validate if the designated
// constraints aren't met.
type SendSwapSupportMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSwapSupportMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSwapSupportMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSwapSupportMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSwapSupportMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSwapSupportMessageResponseValidationError) ErrorName() string {
	return "SendSwapSupportMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendSwapSupportMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSwapSupportMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSwapSupportMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSwapSupportMessageResponseValidationError{}

// Validate checks the field values on SendInitialSwapMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendInitialSwapMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendInitialSwapMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendInitialSwapMessageRequestMultiError, or nil if none found.
func (m *SendInitialSwapMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendInitialSwapMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Language

	// no validation rules for Link

	if len(errors) > 0 {
		return SendInitialSwapMessageRequestMultiError(errors)
	}

	return nil
}

// SendInitialSwapMessageRequestMultiError is an error wrapping multiple
// validation errors returned by SendInitialSwapMessageRequest.ValidateAll()
// if the designated constraints aren't met.
type SendInitialSwapMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendInitialSwapMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendInitialSwapMessageRequestMultiError) AllErrors() []error { return m }

// SendInitialSwapMessageRequestValidationError is the validation error
// returned by SendInitialSwapMessageRequest.Validate if the designated
// constraints aren't met.
type SendInitialSwapMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInitialSwapMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInitialSwapMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInitialSwapMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInitialSwapMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInitialSwapMessageRequestValidationError) ErrorName() string {
	return "SendInitialSwapMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendInitialSwapMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInitialSwapMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInitialSwapMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInitialSwapMessageRequestValidationError{}

// Validate checks the field values on SendInitialSwapMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendInitialSwapMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendInitialSwapMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendInitialSwapMessageResponseMultiError, or nil if none found.
func (m *SendInitialSwapMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendInitialSwapMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendInitialSwapMessageResponseMultiError(errors)
	}

	return nil
}

// SendInitialSwapMessageResponseMultiError is an error wrapping multiple
// validation errors returned by SendInitialSwapMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type SendInitialSwapMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendInitialSwapMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendInitialSwapMessageResponseMultiError) AllErrors() []error { return m }

// SendInitialSwapMessageResponseValidationError is the validation error
// returned by SendInitialSwapMessageResponse.Validate if the designated
// constraints aren't met.
type SendInitialSwapMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInitialSwapMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInitialSwapMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInitialSwapMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInitialSwapMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInitialSwapMessageResponseValidationError) ErrorName() string {
	return "SendInitialSwapMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendInitialSwapMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInitialSwapMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInitialSwapMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInitialSwapMessageResponseValidationError{}

// Validate checks the field values on SendSuccessfulSwapMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendSuccessfulSwapMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSuccessfulSwapMessageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendSuccessfulSwapMessageRequestMultiError, or nil if none found.
func (m *SendSuccessfulSwapMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSuccessfulSwapMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Language

	// no validation rules for SwapId

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Address

	// no validation rules for ExecutionTime

	if len(errors) > 0 {
		return SendSuccessfulSwapMessageRequestMultiError(errors)
	}

	return nil
}

// SendSuccessfulSwapMessageRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendSuccessfulSwapMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type SendSuccessfulSwapMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSuccessfulSwapMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSuccessfulSwapMessageRequestMultiError) AllErrors() []error { return m }

// SendSuccessfulSwapMessageRequestValidationError is the validation error
// returned by SendSuccessfulSwapMessageRequest.Validate if the designated
// constraints aren't met.
type SendSuccessfulSwapMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSuccessfulSwapMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSuccessfulSwapMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSuccessfulSwapMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSuccessfulSwapMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSuccessfulSwapMessageRequestValidationError) ErrorName() string {
	return "SendSuccessfulSwapMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendSuccessfulSwapMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSuccessfulSwapMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSuccessfulSwapMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSuccessfulSwapMessageRequestValidationError{}

// Validate checks the field values on SendSuccessfulSwapMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendSuccessfulSwapMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSuccessfulSwapMessageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendSuccessfulSwapMessageResponseMultiError, or nil if none found.
func (m *SendSuccessfulSwapMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSuccessfulSwapMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendSuccessfulSwapMessageResponseMultiError(errors)
	}

	return nil
}

// SendSuccessfulSwapMessageResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendSuccessfulSwapMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type SendSuccessfulSwapMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSuccessfulSwapMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSuccessfulSwapMessageResponseMultiError) AllErrors() []error { return m }

// SendSuccessfulSwapMessageResponseValidationError is the validation error
// returned by SendSuccessfulSwapMessageResponse.Validate if the designated
// constraints aren't met.
type SendSuccessfulSwapMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSuccessfulSwapMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSuccessfulSwapMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSuccessfulSwapMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSuccessfulSwapMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSuccessfulSwapMessageResponseValidationError) ErrorName() string {
	return "SendSuccessfulSwapMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendSuccessfulSwapMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSuccessfulSwapMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSuccessfulSwapMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSuccessfulSwapMessageResponseValidationError{}
