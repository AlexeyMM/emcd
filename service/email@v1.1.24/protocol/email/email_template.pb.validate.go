// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/proto/email_template.proto

package email

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmailTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmailTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmailTemplateMultiError, or
// nil if none found.
func (m *EmailTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhiteLabelId

	// no validation rules for Language

	// no validation rules for Type

	// no validation rules for Template

	// no validation rules for Subject

	// no validation rules for Footer

	if len(errors) > 0 {
		return EmailTemplateMultiError(errors)
	}

	return nil
}

// EmailTemplateMultiError is an error wrapping multiple validation errors
// returned by EmailTemplate.ValidateAll() if the designated constraints
// aren't met.
type EmailTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailTemplateMultiError) AllErrors() []error { return m }

// EmailTemplateValidationError is the validation error returned by
// EmailTemplate.Validate if the designated constraints aren't met.
type EmailTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailTemplateValidationError) ErrorName() string { return "EmailTemplateValidationError" }

// Error satisfies the builtin error interface
func (e EmailTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailTemplateValidationError{}

// Validate checks the field values on CreateEmailTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEmailTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmailTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEmailTemplateRequestMultiError, or nil if none found.
func (m *CreateEmailTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmailTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEmailTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEmailTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEmailTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEmailTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateEmailTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by CreateEmailTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateEmailTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmailTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmailTemplateRequestMultiError) AllErrors() []error { return m }

// CreateEmailTemplateRequestValidationError is the validation error returned
// by CreateEmailTemplateRequest.Validate if the designated constraints aren't met.
type CreateEmailTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmailTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmailTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmailTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmailTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmailTemplateRequestValidationError) ErrorName() string {
	return "CreateEmailTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmailTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmailTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmailTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmailTemplateRequestValidationError{}

// Validate checks the field values on CreateEmailTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEmailTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmailTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEmailTemplateResponseMultiError, or nil if none found.
func (m *CreateEmailTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmailTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateEmailTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateEmailTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by CreateEmailTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateEmailTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmailTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmailTemplateResponseMultiError) AllErrors() []error { return m }

// CreateEmailTemplateResponseValidationError is the validation error returned
// by CreateEmailTemplateResponse.Validate if the designated constraints
// aren't met.
type CreateEmailTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmailTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmailTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmailTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmailTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmailTemplateResponseValidationError) ErrorName() string {
	return "CreateEmailTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmailTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmailTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmailTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmailTemplateResponseValidationError{}

// Validate checks the field values on GetEmailTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailTemplateRequestMultiError, or nil if none found.
func (m *GetEmailTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhiteLabelId

	// no validation rules for Language

	// no validation rules for Type

	if len(errors) > 0 {
		return GetEmailTemplateRequestMultiError(errors)
	}

	return nil
}

// GetEmailTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by GetEmailTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEmailTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailTemplateRequestMultiError) AllErrors() []error { return m }

// GetEmailTemplateRequestValidationError is the validation error returned by
// GetEmailTemplateRequest.Validate if the designated constraints aren't met.
type GetEmailTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailTemplateRequestValidationError) ErrorName() string {
	return "GetEmailTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailTemplateRequestValidationError{}

// Validate checks the field values on GetEmailTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailTemplateResponseMultiError, or nil if none found.
func (m *GetEmailTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEmailTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEmailTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEmailTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEmailTemplateResponseMultiError(errors)
	}

	return nil
}

// GetEmailTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetEmailTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEmailTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailTemplateResponseMultiError) AllErrors() []error { return m }

// GetEmailTemplateResponseValidationError is the validation error returned by
// GetEmailTemplateResponse.Validate if the designated constraints aren't met.
type GetEmailTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailTemplateResponseValidationError) ErrorName() string {
	return "GetEmailTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailTemplateResponseValidationError{}

// Validate checks the field values on UpdateEmailTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmailTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmailTemplateRequestMultiError, or nil if none found.
func (m *UpdateEmailTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEmailTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEmailTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEmailTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEmailTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateEmailTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateEmailTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateEmailTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateEmailTemplateRequestValidationError is the validation error returned
// by UpdateEmailTemplateRequest.Validate if the designated constraints aren't met.
type UpdateEmailTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailTemplateRequestValidationError) ErrorName() string {
	return "UpdateEmailTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailTemplateRequestValidationError{}

// Validate checks the field values on UpdateEmailTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmailTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmailTemplateResponseMultiError, or nil if none found.
func (m *UpdateEmailTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEmailTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateEmailTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateEmailTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateEmailTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateEmailTemplateResponseValidationError is the validation error returned
// by UpdateEmailTemplateResponse.Validate if the designated constraints
// aren't met.
type UpdateEmailTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailTemplateResponseValidationError) ErrorName() string {
	return "UpdateEmailTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailTemplateResponseValidationError{}

// Validate checks the field values on DeleteEmailTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEmailTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmailTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEmailTemplateRequestMultiError, or nil if none found.
func (m *DeleteEmailTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmailTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhiteLabelID

	// no validation rules for Language

	// no validation rules for Type

	if len(errors) > 0 {
		return DeleteEmailTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteEmailTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteEmailTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteEmailTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmailTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmailTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteEmailTemplateRequestValidationError is the validation error returned
// by DeleteEmailTemplateRequest.Validate if the designated constraints aren't met.
type DeleteEmailTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmailTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmailTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmailTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmailTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmailTemplateRequestValidationError) ErrorName() string {
	return "DeleteEmailTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmailTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmailTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmailTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmailTemplateRequestValidationError{}

// Validate checks the field values on DeleteEmailTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEmailTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmailTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEmailTemplateResponseMultiError, or nil if none found.
func (m *DeleteEmailTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmailTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEmailTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteEmailTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteEmailTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteEmailTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmailTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmailTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteEmailTemplateResponseValidationError is the validation error returned
// by DeleteEmailTemplateResponse.Validate if the designated constraints
// aren't met.
type DeleteEmailTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmailTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmailTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmailTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmailTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmailTemplateResponseValidationError) ErrorName() string {
	return "DeleteEmailTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmailTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmailTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmailTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmailTemplateResponseValidationError{}

// Validate checks the field values on ListEmailTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmailTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmailTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmailTemplateRequestMultiError, or nil if none found.
func (m *ListEmailTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmailTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListEmailTemplateRequestMultiError(errors)
	}

	return nil
}

// ListEmailTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by ListEmailTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEmailTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmailTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmailTemplateRequestMultiError) AllErrors() []error { return m }

// ListEmailTemplateRequestValidationError is the validation error returned by
// ListEmailTemplateRequest.Validate if the designated constraints aren't met.
type ListEmailTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmailTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmailTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmailTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmailTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmailTemplateRequestValidationError) ErrorName() string {
	return "ListEmailTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmailTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmailTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmailTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmailTemplateRequestValidationError{}

// Validate checks the field values on ListEmailTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmailTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmailTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmailTemplateResponseMultiError, or nil if none found.
func (m *ListEmailTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmailTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEmailTemplateResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEmailTemplateResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEmailTemplateResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEmailTemplateResponseMultiError(errors)
	}

	return nil
}

// ListEmailTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by ListEmailTemplateResponse.ValidateAll() if the
// designated constraints aren't met.
type ListEmailTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmailTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmailTemplateResponseMultiError) AllErrors() []error { return m }

// ListEmailTemplateResponseValidationError is the validation error returned by
// ListEmailTemplateResponse.Validate if the designated constraints aren't met.
type ListEmailTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmailTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmailTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmailTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmailTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmailTemplateResponseValidationError) ErrorName() string {
	return "ListEmailTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmailTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmailTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmailTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmailTemplateResponseValidationError{}
