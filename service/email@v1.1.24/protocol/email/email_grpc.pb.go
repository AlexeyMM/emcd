// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protocol/proto/email.proto

package email

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailService_ListMessages_FullMethodName              = "/email.EmailService/ListMessages"
	EmailService_SendPasswordRestoration_FullMethodName   = "/email.EmailService/SendPasswordRestoration"
	EmailService_SendWorkerChangedState_FullMethodName    = "/email.EmailService/SendWorkerChangedState"
	EmailService_SendWalletChangedAddress_FullMethodName  = "/email.EmailService/SendWalletChangedAddress"
	EmailService_SendRegister_FullMethodName              = "/email.EmailService/SendRegister"
	EmailService_SendMobileTwoFaOff_FullMethodName        = "/email.EmailService/SendMobileTwoFaOff"
	EmailService_SendMobileTwoFaOn_FullMethodName         = "/email.EmailService/SendMobileTwoFaOn"
	EmailService_SendGoogleTwoFaOff_FullMethodName        = "/email.EmailService/SendGoogleTwoFaOff"
	EmailService_SendGoogleTwoFaOn_FullMethodName         = "/email.EmailService/SendGoogleTwoFaOn"
	EmailService_SendUserHashrateDecreased_FullMethodName = "/email.EmailService/SendUserHashrateDecreased"
	EmailService_SendPasswordChange_FullMethodName        = "/email.EmailService/SendPasswordChange"
	EmailService_SendPhoneDelete_FullMethodName           = "/email.EmailService/SendPhoneDelete"
	EmailService_SendReferralRewardPayouts_FullMethodName = "/email.EmailService/SendReferralRewardPayouts"
	EmailService_SendChangeEmail_FullMethodName           = "/email.EmailService/SendChangeEmail"
	EmailService_SendStatisticsReport_FullMethodName      = "/email.EmailService/SendStatisticsReport"
	EmailService_SendSwapSupportMessage_FullMethodName    = "/email.EmailService/SendSwapSupportMessage"
	EmailService_SendInitialSwapMessage_FullMethodName    = "/email.EmailService/SendInitialSwapMessage"
	EmailService_SendSuccessfulSwapMessage_FullMethodName = "/email.EmailService/SendSuccessfulSwapMessage"
)

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	ListMessages(ctx context.Context, in *GetSentEmailMessagesByEmailRequest, opts ...grpc.CallOption) (*GetSentEmailMessagesByEmailResponse, error)
	SendPasswordRestoration(ctx context.Context, in *SendPasswordRestorationRequest, opts ...grpc.CallOption) (*SendPasswordRestorationResponse, error)
	SendWorkerChangedState(ctx context.Context, in *SendWorkerChangedStateRequest, opts ...grpc.CallOption) (*SendWorkerChangedStateResponse, error)
	SendWalletChangedAddress(ctx context.Context, in *SendWalletChangedAddressRequest, opts ...grpc.CallOption) (*SendWalletChangedAddressResponse, error)
	SendRegister(ctx context.Context, in *SendRegisterRequest, opts ...grpc.CallOption) (*SendRegisterResponse, error)
	SendMobileTwoFaOff(ctx context.Context, in *SendMobileTwoFaOffRequest, opts ...grpc.CallOption) (*SendMobileTwoFaOffResponse, error)
	SendMobileTwoFaOn(ctx context.Context, in *SendMobileTwoFaOnRequest, opts ...grpc.CallOption) (*SendMobileTwoFaOnResponse, error)
	SendGoogleTwoFaOff(ctx context.Context, in *SendGoogleTwoFaOffRequest, opts ...grpc.CallOption) (*SendGoogleTwoFaOffResponse, error)
	SendGoogleTwoFaOn(ctx context.Context, in *SendGoogleTwoFaOnRequest, opts ...grpc.CallOption) (*SendGoogleTwoFaOnResponse, error)
	SendUserHashrateDecreased(ctx context.Context, in *SendUserHashrateDecreasedRequest, opts ...grpc.CallOption) (*SendUserHashrateDecreasedResponse, error)
	SendPasswordChange(ctx context.Context, in *SendPasswordChangeRequest, opts ...grpc.CallOption) (*SendPasswordChangeResponse, error)
	SendPhoneDelete(ctx context.Context, in *SendPhoneDeleteRequest, opts ...grpc.CallOption) (*SendPhoneDeleteResponse, error)
	SendReferralRewardPayouts(ctx context.Context, in *SendReferralRewardPayoutsRequest, opts ...grpc.CallOption) (*SendReferralRewardPayoutsResponse, error)
	SendChangeEmail(ctx context.Context, in *SendChangeEmailRequest, opts ...grpc.CallOption) (*SendChangeEmailResponse, error)
	SendStatisticsReport(ctx context.Context, in *SendStatisticsReportRequest, opts ...grpc.CallOption) (*SendStatisticsReportResponse, error)
	// SendSwapSupportMessage B2B, здесь пользователь - клиент B2B-партнёра и не зарегистрирован в нашей базе данных
	// отправляет электронное письмо в службу поддержки от пользователя.
	// Функция принимает: имя, email и текст сообщения.
	SendSwapSupportMessage(ctx context.Context, in *SendSwapSupportMessageRequest, opts ...grpc.CallOption) (*SendSwapSupportMessageResponse, error)
	// SendInitialSwapMessage B2B, здесь пользователь - клиент B2B-партнёра и не зарегистрирован в нашей базе данных
	// отправляет электронное письмо пользователю при инициализации свопа,
	// со ссылкой на страницу с актуальным статусом свопа
	SendInitialSwapMessage(ctx context.Context, in *SendInitialSwapMessageRequest, opts ...grpc.CallOption) (*SendInitialSwapMessageResponse, error)
	// SendSuccessfulSwapMessage B2B, здесь пользователь - клиент B2B-партнёра и не зарегистрирован в нашей базе данных
	// отправляет письмо после успешного завершения свопа
	// запрос выполняет swap service, все данные хранятся в базе swap
	SendSuccessfulSwapMessage(ctx context.Context, in *SendSuccessfulSwapMessageRequest, opts ...grpc.CallOption) (*SendSuccessfulSwapMessageResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) ListMessages(ctx context.Context, in *GetSentEmailMessagesByEmailRequest, opts ...grpc.CallOption) (*GetSentEmailMessagesByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSentEmailMessagesByEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendPasswordRestoration(ctx context.Context, in *SendPasswordRestorationRequest, opts ...grpc.CallOption) (*SendPasswordRestorationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPasswordRestorationResponse)
	err := c.cc.Invoke(ctx, EmailService_SendPasswordRestoration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendWorkerChangedState(ctx context.Context, in *SendWorkerChangedStateRequest, opts ...grpc.CallOption) (*SendWorkerChangedStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendWorkerChangedStateResponse)
	err := c.cc.Invoke(ctx, EmailService_SendWorkerChangedState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendWalletChangedAddress(ctx context.Context, in *SendWalletChangedAddressRequest, opts ...grpc.CallOption) (*SendWalletChangedAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendWalletChangedAddressResponse)
	err := c.cc.Invoke(ctx, EmailService_SendWalletChangedAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendRegister(ctx context.Context, in *SendRegisterRequest, opts ...grpc.CallOption) (*SendRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendRegisterResponse)
	err := c.cc.Invoke(ctx, EmailService_SendRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendMobileTwoFaOff(ctx context.Context, in *SendMobileTwoFaOffRequest, opts ...grpc.CallOption) (*SendMobileTwoFaOffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMobileTwoFaOffResponse)
	err := c.cc.Invoke(ctx, EmailService_SendMobileTwoFaOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendMobileTwoFaOn(ctx context.Context, in *SendMobileTwoFaOnRequest, opts ...grpc.CallOption) (*SendMobileTwoFaOnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMobileTwoFaOnResponse)
	err := c.cc.Invoke(ctx, EmailService_SendMobileTwoFaOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendGoogleTwoFaOff(ctx context.Context, in *SendGoogleTwoFaOffRequest, opts ...grpc.CallOption) (*SendGoogleTwoFaOffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGoogleTwoFaOffResponse)
	err := c.cc.Invoke(ctx, EmailService_SendGoogleTwoFaOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendGoogleTwoFaOn(ctx context.Context, in *SendGoogleTwoFaOnRequest, opts ...grpc.CallOption) (*SendGoogleTwoFaOnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGoogleTwoFaOnResponse)
	err := c.cc.Invoke(ctx, EmailService_SendGoogleTwoFaOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendUserHashrateDecreased(ctx context.Context, in *SendUserHashrateDecreasedRequest, opts ...grpc.CallOption) (*SendUserHashrateDecreasedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUserHashrateDecreasedResponse)
	err := c.cc.Invoke(ctx, EmailService_SendUserHashrateDecreased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendPasswordChange(ctx context.Context, in *SendPasswordChangeRequest, opts ...grpc.CallOption) (*SendPasswordChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPasswordChangeResponse)
	err := c.cc.Invoke(ctx, EmailService_SendPasswordChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendPhoneDelete(ctx context.Context, in *SendPhoneDeleteRequest, opts ...grpc.CallOption) (*SendPhoneDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPhoneDeleteResponse)
	err := c.cc.Invoke(ctx, EmailService_SendPhoneDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendReferralRewardPayouts(ctx context.Context, in *SendReferralRewardPayoutsRequest, opts ...grpc.CallOption) (*SendReferralRewardPayoutsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendReferralRewardPayoutsResponse)
	err := c.cc.Invoke(ctx, EmailService_SendReferralRewardPayouts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendChangeEmail(ctx context.Context, in *SendChangeEmailRequest, opts ...grpc.CallOption) (*SendChangeEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendChangeEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendStatisticsReport(ctx context.Context, in *SendStatisticsReportRequest, opts ...grpc.CallOption) (*SendStatisticsReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendStatisticsReportResponse)
	err := c.cc.Invoke(ctx, EmailService_SendStatisticsReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendSwapSupportMessage(ctx context.Context, in *SendSwapSupportMessageRequest, opts ...grpc.CallOption) (*SendSwapSupportMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSwapSupportMessageResponse)
	err := c.cc.Invoke(ctx, EmailService_SendSwapSupportMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendInitialSwapMessage(ctx context.Context, in *SendInitialSwapMessageRequest, opts ...grpc.CallOption) (*SendInitialSwapMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendInitialSwapMessageResponse)
	err := c.cc.Invoke(ctx, EmailService_SendInitialSwapMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendSuccessfulSwapMessage(ctx context.Context, in *SendSuccessfulSwapMessageRequest, opts ...grpc.CallOption) (*SendSuccessfulSwapMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSuccessfulSwapMessageResponse)
	err := c.cc.Invoke(ctx, EmailService_SendSuccessfulSwapMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility.
type EmailServiceServer interface {
	ListMessages(context.Context, *GetSentEmailMessagesByEmailRequest) (*GetSentEmailMessagesByEmailResponse, error)
	SendPasswordRestoration(context.Context, *SendPasswordRestorationRequest) (*SendPasswordRestorationResponse, error)
	SendWorkerChangedState(context.Context, *SendWorkerChangedStateRequest) (*SendWorkerChangedStateResponse, error)
	SendWalletChangedAddress(context.Context, *SendWalletChangedAddressRequest) (*SendWalletChangedAddressResponse, error)
	SendRegister(context.Context, *SendRegisterRequest) (*SendRegisterResponse, error)
	SendMobileTwoFaOff(context.Context, *SendMobileTwoFaOffRequest) (*SendMobileTwoFaOffResponse, error)
	SendMobileTwoFaOn(context.Context, *SendMobileTwoFaOnRequest) (*SendMobileTwoFaOnResponse, error)
	SendGoogleTwoFaOff(context.Context, *SendGoogleTwoFaOffRequest) (*SendGoogleTwoFaOffResponse, error)
	SendGoogleTwoFaOn(context.Context, *SendGoogleTwoFaOnRequest) (*SendGoogleTwoFaOnResponse, error)
	SendUserHashrateDecreased(context.Context, *SendUserHashrateDecreasedRequest) (*SendUserHashrateDecreasedResponse, error)
	SendPasswordChange(context.Context, *SendPasswordChangeRequest) (*SendPasswordChangeResponse, error)
	SendPhoneDelete(context.Context, *SendPhoneDeleteRequest) (*SendPhoneDeleteResponse, error)
	SendReferralRewardPayouts(context.Context, *SendReferralRewardPayoutsRequest) (*SendReferralRewardPayoutsResponse, error)
	SendChangeEmail(context.Context, *SendChangeEmailRequest) (*SendChangeEmailResponse, error)
	SendStatisticsReport(context.Context, *SendStatisticsReportRequest) (*SendStatisticsReportResponse, error)
	// SendSwapSupportMessage B2B, здесь пользователь - клиент B2B-партнёра и не зарегистрирован в нашей базе данных
	// отправляет электронное письмо в службу поддержки от пользователя.
	// Функция принимает: имя, email и текст сообщения.
	SendSwapSupportMessage(context.Context, *SendSwapSupportMessageRequest) (*SendSwapSupportMessageResponse, error)
	// SendInitialSwapMessage B2B, здесь пользователь - клиент B2B-партнёра и не зарегистрирован в нашей базе данных
	// отправляет электронное письмо пользователю при инициализации свопа,
	// со ссылкой на страницу с актуальным статусом свопа
	SendInitialSwapMessage(context.Context, *SendInitialSwapMessageRequest) (*SendInitialSwapMessageResponse, error)
	// SendSuccessfulSwapMessage B2B, здесь пользователь - клиент B2B-партнёра и не зарегистрирован в нашей базе данных
	// отправляет письмо после успешного завершения свопа
	// запрос выполняет swap service, все данные хранятся в базе swap
	SendSuccessfulSwapMessage(context.Context, *SendSuccessfulSwapMessageRequest) (*SendSuccessfulSwapMessageResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailServiceServer struct{}

func (UnimplementedEmailServiceServer) ListMessages(context.Context, *GetSentEmailMessagesByEmailRequest) (*GetSentEmailMessagesByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedEmailServiceServer) SendPasswordRestoration(context.Context, *SendPasswordRestorationRequest) (*SendPasswordRestorationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordRestoration not implemented")
}
func (UnimplementedEmailServiceServer) SendWorkerChangedState(context.Context, *SendWorkerChangedStateRequest) (*SendWorkerChangedStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWorkerChangedState not implemented")
}
func (UnimplementedEmailServiceServer) SendWalletChangedAddress(context.Context, *SendWalletChangedAddressRequest) (*SendWalletChangedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWalletChangedAddress not implemented")
}
func (UnimplementedEmailServiceServer) SendRegister(context.Context, *SendRegisterRequest) (*SendRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegister not implemented")
}
func (UnimplementedEmailServiceServer) SendMobileTwoFaOff(context.Context, *SendMobileTwoFaOffRequest) (*SendMobileTwoFaOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMobileTwoFaOff not implemented")
}
func (UnimplementedEmailServiceServer) SendMobileTwoFaOn(context.Context, *SendMobileTwoFaOnRequest) (*SendMobileTwoFaOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMobileTwoFaOn not implemented")
}
func (UnimplementedEmailServiceServer) SendGoogleTwoFaOff(context.Context, *SendGoogleTwoFaOffRequest) (*SendGoogleTwoFaOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGoogleTwoFaOff not implemented")
}
func (UnimplementedEmailServiceServer) SendGoogleTwoFaOn(context.Context, *SendGoogleTwoFaOnRequest) (*SendGoogleTwoFaOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGoogleTwoFaOn not implemented")
}
func (UnimplementedEmailServiceServer) SendUserHashrateDecreased(context.Context, *SendUserHashrateDecreasedRequest) (*SendUserHashrateDecreasedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserHashrateDecreased not implemented")
}
func (UnimplementedEmailServiceServer) SendPasswordChange(context.Context, *SendPasswordChangeRequest) (*SendPasswordChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordChange not implemented")
}
func (UnimplementedEmailServiceServer) SendPhoneDelete(context.Context, *SendPhoneDeleteRequest) (*SendPhoneDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneDelete not implemented")
}
func (UnimplementedEmailServiceServer) SendReferralRewardPayouts(context.Context, *SendReferralRewardPayoutsRequest) (*SendReferralRewardPayoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReferralRewardPayouts not implemented")
}
func (UnimplementedEmailServiceServer) SendChangeEmail(context.Context, *SendChangeEmailRequest) (*SendChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChangeEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendStatisticsReport(context.Context, *SendStatisticsReportRequest) (*SendStatisticsReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStatisticsReport not implemented")
}
func (UnimplementedEmailServiceServer) SendSwapSupportMessage(context.Context, *SendSwapSupportMessageRequest) (*SendSwapSupportMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSwapSupportMessage not implemented")
}
func (UnimplementedEmailServiceServer) SendInitialSwapMessage(context.Context, *SendInitialSwapMessageRequest) (*SendInitialSwapMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInitialSwapMessage not implemented")
}
func (UnimplementedEmailServiceServer) SendSuccessfulSwapMessage(context.Context, *SendSuccessfulSwapMessageRequest) (*SendSuccessfulSwapMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSuccessfulSwapMessage not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}
func (UnimplementedEmailServiceServer) testEmbeddedByValue()                      {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	// If the following call panics, it indicates UnimplementedEmailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSentEmailMessagesByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).ListMessages(ctx, req.(*GetSentEmailMessagesByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendPasswordRestoration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordRestorationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendPasswordRestoration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendPasswordRestoration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendPasswordRestoration(ctx, req.(*SendPasswordRestorationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendWorkerChangedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWorkerChangedStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendWorkerChangedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendWorkerChangedState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendWorkerChangedState(ctx, req.(*SendWorkerChangedStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendWalletChangedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWalletChangedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendWalletChangedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendWalletChangedAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendWalletChangedAddress(ctx, req.(*SendWalletChangedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendRegister(ctx, req.(*SendRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendMobileTwoFaOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMobileTwoFaOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendMobileTwoFaOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendMobileTwoFaOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendMobileTwoFaOff(ctx, req.(*SendMobileTwoFaOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendMobileTwoFaOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMobileTwoFaOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendMobileTwoFaOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendMobileTwoFaOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendMobileTwoFaOn(ctx, req.(*SendMobileTwoFaOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendGoogleTwoFaOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGoogleTwoFaOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendGoogleTwoFaOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendGoogleTwoFaOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendGoogleTwoFaOff(ctx, req.(*SendGoogleTwoFaOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendGoogleTwoFaOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGoogleTwoFaOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendGoogleTwoFaOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendGoogleTwoFaOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendGoogleTwoFaOn(ctx, req.(*SendGoogleTwoFaOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendUserHashrateDecreased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserHashrateDecreasedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendUserHashrateDecreased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendUserHashrateDecreased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendUserHashrateDecreased(ctx, req.(*SendUserHashrateDecreasedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendPasswordChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendPasswordChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendPasswordChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendPasswordChange(ctx, req.(*SendPasswordChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendPhoneDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendPhoneDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendPhoneDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendPhoneDelete(ctx, req.(*SendPhoneDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendReferralRewardPayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReferralRewardPayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendReferralRewardPayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendReferralRewardPayouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendReferralRewardPayouts(ctx, req.(*SendReferralRewardPayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendChangeEmail(ctx, req.(*SendChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendStatisticsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendStatisticsReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendStatisticsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendStatisticsReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendStatisticsReport(ctx, req.(*SendStatisticsReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendSwapSupportMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSwapSupportMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendSwapSupportMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendSwapSupportMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendSwapSupportMessage(ctx, req.(*SendSwapSupportMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendInitialSwapMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInitialSwapMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendInitialSwapMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendInitialSwapMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendInitialSwapMessage(ctx, req.(*SendInitialSwapMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendSuccessfulSwapMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSuccessfulSwapMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendSuccessfulSwapMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendSuccessfulSwapMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendSuccessfulSwapMessage(ctx, req.(*SendSuccessfulSwapMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMessages",
			Handler:    _EmailService_ListMessages_Handler,
		},
		{
			MethodName: "SendPasswordRestoration",
			Handler:    _EmailService_SendPasswordRestoration_Handler,
		},
		{
			MethodName: "SendWorkerChangedState",
			Handler:    _EmailService_SendWorkerChangedState_Handler,
		},
		{
			MethodName: "SendWalletChangedAddress",
			Handler:    _EmailService_SendWalletChangedAddress_Handler,
		},
		{
			MethodName: "SendRegister",
			Handler:    _EmailService_SendRegister_Handler,
		},
		{
			MethodName: "SendMobileTwoFaOff",
			Handler:    _EmailService_SendMobileTwoFaOff_Handler,
		},
		{
			MethodName: "SendMobileTwoFaOn",
			Handler:    _EmailService_SendMobileTwoFaOn_Handler,
		},
		{
			MethodName: "SendGoogleTwoFaOff",
			Handler:    _EmailService_SendGoogleTwoFaOff_Handler,
		},
		{
			MethodName: "SendGoogleTwoFaOn",
			Handler:    _EmailService_SendGoogleTwoFaOn_Handler,
		},
		{
			MethodName: "SendUserHashrateDecreased",
			Handler:    _EmailService_SendUserHashrateDecreased_Handler,
		},
		{
			MethodName: "SendPasswordChange",
			Handler:    _EmailService_SendPasswordChange_Handler,
		},
		{
			MethodName: "SendPhoneDelete",
			Handler:    _EmailService_SendPhoneDelete_Handler,
		},
		{
			MethodName: "SendReferralRewardPayouts",
			Handler:    _EmailService_SendReferralRewardPayouts_Handler,
		},
		{
			MethodName: "SendChangeEmail",
			Handler:    _EmailService_SendChangeEmail_Handler,
		},
		{
			MethodName: "SendStatisticsReport",
			Handler:    _EmailService_SendStatisticsReport_Handler,
		},
		{
			MethodName: "SendSwapSupportMessage",
			Handler:    _EmailService_SendSwapSupportMessage_Handler,
		},
		{
			MethodName: "SendInitialSwapMessage",
			Handler:    _EmailService_SendInitialSwapMessage_Handler,
		},
		{
			MethodName: "SendSuccessfulSwapMessage",
			Handler:    _EmailService_SendSuccessfulSwapMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/proto/email.proto",
}
