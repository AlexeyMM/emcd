// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/email/email_provider_settings_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source protocol/email/email_provider_settings_grpc.pb.go -destination protocol/email/email_provider_settings_grpc.mock.pb.go -package email
//

// Package email is a generated GoMock package.
package email

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEmailProviderSettingsServiceClient is a mock of EmailProviderSettingsServiceClient interface.
type MockEmailProviderSettingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailProviderSettingsServiceClientMockRecorder
	isgomock struct{}
}

// MockEmailProviderSettingsServiceClientMockRecorder is the mock recorder for MockEmailProviderSettingsServiceClient.
type MockEmailProviderSettingsServiceClientMockRecorder struct {
	mock *MockEmailProviderSettingsServiceClient
}

// NewMockEmailProviderSettingsServiceClient creates a new mock instance.
func NewMockEmailProviderSettingsServiceClient(ctrl *gomock.Controller) *MockEmailProviderSettingsServiceClient {
	mock := &MockEmailProviderSettingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockEmailProviderSettingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailProviderSettingsServiceClient) EXPECT() *MockEmailProviderSettingsServiceClientMockRecorder {
	return m.recorder
}

// CreateEmailProviderSetting mocks base method.
func (m *MockEmailProviderSettingsServiceClient) CreateEmailProviderSetting(ctx context.Context, in *CreateEmailProviderSettingRequest, opts ...grpc.CallOption) (*CreateEmailProviderSettingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmailProviderSetting", varargs...)
	ret0, _ := ret[0].(*CreateEmailProviderSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailProviderSetting indicates an expected call of CreateEmailProviderSetting.
func (mr *MockEmailProviderSettingsServiceClientMockRecorder) CreateEmailProviderSetting(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailProviderSetting", reflect.TypeOf((*MockEmailProviderSettingsServiceClient)(nil).CreateEmailProviderSetting), varargs...)
}

// DeleteEmailProviderSetting mocks base method.
func (m *MockEmailProviderSettingsServiceClient) DeleteEmailProviderSetting(ctx context.Context, in *DeleteEmailProviderSettingRequest, opts ...grpc.CallOption) (*DeleteEmailProviderSettingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailProviderSetting", varargs...)
	ret0, _ := ret[0].(*DeleteEmailProviderSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailProviderSetting indicates an expected call of DeleteEmailProviderSetting.
func (mr *MockEmailProviderSettingsServiceClientMockRecorder) DeleteEmailProviderSetting(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailProviderSetting", reflect.TypeOf((*MockEmailProviderSettingsServiceClient)(nil).DeleteEmailProviderSetting), varargs...)
}

// GetEmailProviderSetting mocks base method.
func (m *MockEmailProviderSettingsServiceClient) GetEmailProviderSetting(ctx context.Context, in *GetEmailProviderSettingRequest, opts ...grpc.CallOption) (*GetEmailProviderSettingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailProviderSetting", varargs...)
	ret0, _ := ret[0].(*GetEmailProviderSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailProviderSetting indicates an expected call of GetEmailProviderSetting.
func (mr *MockEmailProviderSettingsServiceClientMockRecorder) GetEmailProviderSetting(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailProviderSetting", reflect.TypeOf((*MockEmailProviderSettingsServiceClient)(nil).GetEmailProviderSetting), varargs...)
}

// ListEmailProviderSettings mocks base method.
func (m *MockEmailProviderSettingsServiceClient) ListEmailProviderSettings(ctx context.Context, in *ListEmailProviderSettingsRequest, opts ...grpc.CallOption) (*ListEmailProviderSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailProviderSettings", varargs...)
	ret0, _ := ret[0].(*ListEmailProviderSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailProviderSettings indicates an expected call of ListEmailProviderSettings.
func (mr *MockEmailProviderSettingsServiceClientMockRecorder) ListEmailProviderSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailProviderSettings", reflect.TypeOf((*MockEmailProviderSettingsServiceClient)(nil).ListEmailProviderSettings), varargs...)
}

// UpdateEmailProviderSetting mocks base method.
func (m *MockEmailProviderSettingsServiceClient) UpdateEmailProviderSetting(ctx context.Context, in *UpdateEmailProviderSettingRequest, opts ...grpc.CallOption) (*UpdateEmailProviderSettingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEmailProviderSetting", varargs...)
	ret0, _ := ret[0].(*UpdateEmailProviderSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailProviderSetting indicates an expected call of UpdateEmailProviderSetting.
func (mr *MockEmailProviderSettingsServiceClientMockRecorder) UpdateEmailProviderSetting(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailProviderSetting", reflect.TypeOf((*MockEmailProviderSettingsServiceClient)(nil).UpdateEmailProviderSetting), varargs...)
}

// MockEmailProviderSettingsServiceServer is a mock of EmailProviderSettingsServiceServer interface.
type MockEmailProviderSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailProviderSettingsServiceServerMockRecorder
	isgomock struct{}
}

// MockEmailProviderSettingsServiceServerMockRecorder is the mock recorder for MockEmailProviderSettingsServiceServer.
type MockEmailProviderSettingsServiceServerMockRecorder struct {
	mock *MockEmailProviderSettingsServiceServer
}

// NewMockEmailProviderSettingsServiceServer creates a new mock instance.
func NewMockEmailProviderSettingsServiceServer(ctrl *gomock.Controller) *MockEmailProviderSettingsServiceServer {
	mock := &MockEmailProviderSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockEmailProviderSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailProviderSettingsServiceServer) EXPECT() *MockEmailProviderSettingsServiceServerMockRecorder {
	return m.recorder
}

// CreateEmailProviderSetting mocks base method.
func (m *MockEmailProviderSettingsServiceServer) CreateEmailProviderSetting(arg0 context.Context, arg1 *CreateEmailProviderSettingRequest) (*CreateEmailProviderSettingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailProviderSetting", arg0, arg1)
	ret0, _ := ret[0].(*CreateEmailProviderSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailProviderSetting indicates an expected call of CreateEmailProviderSetting.
func (mr *MockEmailProviderSettingsServiceServerMockRecorder) CreateEmailProviderSetting(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailProviderSetting", reflect.TypeOf((*MockEmailProviderSettingsServiceServer)(nil).CreateEmailProviderSetting), arg0, arg1)
}

// DeleteEmailProviderSetting mocks base method.
func (m *MockEmailProviderSettingsServiceServer) DeleteEmailProviderSetting(arg0 context.Context, arg1 *DeleteEmailProviderSettingRequest) (*DeleteEmailProviderSettingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailProviderSetting", arg0, arg1)
	ret0, _ := ret[0].(*DeleteEmailProviderSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailProviderSetting indicates an expected call of DeleteEmailProviderSetting.
func (mr *MockEmailProviderSettingsServiceServerMockRecorder) DeleteEmailProviderSetting(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailProviderSetting", reflect.TypeOf((*MockEmailProviderSettingsServiceServer)(nil).DeleteEmailProviderSetting), arg0, arg1)
}

// GetEmailProviderSetting mocks base method.
func (m *MockEmailProviderSettingsServiceServer) GetEmailProviderSetting(arg0 context.Context, arg1 *GetEmailProviderSettingRequest) (*GetEmailProviderSettingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailProviderSetting", arg0, arg1)
	ret0, _ := ret[0].(*GetEmailProviderSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailProviderSetting indicates an expected call of GetEmailProviderSetting.
func (mr *MockEmailProviderSettingsServiceServerMockRecorder) GetEmailProviderSetting(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailProviderSetting", reflect.TypeOf((*MockEmailProviderSettingsServiceServer)(nil).GetEmailProviderSetting), arg0, arg1)
}

// ListEmailProviderSettings mocks base method.
func (m *MockEmailProviderSettingsServiceServer) ListEmailProviderSettings(arg0 context.Context, arg1 *ListEmailProviderSettingsRequest) (*ListEmailProviderSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailProviderSettings", arg0, arg1)
	ret0, _ := ret[0].(*ListEmailProviderSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailProviderSettings indicates an expected call of ListEmailProviderSettings.
func (mr *MockEmailProviderSettingsServiceServerMockRecorder) ListEmailProviderSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailProviderSettings", reflect.TypeOf((*MockEmailProviderSettingsServiceServer)(nil).ListEmailProviderSettings), arg0, arg1)
}

// UpdateEmailProviderSetting mocks base method.
func (m *MockEmailProviderSettingsServiceServer) UpdateEmailProviderSetting(arg0 context.Context, arg1 *UpdateEmailProviderSettingRequest) (*UpdateEmailProviderSettingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailProviderSetting", arg0, arg1)
	ret0, _ := ret[0].(*UpdateEmailProviderSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailProviderSetting indicates an expected call of UpdateEmailProviderSetting.
func (mr *MockEmailProviderSettingsServiceServerMockRecorder) UpdateEmailProviderSetting(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailProviderSetting", reflect.TypeOf((*MockEmailProviderSettingsServiceServer)(nil).UpdateEmailProviderSetting), arg0, arg1)
}

// mustEmbedUnimplementedEmailProviderSettingsServiceServer mocks base method.
func (m *MockEmailProviderSettingsServiceServer) mustEmbedUnimplementedEmailProviderSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailProviderSettingsServiceServer")
}

// mustEmbedUnimplementedEmailProviderSettingsServiceServer indicates an expected call of mustEmbedUnimplementedEmailProviderSettingsServiceServer.
func (mr *MockEmailProviderSettingsServiceServerMockRecorder) mustEmbedUnimplementedEmailProviderSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailProviderSettingsServiceServer", reflect.TypeOf((*MockEmailProviderSettingsServiceServer)(nil).mustEmbedUnimplementedEmailProviderSettingsServiceServer))
}

// MockUnsafeEmailProviderSettingsServiceServer is a mock of UnsafeEmailProviderSettingsServiceServer interface.
type MockUnsafeEmailProviderSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEmailProviderSettingsServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeEmailProviderSettingsServiceServerMockRecorder is the mock recorder for MockUnsafeEmailProviderSettingsServiceServer.
type MockUnsafeEmailProviderSettingsServiceServerMockRecorder struct {
	mock *MockUnsafeEmailProviderSettingsServiceServer
}

// NewMockUnsafeEmailProviderSettingsServiceServer creates a new mock instance.
func NewMockUnsafeEmailProviderSettingsServiceServer(ctrl *gomock.Controller) *MockUnsafeEmailProviderSettingsServiceServer {
	mock := &MockUnsafeEmailProviderSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEmailProviderSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEmailProviderSettingsServiceServer) EXPECT() *MockUnsafeEmailProviderSettingsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEmailProviderSettingsServiceServer mocks base method.
func (m *MockUnsafeEmailProviderSettingsServiceServer) mustEmbedUnimplementedEmailProviderSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailProviderSettingsServiceServer")
}

// mustEmbedUnimplementedEmailProviderSettingsServiceServer indicates an expected call of mustEmbedUnimplementedEmailProviderSettingsServiceServer.
func (mr *MockUnsafeEmailProviderSettingsServiceServerMockRecorder) mustEmbedUnimplementedEmailProviderSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailProviderSettingsServiceServer", reflect.TypeOf((*MockUnsafeEmailProviderSettingsServiceServer)(nil).mustEmbedUnimplementedEmailProviderSettingsServiceServer))
}
