// Code generated by MockGen. DO NOT EDIT.
// Source: whitelabel.go
//
// Generated by this command:
//
//	mockgen -source=whitelabel.go -destination=./mocks/whitelabel.go -package=mockstore
//

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	reflect "reflect"

	model "code.emcdtech.com/emcd/service/email/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockWhitelabel is a mock of Whitelabel interface.
type MockWhitelabel struct {
	ctrl     *gomock.Controller
	recorder *MockWhitelabelMockRecorder
	isgomock struct{}
}

// MockWhitelabelMockRecorder is the mock recorder for MockWhitelabel.
type MockWhitelabelMockRecorder struct {
	mock *MockWhitelabel
}

// NewMockWhitelabel creates a new mock instance.
func NewMockWhitelabel(ctrl *gomock.Controller) *MockWhitelabel {
	mock := &MockWhitelabel{ctrl: ctrl}
	mock.recorder = &MockWhitelabelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhitelabel) EXPECT() *MockWhitelabelMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockWhitelabel) GetVersion(ctx context.Context, wlID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx, wlID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockWhitelabelMockRecorder) GetVersion(ctx, wlID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockWhitelabel)(nil).GetVersion), ctx, wlID)
}

// GetWlByID mocks base method.
func (m *MockWhitelabel) GetWlByID(ctx context.Context, wlID uuid.UUID) (*model.Whitelabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWlByID", ctx, wlID)
	ret0, _ := ret[0].(*model.Whitelabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWlByID indicates an expected call of GetWlByID.
func (mr *MockWhitelabelMockRecorder) GetWlByID(ctx, wlID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWlByID", reflect.TypeOf((*MockWhitelabel)(nil).GetWlByID), ctx, wlID)
}

// GetWlFullDomain mocks base method.
func (m *MockWhitelabel) GetWlFullDomain(ctx context.Context, wlOwnerUserID int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWlFullDomain", ctx, wlOwnerUserID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWlFullDomain indicates an expected call of GetWlFullDomain.
func (mr *MockWhitelabelMockRecorder) GetWlFullDomain(ctx, wlOwnerUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWlFullDomain", reflect.TypeOf((*MockWhitelabel)(nil).GetWlFullDomain), ctx, wlOwnerUserID)
}
