// Code generated by MockGen. DO NOT EDIT.
// Source: whitelabel_clients.go
//
// Generated by this command:
//
//	mockgen -source=whitelabel_clients.go -destination=./mocks/whitelabeleventclients.go -package=mockstore
//

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	reflect "reflect"

	model "code.emcdtech.com/emcd/service/email/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockWhiteLabelEventClients is a mock of WhiteLabelEventClients interface.
type MockWhiteLabelEventClients struct {
	ctrl     *gomock.Controller
	recorder *MockWhiteLabelEventClientsMockRecorder
	isgomock struct{}
}

// MockWhiteLabelEventClientsMockRecorder is the mock recorder for MockWhiteLabelEventClients.
type MockWhiteLabelEventClientsMockRecorder struct {
	mock *MockWhiteLabelEventClients
}

// NewMockWhiteLabelEventClients creates a new mock instance.
func NewMockWhiteLabelEventClients(ctrl *gomock.Controller) *MockWhiteLabelEventClients {
	mock := &MockWhiteLabelEventClients{ctrl: ctrl}
	mock.recorder = &MockWhiteLabelEventClientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhiteLabelEventClients) EXPECT() *MockWhiteLabelEventClientsMockRecorder {
	return m.recorder
}

// SendWLEvent mocks base method.
func (m *MockWhiteLabelEventClients) SendWLEvent(ctx context.Context, wlID uuid.UUID, req *model.WLEventRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendWLEvent", ctx, wlID, req)
}

// SendWLEvent indicates an expected call of SendWLEvent.
func (mr *MockWhiteLabelEventClientsMockRecorder) SendWLEvent(ctx, wlID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWLEvent", reflect.TypeOf((*MockWhiteLabelEventClients)(nil).SendWLEvent), ctx, wlID, req)
}
