// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/proto/coin.proto

package coin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Coin with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CoinMultiError, or nil if none found.
func (m *Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IsActive

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for SortPriorityMining

	// no validation rules for SortPriorityWallet

	// no validation rules for MediaUrl

	// no validation rules for IsWithdrawalsDisabled

	for idx, item := range m.GetNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CoinValidationError{
						field:  fmt.Sprintf("Networks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CoinValidationError{
						field:  fmt.Sprintf("Networks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CoinValidationError{
					field:  fmt.Sprintf("Networks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LegacyCoinId

	// no validation rules for MiningRewardType

	// no validation rules for SortPrioritySwap

	if len(errors) > 0 {
		return CoinMultiError(errors)
	}

	return nil
}

// CoinMultiError is an error wrapping multiple validation errors returned by
// Coin.ValidateAll() if the designated constraints aren't met.
type CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoinMultiError) AllErrors() []error { return m }

// CoinValidationError is the validation error returned by Coin.Validate if the
// designated constraints aren't met.
type CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoinValidationError) ErrorName() string { return "CoinValidationError" }

// Error satisfies the builtin error interface
func (e CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoinValidationError{}

// Validate checks the field values on CoinNetwork with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CoinNetwork) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoinNetwork with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoinNetworkMultiError, or
// nil if none found.
func (m *CoinNetwork) ValidateAll() error {
	return m.validate(true)
}

func (m *CoinNetwork) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinId

	// no validation rules for NetworkId

	// no validation rules for IsActive

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for ContractAddress

	// no validation rules for Decimals

	// no validation rules for MinpayMining

	// no validation rules for WithdrawalFee

	// no validation rules for WithdrawalMinLimit

	// no validation rules for WithdrawalFeeTtlSeconds

	// no validation rules for IsMining

	// no validation rules for IsWallet

	// no validation rules for IsFreeWithdraw

	// no validation rules for IsWithdrawalsDisabled

	// no validation rules for HashDivisorPowerOfTen

	// no validation rules for ExplorerUrl

	// no validation rules for Priority

	if len(errors) > 0 {
		return CoinNetworkMultiError(errors)
	}

	return nil
}

// CoinNetworkMultiError is an error wrapping multiple validation errors
// returned by CoinNetwork.ValidateAll() if the designated constraints aren't met.
type CoinNetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoinNetworkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoinNetworkMultiError) AllErrors() []error { return m }

// CoinNetworkValidationError is the validation error returned by
// CoinNetwork.Validate if the designated constraints aren't met.
type CoinNetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoinNetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoinNetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoinNetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoinNetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoinNetworkValidationError) ErrorName() string { return "CoinNetworkValidationError" }

// Error satisfies the builtin error interface
func (e CoinNetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoinNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoinNetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoinNetworkValidationError{}

// Validate checks the field values on GetCoinIDFromLegacyIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCoinIDFromLegacyIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCoinIDFromLegacyIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCoinIDFromLegacyIDRequestMultiError, or nil if none found.
func (m *GetCoinIDFromLegacyIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCoinIDFromLegacyIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LegacyCoinId

	if len(errors) > 0 {
		return GetCoinIDFromLegacyIDRequestMultiError(errors)
	}

	return nil
}

// GetCoinIDFromLegacyIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetCoinIDFromLegacyIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCoinIDFromLegacyIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCoinIDFromLegacyIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCoinIDFromLegacyIDRequestMultiError) AllErrors() []error { return m }

// GetCoinIDFromLegacyIDRequestValidationError is the validation error returned
// by GetCoinIDFromLegacyIDRequest.Validate if the designated constraints
// aren't met.
type GetCoinIDFromLegacyIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCoinIDFromLegacyIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCoinIDFromLegacyIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCoinIDFromLegacyIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCoinIDFromLegacyIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCoinIDFromLegacyIDRequestValidationError) ErrorName() string {
	return "GetCoinIDFromLegacyIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCoinIDFromLegacyIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCoinIDFromLegacyIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCoinIDFromLegacyIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCoinIDFromLegacyIDRequestValidationError{}

// Validate checks the field values on GetCoinIDFromLegacyIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCoinIDFromLegacyIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCoinIDFromLegacyIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCoinIDFromLegacyIDResponseMultiError, or nil if none found.
func (m *GetCoinIDFromLegacyIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCoinIDFromLegacyIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinId

	if len(errors) > 0 {
		return GetCoinIDFromLegacyIDResponseMultiError(errors)
	}

	return nil
}

// GetCoinIDFromLegacyIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetCoinIDFromLegacyIDResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCoinIDFromLegacyIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCoinIDFromLegacyIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCoinIDFromLegacyIDResponseMultiError) AllErrors() []error { return m }

// GetCoinIDFromLegacyIDResponseValidationError is the validation error
// returned by GetCoinIDFromLegacyIDResponse.Validate if the designated
// constraints aren't met.
type GetCoinIDFromLegacyIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCoinIDFromLegacyIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCoinIDFromLegacyIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCoinIDFromLegacyIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCoinIDFromLegacyIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCoinIDFromLegacyIDResponseValidationError) ErrorName() string {
	return "GetCoinIDFromLegacyIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCoinIDFromLegacyIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCoinIDFromLegacyIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCoinIDFromLegacyIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCoinIDFromLegacyIDResponseValidationError{}

// Validate checks the field values on GetCoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCoinRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCoinRequestMultiError,
// or nil if none found.
func (m *GetCoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinId

	if len(errors) > 0 {
		return GetCoinRequestMultiError(errors)
	}

	return nil
}

// GetCoinRequestMultiError is an error wrapping multiple validation errors
// returned by GetCoinRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCoinRequestMultiError) AllErrors() []error { return m }

// GetCoinRequestValidationError is the validation error returned by
// GetCoinRequest.Validate if the designated constraints aren't met.
type GetCoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCoinRequestValidationError) ErrorName() string { return "GetCoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCoinRequestValidationError{}

// Validate checks the field values on GetCoinResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCoinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCoinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCoinResponseMultiError, or nil if none found.
func (m *GetCoinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCoinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCoinResponseValidationError{
					field:  "Coin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCoinResponseValidationError{
					field:  "Coin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCoinResponseValidationError{
				field:  "Coin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCoinResponseMultiError(errors)
	}

	return nil
}

// GetCoinResponseMultiError is an error wrapping multiple validation errors
// returned by GetCoinResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCoinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCoinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCoinResponseMultiError) AllErrors() []error { return m }

// GetCoinResponseValidationError is the validation error returned by
// GetCoinResponse.Validate if the designated constraints aren't met.
type GetCoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCoinResponseValidationError) ErrorName() string { return "GetCoinResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCoinResponseValidationError{}

// Validate checks the field values on RequestGetWithdrawalFee with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestGetWithdrawalFee) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestGetWithdrawalFee with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestGetWithdrawalFeeMultiError, or nil if none found.
func (m *RequestGetWithdrawalFee) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestGetWithdrawalFee) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinId

	// no validation rules for NetworkId

	// no validation rules for ToAddress

	// no validation rules for Amount

	if len(errors) > 0 {
		return RequestGetWithdrawalFeeMultiError(errors)
	}

	return nil
}

// RequestGetWithdrawalFeeMultiError is an error wrapping multiple validation
// errors returned by RequestGetWithdrawalFee.ValidateAll() if the designated
// constraints aren't met.
type RequestGetWithdrawalFeeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestGetWithdrawalFeeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestGetWithdrawalFeeMultiError) AllErrors() []error { return m }

// RequestGetWithdrawalFeeValidationError is the validation error returned by
// RequestGetWithdrawalFee.Validate if the designated constraints aren't met.
type RequestGetWithdrawalFeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestGetWithdrawalFeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestGetWithdrawalFeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestGetWithdrawalFeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestGetWithdrawalFeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestGetWithdrawalFeeValidationError) ErrorName() string {
	return "RequestGetWithdrawalFeeValidationError"
}

// Error satisfies the builtin error interface
func (e RequestGetWithdrawalFeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestGetWithdrawalFee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestGetWithdrawalFeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestGetWithdrawalFeeValidationError{}

// Validate checks the field values on ResponseGetWithdrawalFee with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseGetWithdrawalFee) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseGetWithdrawalFee with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseGetWithdrawalFeeMultiError, or nil if none found.
func (m *ResponseGetWithdrawalFee) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseGetWithdrawalFee) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fee

	// no validation rules for ValidTill

	if len(errors) > 0 {
		return ResponseGetWithdrawalFeeMultiError(errors)
	}

	return nil
}

// ResponseGetWithdrawalFeeMultiError is an error wrapping multiple validation
// errors returned by ResponseGetWithdrawalFee.ValidateAll() if the designated
// constraints aren't met.
type ResponseGetWithdrawalFeeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseGetWithdrawalFeeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseGetWithdrawalFeeMultiError) AllErrors() []error { return m }

// ResponseGetWithdrawalFeeValidationError is the validation error returned by
// ResponseGetWithdrawalFee.Validate if the designated constraints aren't met.
type ResponseGetWithdrawalFeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseGetWithdrawalFeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseGetWithdrawalFeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseGetWithdrawalFeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseGetWithdrawalFeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseGetWithdrawalFeeValidationError) ErrorName() string {
	return "ResponseGetWithdrawalFeeValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseGetWithdrawalFeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseGetWithdrawalFee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseGetWithdrawalFeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseGetWithdrawalFeeValidationError{}

// Validate checks the field values on GetCoinsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCoinsRequestMultiError, or nil if none found.
func (m *GetCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if m.WlId != nil {
		// no validation rules for WlId
	}

	if len(errors) > 0 {
		return GetCoinsRequestMultiError(errors)
	}

	return nil
}

// GetCoinsRequestMultiError is an error wrapping multiple validation errors
// returned by GetCoinsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCoinsRequestMultiError) AllErrors() []error { return m }

// GetCoinsRequestValidationError is the validation error returned by
// GetCoinsRequest.Validate if the designated constraints aren't met.
type GetCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCoinsRequestValidationError) ErrorName() string { return "GetCoinsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCoinsRequestValidationError{}

// Validate checks the field values on GetCoinsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCoinsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCoinsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCoinsResponseMultiError, or nil if none found.
func (m *GetCoinsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCoinsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCoinsResponseValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCoinsResponseValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCoinsResponseValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetCoinsResponseMultiError(errors)
	}

	return nil
}

// GetCoinsResponseMultiError is an error wrapping multiple validation errors
// returned by GetCoinsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCoinsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCoinsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCoinsResponseMultiError) AllErrors() []error { return m }

// GetCoinsResponseValidationError is the validation error returned by
// GetCoinsResponse.Validate if the designated constraints aren't met.
type GetCoinsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCoinsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCoinsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCoinsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCoinsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCoinsResponseValidationError) ErrorName() string { return "GetCoinsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCoinsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCoinsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCoinsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCoinsResponseValidationError{}
