// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/profile/profile_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source protocol/profile/profile_grpc.pb.go -destination protocol/profile/profile_grpc.mock.pb.go -package profile
//

// Package profile is a generated GoMock package.
package profile

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockProfileServiceClient is a mock of ProfileServiceClient interface.
type MockProfileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceClientMockRecorder
}

// MockProfileServiceClientMockRecorder is the mock recorder for MockProfileServiceClient.
type MockProfileServiceClientMockRecorder struct {
	mock *MockProfileServiceClient
}

// NewMockProfileServiceClient creates a new mock instance.
func NewMockProfileServiceClient(ctrl *gomock.Controller) *MockProfileServiceClient {
	mock := &MockProfileServiceClient{ctrl: ctrl}
	mock.recorder = &MockProfileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServiceClient) EXPECT() *MockProfileServiceClientMockRecorder {
	return m.recorder
}

// CancelNoPayJob mocks base method.
func (m *MockProfileServiceClient) CancelNoPayJob(ctx context.Context, in *CancelNoPayJobRequest, opts ...grpc.CallOption) (*CancelNoPayJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelNoPayJob", varargs...)
	ret0, _ := ret[0].(*CancelNoPayJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelNoPayJob indicates an expected call of CancelNoPayJob.
func (mr *MockProfileServiceClientMockRecorder) CancelNoPayJob(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelNoPayJob", reflect.TypeOf((*MockProfileServiceClient)(nil).CancelNoPayJob), varargs...)
}

// ChangeWalletAddress mocks base method.
func (m *MockProfileServiceClient) ChangeWalletAddress(ctx context.Context, in *ChangeWalletAddressRequest, opts ...grpc.CallOption) (*ChangeWalletAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeWalletAddress", varargs...)
	ret0, _ := ret[0].(*ChangeWalletAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeWalletAddress indicates an expected call of ChangeWalletAddress.
func (mr *MockProfileServiceClientMockRecorder) ChangeWalletAddress(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeWalletAddress", reflect.TypeOf((*MockProfileServiceClient)(nil).ChangeWalletAddress), varargs...)
}

// ChangeWalletAddressConfirm mocks base method.
func (m *MockProfileServiceClient) ChangeWalletAddressConfirm(ctx context.Context, in *ChangeWalletAddressConfirmRequest, opts ...grpc.CallOption) (*ChangeWalletAddressConfirmResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeWalletAddressConfirm", varargs...)
	ret0, _ := ret[0].(*ChangeWalletAddressConfirmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeWalletAddressConfirm indicates an expected call of ChangeWalletAddressConfirm.
func (mr *MockProfileServiceClientMockRecorder) ChangeWalletAddressConfirm(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeWalletAddressConfirm", reflect.TypeOf((*MockProfileServiceClient)(nil).ChangeWalletAddressConfirm), varargs...)
}

// CheckAppleAccount mocks base method.
func (m *MockProfileServiceClient) CheckAppleAccount(ctx context.Context, in *CheckAppleAccountRequest, opts ...grpc.CallOption) (*CheckAppleAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckAppleAccount", varargs...)
	ret0, _ := ret[0].(*CheckAppleAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAppleAccount indicates an expected call of CheckAppleAccount.
func (mr *MockProfileServiceClientMockRecorder) CheckAppleAccount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAppleAccount", reflect.TypeOf((*MockProfileServiceClient)(nil).CheckAppleAccount), varargs...)
}

// CheckSignature mocks base method.
func (m *MockProfileServiceClient) CheckSignature(ctx context.Context, in *Signature, opts ...grpc.CallOption) (*SignatureResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckSignature", varargs...)
	ret0, _ := ret[0].(*SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSignature indicates an expected call of CheckSignature.
func (mr *MockProfileServiceClientMockRecorder) CheckSignature(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSignature", reflect.TypeOf((*MockProfileServiceClient)(nil).CheckSignature), varargs...)
}

// Create mocks base method.
func (m *MockProfileServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProfileServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileServiceClient)(nil).Create), varargs...)
}

// CreateAPIKey mocks base method.
func (m *MockProfileServiceClient) CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAPIKey", varargs...)
	ret0, _ := ret[0].(*CreateAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockProfileServiceClientMockRecorder) CreateAPIKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockProfileServiceClient)(nil).CreateAPIKey), varargs...)
}

// CreateProfile mocks base method.
func (m *MockProfileServiceClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfile", varargs...)
	ret0, _ := ret[0].(*CreateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileServiceClientMockRecorder) CreateProfile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileServiceClient)(nil).CreateProfile), varargs...)
}

// CreateSubUser mocks base method.
func (m *MockProfileServiceClient) CreateSubUser(ctx context.Context, in *CreateSubUserRequest, opts ...grpc.CallOption) (*CreateSubUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubUser", varargs...)
	ret0, _ := ret[0].(*CreateSubUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubUser indicates an expected call of CreateSubUser.
func (mr *MockProfileServiceClientMockRecorder) CreateSubUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubUser", reflect.TypeOf((*MockProfileServiceClient)(nil).CreateSubUser), varargs...)
}

// DeleteAPIKey mocks base method.
func (m *MockProfileServiceClient) DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*DeleteAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAPIKey", varargs...)
	ret0, _ := ret[0].(*DeleteAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockProfileServiceClientMockRecorder) DeleteAPIKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockProfileServiceClient)(nil).DeleteAPIKey), varargs...)
}

// GetAPIKey mocks base method.
func (m *MockProfileServiceClient) GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIKey", varargs...)
	ret0, _ := ret[0].(*GetAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockProfileServiceClientMockRecorder) GetAPIKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockProfileServiceClient)(nil).GetAPIKey), varargs...)
}

// GetAddresses mocks base method.
func (m *MockProfileServiceClient) GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAddresses", varargs...)
	ret0, _ := ret[0].(*GetAddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresses indicates an expected call of GetAddresses.
func (mr *MockProfileServiceClientMockRecorder) GetAddresses(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresses", reflect.TypeOf((*MockProfileServiceClient)(nil).GetAddresses), varargs...)
}

// GetAllSubUsers mocks base method.
func (m *MockProfileServiceClient) GetAllSubUsers(ctx context.Context, in *GetAllSubUsersRequest, opts ...grpc.CallOption) (*GetAllSubUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllSubUsers", varargs...)
	ret0, _ := ret[0].(*GetAllSubUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubUsers indicates an expected call of GetAllSubUsers.
func (mr *MockProfileServiceClientMockRecorder) GetAllSubUsers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubUsers", reflect.TypeOf((*MockProfileServiceClient)(nil).GetAllSubUsers), varargs...)
}

// GetAllUserIDsByUsername mocks base method.
func (m *MockProfileServiceClient) GetAllUserIDsByUsername(ctx context.Context, in *GetAllUserIDsByUsernameRequest, opts ...grpc.CallOption) (*GetAllUserIDsByUsernameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllUserIDsByUsername", varargs...)
	ret0, _ := ret[0].(*GetAllUserIDsByUsernameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserIDsByUsername indicates an expected call of GetAllUserIDsByUsername.
func (mr *MockProfileServiceClientMockRecorder) GetAllUserIDsByUsername(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserIDsByUsername", reflect.TypeOf((*MockProfileServiceClient)(nil).GetAllUserIDsByUsername), varargs...)
}

// GetAllUsers mocks base method.
func (m *MockProfileServiceClient) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllUsers", varargs...)
	ret0, _ := ret[0].(*GetAllUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockProfileServiceClientMockRecorder) GetAllUsers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockProfileServiceClient)(nil).GetAllUsers), varargs...)
}

// GetAllUsersByWlID mocks base method.
func (m *MockProfileServiceClient) GetAllUsersByWlID(ctx context.Context, in *GetAllUsersByWlIDRequest, opts ...grpc.CallOption) (*GetAllUsersByWlIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllUsersByWlID", varargs...)
	ret0, _ := ret[0].(*GetAllUsersByWlIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersByWlID indicates an expected call of GetAllUsersByWlID.
func (mr *MockProfileServiceClientMockRecorder) GetAllUsersByWlID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersByWlID", reflect.TypeOf((*MockProfileServiceClient)(nil).GetAllUsersByWlID), varargs...)
}

// GetByUserID mocks base method.
func (m *MockProfileServiceClient) GetByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (*GetByUserIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByUserID", varargs...)
	ret0, _ := ret[0].(*GetByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockProfileServiceClientMockRecorder) GetByUserID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockProfileServiceClient)(nil).GetByUserID), varargs...)
}

// GetByUserIDV2 mocks base method.
func (m *MockProfileServiceClient) GetByUserIDV2(ctx context.Context, in *GetByUserIDV2Request, opts ...grpc.CallOption) (*GetByUserIDV2Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByUserIDV2", varargs...)
	ret0, _ := ret[0].(*GetByUserIDV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDV2 indicates an expected call of GetByUserIDV2.
func (mr *MockProfileServiceClientMockRecorder) GetByUserIDV2(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDV2", reflect.TypeOf((*MockProfileServiceClient)(nil).GetByUserIDV2), varargs...)
}

// GetByUsernames mocks base method.
func (m *MockProfileServiceClient) GetByUsernames(ctx context.Context, in *GetByUsernamesRequest, opts ...grpc.CallOption) (*GetByUsernamesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByUsernames", varargs...)
	ret0, _ := ret[0].(*GetByUsernamesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsernames indicates an expected call of GetByUsernames.
func (mr *MockProfileServiceClientMockRecorder) GetByUsernames(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsernames", reflect.TypeOf((*MockProfileServiceClient)(nil).GetByUsernames), varargs...)
}

// GetByUsernamesForReferrals mocks base method.
func (m *MockProfileServiceClient) GetByUsernamesForReferrals(ctx context.Context, in *GetByUsernamesForReferralsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetByUsernamesForReferralsResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByUsernamesForReferrals", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[GetByUsernamesForReferralsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsernamesForReferrals indicates an expected call of GetByUsernamesForReferrals.
func (mr *MockProfileServiceClientMockRecorder) GetByUsernamesForReferrals(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsernamesForReferrals", reflect.TypeOf((*MockProfileServiceClient)(nil).GetByUsernamesForReferrals), varargs...)
}

// GetEmailsByIDs mocks base method.
func (m *MockProfileServiceClient) GetEmailsByIDs(ctx context.Context, in *GetEmailsByIDsRequest, opts ...grpc.CallOption) (*GetEmailsByIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailsByIDs", varargs...)
	ret0, _ := ret[0].(*GetEmailsByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailsByIDs indicates an expected call of GetEmailsByIDs.
func (mr *MockProfileServiceClientMockRecorder) GetEmailsByIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailsByIDs", reflect.TypeOf((*MockProfileServiceClient)(nil).GetEmailsByIDs), varargs...)
}

// GetFlagReferralLinkGenerated mocks base method.
func (m *MockProfileServiceClient) GetFlagReferralLinkGenerated(ctx context.Context, in *GetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption) (*GetFlagReferralLinkGeneratedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFlagReferralLinkGenerated", varargs...)
	ret0, _ := ret[0].(*GetFlagReferralLinkGeneratedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagReferralLinkGenerated indicates an expected call of GetFlagReferralLinkGenerated.
func (mr *MockProfileServiceClientMockRecorder) GetFlagReferralLinkGenerated(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagReferralLinkGenerated", reflect.TypeOf((*MockProfileServiceClient)(nil).GetFlagReferralLinkGenerated), varargs...)
}

// GetKycStatus mocks base method.
func (m *MockProfileServiceClient) GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKycStatus", varargs...)
	ret0, _ := ret[0].(*GetKycStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKycStatus indicates an expected call of GetKycStatus.
func (mr *MockProfileServiceClientMockRecorder) GetKycStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKycStatus", reflect.TypeOf((*MockProfileServiceClient)(nil).GetKycStatus), varargs...)
}

// GetNoPayStatus mocks base method.
func (m *MockProfileServiceClient) GetNoPayStatus(ctx context.Context, in *GetNoPayStatusRequest, opts ...grpc.CallOption) (*GetNoPayStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNoPayStatus", varargs...)
	ret0, _ := ret[0].(*GetNoPayStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoPayStatus indicates an expected call of GetNoPayStatus.
func (mr *MockProfileServiceClientMockRecorder) GetNoPayStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoPayStatus", reflect.TypeOf((*MockProfileServiceClient)(nil).GetNoPayStatus), varargs...)
}

// GetNotificationSettings mocks base method.
func (m *MockProfileServiceClient) GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*GetNotificationSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNotificationSettings", varargs...)
	ret0, _ := ret[0].(*GetNotificationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationSettings indicates an expected call of GetNotificationSettings.
func (mr *MockProfileServiceClientMockRecorder) GetNotificationSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationSettings", reflect.TypeOf((*MockProfileServiceClient)(nil).GetNotificationSettings), varargs...)
}

// GetOldByEmailAndWl mocks base method.
func (m *MockProfileServiceClient) GetOldByEmailAndWl(ctx context.Context, in *GetOldByEmailAndWlRequest, opts ...grpc.CallOption) (*GetOldByEmailAndWlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOldByEmailAndWl", varargs...)
	ret0, _ := ret[0].(*GetOldByEmailAndWlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldByEmailAndWl indicates an expected call of GetOldByEmailAndWl.
func (mr *MockProfileServiceClientMockRecorder) GetOldByEmailAndWl(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldByEmailAndWl", reflect.TypeOf((*MockProfileServiceClient)(nil).GetOldByEmailAndWl), varargs...)
}

// GetOldByEmailAndWlV2 mocks base method.
func (m *MockProfileServiceClient) GetOldByEmailAndWlV2(ctx context.Context, in *GetOldByEmailAndWlV2Request, opts ...grpc.CallOption) (*GetOldByEmailAndWlV2Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOldByEmailAndWlV2", varargs...)
	ret0, _ := ret[0].(*GetOldByEmailAndWlV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldByEmailAndWlV2 indicates an expected call of GetOldByEmailAndWlV2.
func (mr *MockProfileServiceClientMockRecorder) GetOldByEmailAndWlV2(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldByEmailAndWlV2", reflect.TypeOf((*MockProfileServiceClient)(nil).GetOldByEmailAndWlV2), varargs...)
}

// GetOldIDByID mocks base method.
func (m *MockProfileServiceClient) GetOldIDByID(ctx context.Context, in *GetOldIDByIDRequest, opts ...grpc.CallOption) (*GetOldIDByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOldIDByID", varargs...)
	ret0, _ := ret[0].(*GetOldIDByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldIDByID indicates an expected call of GetOldIDByID.
func (mr *MockProfileServiceClientMockRecorder) GetOldIDByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldIDByID", reflect.TypeOf((*MockProfileServiceClient)(nil).GetOldIDByID), varargs...)
}

// GetOldUserByEmailAndWl mocks base method.
func (m *MockProfileServiceClient) GetOldUserByEmailAndWl(ctx context.Context, in *GetOldUserByEmailAndWlRequest, opts ...grpc.CallOption) (*GetOldUserByEmailAndWlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOldUserByEmailAndWl", varargs...)
	ret0, _ := ret[0].(*GetOldUserByEmailAndWlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldUserByEmailAndWl indicates an expected call of GetOldUserByEmailAndWl.
func (mr *MockProfileServiceClientMockRecorder) GetOldUserByEmailAndWl(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldUserByEmailAndWl", reflect.TypeOf((*MockProfileServiceClient)(nil).GetOldUserByEmailAndWl), varargs...)
}

// GetOrCreateSecretKey mocks base method.
func (m *MockProfileServiceClient) GetOrCreateSecretKey(ctx context.Context, in *GetOrCreateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrCreateSecretKey", varargs...)
	ret0, _ := ret[0].(*SecretKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateSecretKey indicates an expected call of GetOrCreateSecretKey.
func (mr *MockProfileServiceClientMockRecorder) GetOrCreateSecretKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateSecretKey", reflect.TypeOf((*MockProfileServiceClient)(nil).GetOrCreateSecretKey), varargs...)
}

// GetReferrals mocks base method.
func (m *MockProfileServiceClient) GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReferrals", varargs...)
	ret0, _ := ret[0].(*GetReferralsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferrals indicates an expected call of GetReferrals.
func (mr *MockProfileServiceClientMockRecorder) GetReferrals(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferrals", reflect.TypeOf((*MockProfileServiceClient)(nil).GetReferrals), varargs...)
}

// GetSuspended mocks base method.
func (m *MockProfileServiceClient) GetSuspended(ctx context.Context, in *GetSuspendedRequest, opts ...grpc.CallOption) (*GetSuspendedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuspended", varargs...)
	ret0, _ := ret[0].(*GetSuspendedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuspended indicates an expected call of GetSuspended.
func (mr *MockProfileServiceClientMockRecorder) GetSuspended(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuspended", reflect.TypeOf((*MockProfileServiceClient)(nil).GetSuspended), varargs...)
}

// GetUserByApiKey mocks base method.
func (m *MockProfileServiceClient) GetUserByApiKey(ctx context.Context, in *GetUserByApiKeyRequest, opts ...grpc.CallOption) (*GetUserByApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByApiKey", varargs...)
	ret0, _ := ret[0].(*GetUserByApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByApiKey indicates an expected call of GetUserByApiKey.
func (mr *MockProfileServiceClientMockRecorder) GetUserByApiKey(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByApiKey", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserByApiKey), varargs...)
}

// GetUserByEmailAndWl mocks base method.
func (m *MockProfileServiceClient) GetUserByEmailAndWl(ctx context.Context, in *GetUserByEmailAndWlRequest, opts ...grpc.CallOption) (*GetUserByEmailAndWlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByEmailAndWl", varargs...)
	ret0, _ := ret[0].(*GetUserByEmailAndWlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailAndWl indicates an expected call of GetUserByEmailAndWl.
func (mr *MockProfileServiceClientMockRecorder) GetUserByEmailAndWl(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailAndWl", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserByEmailAndWl), varargs...)
}

// GetUserBySegmentID mocks base method.
func (m *MockProfileServiceClient) GetUserBySegmentID(ctx context.Context, in *GetUserBySegmentIDRequest, opts ...grpc.CallOption) (*GetUserBySegmentIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserBySegmentID", varargs...)
	ret0, _ := ret[0].(*GetUserBySegmentIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySegmentID indicates an expected call of GetUserBySegmentID.
func (mr *MockProfileServiceClientMockRecorder) GetUserBySegmentID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySegmentID", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserBySegmentID), varargs...)
}

// GetUserByTg mocks base method.
func (m *MockProfileServiceClient) GetUserByTg(ctx context.Context, in *GetUserByTgRequest, opts ...grpc.CallOption) (*GetUserByTgResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByTg", varargs...)
	ret0, _ := ret[0].(*GetUserByTgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTg indicates an expected call of GetUserByTg.
func (mr *MockProfileServiceClientMockRecorder) GetUserByTg(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTg", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserByTg), varargs...)
}

// GetUserIDByOldID mocks base method.
func (m *MockProfileServiceClient) GetUserIDByOldID(ctx context.Context, in *GetUserIDByOldIDRequest, opts ...grpc.CallOption) (*GetUserIDByOldIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserIDByOldID", varargs...)
	ret0, _ := ret[0].(*GetUserIDByOldIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByOldID indicates an expected call of GetUserIDByOldID.
func (mr *MockProfileServiceClientMockRecorder) GetUserIDByOldID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByOldID", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserIDByOldID), varargs...)
}

// GetUserIsActive mocks base method.
func (m *MockProfileServiceClient) GetUserIsActive(ctx context.Context, in *GetUserIsActiveRequest, opts ...grpc.CallOption) (*GetUserIsActiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserIsActive", varargs...)
	ret0, _ := ret[0].(*GetUserIsActiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIsActive indicates an expected call of GetUserIsActive.
func (mr *MockProfileServiceClientMockRecorder) GetUserIsActive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIsActive", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserIsActive), varargs...)
}

// GetUsernamesByIDs mocks base method.
func (m *MockProfileServiceClient) GetUsernamesByIDs(ctx context.Context, in *GetUsernamesByIDsRequest, opts ...grpc.CallOption) (*GetUsernamesByIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsernamesByIDs", varargs...)
	ret0, _ := ret[0].(*GetUsernamesByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernamesByIDs indicates an expected call of GetUsernamesByIDs.
func (mr *MockProfileServiceClientMockRecorder) GetUsernamesByIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernamesByIDs", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUsernamesByIDs), varargs...)
}

// GetUsersByUUIDs mocks base method.
func (m *MockProfileServiceClient) GetUsersByUUIDs(ctx context.Context, in *GetUsersByUUIDsRequest, opts ...grpc.CallOption) (*GetUsersByUUIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersByUUIDs", varargs...)
	ret0, _ := ret[0].(*GetUsersByUUIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByUUIDs indicates an expected call of GetUsersByUUIDs.
func (mr *MockProfileServiceClientMockRecorder) GetUsersByUUIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByUUIDs", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUsersByUUIDs), varargs...)
}

// GetUsersWithWL mocks base method.
func (m *MockProfileServiceClient) GetUsersWithWL(ctx context.Context, in *GetUsersWithWLRequest, opts ...grpc.CallOption) (*GetUsersWithWLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersWithWL", varargs...)
	ret0, _ := ret[0].(*GetUsersWithWLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithWL indicates an expected call of GetUsersWithWL.
func (mr *MockProfileServiceClientMockRecorder) GetUsersWithWL(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithWL", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUsersWithWL), varargs...)
}

// InsertKycHistory mocks base method.
func (m *MockProfileServiceClient) InsertKycHistory(ctx context.Context, in *InsertKycHistoryRequest, opts ...grpc.CallOption) (*InsertKycHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertKycHistory", varargs...)
	ret0, _ := ret[0].(*InsertKycHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertKycHistory indicates an expected call of InsertKycHistory.
func (mr *MockProfileServiceClientMockRecorder) InsertKycHistory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKycHistory", reflect.TypeOf((*MockProfileServiceClient)(nil).InsertKycHistory), varargs...)
}

// RelatedUsers mocks base method.
func (m *MockProfileServiceClient) RelatedUsers(ctx context.Context, in *RelatedUsersRequest, opts ...grpc.CallOption) (*RelatedUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RelatedUsers", varargs...)
	ret0, _ := ret[0].(*RelatedUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelatedUsers indicates an expected call of RelatedUsers.
func (mr *MockProfileServiceClientMockRecorder) RelatedUsers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelatedUsers", reflect.TypeOf((*MockProfileServiceClient)(nil).RelatedUsers), varargs...)
}

// SafeDeleteByID mocks base method.
func (m *MockProfileServiceClient) SafeDeleteByID(ctx context.Context, in *SafeDeleteByIDRequest, opts ...grpc.CallOption) (*SafeDeleteByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SafeDeleteByID", varargs...)
	ret0, _ := ret[0].(*SafeDeleteByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeDeleteByID indicates an expected call of SafeDeleteByID.
func (mr *MockProfileServiceClientMockRecorder) SafeDeleteByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeDeleteByID", reflect.TypeOf((*MockProfileServiceClient)(nil).SafeDeleteByID), varargs...)
}

// SaveNotificationSettings mocks base method.
func (m *MockProfileServiceClient) SaveNotificationSettings(ctx context.Context, in *SaveNotificationSettingsRequest, opts ...grpc.CallOption) (*SaveNotificationSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveNotificationSettings", varargs...)
	ret0, _ := ret[0].(*SaveNotificationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNotificationSettings indicates an expected call of SaveNotificationSettings.
func (mr *MockProfileServiceClientMockRecorder) SaveNotificationSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNotificationSettings", reflect.TypeOf((*MockProfileServiceClient)(nil).SaveNotificationSettings), varargs...)
}

// SaveV3 mocks base method.
func (m *MockProfileServiceClient) SaveV3(ctx context.Context, in *SaveV3Request, opts ...grpc.CallOption) (*SaveV3Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveV3", varargs...)
	ret0, _ := ret[0].(*SaveV3Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveV3 indicates an expected call of SaveV3.
func (mr *MockProfileServiceClientMockRecorder) SaveV3(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveV3", reflect.TypeOf((*MockProfileServiceClient)(nil).SaveV3), varargs...)
}

// SaveV4 mocks base method.
func (m *MockProfileServiceClient) SaveV4(ctx context.Context, in *SaveV4Request, opts ...grpc.CallOption) (*SaveV4Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveV4", varargs...)
	ret0, _ := ret[0].(*SaveV4Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveV4 indicates an expected call of SaveV4.
func (mr *MockProfileServiceClientMockRecorder) SaveV4(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveV4", reflect.TypeOf((*MockProfileServiceClient)(nil).SaveV4), varargs...)
}

// SetFlagReferralLinkGenerated mocks base method.
func (m *MockProfileServiceClient) SetFlagReferralLinkGenerated(ctx context.Context, in *SetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFlagReferralLinkGenerated", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFlagReferralLinkGenerated indicates an expected call of SetFlagReferralLinkGenerated.
func (mr *MockProfileServiceClientMockRecorder) SetFlagReferralLinkGenerated(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlagReferralLinkGenerated", reflect.TypeOf((*MockProfileServiceClient)(nil).SetFlagReferralLinkGenerated), varargs...)
}

// SetKycStatus mocks base method.
func (m *MockProfileServiceClient) SetKycStatus(ctx context.Context, in *SetKycStatusRequest, opts ...grpc.CallOption) (*SetKycStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetKycStatus", varargs...)
	ret0, _ := ret[0].(*SetKycStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetKycStatus indicates an expected call of SetKycStatus.
func (mr *MockProfileServiceClientMockRecorder) SetKycStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKycStatus", reflect.TypeOf((*MockProfileServiceClient)(nil).SetKycStatus), varargs...)
}

// SetLanguage mocks base method.
func (m *MockProfileServiceClient) SetLanguage(ctx context.Context, in *SetLanguageRequest, opts ...grpc.CallOption) (*SetLanguageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLanguage", varargs...)
	ret0, _ := ret[0].(*SetLanguageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLanguage indicates an expected call of SetLanguage.
func (mr *MockProfileServiceClientMockRecorder) SetLanguage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLanguage", reflect.TypeOf((*MockProfileServiceClient)(nil).SetLanguage), varargs...)
}

// SetSuspended mocks base method.
func (m *MockProfileServiceClient) SetSuspended(ctx context.Context, in *SetSuspendedRequest, opts ...grpc.CallOption) (*SetSuspendedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSuspended", varargs...)
	ret0, _ := ret[0].(*SetSuspendedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSuspended indicates an expected call of SetSuspended.
func (mr *MockProfileServiceClientMockRecorder) SetSuspended(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuspended", reflect.TypeOf((*MockProfileServiceClient)(nil).SetSuspended), varargs...)
}

// SetTimezone mocks base method.
func (m *MockProfileServiceClient) SetTimezone(ctx context.Context, in *SetTimezoneRequest, opts ...grpc.CallOption) (*SetTimezoneResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTimezone", varargs...)
	ret0, _ := ret[0].(*SetTimezoneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTimezone indicates an expected call of SetTimezone.
func (mr *MockProfileServiceClientMockRecorder) SetTimezone(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimezone", reflect.TypeOf((*MockProfileServiceClient)(nil).SetTimezone), varargs...)
}

// SetUserAttributes mocks base method.
func (m *MockProfileServiceClient) SetUserAttributes(ctx context.Context, in *SetUserAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserAttributes", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserAttributes indicates an expected call of SetUserAttributes.
func (mr *MockProfileServiceClientMockRecorder) SetUserAttributes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAttributes", reflect.TypeOf((*MockProfileServiceClient)(nil).SetUserAttributes), varargs...)
}

// UpdateMinPay mocks base method.
func (m *MockProfileServiceClient) UpdateMinPay(ctx context.Context, in *UpdateMinPayRequest, opts ...grpc.CallOption) (*UpdateMinPayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMinPay", varargs...)
	ret0, _ := ret[0].(*UpdateMinPayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMinPay indicates an expected call of UpdateMinPay.
func (mr *MockProfileServiceClientMockRecorder) UpdateMinPay(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMinPay", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateMinPay), varargs...)
}

// UpdateNoPay mocks base method.
func (m *MockProfileServiceClient) UpdateNoPay(ctx context.Context, in *UpdateNoPayRequest, opts ...grpc.CallOption) (*UpdateNoPayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNoPay", varargs...)
	ret0, _ := ret[0].(*UpdateNoPayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNoPay indicates an expected call of UpdateNoPay.
func (mr *MockProfileServiceClientMockRecorder) UpdateNoPay(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNoPay", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateNoPay), varargs...)
}

// UpdatePassword mocks base method.
func (m *MockProfileServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePassword", varargs...)
	ret0, _ := ret[0].(*UpdatePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockProfileServiceClientMockRecorder) UpdatePassword(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdatePassword), varargs...)
}

// UpdateProfile mocks base method.
func (m *MockProfileServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*UpdateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileServiceClientMockRecorder) UpdateProfile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateProfile), varargs...)
}

// UpdateRefID mocks base method.
func (m *MockProfileServiceClient) UpdateRefID(ctx context.Context, in *UpdateRefIDRequest, opts ...grpc.CallOption) (*UpdateRefIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRefID", varargs...)
	ret0, _ := ret[0].(*UpdateRefIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefID indicates an expected call of UpdateRefID.
func (mr *MockProfileServiceClientMockRecorder) UpdateRefID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefID", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateRefID), varargs...)
}

// UpdateUserIsActive mocks base method.
func (m *MockProfileServiceClient) UpdateUserIsActive(ctx context.Context, in *UpdateUserIsActiveRequest, opts ...grpc.CallOption) (*UpdateUserIsActiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserIsActive", varargs...)
	ret0, _ := ret[0].(*UpdateUserIsActiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserIsActive indicates an expected call of UpdateUserIsActive.
func (mr *MockProfileServiceClientMockRecorder) UpdateUserIsActive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIsActive", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateUserIsActive), varargs...)
}

// MockProfileServiceServer is a mock of ProfileServiceServer interface.
type MockProfileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceServerMockRecorder
}

// MockProfileServiceServerMockRecorder is the mock recorder for MockProfileServiceServer.
type MockProfileServiceServerMockRecorder struct {
	mock *MockProfileServiceServer
}

// NewMockProfileServiceServer creates a new mock instance.
func NewMockProfileServiceServer(ctrl *gomock.Controller) *MockProfileServiceServer {
	mock := &MockProfileServiceServer{ctrl: ctrl}
	mock.recorder = &MockProfileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileServiceServer) EXPECT() *MockProfileServiceServerMockRecorder {
	return m.recorder
}

// CancelNoPayJob mocks base method.
func (m *MockProfileServiceServer) CancelNoPayJob(arg0 context.Context, arg1 *CancelNoPayJobRequest) (*CancelNoPayJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelNoPayJob", arg0, arg1)
	ret0, _ := ret[0].(*CancelNoPayJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelNoPayJob indicates an expected call of CancelNoPayJob.
func (mr *MockProfileServiceServerMockRecorder) CancelNoPayJob(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelNoPayJob", reflect.TypeOf((*MockProfileServiceServer)(nil).CancelNoPayJob), arg0, arg1)
}

// ChangeWalletAddress mocks base method.
func (m *MockProfileServiceServer) ChangeWalletAddress(arg0 context.Context, arg1 *ChangeWalletAddressRequest) (*ChangeWalletAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeWalletAddress", arg0, arg1)
	ret0, _ := ret[0].(*ChangeWalletAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeWalletAddress indicates an expected call of ChangeWalletAddress.
func (mr *MockProfileServiceServerMockRecorder) ChangeWalletAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeWalletAddress", reflect.TypeOf((*MockProfileServiceServer)(nil).ChangeWalletAddress), arg0, arg1)
}

// ChangeWalletAddressConfirm mocks base method.
func (m *MockProfileServiceServer) ChangeWalletAddressConfirm(arg0 context.Context, arg1 *ChangeWalletAddressConfirmRequest) (*ChangeWalletAddressConfirmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeWalletAddressConfirm", arg0, arg1)
	ret0, _ := ret[0].(*ChangeWalletAddressConfirmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeWalletAddressConfirm indicates an expected call of ChangeWalletAddressConfirm.
func (mr *MockProfileServiceServerMockRecorder) ChangeWalletAddressConfirm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeWalletAddressConfirm", reflect.TypeOf((*MockProfileServiceServer)(nil).ChangeWalletAddressConfirm), arg0, arg1)
}

// CheckAppleAccount mocks base method.
func (m *MockProfileServiceServer) CheckAppleAccount(arg0 context.Context, arg1 *CheckAppleAccountRequest) (*CheckAppleAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAppleAccount", arg0, arg1)
	ret0, _ := ret[0].(*CheckAppleAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAppleAccount indicates an expected call of CheckAppleAccount.
func (mr *MockProfileServiceServerMockRecorder) CheckAppleAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAppleAccount", reflect.TypeOf((*MockProfileServiceServer)(nil).CheckAppleAccount), arg0, arg1)
}

// CheckSignature mocks base method.
func (m *MockProfileServiceServer) CheckSignature(arg0 context.Context, arg1 *Signature) (*SignatureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSignature", arg0, arg1)
	ret0, _ := ret[0].(*SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSignature indicates an expected call of CheckSignature.
func (mr *MockProfileServiceServerMockRecorder) CheckSignature(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSignature", reflect.TypeOf((*MockProfileServiceServer)(nil).CheckSignature), arg0, arg1)
}

// Create mocks base method.
func (m *MockProfileServiceServer) Create(arg0 context.Context, arg1 *CreateRequest) (*CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProfileServiceServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileServiceServer)(nil).Create), arg0, arg1)
}

// CreateAPIKey mocks base method.
func (m *MockProfileServiceServer) CreateAPIKey(arg0 context.Context, arg1 *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(*CreateAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockProfileServiceServerMockRecorder) CreateAPIKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockProfileServiceServer)(nil).CreateAPIKey), arg0, arg1)
}

// CreateProfile mocks base method.
func (m *MockProfileServiceServer) CreateProfile(arg0 context.Context, arg1 *CreateProfileRequest) (*CreateProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0, arg1)
	ret0, _ := ret[0].(*CreateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileServiceServerMockRecorder) CreateProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileServiceServer)(nil).CreateProfile), arg0, arg1)
}

// CreateSubUser mocks base method.
func (m *MockProfileServiceServer) CreateSubUser(arg0 context.Context, arg1 *CreateSubUserRequest) (*CreateSubUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubUser", arg0, arg1)
	ret0, _ := ret[0].(*CreateSubUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubUser indicates an expected call of CreateSubUser.
func (mr *MockProfileServiceServerMockRecorder) CreateSubUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubUser", reflect.TypeOf((*MockProfileServiceServer)(nil).CreateSubUser), arg0, arg1)
}

// DeleteAPIKey mocks base method.
func (m *MockProfileServiceServer) DeleteAPIKey(arg0 context.Context, arg1 *DeleteAPIKeyRequest) (*DeleteAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", arg0, arg1)
	ret0, _ := ret[0].(*DeleteAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockProfileServiceServerMockRecorder) DeleteAPIKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockProfileServiceServer)(nil).DeleteAPIKey), arg0, arg1)
}

// GetAPIKey mocks base method.
func (m *MockProfileServiceServer) GetAPIKey(arg0 context.Context, arg1 *GetAPIKeyRequest) (*GetAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", arg0, arg1)
	ret0, _ := ret[0].(*GetAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockProfileServiceServerMockRecorder) GetAPIKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockProfileServiceServer)(nil).GetAPIKey), arg0, arg1)
}

// GetAddresses mocks base method.
func (m *MockProfileServiceServer) GetAddresses(arg0 context.Context, arg1 *GetAddressesRequest) (*GetAddressesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddresses", arg0, arg1)
	ret0, _ := ret[0].(*GetAddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresses indicates an expected call of GetAddresses.
func (mr *MockProfileServiceServerMockRecorder) GetAddresses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresses", reflect.TypeOf((*MockProfileServiceServer)(nil).GetAddresses), arg0, arg1)
}

// GetAllSubUsers mocks base method.
func (m *MockProfileServiceServer) GetAllSubUsers(arg0 context.Context, arg1 *GetAllSubUsersRequest) (*GetAllSubUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubUsers", arg0, arg1)
	ret0, _ := ret[0].(*GetAllSubUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubUsers indicates an expected call of GetAllSubUsers.
func (mr *MockProfileServiceServerMockRecorder) GetAllSubUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubUsers", reflect.TypeOf((*MockProfileServiceServer)(nil).GetAllSubUsers), arg0, arg1)
}

// GetAllUserIDsByUsername mocks base method.
func (m *MockProfileServiceServer) GetAllUserIDsByUsername(arg0 context.Context, arg1 *GetAllUserIDsByUsernameRequest) (*GetAllUserIDsByUsernameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserIDsByUsername", arg0, arg1)
	ret0, _ := ret[0].(*GetAllUserIDsByUsernameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserIDsByUsername indicates an expected call of GetAllUserIDsByUsername.
func (mr *MockProfileServiceServerMockRecorder) GetAllUserIDsByUsername(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserIDsByUsername", reflect.TypeOf((*MockProfileServiceServer)(nil).GetAllUserIDsByUsername), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockProfileServiceServer) GetAllUsers(arg0 context.Context, arg1 *GetAllUsersRequest) (*GetAllUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].(*GetAllUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockProfileServiceServerMockRecorder) GetAllUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockProfileServiceServer)(nil).GetAllUsers), arg0, arg1)
}

// GetAllUsersByWlID mocks base method.
func (m *MockProfileServiceServer) GetAllUsersByWlID(arg0 context.Context, arg1 *GetAllUsersByWlIDRequest) (*GetAllUsersByWlIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersByWlID", arg0, arg1)
	ret0, _ := ret[0].(*GetAllUsersByWlIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersByWlID indicates an expected call of GetAllUsersByWlID.
func (mr *MockProfileServiceServerMockRecorder) GetAllUsersByWlID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersByWlID", reflect.TypeOf((*MockProfileServiceServer)(nil).GetAllUsersByWlID), arg0, arg1)
}

// GetByUserID mocks base method.
func (m *MockProfileServiceServer) GetByUserID(arg0 context.Context, arg1 *GetByUserIDRequest) (*GetByUserIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0, arg1)
	ret0, _ := ret[0].(*GetByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockProfileServiceServerMockRecorder) GetByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockProfileServiceServer)(nil).GetByUserID), arg0, arg1)
}

// GetByUserIDV2 mocks base method.
func (m *MockProfileServiceServer) GetByUserIDV2(arg0 context.Context, arg1 *GetByUserIDV2Request) (*GetByUserIDV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDV2", arg0, arg1)
	ret0, _ := ret[0].(*GetByUserIDV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDV2 indicates an expected call of GetByUserIDV2.
func (mr *MockProfileServiceServerMockRecorder) GetByUserIDV2(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDV2", reflect.TypeOf((*MockProfileServiceServer)(nil).GetByUserIDV2), arg0, arg1)
}

// GetByUsernames mocks base method.
func (m *MockProfileServiceServer) GetByUsernames(arg0 context.Context, arg1 *GetByUsernamesRequest) (*GetByUsernamesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsernames", arg0, arg1)
	ret0, _ := ret[0].(*GetByUsernamesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsernames indicates an expected call of GetByUsernames.
func (mr *MockProfileServiceServerMockRecorder) GetByUsernames(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsernames", reflect.TypeOf((*MockProfileServiceServer)(nil).GetByUsernames), arg0, arg1)
}

// GetByUsernamesForReferrals mocks base method.
func (m *MockProfileServiceServer) GetByUsernamesForReferrals(arg0 *GetByUsernamesForReferralsRequest, arg1 grpc.ServerStreamingServer[GetByUsernamesForReferralsResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsernamesForReferrals", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByUsernamesForReferrals indicates an expected call of GetByUsernamesForReferrals.
func (mr *MockProfileServiceServerMockRecorder) GetByUsernamesForReferrals(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsernamesForReferrals", reflect.TypeOf((*MockProfileServiceServer)(nil).GetByUsernamesForReferrals), arg0, arg1)
}

// GetEmailsByIDs mocks base method.
func (m *MockProfileServiceServer) GetEmailsByIDs(arg0 context.Context, arg1 *GetEmailsByIDsRequest) (*GetEmailsByIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailsByIDs", arg0, arg1)
	ret0, _ := ret[0].(*GetEmailsByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailsByIDs indicates an expected call of GetEmailsByIDs.
func (mr *MockProfileServiceServerMockRecorder) GetEmailsByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailsByIDs", reflect.TypeOf((*MockProfileServiceServer)(nil).GetEmailsByIDs), arg0, arg1)
}

// GetFlagReferralLinkGenerated mocks base method.
func (m *MockProfileServiceServer) GetFlagReferralLinkGenerated(arg0 context.Context, arg1 *GetFlagReferralLinkGeneratedRequest) (*GetFlagReferralLinkGeneratedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagReferralLinkGenerated", arg0, arg1)
	ret0, _ := ret[0].(*GetFlagReferralLinkGeneratedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagReferralLinkGenerated indicates an expected call of GetFlagReferralLinkGenerated.
func (mr *MockProfileServiceServerMockRecorder) GetFlagReferralLinkGenerated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagReferralLinkGenerated", reflect.TypeOf((*MockProfileServiceServer)(nil).GetFlagReferralLinkGenerated), arg0, arg1)
}

// GetKycStatus mocks base method.
func (m *MockProfileServiceServer) GetKycStatus(arg0 context.Context, arg1 *GetKycStatusRequest) (*GetKycStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKycStatus", arg0, arg1)
	ret0, _ := ret[0].(*GetKycStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKycStatus indicates an expected call of GetKycStatus.
func (mr *MockProfileServiceServerMockRecorder) GetKycStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKycStatus", reflect.TypeOf((*MockProfileServiceServer)(nil).GetKycStatus), arg0, arg1)
}

// GetNoPayStatus mocks base method.
func (m *MockProfileServiceServer) GetNoPayStatus(arg0 context.Context, arg1 *GetNoPayStatusRequest) (*GetNoPayStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoPayStatus", arg0, arg1)
	ret0, _ := ret[0].(*GetNoPayStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoPayStatus indicates an expected call of GetNoPayStatus.
func (mr *MockProfileServiceServerMockRecorder) GetNoPayStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoPayStatus", reflect.TypeOf((*MockProfileServiceServer)(nil).GetNoPayStatus), arg0, arg1)
}

// GetNotificationSettings mocks base method.
func (m *MockProfileServiceServer) GetNotificationSettings(arg0 context.Context, arg1 *GetNotificationSettingsRequest) (*GetNotificationSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationSettings", arg0, arg1)
	ret0, _ := ret[0].(*GetNotificationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationSettings indicates an expected call of GetNotificationSettings.
func (mr *MockProfileServiceServerMockRecorder) GetNotificationSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationSettings", reflect.TypeOf((*MockProfileServiceServer)(nil).GetNotificationSettings), arg0, arg1)
}

// GetOldByEmailAndWl mocks base method.
func (m *MockProfileServiceServer) GetOldByEmailAndWl(arg0 context.Context, arg1 *GetOldByEmailAndWlRequest) (*GetOldByEmailAndWlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOldByEmailAndWl", arg0, arg1)
	ret0, _ := ret[0].(*GetOldByEmailAndWlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldByEmailAndWl indicates an expected call of GetOldByEmailAndWl.
func (mr *MockProfileServiceServerMockRecorder) GetOldByEmailAndWl(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldByEmailAndWl", reflect.TypeOf((*MockProfileServiceServer)(nil).GetOldByEmailAndWl), arg0, arg1)
}

// GetOldByEmailAndWlV2 mocks base method.
func (m *MockProfileServiceServer) GetOldByEmailAndWlV2(arg0 context.Context, arg1 *GetOldByEmailAndWlV2Request) (*GetOldByEmailAndWlV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOldByEmailAndWlV2", arg0, arg1)
	ret0, _ := ret[0].(*GetOldByEmailAndWlV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldByEmailAndWlV2 indicates an expected call of GetOldByEmailAndWlV2.
func (mr *MockProfileServiceServerMockRecorder) GetOldByEmailAndWlV2(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldByEmailAndWlV2", reflect.TypeOf((*MockProfileServiceServer)(nil).GetOldByEmailAndWlV2), arg0, arg1)
}

// GetOldIDByID mocks base method.
func (m *MockProfileServiceServer) GetOldIDByID(arg0 context.Context, arg1 *GetOldIDByIDRequest) (*GetOldIDByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOldIDByID", arg0, arg1)
	ret0, _ := ret[0].(*GetOldIDByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldIDByID indicates an expected call of GetOldIDByID.
func (mr *MockProfileServiceServerMockRecorder) GetOldIDByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldIDByID", reflect.TypeOf((*MockProfileServiceServer)(nil).GetOldIDByID), arg0, arg1)
}

// GetOldUserByEmailAndWl mocks base method.
func (m *MockProfileServiceServer) GetOldUserByEmailAndWl(arg0 context.Context, arg1 *GetOldUserByEmailAndWlRequest) (*GetOldUserByEmailAndWlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOldUserByEmailAndWl", arg0, arg1)
	ret0, _ := ret[0].(*GetOldUserByEmailAndWlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOldUserByEmailAndWl indicates an expected call of GetOldUserByEmailAndWl.
func (mr *MockProfileServiceServerMockRecorder) GetOldUserByEmailAndWl(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOldUserByEmailAndWl", reflect.TypeOf((*MockProfileServiceServer)(nil).GetOldUserByEmailAndWl), arg0, arg1)
}

// GetOrCreateSecretKey mocks base method.
func (m *MockProfileServiceServer) GetOrCreateSecretKey(arg0 context.Context, arg1 *GetOrCreateSecretKeyRequest) (*SecretKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateSecretKey", arg0, arg1)
	ret0, _ := ret[0].(*SecretKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateSecretKey indicates an expected call of GetOrCreateSecretKey.
func (mr *MockProfileServiceServerMockRecorder) GetOrCreateSecretKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateSecretKey", reflect.TypeOf((*MockProfileServiceServer)(nil).GetOrCreateSecretKey), arg0, arg1)
}

// GetReferrals mocks base method.
func (m *MockProfileServiceServer) GetReferrals(arg0 context.Context, arg1 *GetReferralsRequest) (*GetReferralsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferrals", arg0, arg1)
	ret0, _ := ret[0].(*GetReferralsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferrals indicates an expected call of GetReferrals.
func (mr *MockProfileServiceServerMockRecorder) GetReferrals(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferrals", reflect.TypeOf((*MockProfileServiceServer)(nil).GetReferrals), arg0, arg1)
}

// GetSuspended mocks base method.
func (m *MockProfileServiceServer) GetSuspended(arg0 context.Context, arg1 *GetSuspendedRequest) (*GetSuspendedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuspended", arg0, arg1)
	ret0, _ := ret[0].(*GetSuspendedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuspended indicates an expected call of GetSuspended.
func (mr *MockProfileServiceServerMockRecorder) GetSuspended(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuspended", reflect.TypeOf((*MockProfileServiceServer)(nil).GetSuspended), arg0, arg1)
}

// GetUserByApiKey mocks base method.
func (m *MockProfileServiceServer) GetUserByApiKey(arg0 context.Context, arg1 *GetUserByApiKeyRequest) (*GetUserByApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByApiKey", arg0, arg1)
	ret0, _ := ret[0].(*GetUserByApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByApiKey indicates an expected call of GetUserByApiKey.
func (mr *MockProfileServiceServerMockRecorder) GetUserByApiKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByApiKey", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserByApiKey), arg0, arg1)
}

// GetUserByEmailAndWl mocks base method.
func (m *MockProfileServiceServer) GetUserByEmailAndWl(arg0 context.Context, arg1 *GetUserByEmailAndWlRequest) (*GetUserByEmailAndWlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailAndWl", arg0, arg1)
	ret0, _ := ret[0].(*GetUserByEmailAndWlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailAndWl indicates an expected call of GetUserByEmailAndWl.
func (mr *MockProfileServiceServerMockRecorder) GetUserByEmailAndWl(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailAndWl", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserByEmailAndWl), arg0, arg1)
}

// GetUserBySegmentID mocks base method.
func (m *MockProfileServiceServer) GetUserBySegmentID(arg0 context.Context, arg1 *GetUserBySegmentIDRequest) (*GetUserBySegmentIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySegmentID", arg0, arg1)
	ret0, _ := ret[0].(*GetUserBySegmentIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySegmentID indicates an expected call of GetUserBySegmentID.
func (mr *MockProfileServiceServerMockRecorder) GetUserBySegmentID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySegmentID", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserBySegmentID), arg0, arg1)
}

// GetUserByTg mocks base method.
func (m *MockProfileServiceServer) GetUserByTg(arg0 context.Context, arg1 *GetUserByTgRequest) (*GetUserByTgResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByTg", arg0, arg1)
	ret0, _ := ret[0].(*GetUserByTgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTg indicates an expected call of GetUserByTg.
func (mr *MockProfileServiceServerMockRecorder) GetUserByTg(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTg", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserByTg), arg0, arg1)
}

// GetUserIDByOldID mocks base method.
func (m *MockProfileServiceServer) GetUserIDByOldID(arg0 context.Context, arg1 *GetUserIDByOldIDRequest) (*GetUserIDByOldIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByOldID", arg0, arg1)
	ret0, _ := ret[0].(*GetUserIDByOldIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByOldID indicates an expected call of GetUserIDByOldID.
func (mr *MockProfileServiceServerMockRecorder) GetUserIDByOldID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByOldID", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserIDByOldID), arg0, arg1)
}

// GetUserIsActive mocks base method.
func (m *MockProfileServiceServer) GetUserIsActive(arg0 context.Context, arg1 *GetUserIsActiveRequest) (*GetUserIsActiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIsActive", arg0, arg1)
	ret0, _ := ret[0].(*GetUserIsActiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIsActive indicates an expected call of GetUserIsActive.
func (mr *MockProfileServiceServerMockRecorder) GetUserIsActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIsActive", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserIsActive), arg0, arg1)
}

// GetUsernamesByIDs mocks base method.
func (m *MockProfileServiceServer) GetUsernamesByIDs(arg0 context.Context, arg1 *GetUsernamesByIDsRequest) (*GetUsernamesByIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsernamesByIDs", arg0, arg1)
	ret0, _ := ret[0].(*GetUsernamesByIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernamesByIDs indicates an expected call of GetUsernamesByIDs.
func (mr *MockProfileServiceServerMockRecorder) GetUsernamesByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernamesByIDs", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUsernamesByIDs), arg0, arg1)
}

// GetUsersByUUIDs mocks base method.
func (m *MockProfileServiceServer) GetUsersByUUIDs(arg0 context.Context, arg1 *GetUsersByUUIDsRequest) (*GetUsersByUUIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByUUIDs", arg0, arg1)
	ret0, _ := ret[0].(*GetUsersByUUIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByUUIDs indicates an expected call of GetUsersByUUIDs.
func (mr *MockProfileServiceServerMockRecorder) GetUsersByUUIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByUUIDs", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUsersByUUIDs), arg0, arg1)
}

// GetUsersWithWL mocks base method.
func (m *MockProfileServiceServer) GetUsersWithWL(arg0 context.Context, arg1 *GetUsersWithWLRequest) (*GetUsersWithWLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWithWL", arg0, arg1)
	ret0, _ := ret[0].(*GetUsersWithWLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithWL indicates an expected call of GetUsersWithWL.
func (mr *MockProfileServiceServerMockRecorder) GetUsersWithWL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithWL", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUsersWithWL), arg0, arg1)
}

// InsertKycHistory mocks base method.
func (m *MockProfileServiceServer) InsertKycHistory(arg0 context.Context, arg1 *InsertKycHistoryRequest) (*InsertKycHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKycHistory", arg0, arg1)
	ret0, _ := ret[0].(*InsertKycHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertKycHistory indicates an expected call of InsertKycHistory.
func (mr *MockProfileServiceServerMockRecorder) InsertKycHistory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKycHistory", reflect.TypeOf((*MockProfileServiceServer)(nil).InsertKycHistory), arg0, arg1)
}

// RelatedUsers mocks base method.
func (m *MockProfileServiceServer) RelatedUsers(arg0 context.Context, arg1 *RelatedUsersRequest) (*RelatedUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelatedUsers", arg0, arg1)
	ret0, _ := ret[0].(*RelatedUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelatedUsers indicates an expected call of RelatedUsers.
func (mr *MockProfileServiceServerMockRecorder) RelatedUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelatedUsers", reflect.TypeOf((*MockProfileServiceServer)(nil).RelatedUsers), arg0, arg1)
}

// SafeDeleteByID mocks base method.
func (m *MockProfileServiceServer) SafeDeleteByID(arg0 context.Context, arg1 *SafeDeleteByIDRequest) (*SafeDeleteByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeDeleteByID", arg0, arg1)
	ret0, _ := ret[0].(*SafeDeleteByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeDeleteByID indicates an expected call of SafeDeleteByID.
func (mr *MockProfileServiceServerMockRecorder) SafeDeleteByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeDeleteByID", reflect.TypeOf((*MockProfileServiceServer)(nil).SafeDeleteByID), arg0, arg1)
}

// SaveNotificationSettings mocks base method.
func (m *MockProfileServiceServer) SaveNotificationSettings(arg0 context.Context, arg1 *SaveNotificationSettingsRequest) (*SaveNotificationSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNotificationSettings", arg0, arg1)
	ret0, _ := ret[0].(*SaveNotificationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNotificationSettings indicates an expected call of SaveNotificationSettings.
func (mr *MockProfileServiceServerMockRecorder) SaveNotificationSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNotificationSettings", reflect.TypeOf((*MockProfileServiceServer)(nil).SaveNotificationSettings), arg0, arg1)
}

// SaveV3 mocks base method.
func (m *MockProfileServiceServer) SaveV3(arg0 context.Context, arg1 *SaveV3Request) (*SaveV3Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveV3", arg0, arg1)
	ret0, _ := ret[0].(*SaveV3Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveV3 indicates an expected call of SaveV3.
func (mr *MockProfileServiceServerMockRecorder) SaveV3(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveV3", reflect.TypeOf((*MockProfileServiceServer)(nil).SaveV3), arg0, arg1)
}

// SaveV4 mocks base method.
func (m *MockProfileServiceServer) SaveV4(arg0 context.Context, arg1 *SaveV4Request) (*SaveV4Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveV4", arg0, arg1)
	ret0, _ := ret[0].(*SaveV4Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveV4 indicates an expected call of SaveV4.
func (mr *MockProfileServiceServerMockRecorder) SaveV4(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveV4", reflect.TypeOf((*MockProfileServiceServer)(nil).SaveV4), arg0, arg1)
}

// SetFlagReferralLinkGenerated mocks base method.
func (m *MockProfileServiceServer) SetFlagReferralLinkGenerated(arg0 context.Context, arg1 *SetFlagReferralLinkGeneratedRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFlagReferralLinkGenerated", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFlagReferralLinkGenerated indicates an expected call of SetFlagReferralLinkGenerated.
func (mr *MockProfileServiceServerMockRecorder) SetFlagReferralLinkGenerated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlagReferralLinkGenerated", reflect.TypeOf((*MockProfileServiceServer)(nil).SetFlagReferralLinkGenerated), arg0, arg1)
}

// SetKycStatus mocks base method.
func (m *MockProfileServiceServer) SetKycStatus(arg0 context.Context, arg1 *SetKycStatusRequest) (*SetKycStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKycStatus", arg0, arg1)
	ret0, _ := ret[0].(*SetKycStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetKycStatus indicates an expected call of SetKycStatus.
func (mr *MockProfileServiceServerMockRecorder) SetKycStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKycStatus", reflect.TypeOf((*MockProfileServiceServer)(nil).SetKycStatus), arg0, arg1)
}

// SetLanguage mocks base method.
func (m *MockProfileServiceServer) SetLanguage(arg0 context.Context, arg1 *SetLanguageRequest) (*SetLanguageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLanguage", arg0, arg1)
	ret0, _ := ret[0].(*SetLanguageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLanguage indicates an expected call of SetLanguage.
func (mr *MockProfileServiceServerMockRecorder) SetLanguage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLanguage", reflect.TypeOf((*MockProfileServiceServer)(nil).SetLanguage), arg0, arg1)
}

// SetSuspended mocks base method.
func (m *MockProfileServiceServer) SetSuspended(arg0 context.Context, arg1 *SetSuspendedRequest) (*SetSuspendedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSuspended", arg0, arg1)
	ret0, _ := ret[0].(*SetSuspendedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSuspended indicates an expected call of SetSuspended.
func (mr *MockProfileServiceServerMockRecorder) SetSuspended(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuspended", reflect.TypeOf((*MockProfileServiceServer)(nil).SetSuspended), arg0, arg1)
}

// SetTimezone mocks base method.
func (m *MockProfileServiceServer) SetTimezone(arg0 context.Context, arg1 *SetTimezoneRequest) (*SetTimezoneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimezone", arg0, arg1)
	ret0, _ := ret[0].(*SetTimezoneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTimezone indicates an expected call of SetTimezone.
func (mr *MockProfileServiceServerMockRecorder) SetTimezone(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimezone", reflect.TypeOf((*MockProfileServiceServer)(nil).SetTimezone), arg0, arg1)
}

// SetUserAttributes mocks base method.
func (m *MockProfileServiceServer) SetUserAttributes(arg0 context.Context, arg1 *SetUserAttributesRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAttributes", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserAttributes indicates an expected call of SetUserAttributes.
func (mr *MockProfileServiceServerMockRecorder) SetUserAttributes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAttributes", reflect.TypeOf((*MockProfileServiceServer)(nil).SetUserAttributes), arg0, arg1)
}

// UpdateMinPay mocks base method.
func (m *MockProfileServiceServer) UpdateMinPay(arg0 context.Context, arg1 *UpdateMinPayRequest) (*UpdateMinPayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMinPay", arg0, arg1)
	ret0, _ := ret[0].(*UpdateMinPayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMinPay indicates an expected call of UpdateMinPay.
func (mr *MockProfileServiceServerMockRecorder) UpdateMinPay(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMinPay", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateMinPay), arg0, arg1)
}

// UpdateNoPay mocks base method.
func (m *MockProfileServiceServer) UpdateNoPay(arg0 context.Context, arg1 *UpdateNoPayRequest) (*UpdateNoPayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNoPay", arg0, arg1)
	ret0, _ := ret[0].(*UpdateNoPayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNoPay indicates an expected call of UpdateNoPay.
func (mr *MockProfileServiceServerMockRecorder) UpdateNoPay(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNoPay", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateNoPay), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockProfileServiceServer) UpdatePassword(arg0 context.Context, arg1 *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(*UpdatePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockProfileServiceServerMockRecorder) UpdatePassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdatePassword), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockProfileServiceServer) UpdateProfile(arg0 context.Context, arg1 *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(*UpdateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileServiceServerMockRecorder) UpdateProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateProfile), arg0, arg1)
}

// UpdateRefID mocks base method.
func (m *MockProfileServiceServer) UpdateRefID(arg0 context.Context, arg1 *UpdateRefIDRequest) (*UpdateRefIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefID", arg0, arg1)
	ret0, _ := ret[0].(*UpdateRefIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefID indicates an expected call of UpdateRefID.
func (mr *MockProfileServiceServerMockRecorder) UpdateRefID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefID", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateRefID), arg0, arg1)
}

// UpdateUserIsActive mocks base method.
func (m *MockProfileServiceServer) UpdateUserIsActive(arg0 context.Context, arg1 *UpdateUserIsActiveRequest) (*UpdateUserIsActiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserIsActive", arg0, arg1)
	ret0, _ := ret[0].(*UpdateUserIsActiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserIsActive indicates an expected call of UpdateUserIsActive.
func (mr *MockProfileServiceServerMockRecorder) UpdateUserIsActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIsActive", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateUserIsActive), arg0, arg1)
}

// mustEmbedUnimplementedProfileServiceServer mocks base method.
func (m *MockProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServiceServer")
}

// mustEmbedUnimplementedProfileServiceServer indicates an expected call of mustEmbedUnimplementedProfileServiceServer.
func (mr *MockProfileServiceServerMockRecorder) mustEmbedUnimplementedProfileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServiceServer", reflect.TypeOf((*MockProfileServiceServer)(nil).mustEmbedUnimplementedProfileServiceServer))
}

// MockUnsafeProfileServiceServer is a mock of UnsafeProfileServiceServer interface.
type MockUnsafeProfileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProfileServiceServerMockRecorder
}

// MockUnsafeProfileServiceServerMockRecorder is the mock recorder for MockUnsafeProfileServiceServer.
type MockUnsafeProfileServiceServerMockRecorder struct {
	mock *MockUnsafeProfileServiceServer
}

// NewMockUnsafeProfileServiceServer creates a new mock instance.
func NewMockUnsafeProfileServiceServer(ctrl *gomock.Controller) *MockUnsafeProfileServiceServer {
	mock := &MockUnsafeProfileServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProfileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProfileServiceServer) EXPECT() *MockUnsafeProfileServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProfileServiceServer mocks base method.
func (m *MockUnsafeProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProfileServiceServer")
}

// mustEmbedUnimplementedProfileServiceServer indicates an expected call of mustEmbedUnimplementedProfileServiceServer.
func (mr *MockUnsafeProfileServiceServerMockRecorder) mustEmbedUnimplementedProfileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProfileServiceServer", reflect.TypeOf((*MockUnsafeProfileServiceServer)(nil).mustEmbedUnimplementedProfileServiceServer))
}
