// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/proto/profile.proto

package profile

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserBySegmentIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBySegmentIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBySegmentIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBySegmentIDRequestMultiError, or nil if none found.
func (m *GetUserBySegmentIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBySegmentIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SegmentId

	if len(errors) > 0 {
		return GetUserBySegmentIDRequestMultiError(errors)
	}

	return nil
}

// GetUserBySegmentIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserBySegmentIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetUserBySegmentIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBySegmentIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBySegmentIDRequestMultiError) AllErrors() []error { return m }

// GetUserBySegmentIDRequestValidationError is the validation error returned by
// GetUserBySegmentIDRequest.Validate if the designated constraints aren't met.
type GetUserBySegmentIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBySegmentIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBySegmentIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBySegmentIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBySegmentIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBySegmentIDRequestValidationError) ErrorName() string {
	return "GetUserBySegmentIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBySegmentIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBySegmentIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBySegmentIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBySegmentIDRequestValidationError{}

// Validate checks the field values on GetUserBySegmentIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBySegmentIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBySegmentIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBySegmentIDResponseMultiError, or nil if none found.
func (m *GetUserBySegmentIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBySegmentIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserUuid

	// no validation rules for UserName

	// no validation rules for Email

	if len(errors) > 0 {
		return GetUserBySegmentIDResponseMultiError(errors)
	}

	return nil
}

// GetUserBySegmentIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserBySegmentIDResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserBySegmentIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBySegmentIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBySegmentIDResponseMultiError) AllErrors() []error { return m }

// GetUserBySegmentIDResponseValidationError is the validation error returned
// by GetUserBySegmentIDResponse.Validate if the designated constraints aren't met.
type GetUserBySegmentIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBySegmentIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBySegmentIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBySegmentIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBySegmentIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBySegmentIDResponseValidationError) ErrorName() string {
	return "GetUserBySegmentIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBySegmentIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBySegmentIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBySegmentIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBySegmentIDResponseValidationError{}

// Validate checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileRequestMultiError, or nil if none found.
func (m *CreateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for RefId

	// no validation rules for RefUuid

	// no validation rules for WhiteLabelUuid

	// no validation rules for AppleId

	// no validation rules for Language

	// no validation rules for TelegramId

	// no validation rules for TelegramUserName

	if len(errors) > 0 {
		return CreateProfileRequestMultiError(errors)
	}

	return nil
}

// CreateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileRequestMultiError) AllErrors() []error { return m }

// CreateProfileRequestValidationError is the validation error returned by
// CreateProfileRequest.Validate if the designated constraints aren't met.
type CreateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileRequestValidationError) ErrorName() string {
	return "CreateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileRequestValidationError{}

// Validate checks the field values on CreateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProfileResponseMultiError, or nil if none found.
func (m *CreateProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateProfileResponseMultiError(errors)
	}

	return nil
}

// CreateProfileResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProfileResponseMultiError) AllErrors() []error { return m }

// CreateProfileResponseValidationError is the validation error returned by
// CreateProfileResponse.Validate if the designated constraints aren't met.
type CreateProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProfileResponseValidationError) ErrorName() string {
	return "CreateProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProfileResponseValidationError{}

// Validate checks the field values on GetByUsernamesForReferralsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetByUsernamesForReferralsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUsernamesForReferralsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetByUsernamesForReferralsRequestMultiError, or nil if none found.
func (m *GetByUsernamesForReferralsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUsernamesForReferralsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetByUsernamesForReferralsRequestMultiError(errors)
	}

	return nil
}

// GetByUsernamesForReferralsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetByUsernamesForReferralsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetByUsernamesForReferralsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUsernamesForReferralsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUsernamesForReferralsRequestMultiError) AllErrors() []error { return m }

// GetByUsernamesForReferralsRequestValidationError is the validation error
// returned by GetByUsernamesForReferralsRequest.Validate if the designated
// constraints aren't met.
type GetByUsernamesForReferralsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUsernamesForReferralsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUsernamesForReferralsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUsernamesForReferralsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUsernamesForReferralsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUsernamesForReferralsRequestValidationError) ErrorName() string {
	return "GetByUsernamesForReferralsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUsernamesForReferralsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUsernamesForReferralsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUsernamesForReferralsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUsernamesForReferralsRequestValidationError{}

// Validate checks the field values on GetByUsernamesForReferralsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetByUsernamesForReferralsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUsernamesForReferralsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetByUsernamesForReferralsResponseMultiError, or nil if none found.
func (m *GetByUsernamesForReferralsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUsernamesForReferralsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfile() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetByUsernamesForReferralsResponseValidationError{
						field:  fmt.Sprintf("Profile[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetByUsernamesForReferralsResponseValidationError{
						field:  fmt.Sprintf("Profile[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByUsernamesForReferralsResponseValidationError{
					field:  fmt.Sprintf("Profile[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetByUsernamesForReferralsResponseMultiError(errors)
	}

	return nil
}

// GetByUsernamesForReferralsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetByUsernamesForReferralsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetByUsernamesForReferralsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUsernamesForReferralsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUsernamesForReferralsResponseMultiError) AllErrors() []error { return m }

// GetByUsernamesForReferralsResponseValidationError is the validation error
// returned by GetByUsernamesForReferralsResponse.Validate if the designated
// constraints aren't met.
type GetByUsernamesForReferralsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUsernamesForReferralsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUsernamesForReferralsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUsernamesForReferralsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUsernamesForReferralsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUsernamesForReferralsResponseValidationError) ErrorName() string {
	return "GetByUsernamesForReferralsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUsernamesForReferralsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUsernamesForReferralsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUsernamesForReferralsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUsernamesForReferralsResponseValidationError{}

// Validate checks the field values on GetUsersByUUIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByUUIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByUUIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByUUIDsRequestMultiError, or nil if none found.
func (m *GetUsersByUUIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByUUIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersByUUIDsRequestMultiError(errors)
	}

	return nil
}

// GetUsersByUUIDsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersByUUIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByUUIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByUUIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByUUIDsRequestMultiError) AllErrors() []error { return m }

// GetUsersByUUIDsRequestValidationError is the validation error returned by
// GetUsersByUUIDsRequest.Validate if the designated constraints aren't met.
type GetUsersByUUIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByUUIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByUUIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByUUIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByUUIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByUUIDsRequestValidationError) ErrorName() string {
	return "GetUsersByUUIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByUUIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByUUIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByUUIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByUUIDsRequestValidationError{}

// Validate checks the field values on GetUsersByUUIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByUUIDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByUUIDsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByUUIDsResponseMultiError, or nil if none found.
func (m *GetUsersByUUIDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByUUIDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersByUUIDsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersByUUIDsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersByUUIDsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersByUUIDsResponseMultiError(errors)
	}

	return nil
}

// GetUsersByUUIDsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersByUUIDsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByUUIDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByUUIDsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByUUIDsResponseMultiError) AllErrors() []error { return m }

// GetUsersByUUIDsResponseValidationError is the validation error returned by
// GetUsersByUUIDsResponse.Validate if the designated constraints aren't met.
type GetUsersByUUIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByUUIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByUUIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByUUIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByUUIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByUUIDsResponseValidationError) ErrorName() string {
	return "GetUsersByUUIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByUUIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByUUIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByUUIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByUUIDsResponseValidationError{}

// Validate checks the field values on GetUsersWithWLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersWithWLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersWithWLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersWithWLRequestMultiError, or nil if none found.
func (m *GetUsersWithWLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersWithWLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WlUuid

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetUsersWithWLRequestMultiError(errors)
	}

	return nil
}

// GetUsersWithWLRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersWithWLRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersWithWLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersWithWLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersWithWLRequestMultiError) AllErrors() []error { return m }

// GetUsersWithWLRequestValidationError is the validation error returned by
// GetUsersWithWLRequest.Validate if the designated constraints aren't met.
type GetUsersWithWLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersWithWLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersWithWLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersWithWLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersWithWLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersWithWLRequestValidationError) ErrorName() string {
	return "GetUsersWithWLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersWithWLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersWithWLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersWithWLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersWithWLRequestValidationError{}

// Validate checks the field values on GetUsersWithWLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersWithWLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersWithWLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersWithWLResponseMultiError, or nil if none found.
func (m *GetUsersWithWLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersWithWLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersWithWLResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersWithWLResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersWithWLResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetUsersWithWLResponseMultiError(errors)
	}

	return nil
}

// GetUsersWithWLResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersWithWLResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsersWithWLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersWithWLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersWithWLResponseMultiError) AllErrors() []error { return m }

// GetUsersWithWLResponseValidationError is the validation error returned by
// GetUsersWithWLResponse.Validate if the designated constraints aren't met.
type GetUsersWithWLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersWithWLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersWithWLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersWithWLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersWithWLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersWithWLResponseValidationError) ErrorName() string {
	return "GetUsersWithWLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersWithWLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersWithWLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersWithWLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersWithWLResponseValidationError{}

// Validate checks the field values on ShortUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShortUserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortUserInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShortUserInfoMultiError, or
// nil if none found.
func (m *ShortUserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortUserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShortUserInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShortUserInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShortUserInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserUuid

	if len(errors) > 0 {
		return ShortUserInfoMultiError(errors)
	}

	return nil
}

// ShortUserInfoMultiError is an error wrapping multiple validation errors
// returned by ShortUserInfo.ValidateAll() if the designated constraints
// aren't met.
type ShortUserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortUserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortUserInfoMultiError) AllErrors() []error { return m }

// ShortUserInfoValidationError is the validation error returned by
// ShortUserInfo.Validate if the designated constraints aren't met.
type ShortUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortUserInfoValidationError) ErrorName() string { return "ShortUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e ShortUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortUserInfoValidationError{}

// Validate checks the field values on UpdateNoPayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoPayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoPayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoPayRequestMultiError, or nil if none found.
func (m *UpdateNoPayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoPayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	if len(errors) > 0 {
		return UpdateNoPayRequestMultiError(errors)
	}

	return nil
}

// UpdateNoPayRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateNoPayRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateNoPayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoPayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoPayRequestMultiError) AllErrors() []error { return m }

// UpdateNoPayRequestValidationError is the validation error returned by
// UpdateNoPayRequest.Validate if the designated constraints aren't met.
type UpdateNoPayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoPayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoPayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoPayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoPayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoPayRequestValidationError) ErrorName() string {
	return "UpdateNoPayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoPayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoPayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoPayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoPayRequestValidationError{}

// Validate checks the field values on UpdateNoPayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoPayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoPayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoPayResponseMultiError, or nil if none found.
func (m *UpdateNoPayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoPayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNoPayResponseMultiError(errors)
	}

	return nil
}

// UpdateNoPayResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNoPayResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNoPayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoPayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoPayResponseMultiError) AllErrors() []error { return m }

// UpdateNoPayResponseValidationError is the validation error returned by
// UpdateNoPayResponse.Validate if the designated constraints aren't met.
type UpdateNoPayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoPayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoPayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoPayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoPayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoPayResponseValidationError) ErrorName() string {
	return "UpdateNoPayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoPayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoPayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoPayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoPayResponseValidationError{}

// Validate checks the field values on CancelNoPayJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelNoPayJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelNoPayJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelNoPayJobRequestMultiError, or nil if none found.
func (m *CancelNoPayJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelNoPayJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	if len(errors) > 0 {
		return CancelNoPayJobRequestMultiError(errors)
	}

	return nil
}

// CancelNoPayJobRequestMultiError is an error wrapping multiple validation
// errors returned by CancelNoPayJobRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelNoPayJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelNoPayJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelNoPayJobRequestMultiError) AllErrors() []error { return m }

// CancelNoPayJobRequestValidationError is the validation error returned by
// CancelNoPayJobRequest.Validate if the designated constraints aren't met.
type CancelNoPayJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelNoPayJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelNoPayJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelNoPayJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelNoPayJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelNoPayJobRequestValidationError) ErrorName() string {
	return "CancelNoPayJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelNoPayJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelNoPayJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelNoPayJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelNoPayJobRequestValidationError{}

// Validate checks the field values on CancelNoPayJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelNoPayJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelNoPayJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelNoPayJobResponseMultiError, or nil if none found.
func (m *CancelNoPayJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelNoPayJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelNoPayJobResponseMultiError(errors)
	}

	return nil
}

// CancelNoPayJobResponseMultiError is an error wrapping multiple validation
// errors returned by CancelNoPayJobResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelNoPayJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelNoPayJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelNoPayJobResponseMultiError) AllErrors() []error { return m }

// CancelNoPayJobResponseValidationError is the validation error returned by
// CancelNoPayJobResponse.Validate if the designated constraints aren't met.
type CancelNoPayJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelNoPayJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelNoPayJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelNoPayJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelNoPayJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelNoPayJobResponseValidationError) ErrorName() string {
	return "CancelNoPayJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelNoPayJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelNoPayJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelNoPayJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelNoPayJobResponseValidationError{}

// Validate checks the field values on GetNoPayStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNoPayStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoPayStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoPayStatusRequestMultiError, or nil if none found.
func (m *GetNoPayStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoPayStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	if len(errors) > 0 {
		return GetNoPayStatusRequestMultiError(errors)
	}

	return nil
}

// GetNoPayStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetNoPayStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNoPayStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoPayStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoPayStatusRequestMultiError) AllErrors() []error { return m }

// GetNoPayStatusRequestValidationError is the validation error returned by
// GetNoPayStatusRequest.Validate if the designated constraints aren't met.
type GetNoPayStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoPayStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoPayStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoPayStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoPayStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoPayStatusRequestValidationError) ErrorName() string {
	return "GetNoPayStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoPayStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoPayStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoPayStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoPayStatusRequestValidationError{}

// Validate checks the field values on GetNoPayStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNoPayStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoPayStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoPayStatusResponseMultiError, or nil if none found.
func (m *GetNoPayStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoPayStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetDateBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNoPayStatusResponseValidationError{
					field:  "DateBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNoPayStatusResponseValidationError{
					field:  "DateBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNoPayStatusResponseValidationError{
				field:  "DateBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNoPayStatusResponseMultiError(errors)
	}

	return nil
}

// GetNoPayStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetNoPayStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNoPayStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoPayStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoPayStatusResponseMultiError) AllErrors() []error { return m }

// GetNoPayStatusResponseValidationError is the validation error returned by
// GetNoPayStatusResponse.Validate if the designated constraints aren't met.
type GetNoPayStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoPayStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoPayStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoPayStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoPayStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoPayStatusResponseValidationError) ErrorName() string {
	return "GetNoPayStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoPayStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoPayStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoPayStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoPayStatusResponseValidationError{}

// Validate checks the field values on CreateAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAPIKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAPIKeyRequestMultiError, or nil if none found.
func (m *CreateAPIKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAPIKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for ParentUuid

	// no validation rules for Ip

	if len(errors) > 0 {
		return CreateAPIKeyRequestMultiError(errors)
	}

	return nil
}

// CreateAPIKeyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAPIKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAPIKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAPIKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAPIKeyRequestMultiError) AllErrors() []error { return m }

// CreateAPIKeyRequestValidationError is the validation error returned by
// CreateAPIKeyRequest.Validate if the designated constraints aren't met.
type CreateAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAPIKeyRequestValidationError) ErrorName() string {
	return "CreateAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAPIKeyRequestValidationError{}

// Validate checks the field values on CreateAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAPIKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAPIKeyResponseMultiError, or nil if none found.
func (m *CreateAPIKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAPIKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return CreateAPIKeyResponseMultiError(errors)
	}

	return nil
}

// CreateAPIKeyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAPIKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAPIKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAPIKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAPIKeyResponseMultiError) AllErrors() []error { return m }

// CreateAPIKeyResponseValidationError is the validation error returned by
// CreateAPIKeyResponse.Validate if the designated constraints aren't met.
type CreateAPIKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAPIKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAPIKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAPIKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAPIKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAPIKeyResponseValidationError) ErrorName() string {
	return "CreateAPIKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAPIKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAPIKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAPIKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAPIKeyResponseValidationError{}

// Validate checks the field values on GetOrCreateSecretKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrCreateSecretKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrCreateSecretKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrCreateSecretKeyRequestMultiError, or nil if none found.
func (m *GetOrCreateSecretKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrCreateSecretKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for ParentUuid

	// no validation rules for Ip

	if len(errors) > 0 {
		return GetOrCreateSecretKeyRequestMultiError(errors)
	}

	return nil
}

// GetOrCreateSecretKeyRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrCreateSecretKeyRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrCreateSecretKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrCreateSecretKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrCreateSecretKeyRequestMultiError) AllErrors() []error { return m }

// GetOrCreateSecretKeyRequestValidationError is the validation error returned
// by GetOrCreateSecretKeyRequest.Validate if the designated constraints
// aren't met.
type GetOrCreateSecretKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrCreateSecretKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrCreateSecretKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrCreateSecretKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrCreateSecretKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrCreateSecretKeyRequestValidationError) ErrorName() string {
	return "GetOrCreateSecretKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrCreateSecretKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrCreateSecretKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrCreateSecretKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrCreateSecretKeyRequestValidationError{}

// Validate checks the field values on SecretKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SecretKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretKeyResponseMultiError, or nil if none found.
func (m *SecretKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SecretKey

	if len(errors) > 0 {
		return SecretKeyResponseMultiError(errors)
	}

	return nil
}

// SecretKeyResponseMultiError is an error wrapping multiple validation errors
// returned by SecretKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type SecretKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretKeyResponseMultiError) AllErrors() []error { return m }

// SecretKeyResponseValidationError is the validation error returned by
// SecretKeyResponse.Validate if the designated constraints aren't met.
type SecretKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretKeyResponseValidationError) ErrorName() string {
	return "SecretKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretKeyResponseValidationError{}

// Validate checks the field values on Signature with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Signature) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Signature with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignatureMultiError, or nil
// if none found.
func (m *Signature) ValidateAll() error {
	return m.validate(true)
}

func (m *Signature) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signature

	// no validation rules for UserUuid

	// no validation rules for ParentUuid

	// no validation rules for Ip

	// no validation rules for Nonce

	if len(errors) > 0 {
		return SignatureMultiError(errors)
	}

	return nil
}

// SignatureMultiError is an error wrapping multiple validation errors returned
// by Signature.ValidateAll() if the designated constraints aren't met.
type SignatureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignatureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignatureMultiError) AllErrors() []error { return m }

// SignatureValidationError is the validation error returned by
// Signature.Validate if the designated constraints aren't met.
type SignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignatureValidationError) ErrorName() string { return "SignatureValidationError" }

// Error satisfies the builtin error interface
func (e SignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignatureValidationError{}

// Validate checks the field values on SignatureResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignatureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignatureResponseMultiError, or nil if none found.
func (m *SignatureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignatureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Check

	if len(errors) > 0 {
		return SignatureResponseMultiError(errors)
	}

	return nil
}

// SignatureResponseMultiError is an error wrapping multiple validation errors
// returned by SignatureResponse.ValidateAll() if the designated constraints
// aren't met.
type SignatureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignatureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignatureResponseMultiError) AllErrors() []error { return m }

// SignatureResponseValidationError is the validation error returned by
// SignatureResponse.Validate if the designated constraints aren't met.
type SignatureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignatureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignatureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignatureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignatureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignatureResponseValidationError) ErrorName() string {
	return "SignatureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SignatureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignatureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignatureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignatureResponseValidationError{}

// Validate checks the field values on DeleteAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAPIKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAPIKeyRequestMultiError, or nil if none found.
func (m *DeleteAPIKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAPIKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for ParentUuid

	// no validation rules for Ip

	if len(errors) > 0 {
		return DeleteAPIKeyRequestMultiError(errors)
	}

	return nil
}

// DeleteAPIKeyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAPIKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAPIKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAPIKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAPIKeyRequestMultiError) AllErrors() []error { return m }

// DeleteAPIKeyRequestValidationError is the validation error returned by
// DeleteAPIKeyRequest.Validate if the designated constraints aren't met.
type DeleteAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAPIKeyRequestValidationError) ErrorName() string {
	return "DeleteAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAPIKeyRequestValidationError{}

// Validate checks the field values on DeleteAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAPIKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAPIKeyResponseMultiError, or nil if none found.
func (m *DeleteAPIKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAPIKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAPIKeyResponseMultiError(errors)
	}

	return nil
}

// DeleteAPIKeyResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAPIKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAPIKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAPIKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAPIKeyResponseMultiError) AllErrors() []error { return m }

// DeleteAPIKeyResponseValidationError is the validation error returned by
// DeleteAPIKeyResponse.Validate if the designated constraints aren't met.
type DeleteAPIKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAPIKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAPIKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAPIKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAPIKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAPIKeyResponseValidationError) ErrorName() string {
	return "DeleteAPIKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAPIKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAPIKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAPIKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAPIKeyResponseValidationError{}

// Validate checks the field values on GetAPIKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAPIKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAPIKeyRequestMultiError, or nil if none found.
func (m *GetAPIKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAPIKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for ParentUuid

	// no validation rules for Ip

	if len(errors) > 0 {
		return GetAPIKeyRequestMultiError(errors)
	}

	return nil
}

// GetAPIKeyRequestMultiError is an error wrapping multiple validation errors
// returned by GetAPIKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAPIKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAPIKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAPIKeyRequestMultiError) AllErrors() []error { return m }

// GetAPIKeyRequestValidationError is the validation error returned by
// GetAPIKeyRequest.Validate if the designated constraints aren't met.
type GetAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAPIKeyRequestValidationError) ErrorName() string { return "GetAPIKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAPIKeyRequestValidationError{}

// Validate checks the field values on GetAPIKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAPIKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAPIKeyResponseMultiError, or nil if none found.
func (m *GetAPIKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAPIKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return GetAPIKeyResponseMultiError(errors)
	}

	return nil
}

// GetAPIKeyResponseMultiError is an error wrapping multiple validation errors
// returned by GetAPIKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAPIKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAPIKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAPIKeyResponseMultiError) AllErrors() []error { return m }

// GetAPIKeyResponseValidationError is the validation error returned by
// GetAPIKeyResponse.Validate if the designated constraints aren't met.
type GetAPIKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAPIKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAPIKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAPIKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAPIKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAPIKeyResponseValidationError) ErrorName() string {
	return "GetAPIKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAPIKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAPIKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAPIKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAPIKeyResponseValidationError{}

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRequestMultiError, or
// nil if none found.
func (m *CreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestMultiError(errors)
	}

	return nil
}

// CreateRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestMultiError) AllErrors() []error { return m }

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on CreateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResponseMultiError,
// or nil if none found.
func (m *CreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return CreateResponseMultiError(errors)
	}

	return nil
}

// CreateResponseMultiError is an error wrapping multiple validation errors
// returned by CreateResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResponseMultiError) AllErrors() []error { return m }

// CreateResponseValidationError is the validation error returned by
// CreateResponse.Validate if the designated constraints aren't met.
type CreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResponseValidationError) ErrorName() string { return "CreateResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResponseValidationError{}

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on ProfileV2 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileV2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileV2 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileV2MultiError, or nil
// if none found.
func (m *ProfileV2) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileV2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileV2ValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileV2ValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileV2ValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileV2MultiError(errors)
	}

	return nil
}

// ProfileV2MultiError is an error wrapping multiple validation errors returned
// by ProfileV2.ValidateAll() if the designated constraints aren't met.
type ProfileV2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileV2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileV2MultiError) AllErrors() []error { return m }

// ProfileV2ValidationError is the validation error returned by
// ProfileV2.Validate if the designated constraints aren't met.
type ProfileV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileV2ValidationError) ErrorName() string { return "ProfileV2ValidationError" }

// Error satisfies the builtin error interface
func (e ProfileV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileV2ValidationError{}

// Validate checks the field values on ProfileV3 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileV3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileV3 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileV3MultiError, or nil
// if none found.
func (m *ProfileV3) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileV3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileV3ValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileV3ValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileV3ValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileV3MultiError(errors)
	}

	return nil
}

// ProfileV3MultiError is an error wrapping multiple validation errors returned
// by ProfileV3.ValidateAll() if the designated constraints aren't met.
type ProfileV3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileV3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileV3MultiError) AllErrors() []error { return m }

// ProfileV3ValidationError is the validation error returned by
// ProfileV3.Validate if the designated constraints aren't met.
type ProfileV3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileV3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileV3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileV3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileV3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileV3ValidationError) ErrorName() string { return "ProfileV3ValidationError" }

// Error satisfies the builtin error interface
func (e ProfileV3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileV3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileV3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileV3ValidationError{}

// Validate checks the field values on ProfileV4 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileV4) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileV4 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileV4MultiError, or nil
// if none found.
func (m *ProfileV4) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileV4) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileV4ValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileV4ValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileV4ValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileV4MultiError(errors)
	}

	return nil
}

// ProfileV4MultiError is an error wrapping multiple validation errors returned
// by ProfileV4.ValidateAll() if the designated constraints aren't met.
type ProfileV4MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileV4MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileV4MultiError) AllErrors() []error { return m }

// ProfileV4ValidationError is the validation error returned by
// ProfileV4.Validate if the designated constraints aren't met.
type ProfileV4ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileV4ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileV4ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileV4ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileV4ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileV4ValidationError) ErrorName() string { return "ProfileV4ValidationError" }

// Error satisfies the builtin error interface
func (e ProfileV4ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileV4.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileV4ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileV4ValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Username

	// no validation rules for Vip

	// no validation rules for SegmentID

	// no validation rules for RefID

	// no validation rules for Email

	// no validation rules for Password

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WhiteLabelID

	// no validation rules for ApiKey

	// no validation rules for Role

	// no validation rules for OldID

	// no validation rules for Suspended

	// no validation rules for ParentId

	// no validation rules for IsActive

	// no validation rules for NewRefId

	// no validation rules for Language

	// no validation rules for TgId

	// no validation rules for TgUsername

	// no validation rules for IsAmbassador

	if m.PoolType != nil {
		// no validation rules for PoolType
	}

	if m.OldParentId != nil {
		// no validation rules for OldParentId
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserV2 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserV2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserV2 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserV2MultiError, or nil if none found.
func (m *UserV2) ValidateAll() error {
	return m.validate(true)
}

func (m *UserV2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Username

	// no validation rules for Vip

	// no validation rules for SegmentID

	// no validation rules for RefID

	// no validation rules for Email

	// no validation rules for Password

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserV2ValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserV2ValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserV2ValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WhiteLabelID

	// no validation rules for ApiKey

	// no validation rules for Role

	// no validation rules for OldID

	// no validation rules for IsActive

	// no validation rules for AppleId

	// no validation rules for ParentId

	// no validation rules for NewRefId

	// no validation rules for Language

	// no validation rules for TgId

	// no validation rules for TgUsername

	if m.PoolType != nil {
		// no validation rules for PoolType
	}

	if m.OldParentId != nil {
		// no validation rules for OldParentId
	}

	if len(errors) > 0 {
		return UserV2MultiError(errors)
	}

	return nil
}

// UserV2MultiError is an error wrapping multiple validation errors returned by
// UserV2.ValidateAll() if the designated constraints aren't met.
type UserV2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserV2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserV2MultiError) AllErrors() []error { return m }

// UserV2ValidationError is the validation error returned by UserV2.Validate if
// the designated constraints aren't met.
type UserV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserV2ValidationError) ErrorName() string { return "UserV2ValidationError" }

// Error satisfies the builtin error interface
func (e UserV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserV2ValidationError{}

// Validate checks the field values on SaveV3Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveV3Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveV3Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveV3RequestMultiError, or
// nil if none found.
func (m *SaveV3Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveV3Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveV3RequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveV3RequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveV3RequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveV3RequestMultiError(errors)
	}

	return nil
}

// SaveV3RequestMultiError is an error wrapping multiple validation errors
// returned by SaveV3Request.ValidateAll() if the designated constraints
// aren't met.
type SaveV3RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveV3RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveV3RequestMultiError) AllErrors() []error { return m }

// SaveV3RequestValidationError is the validation error returned by
// SaveV3Request.Validate if the designated constraints aren't met.
type SaveV3RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveV3RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveV3RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveV3RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveV3RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveV3RequestValidationError) ErrorName() string { return "SaveV3RequestValidationError" }

// Error satisfies the builtin error interface
func (e SaveV3RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveV3Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveV3RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveV3RequestValidationError{}

// Validate checks the field values on SaveV3Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveV3Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveV3Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveV3ResponseMultiError,
// or nil if none found.
func (m *SaveV3Response) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveV3Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return SaveV3ResponseMultiError(errors)
	}

	return nil
}

// SaveV3ResponseMultiError is an error wrapping multiple validation errors
// returned by SaveV3Response.ValidateAll() if the designated constraints
// aren't met.
type SaveV3ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveV3ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveV3ResponseMultiError) AllErrors() []error { return m }

// SaveV3ResponseValidationError is the validation error returned by
// SaveV3Response.Validate if the designated constraints aren't met.
type SaveV3ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveV3ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveV3ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveV3ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveV3ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveV3ResponseValidationError) ErrorName() string { return "SaveV3ResponseValidationError" }

// Error satisfies the builtin error interface
func (e SaveV3ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveV3Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveV3ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveV3ResponseValidationError{}

// Validate checks the field values on GetByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByUserIDRequestMultiError, or nil if none found.
func (m *GetByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetByUserIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetByUserIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUserIDRequestMultiError) AllErrors() []error { return m }

// GetByUserIDRequestValidationError is the validation error returned by
// GetByUserIDRequest.Validate if the designated constraints aren't met.
type GetByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUserIDRequestValidationError) ErrorName() string {
	return "GetByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUserIDRequestValidationError{}

// Validate checks the field values on GetByUserIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUserIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByUserIDResponseMultiError, or nil if none found.
func (m *GetByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByUserIDResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByUserIDResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByUserIDResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetByUserIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetByUserIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUserIDResponseMultiError) AllErrors() []error { return m }

// GetByUserIDResponseValidationError is the validation error returned by
// GetByUserIDResponse.Validate if the designated constraints aren't met.
type GetByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUserIDResponseValidationError) ErrorName() string {
	return "GetByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUserIDResponseValidationError{}

// Validate checks the field values on GetByUserIDV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByUserIDV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUserIDV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByUserIDV2RequestMultiError, or nil if none found.
func (m *GetByUserIDV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUserIDV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetByUserIDV2RequestMultiError(errors)
	}

	return nil
}

// GetByUserIDV2RequestMultiError is an error wrapping multiple validation
// errors returned by GetByUserIDV2Request.ValidateAll() if the designated
// constraints aren't met.
type GetByUserIDV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUserIDV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUserIDV2RequestMultiError) AllErrors() []error { return m }

// GetByUserIDV2RequestValidationError is the validation error returned by
// GetByUserIDV2Request.Validate if the designated constraints aren't met.
type GetByUserIDV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUserIDV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUserIDV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUserIDV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUserIDV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUserIDV2RequestValidationError) ErrorName() string {
	return "GetByUserIDV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUserIDV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUserIDV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUserIDV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUserIDV2RequestValidationError{}

// Validate checks the field values on GetByUserIDV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByUserIDV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUserIDV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByUserIDV2ResponseMultiError, or nil if none found.
func (m *GetByUserIDV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUserIDV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByUserIDV2ResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByUserIDV2ResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByUserIDV2ResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByUserIDV2ResponseMultiError(errors)
	}

	return nil
}

// GetByUserIDV2ResponseMultiError is an error wrapping multiple validation
// errors returned by GetByUserIDV2Response.ValidateAll() if the designated
// constraints aren't met.
type GetByUserIDV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUserIDV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUserIDV2ResponseMultiError) AllErrors() []error { return m }

// GetByUserIDV2ResponseValidationError is the validation error returned by
// GetByUserIDV2Response.Validate if the designated constraints aren't met.
type GetByUserIDV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUserIDV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUserIDV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUserIDV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUserIDV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUserIDV2ResponseValidationError) ErrorName() string {
	return "GetByUserIDV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUserIDV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUserIDV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUserIDV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUserIDV2ResponseValidationError{}

// Validate checks the field values on GetUserIDByOldIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIDByOldIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIDByOldIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIDByOldIDRequestMultiError, or nil if none found.
func (m *GetUserIDByOldIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIDByOldIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OldId

	if len(errors) > 0 {
		return GetUserIDByOldIDRequestMultiError(errors)
	}

	return nil
}

// GetUserIDByOldIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserIDByOldIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserIDByOldIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIDByOldIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIDByOldIDRequestMultiError) AllErrors() []error { return m }

// GetUserIDByOldIDRequestValidationError is the validation error returned by
// GetUserIDByOldIDRequest.Validate if the designated constraints aren't met.
type GetUserIDByOldIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIDByOldIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIDByOldIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIDByOldIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIDByOldIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIDByOldIDRequestValidationError) ErrorName() string {
	return "GetUserIDByOldIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIDByOldIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIDByOldIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIDByOldIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIDByOldIDRequestValidationError{}

// Validate checks the field values on GetUserIDByOldIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIDByOldIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIDByOldIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIDByOldIDResponseMultiError, or nil if none found.
func (m *GetUserIDByOldIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIDByOldIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetUserIDByOldIDResponseMultiError(errors)
	}

	return nil
}

// GetUserIDByOldIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserIDByOldIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserIDByOldIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIDByOldIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIDByOldIDResponseMultiError) AllErrors() []error { return m }

// GetUserIDByOldIDResponseValidationError is the validation error returned by
// GetUserIDByOldIDResponse.Validate if the designated constraints aren't met.
type GetUserIDByOldIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIDByOldIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIDByOldIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIDByOldIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIDByOldIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIDByOldIDResponseValidationError) ErrorName() string {
	return "GetUserIDByOldIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIDByOldIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIDByOldIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIDByOldIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIDByOldIDResponseValidationError{}

// Validate checks the field values on GetByUsernamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByUsernamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUsernamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByUsernamesRequestMultiError, or nil if none found.
func (m *GetByUsernamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUsernamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetByUsernamesRequestMultiError(errors)
	}

	return nil
}

// GetByUsernamesRequestMultiError is an error wrapping multiple validation
// errors returned by GetByUsernamesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetByUsernamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUsernamesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUsernamesRequestMultiError) AllErrors() []error { return m }

// GetByUsernamesRequestValidationError is the validation error returned by
// GetByUsernamesRequest.Validate if the designated constraints aren't met.
type GetByUsernamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUsernamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUsernamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUsernamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUsernamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUsernamesRequestValidationError) ErrorName() string {
	return "GetByUsernamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUsernamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUsernamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUsernamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUsernamesRequestValidationError{}

// Validate checks the field values on GetByUsernamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByUsernamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUsernamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByUsernamesResponseMultiError, or nil if none found.
func (m *GetByUsernamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUsernamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfile() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetByUsernamesResponseValidationError{
						field:  fmt.Sprintf("Profile[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetByUsernamesResponseValidationError{
						field:  fmt.Sprintf("Profile[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByUsernamesResponseValidationError{
					field:  fmt.Sprintf("Profile[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetByUsernamesResponseMultiError(errors)
	}

	return nil
}

// GetByUsernamesResponseMultiError is an error wrapping multiple validation
// errors returned by GetByUsernamesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetByUsernamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUsernamesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUsernamesResponseMultiError) AllErrors() []error { return m }

// GetByUsernamesResponseValidationError is the validation error returned by
// GetByUsernamesResponse.Validate if the designated constraints aren't met.
type GetByUsernamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUsernamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUsernamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUsernamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUsernamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUsernamesResponseValidationError) ErrorName() string {
	return "GetByUsernamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUsernamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUsernamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUsernamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUsernamesResponseValidationError{}

// Validate checks the field values on UpdatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordRequestMultiError, or nil if none found.
func (m *UpdatePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for WhiteLabelID

	if len(errors) > 0 {
		return UpdatePasswordRequestMultiError(errors)
	}

	return nil
}

// UpdatePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordRequestMultiError) AllErrors() []error { return m }

// UpdatePasswordRequestValidationError is the validation error returned by
// UpdatePasswordRequest.Validate if the designated constraints aren't met.
type UpdatePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordRequestValidationError) ErrorName() string {
	return "UpdatePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordRequestValidationError{}

// Validate checks the field values on UpdatePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordResponseMultiError, or nil if none found.
func (m *UpdatePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePasswordResponseMultiError(errors)
	}

	return nil
}

// UpdatePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordResponseMultiError) AllErrors() []error { return m }

// UpdatePasswordResponseValidationError is the validation error returned by
// UpdatePasswordResponse.Validate if the designated constraints aren't met.
type UpdatePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordResponseValidationError) ErrorName() string {
	return "UpdatePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordResponseValidationError{}

// Validate checks the field values on GetUserByEmailAndWlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailAndWlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailAndWlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByEmailAndWlRequestMultiError, or nil if none found.
func (m *GetUserByEmailAndWlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailAndWlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for WhiteLabelID

	if len(errors) > 0 {
		return GetUserByEmailAndWlRequestMultiError(errors)
	}

	return nil
}

// GetUserByEmailAndWlRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserByEmailAndWlRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserByEmailAndWlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailAndWlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailAndWlRequestMultiError) AllErrors() []error { return m }

// GetUserByEmailAndWlRequestValidationError is the validation error returned
// by GetUserByEmailAndWlRequest.Validate if the designated constraints aren't met.
type GetUserByEmailAndWlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailAndWlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailAndWlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailAndWlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailAndWlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailAndWlRequestValidationError) ErrorName() string {
	return "GetUserByEmailAndWlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailAndWlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailAndWlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailAndWlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailAndWlRequestValidationError{}

// Validate checks the field values on GetUserByEmailAndWlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByEmailAndWlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByEmailAndWlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByEmailAndWlResponseMultiError, or nil if none found.
func (m *GetUserByEmailAndWlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByEmailAndWlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByEmailAndWlResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByEmailAndWlResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByEmailAndWlResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByEmailAndWlResponseMultiError(errors)
	}

	return nil
}

// GetUserByEmailAndWlResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserByEmailAndWlResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserByEmailAndWlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByEmailAndWlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByEmailAndWlResponseMultiError) AllErrors() []error { return m }

// GetUserByEmailAndWlResponseValidationError is the validation error returned
// by GetUserByEmailAndWlResponse.Validate if the designated constraints
// aren't met.
type GetUserByEmailAndWlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByEmailAndWlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByEmailAndWlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByEmailAndWlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByEmailAndWlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByEmailAndWlResponseValidationError) ErrorName() string {
	return "GetUserByEmailAndWlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByEmailAndWlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByEmailAndWlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByEmailAndWlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByEmailAndWlResponseValidationError{}

// Validate checks the field values on GetOldUserByEmailAndWlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOldUserByEmailAndWlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOldUserByEmailAndWlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOldUserByEmailAndWlRequestMultiError, or nil if none found.
func (m *GetOldUserByEmailAndWlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOldUserByEmailAndWlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for WhiteLabelID

	if len(errors) > 0 {
		return GetOldUserByEmailAndWlRequestMultiError(errors)
	}

	return nil
}

// GetOldUserByEmailAndWlRequestMultiError is an error wrapping multiple
// validation errors returned by GetOldUserByEmailAndWlRequest.ValidateAll()
// if the designated constraints aren't met.
type GetOldUserByEmailAndWlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOldUserByEmailAndWlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOldUserByEmailAndWlRequestMultiError) AllErrors() []error { return m }

// GetOldUserByEmailAndWlRequestValidationError is the validation error
// returned by GetOldUserByEmailAndWlRequest.Validate if the designated
// constraints aren't met.
type GetOldUserByEmailAndWlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOldUserByEmailAndWlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOldUserByEmailAndWlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOldUserByEmailAndWlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOldUserByEmailAndWlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOldUserByEmailAndWlRequestValidationError) ErrorName() string {
	return "GetOldUserByEmailAndWlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOldUserByEmailAndWlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOldUserByEmailAndWlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOldUserByEmailAndWlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOldUserByEmailAndWlRequestValidationError{}

// Validate checks the field values on GetOldUserByEmailAndWlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOldUserByEmailAndWlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOldUserByEmailAndWlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOldUserByEmailAndWlResponseMultiError, or nil if none found.
func (m *GetOldUserByEmailAndWlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOldUserByEmailAndWlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOldUserByEmailAndWlResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOldUserByEmailAndWlResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOldUserByEmailAndWlResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOldUserByEmailAndWlResponseMultiError(errors)
	}

	return nil
}

// GetOldUserByEmailAndWlResponseMultiError is an error wrapping multiple
// validation errors returned by GetOldUserByEmailAndWlResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOldUserByEmailAndWlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOldUserByEmailAndWlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOldUserByEmailAndWlResponseMultiError) AllErrors() []error { return m }

// GetOldUserByEmailAndWlResponseValidationError is the validation error
// returned by GetOldUserByEmailAndWlResponse.Validate if the designated
// constraints aren't met.
type GetOldUserByEmailAndWlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOldUserByEmailAndWlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOldUserByEmailAndWlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOldUserByEmailAndWlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOldUserByEmailAndWlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOldUserByEmailAndWlResponseValidationError) ErrorName() string {
	return "GetOldUserByEmailAndWlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOldUserByEmailAndWlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOldUserByEmailAndWlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOldUserByEmailAndWlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOldUserByEmailAndWlResponseValidationError{}

// Validate checks the field values on GetAllUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersRequestMultiError, or nil if none found.
func (m *GetAllUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Take

	// no validation rules for Skip

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllUsersRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllUsersRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllUsersRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SearchEmail

	if len(errors) > 0 {
		return GetAllUsersRequestMultiError(errors)
	}

	return nil
}

// GetAllUsersRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersRequestMultiError) AllErrors() []error { return m }

// GetAllUsersRequestValidationError is the validation error returned by
// GetAllUsersRequest.Validate if the designated constraints aren't met.
type GetAllUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersRequestValidationError) ErrorName() string {
	return "GetAllUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersRequestValidationError{}

// Validate checks the field values on Sort with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sort with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SortMultiError, or nil if none found.
func (m *Sort) ValidateAll() error {
	return m.validate(true)
}

func (m *Sort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Asc

	if len(errors) > 0 {
		return SortMultiError(errors)
	}

	return nil
}

// SortMultiError is an error wrapping multiple validation errors returned by
// Sort.ValidateAll() if the designated constraints aren't met.
type SortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortMultiError) AllErrors() []error { return m }

// SortValidationError is the validation error returned by Sort.Validate if the
// designated constraints aren't met.
type SortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortValidationError) ErrorName() string { return "SortValidationError" }

// Error satisfies the builtin error interface
func (e SortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortValidationError{}

// Validate checks the field values on GetAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersResponseMultiError, or nil if none found.
func (m *GetAllUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetAllUsersResponseMultiError(errors)
	}

	return nil
}

// GetAllUsersResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersResponseMultiError) AllErrors() []error { return m }

// GetAllUsersResponseValidationError is the validation error returned by
// GetAllUsersResponse.Validate if the designated constraints aren't met.
type GetAllUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersResponseValidationError) ErrorName() string {
	return "GetAllUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersResponseValidationError{}

// Validate checks the field values on GetAllUsersByWlIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersByWlIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersByWlIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersByWlIDRequestMultiError, or nil if none found.
func (m *GetAllUsersByWlIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersByWlIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Take

	// no validation rules for Skip

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllUsersByWlIDRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllUsersByWlIDRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllUsersByWlIDRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SearchEmail

	// no validation rules for WhiteLabelID

	if len(errors) > 0 {
		return GetAllUsersByWlIDRequestMultiError(errors)
	}

	return nil
}

// GetAllUsersByWlIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllUsersByWlIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllUsersByWlIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersByWlIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersByWlIDRequestMultiError) AllErrors() []error { return m }

// GetAllUsersByWlIDRequestValidationError is the validation error returned by
// GetAllUsersByWlIDRequest.Validate if the designated constraints aren't met.
type GetAllUsersByWlIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersByWlIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersByWlIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersByWlIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersByWlIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersByWlIDRequestValidationError) ErrorName() string {
	return "GetAllUsersByWlIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsersByWlIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersByWlIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersByWlIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersByWlIDRequestValidationError{}

// Validate checks the field values on GetAllUsersByWlIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersByWlIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersByWlIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersByWlIDResponseMultiError, or nil if none found.
func (m *GetAllUsersByWlIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersByWlIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUsersByWlIDResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUsersByWlIDResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUsersByWlIDResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetAllUsersByWlIDResponseMultiError(errors)
	}

	return nil
}

// GetAllUsersByWlIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllUsersByWlIDResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllUsersByWlIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersByWlIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersByWlIDResponseMultiError) AllErrors() []error { return m }

// GetAllUsersByWlIDResponseValidationError is the validation error returned by
// GetAllUsersByWlIDResponse.Validate if the designated constraints aren't met.
type GetAllUsersByWlIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersByWlIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersByWlIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersByWlIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersByWlIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersByWlIDResponseValidationError) ErrorName() string {
	return "GetAllUsersByWlIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsersByWlIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersByWlIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersByWlIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersByWlIDResponseValidationError{}

// Validate checks the field values on GetUserByApiKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByApiKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByApiKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByApiKeyRequestMultiError, or nil if none found.
func (m *GetUserByApiKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByApiKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return GetUserByApiKeyRequestMultiError(errors)
	}

	return nil
}

// GetUserByApiKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserByApiKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserByApiKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByApiKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByApiKeyRequestMultiError) AllErrors() []error { return m }

// GetUserByApiKeyRequestValidationError is the validation error returned by
// GetUserByApiKeyRequest.Validate if the designated constraints aren't met.
type GetUserByApiKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByApiKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByApiKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByApiKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByApiKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByApiKeyRequestValidationError) ErrorName() string {
	return "GetUserByApiKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByApiKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByApiKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByApiKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByApiKeyRequestValidationError{}

// Validate checks the field values on GetUserByApiKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByApiKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByApiKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByApiKeyResponseMultiError, or nil if none found.
func (m *GetUserByApiKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByApiKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByApiKeyResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByApiKeyResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByApiKeyResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByApiKeyResponseMultiError(errors)
	}

	return nil
}

// GetUserByApiKeyResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByApiKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserByApiKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByApiKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByApiKeyResponseMultiError) AllErrors() []error { return m }

// GetUserByApiKeyResponseValidationError is the validation error returned by
// GetUserByApiKeyResponse.Validate if the designated constraints aren't met.
type GetUserByApiKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByApiKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByApiKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByApiKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByApiKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByApiKeyResponseValidationError) ErrorName() string {
	return "GetUserByApiKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByApiKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByApiKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByApiKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByApiKeyResponseValidationError{}

// Validate checks the field values on GetOldByEmailAndWlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOldByEmailAndWlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOldByEmailAndWlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOldByEmailAndWlRequestMultiError, or nil if none found.
func (m *GetOldByEmailAndWlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOldByEmailAndWlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for WhiteLabelID

	if len(errors) > 0 {
		return GetOldByEmailAndWlRequestMultiError(errors)
	}

	return nil
}

// GetOldByEmailAndWlRequestMultiError is an error wrapping multiple validation
// errors returned by GetOldByEmailAndWlRequest.ValidateAll() if the
// designated constraints aren't met.
type GetOldByEmailAndWlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOldByEmailAndWlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOldByEmailAndWlRequestMultiError) AllErrors() []error { return m }

// GetOldByEmailAndWlRequestValidationError is the validation error returned by
// GetOldByEmailAndWlRequest.Validate if the designated constraints aren't met.
type GetOldByEmailAndWlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOldByEmailAndWlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOldByEmailAndWlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOldByEmailAndWlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOldByEmailAndWlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOldByEmailAndWlRequestValidationError) ErrorName() string {
	return "GetOldByEmailAndWlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOldByEmailAndWlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOldByEmailAndWlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOldByEmailAndWlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOldByEmailAndWlRequestValidationError{}

// Validate checks the field values on GetOldByEmailAndWlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOldByEmailAndWlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOldByEmailAndWlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOldByEmailAndWlResponseMultiError, or nil if none found.
func (m *GetOldByEmailAndWlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOldByEmailAndWlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOldByEmailAndWlResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOldByEmailAndWlResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOldByEmailAndWlResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOldByEmailAndWlResponseMultiError(errors)
	}

	return nil
}

// GetOldByEmailAndWlResponseMultiError is an error wrapping multiple
// validation errors returned by GetOldByEmailAndWlResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOldByEmailAndWlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOldByEmailAndWlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOldByEmailAndWlResponseMultiError) AllErrors() []error { return m }

// GetOldByEmailAndWlResponseValidationError is the validation error returned
// by GetOldByEmailAndWlResponse.Validate if the designated constraints aren't met.
type GetOldByEmailAndWlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOldByEmailAndWlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOldByEmailAndWlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOldByEmailAndWlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOldByEmailAndWlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOldByEmailAndWlResponseValidationError) ErrorName() string {
	return "GetOldByEmailAndWlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOldByEmailAndWlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOldByEmailAndWlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOldByEmailAndWlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOldByEmailAndWlResponseValidationError{}

// Validate checks the field values on GetOldByEmailAndWlV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOldByEmailAndWlV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOldByEmailAndWlV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOldByEmailAndWlV2RequestMultiError, or nil if none found.
func (m *GetOldByEmailAndWlV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOldByEmailAndWlV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for WhiteLabelID

	if len(errors) > 0 {
		return GetOldByEmailAndWlV2RequestMultiError(errors)
	}

	return nil
}

// GetOldByEmailAndWlV2RequestMultiError is an error wrapping multiple
// validation errors returned by GetOldByEmailAndWlV2Request.ValidateAll() if
// the designated constraints aren't met.
type GetOldByEmailAndWlV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOldByEmailAndWlV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOldByEmailAndWlV2RequestMultiError) AllErrors() []error { return m }

// GetOldByEmailAndWlV2RequestValidationError is the validation error returned
// by GetOldByEmailAndWlV2Request.Validate if the designated constraints
// aren't met.
type GetOldByEmailAndWlV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOldByEmailAndWlV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOldByEmailAndWlV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOldByEmailAndWlV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOldByEmailAndWlV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOldByEmailAndWlV2RequestValidationError) ErrorName() string {
	return "GetOldByEmailAndWlV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOldByEmailAndWlV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOldByEmailAndWlV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOldByEmailAndWlV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOldByEmailAndWlV2RequestValidationError{}

// Validate checks the field values on GetOldByEmailAndWlV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOldByEmailAndWlV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOldByEmailAndWlV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOldByEmailAndWlV2ResponseMultiError, or nil if none found.
func (m *GetOldByEmailAndWlV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOldByEmailAndWlV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOldByEmailAndWlV2ResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOldByEmailAndWlV2ResponseValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOldByEmailAndWlV2ResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOldByEmailAndWlV2ResponseMultiError(errors)
	}

	return nil
}

// GetOldByEmailAndWlV2ResponseMultiError is an error wrapping multiple
// validation errors returned by GetOldByEmailAndWlV2Response.ValidateAll() if
// the designated constraints aren't met.
type GetOldByEmailAndWlV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOldByEmailAndWlV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOldByEmailAndWlV2ResponseMultiError) AllErrors() []error { return m }

// GetOldByEmailAndWlV2ResponseValidationError is the validation error returned
// by GetOldByEmailAndWlV2Response.Validate if the designated constraints
// aren't met.
type GetOldByEmailAndWlV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOldByEmailAndWlV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOldByEmailAndWlV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOldByEmailAndWlV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOldByEmailAndWlV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOldByEmailAndWlV2ResponseValidationError) ErrorName() string {
	return "GetOldByEmailAndWlV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOldByEmailAndWlV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOldByEmailAndWlV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOldByEmailAndWlV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOldByEmailAndWlV2ResponseValidationError{}

// Validate checks the field values on GetSuspendedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuspendedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuspendedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuspendedRequestMultiError, or nil if none found.
func (m *GetSuspendedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuspendedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetSuspendedRequestMultiError(errors)
	}

	return nil
}

// GetSuspendedRequestMultiError is an error wrapping multiple validation
// errors returned by GetSuspendedRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSuspendedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuspendedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuspendedRequestMultiError) AllErrors() []error { return m }

// GetSuspendedRequestValidationError is the validation error returned by
// GetSuspendedRequest.Validate if the designated constraints aren't met.
type GetSuspendedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuspendedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuspendedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuspendedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuspendedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuspendedRequestValidationError) ErrorName() string {
	return "GetSuspendedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuspendedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuspendedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuspendedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuspendedRequestValidationError{}

// Validate checks the field values on GetSuspendedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuspendedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuspendedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuspendedResponseMultiError, or nil if none found.
func (m *GetSuspendedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuspendedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Suspended

	if len(errors) > 0 {
		return GetSuspendedResponseMultiError(errors)
	}

	return nil
}

// GetSuspendedResponseMultiError is an error wrapping multiple validation
// errors returned by GetSuspendedResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSuspendedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuspendedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuspendedResponseMultiError) AllErrors() []error { return m }

// GetSuspendedResponseValidationError is the validation error returned by
// GetSuspendedResponse.Validate if the designated constraints aren't met.
type GetSuspendedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuspendedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuspendedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuspendedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuspendedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuspendedResponseValidationError) ErrorName() string {
	return "GetSuspendedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuspendedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuspendedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuspendedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuspendedResponseValidationError{}

// Validate checks the field values on SetSuspendedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSuspendedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSuspendedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSuspendedRequestMultiError, or nil if none found.
func (m *SetSuspendedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSuspendedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Suspended

	if len(errors) > 0 {
		return SetSuspendedRequestMultiError(errors)
	}

	return nil
}

// SetSuspendedRequestMultiError is an error wrapping multiple validation
// errors returned by SetSuspendedRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSuspendedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSuspendedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSuspendedRequestMultiError) AllErrors() []error { return m }

// SetSuspendedRequestValidationError is the validation error returned by
// SetSuspendedRequest.Validate if the designated constraints aren't met.
type SetSuspendedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSuspendedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSuspendedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSuspendedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSuspendedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSuspendedRequestValidationError) ErrorName() string {
	return "SetSuspendedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSuspendedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSuspendedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSuspendedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSuspendedRequestValidationError{}

// Validate checks the field values on SetSuspendedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSuspendedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSuspendedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSuspendedResponseMultiError, or nil if none found.
func (m *SetSuspendedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSuspendedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSuspendedResponseMultiError(errors)
	}

	return nil
}

// SetSuspendedResponseMultiError is an error wrapping multiple validation
// errors returned by SetSuspendedResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSuspendedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSuspendedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSuspendedResponseMultiError) AllErrors() []error { return m }

// SetSuspendedResponseValidationError is the validation error returned by
// SetSuspendedResponse.Validate if the designated constraints aren't met.
type SetSuspendedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSuspendedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSuspendedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSuspendedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSuspendedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSuspendedResponseValidationError) ErrorName() string {
	return "SetSuspendedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSuspendedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSuspendedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSuspendedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSuspendedResponseValidationError{}

// Validate checks the field values on ChangeWalletAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeWalletAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeWalletAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeWalletAddressRequestMultiError, or nil if none found.
func (m *ChangeWalletAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeWalletAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Ip

	// no validation rules for Coin

	// no validation rules for Address

	// no validation rules for Domain

	if len(errors) > 0 {
		return ChangeWalletAddressRequestMultiError(errors)
	}

	return nil
}

// ChangeWalletAddressRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeWalletAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeWalletAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeWalletAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeWalletAddressRequestMultiError) AllErrors() []error { return m }

// ChangeWalletAddressRequestValidationError is the validation error returned
// by ChangeWalletAddressRequest.Validate if the designated constraints aren't met.
type ChangeWalletAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeWalletAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeWalletAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeWalletAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeWalletAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeWalletAddressRequestValidationError) ErrorName() string {
	return "ChangeWalletAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeWalletAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeWalletAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeWalletAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeWalletAddressRequestValidationError{}

// Validate checks the field values on ChangeWalletAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeWalletAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeWalletAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeWalletAddressResponseMultiError, or nil if none found.
func (m *ChangeWalletAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeWalletAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeWalletAddressResponseMultiError(errors)
	}

	return nil
}

// ChangeWalletAddressResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeWalletAddressResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeWalletAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeWalletAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeWalletAddressResponseMultiError) AllErrors() []error { return m }

// ChangeWalletAddressResponseValidationError is the validation error returned
// by ChangeWalletAddressResponse.Validate if the designated constraints
// aren't met.
type ChangeWalletAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeWalletAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeWalletAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeWalletAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeWalletAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeWalletAddressResponseValidationError) ErrorName() string {
	return "ChangeWalletAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeWalletAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeWalletAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeWalletAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeWalletAddressResponseValidationError{}

// Validate checks the field values on UpdateMinPayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMinPayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMinPayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMinPayRequestMultiError, or nil if none found.
func (m *UpdateMinPayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMinPayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Coin

	// no validation rules for Value

	if len(errors) > 0 {
		return UpdateMinPayRequestMultiError(errors)
	}

	return nil
}

// UpdateMinPayRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMinPayRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMinPayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMinPayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMinPayRequestMultiError) AllErrors() []error { return m }

// UpdateMinPayRequestValidationError is the validation error returned by
// UpdateMinPayRequest.Validate if the designated constraints aren't met.
type UpdateMinPayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMinPayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMinPayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMinPayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMinPayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMinPayRequestValidationError) ErrorName() string {
	return "UpdateMinPayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMinPayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMinPayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMinPayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMinPayRequestValidationError{}

// Validate checks the field values on UpdateMinPayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMinPayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMinPayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMinPayResponseMultiError, or nil if none found.
func (m *UpdateMinPayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMinPayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMinPayResponseMultiError(errors)
	}

	return nil
}

// UpdateMinPayResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMinPayResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMinPayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMinPayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMinPayResponseMultiError) AllErrors() []error { return m }

// UpdateMinPayResponseValidationError is the validation error returned by
// UpdateMinPayResponse.Validate if the designated constraints aren't met.
type UpdateMinPayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMinPayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMinPayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMinPayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMinPayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMinPayResponseValidationError) ErrorName() string {
	return "UpdateMinPayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMinPayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMinPayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMinPayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMinPayResponseValidationError{}

// Validate checks the field values on ChangeWalletAddressConfirmRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeWalletAddressConfirmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeWalletAddressConfirmRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeWalletAddressConfirmRequestMultiError, or nil if none found.
func (m *ChangeWalletAddressConfirmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeWalletAddressConfirmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return ChangeWalletAddressConfirmRequestMultiError(errors)
	}

	return nil
}

// ChangeWalletAddressConfirmRequestMultiError is an error wrapping multiple
// validation errors returned by
// ChangeWalletAddressConfirmRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeWalletAddressConfirmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeWalletAddressConfirmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeWalletAddressConfirmRequestMultiError) AllErrors() []error { return m }

// ChangeWalletAddressConfirmRequestValidationError is the validation error
// returned by ChangeWalletAddressConfirmRequest.Validate if the designated
// constraints aren't met.
type ChangeWalletAddressConfirmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeWalletAddressConfirmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeWalletAddressConfirmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeWalletAddressConfirmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeWalletAddressConfirmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeWalletAddressConfirmRequestValidationError) ErrorName() string {
	return "ChangeWalletAddressConfirmRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeWalletAddressConfirmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeWalletAddressConfirmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeWalletAddressConfirmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeWalletAddressConfirmRequestValidationError{}

// Validate checks the field values on ChangeWalletAddressConfirmResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeWalletAddressConfirmResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeWalletAddressConfirmResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeWalletAddressConfirmResponseMultiError, or nil if none found.
func (m *ChangeWalletAddressConfirmResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeWalletAddressConfirmResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for UserId

	// no validation rules for CoinId

	if len(errors) > 0 {
		return ChangeWalletAddressConfirmResponseMultiError(errors)
	}

	return nil
}

// ChangeWalletAddressConfirmResponseMultiError is an error wrapping multiple
// validation errors returned by
// ChangeWalletAddressConfirmResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeWalletAddressConfirmResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeWalletAddressConfirmResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeWalletAddressConfirmResponseMultiError) AllErrors() []error { return m }

// ChangeWalletAddressConfirmResponseValidationError is the validation error
// returned by ChangeWalletAddressConfirmResponse.Validate if the designated
// constraints aren't met.
type ChangeWalletAddressConfirmResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeWalletAddressConfirmResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeWalletAddressConfirmResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeWalletAddressConfirmResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeWalletAddressConfirmResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeWalletAddressConfirmResponseValidationError) ErrorName() string {
	return "ChangeWalletAddressConfirmResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeWalletAddressConfirmResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeWalletAddressConfirmResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeWalletAddressConfirmResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeWalletAddressConfirmResponseValidationError{}

// Validate checks the field values on UpdateUserIsActiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserIsActiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserIsActiveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserIsActiveRequestMultiError, or nil if none found.
func (m *UpdateUserIsActiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserIsActiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Active

	if len(errors) > 0 {
		return UpdateUserIsActiveRequestMultiError(errors)
	}

	return nil
}

// UpdateUserIsActiveRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserIsActiveRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserIsActiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserIsActiveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserIsActiveRequestMultiError) AllErrors() []error { return m }

// UpdateUserIsActiveRequestValidationError is the validation error returned by
// UpdateUserIsActiveRequest.Validate if the designated constraints aren't met.
type UpdateUserIsActiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserIsActiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserIsActiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserIsActiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserIsActiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserIsActiveRequestValidationError) ErrorName() string {
	return "UpdateUserIsActiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserIsActiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserIsActiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserIsActiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserIsActiveRequestValidationError{}

// Validate checks the field values on UpdateUserIsActiveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserIsActiveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserIsActiveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserIsActiveResponseMultiError, or nil if none found.
func (m *UpdateUserIsActiveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserIsActiveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserIsActiveResponseMultiError(errors)
	}

	return nil
}

// UpdateUserIsActiveResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserIsActiveResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserIsActiveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserIsActiveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserIsActiveResponseMultiError) AllErrors() []error { return m }

// UpdateUserIsActiveResponseValidationError is the validation error returned
// by UpdateUserIsActiveResponse.Validate if the designated constraints aren't met.
type UpdateUserIsActiveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserIsActiveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserIsActiveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserIsActiveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserIsActiveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserIsActiveResponseValidationError) ErrorName() string {
	return "UpdateUserIsActiveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserIsActiveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserIsActiveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserIsActiveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserIsActiveResponseValidationError{}

// Validate checks the field values on GetUserIsActiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIsActiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIsActiveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIsActiveRequestMultiError, or nil if none found.
func (m *GetUserIsActiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIsActiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserIsActiveRequestMultiError(errors)
	}

	return nil
}

// GetUserIsActiveRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserIsActiveRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserIsActiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIsActiveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIsActiveRequestMultiError) AllErrors() []error { return m }

// GetUserIsActiveRequestValidationError is the validation error returned by
// GetUserIsActiveRequest.Validate if the designated constraints aren't met.
type GetUserIsActiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIsActiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIsActiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIsActiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIsActiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIsActiveRequestValidationError) ErrorName() string {
	return "GetUserIsActiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIsActiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIsActiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIsActiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIsActiveRequestValidationError{}

// Validate checks the field values on GetUserIsActiveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIsActiveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIsActiveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserIsActiveResponseMultiError, or nil if none found.
func (m *GetUserIsActiveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIsActiveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsActive

	if len(errors) > 0 {
		return GetUserIsActiveResponseMultiError(errors)
	}

	return nil
}

// GetUserIsActiveResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserIsActiveResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserIsActiveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIsActiveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIsActiveResponseMultiError) AllErrors() []error { return m }

// GetUserIsActiveResponseValidationError is the validation error returned by
// GetUserIsActiveResponse.Validate if the designated constraints aren't met.
type GetUserIsActiveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIsActiveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIsActiveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIsActiveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIsActiveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIsActiveResponseValidationError) ErrorName() string {
	return "GetUserIsActiveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIsActiveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIsActiveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIsActiveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIsActiveResponseValidationError{}

// Validate checks the field values on GetKycStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKycStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKycStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKycStatusRequestMultiError, or nil if none found.
func (m *GetKycStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKycStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetKycStatusRequestMultiError(errors)
	}

	return nil
}

// GetKycStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetKycStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetKycStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKycStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKycStatusRequestMultiError) AllErrors() []error { return m }

// GetKycStatusRequestValidationError is the validation error returned by
// GetKycStatusRequest.Validate if the designated constraints aren't met.
type GetKycStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKycStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKycStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKycStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKycStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKycStatusRequestValidationError) ErrorName() string {
	return "GetKycStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKycStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKycStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKycStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKycStatusRequestValidationError{}

// Validate checks the field values on GetKycStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKycStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKycStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKycStatusResponseMultiError, or nil if none found.
func (m *GetKycStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKycStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRetryAfter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKycStatusResponseValidationError{
					field:  "RetryAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKycStatusResponseValidationError{
					field:  "RetryAfter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryAfter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKycStatusResponseValidationError{
				field:  "RetryAfter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DelayMinutes

	// no validation rules for Status

	// no validation rules for IsAllowed

	// no validation rules for Overall

	// no validation rules for DocCheck

	// no validation rules for FaceCheck

	if len(errors) > 0 {
		return GetKycStatusResponseMultiError(errors)
	}

	return nil
}

// GetKycStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetKycStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetKycStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKycStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKycStatusResponseMultiError) AllErrors() []error { return m }

// GetKycStatusResponseValidationError is the validation error returned by
// GetKycStatusResponse.Validate if the designated constraints aren't met.
type GetKycStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKycStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKycStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKycStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKycStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKycStatusResponseValidationError) ErrorName() string {
	return "GetKycStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKycStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKycStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKycStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKycStatusResponseValidationError{}

// Validate checks the field values on SetKycStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetKycStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetKycStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetKycStatusRequestMultiError, or nil if none found.
func (m *SetKycStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetKycStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Status

	if len(errors) > 0 {
		return SetKycStatusRequestMultiError(errors)
	}

	return nil
}

// SetKycStatusRequestMultiError is an error wrapping multiple validation
// errors returned by SetKycStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type SetKycStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetKycStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetKycStatusRequestMultiError) AllErrors() []error { return m }

// SetKycStatusRequestValidationError is the validation error returned by
// SetKycStatusRequest.Validate if the designated constraints aren't met.
type SetKycStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetKycStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetKycStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetKycStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetKycStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetKycStatusRequestValidationError) ErrorName() string {
	return "SetKycStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetKycStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetKycStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetKycStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetKycStatusRequestValidationError{}

// Validate checks the field values on SetKycStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetKycStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetKycStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetKycStatusResponseMultiError, or nil if none found.
func (m *SetKycStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetKycStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetKycStatusResponseMultiError(errors)
	}

	return nil
}

// SetKycStatusResponseMultiError is an error wrapping multiple validation
// errors returned by SetKycStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type SetKycStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetKycStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetKycStatusResponseMultiError) AllErrors() []error { return m }

// SetKycStatusResponseValidationError is the validation error returned by
// SetKycStatusResponse.Validate if the designated constraints aren't met.
type SetKycStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetKycStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetKycStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetKycStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetKycStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetKycStatusResponseValidationError) ErrorName() string {
	return "SetKycStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetKycStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetKycStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetKycStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetKycStatusResponseValidationError{}

// Validate checks the field values on InsertKycHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertKycHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertKycHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertKycHistoryRequestMultiError, or nil if none found.
func (m *InsertKycHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertKycHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Data

	if len(errors) > 0 {
		return InsertKycHistoryRequestMultiError(errors)
	}

	return nil
}

// InsertKycHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by InsertKycHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type InsertKycHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertKycHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertKycHistoryRequestMultiError) AllErrors() []error { return m }

// InsertKycHistoryRequestValidationError is the validation error returned by
// InsertKycHistoryRequest.Validate if the designated constraints aren't met.
type InsertKycHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertKycHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertKycHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertKycHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertKycHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertKycHistoryRequestValidationError) ErrorName() string {
	return "InsertKycHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertKycHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertKycHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertKycHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertKycHistoryRequestValidationError{}

// Validate checks the field values on InsertKycHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertKycHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertKycHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertKycHistoryResponseMultiError, or nil if none found.
func (m *InsertKycHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertKycHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InsertKycHistoryResponseMultiError(errors)
	}

	return nil
}

// InsertKycHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by InsertKycHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type InsertKycHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertKycHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertKycHistoryResponseMultiError) AllErrors() []error { return m }

// InsertKycHistoryResponseValidationError is the validation error returned by
// InsertKycHistoryResponse.Validate if the designated constraints aren't met.
type InsertKycHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertKycHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertKycHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertKycHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertKycHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertKycHistoryResponseValidationError) ErrorName() string {
	return "InsertKycHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertKycHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertKycHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertKycHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertKycHistoryResponseValidationError{}

// Validate checks the field values on CheckAppleAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAppleAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAppleAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAppleAccountRequestMultiError, or nil if none found.
func (m *CheckAppleAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAppleAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppleId

	// no validation rules for Email

	if len(errors) > 0 {
		return CheckAppleAccountRequestMultiError(errors)
	}

	return nil
}

// CheckAppleAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CheckAppleAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckAppleAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAppleAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAppleAccountRequestMultiError) AllErrors() []error { return m }

// CheckAppleAccountRequestValidationError is the validation error returned by
// CheckAppleAccountRequest.Validate if the designated constraints aren't met.
type CheckAppleAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAppleAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAppleAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAppleAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAppleAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAppleAccountRequestValidationError) ErrorName() string {
	return "CheckAppleAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAppleAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAppleAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAppleAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAppleAccountRequestValidationError{}

// Validate checks the field values on CheckAppleAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAppleAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAppleAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAppleAccountResponseMultiError, or nil if none found.
func (m *CheckAppleAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAppleAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistrationRequired

	// no validation rules for Email

	if len(errors) > 0 {
		return CheckAppleAccountResponseMultiError(errors)
	}

	return nil
}

// CheckAppleAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CheckAppleAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type CheckAppleAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAppleAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAppleAccountResponseMultiError) AllErrors() []error { return m }

// CheckAppleAccountResponseValidationError is the validation error returned by
// CheckAppleAccountResponse.Validate if the designated constraints aren't met.
type CheckAppleAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAppleAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAppleAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAppleAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAppleAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAppleAccountResponseValidationError) ErrorName() string {
	return "CheckAppleAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAppleAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAppleAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAppleAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAppleAccountResponseValidationError{}

// Validate checks the field values on NotificationSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationSettingsMultiError, or nil if none found.
func (m *NotificationSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Language

	// no validation rules for IsTgNotificationsOn

	// no validation rules for TgId

	// no validation rules for WhitelabelId

	// no validation rules for IsEmailNotificationsOn

	// no validation rules for IsPushNotificationsOn

	if len(errors) > 0 {
		return NotificationSettingsMultiError(errors)
	}

	return nil
}

// NotificationSettingsMultiError is an error wrapping multiple validation
// errors returned by NotificationSettings.ValidateAll() if the designated
// constraints aren't met.
type NotificationSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationSettingsMultiError) AllErrors() []error { return m }

// NotificationSettingsValidationError is the validation error returned by
// NotificationSettings.Validate if the designated constraints aren't met.
type NotificationSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationSettingsValidationError) ErrorName() string {
	return "NotificationSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationSettingsValidationError{}

// Validate checks the field values on SaveNotificationSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveNotificationSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveNotificationSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SaveNotificationSettingsRequestMultiError, or nil if none found.
func (m *SaveNotificationSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveNotificationSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for IsTgNotificationsOn

	// no validation rules for IsEmailNotificationsOn

	// no validation rules for TgId

	// no validation rules for IsPushNotificationsOn

	if len(errors) > 0 {
		return SaveNotificationSettingsRequestMultiError(errors)
	}

	return nil
}

// SaveNotificationSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by SaveNotificationSettingsRequest.ValidateAll()
// if the designated constraints aren't met.
type SaveNotificationSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveNotificationSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveNotificationSettingsRequestMultiError) AllErrors() []error { return m }

// SaveNotificationSettingsRequestValidationError is the validation error
// returned by SaveNotificationSettingsRequest.Validate if the designated
// constraints aren't met.
type SaveNotificationSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveNotificationSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveNotificationSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveNotificationSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveNotificationSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveNotificationSettingsRequestValidationError) ErrorName() string {
	return "SaveNotificationSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveNotificationSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveNotificationSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveNotificationSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveNotificationSettingsRequestValidationError{}

// Validate checks the field values on SaveNotificationSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SaveNotificationSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveNotificationSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SaveNotificationSettingsResponseMultiError, or nil if none found.
func (m *SaveNotificationSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveNotificationSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SaveNotificationSettingsResponseMultiError(errors)
	}

	return nil
}

// SaveNotificationSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by
// SaveNotificationSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveNotificationSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveNotificationSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveNotificationSettingsResponseMultiError) AllErrors() []error { return m }

// SaveNotificationSettingsResponseValidationError is the validation error
// returned by SaveNotificationSettingsResponse.Validate if the designated
// constraints aren't met.
type SaveNotificationSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveNotificationSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveNotificationSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveNotificationSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveNotificationSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveNotificationSettingsResponseValidationError) ErrorName() string {
	return "SaveNotificationSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveNotificationSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveNotificationSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveNotificationSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveNotificationSettingsResponseValidationError{}

// Validate checks the field values on GetNotificationSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotificationSettingsRequestMultiError, or nil if none found.
func (m *GetNotificationSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetNotificationSettingsRequestMultiError(errors)
	}

	return nil
}

// GetNotificationSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by GetNotificationSettingsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetNotificationSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationSettingsRequestMultiError) AllErrors() []error { return m }

// GetNotificationSettingsRequestValidationError is the validation error
// returned by GetNotificationSettingsRequest.Validate if the designated
// constraints aren't met.
type GetNotificationSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationSettingsRequestValidationError) ErrorName() string {
	return "GetNotificationSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationSettingsRequestValidationError{}

// Validate checks the field values on GetNotificationSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNotificationSettingsResponseMultiError, or nil if none found.
func (m *GetNotificationSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotificationSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotificationSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotificationSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotificationSettingsResponseMultiError(errors)
	}

	return nil
}

// GetNotificationSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by GetNotificationSettingsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetNotificationSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationSettingsResponseMultiError) AllErrors() []error { return m }

// GetNotificationSettingsResponseValidationError is the validation error
// returned by GetNotificationSettingsResponse.Validate if the designated
// constraints aren't met.
type GetNotificationSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationSettingsResponseValidationError) ErrorName() string {
	return "GetNotificationSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationSettingsResponseValidationError{}

// Validate checks the field values on RelatedUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelatedUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelatedUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelatedUsersRequestMultiError, or nil if none found.
func (m *RelatedUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelatedUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstId

	// no validation rules for SecondId

	if len(errors) > 0 {
		return RelatedUsersRequestMultiError(errors)
	}

	return nil
}

// RelatedUsersRequestMultiError is an error wrapping multiple validation
// errors returned by RelatedUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type RelatedUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelatedUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelatedUsersRequestMultiError) AllErrors() []error { return m }

// RelatedUsersRequestValidationError is the validation error returned by
// RelatedUsersRequest.Validate if the designated constraints aren't met.
type RelatedUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelatedUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelatedUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelatedUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelatedUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelatedUsersRequestValidationError) ErrorName() string {
	return "RelatedUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelatedUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelatedUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelatedUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelatedUsersRequestValidationError{}

// Validate checks the field values on RelatedUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelatedUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelatedUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelatedUsersResponseMultiError, or nil if none found.
func (m *RelatedUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RelatedUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Related

	if len(errors) > 0 {
		return RelatedUsersResponseMultiError(errors)
	}

	return nil
}

// RelatedUsersResponseMultiError is an error wrapping multiple validation
// errors returned by RelatedUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type RelatedUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelatedUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelatedUsersResponseMultiError) AllErrors() []error { return m }

// RelatedUsersResponseValidationError is the validation error returned by
// RelatedUsersResponse.Validate if the designated constraints aren't met.
type RelatedUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelatedUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelatedUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelatedUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelatedUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelatedUsersResponseValidationError) ErrorName() string {
	return "RelatedUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelatedUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelatedUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelatedUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelatedUsersResponseValidationError{}

// Validate checks the field values on GetAllSubUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllSubUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllSubUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllSubUsersRequestMultiError, or nil if none found.
func (m *GetAllSubUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllSubUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetAllSubUsersRequestMultiError(errors)
	}

	return nil
}

// GetAllSubUsersRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllSubUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllSubUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllSubUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllSubUsersRequestMultiError) AllErrors() []error { return m }

// GetAllSubUsersRequestValidationError is the validation error returned by
// GetAllSubUsersRequest.Validate if the designated constraints aren't met.
type GetAllSubUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllSubUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllSubUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllSubUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllSubUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllSubUsersRequestValidationError) ErrorName() string {
	return "GetAllSubUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllSubUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllSubUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllSubUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllSubUsersRequestValidationError{}

// Validate checks the field values on GetAllSubUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllSubUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllSubUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllSubUsersResponseMultiError, or nil if none found.
func (m *GetAllSubUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllSubUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllSubUsersResponseValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllSubUsersResponseValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllSubUsersResponseValidationError{
					field:  fmt.Sprintf("Subs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllSubUsersResponseMultiError(errors)
	}

	return nil
}

// GetAllSubUsersResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllSubUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllSubUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllSubUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllSubUsersResponseMultiError) AllErrors() []error { return m }

// GetAllSubUsersResponseValidationError is the validation error returned by
// GetAllSubUsersResponse.Validate if the designated constraints aren't met.
type GetAllSubUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllSubUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllSubUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllSubUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllSubUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllSubUsersResponseValidationError) ErrorName() string {
	return "GetAllSubUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllSubUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllSubUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllSubUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllSubUsersResponseValidationError{}

// Validate checks the field values on GetAllUserIDsByUsernameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserIDsByUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserIDsByUsernameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllUserIDsByUsernameRequestMultiError, or nil if none found.
func (m *GetAllUserIDsByUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserIDsByUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllUserIDsByUsernameRequestMultiError(errors)
	}

	return nil
}

// GetAllUserIDsByUsernameRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllUserIDsByUsernameRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAllUserIDsByUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserIDsByUsernameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserIDsByUsernameRequestMultiError) AllErrors() []error { return m }

// GetAllUserIDsByUsernameRequestValidationError is the validation error
// returned by GetAllUserIDsByUsernameRequest.Validate if the designated
// constraints aren't met.
type GetAllUserIDsByUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserIDsByUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserIDsByUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserIDsByUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserIDsByUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserIDsByUsernameRequestValidationError) ErrorName() string {
	return "GetAllUserIDsByUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUserIDsByUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserIDsByUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserIDsByUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserIDsByUsernameRequestValidationError{}

// Validate checks the field values on GetAllUserIDsByUsernameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserIDsByUsernameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserIDsByUsernameResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllUserIDsByUsernameResponseMultiError, or nil if none found.
func (m *GetAllUserIDsByUsernameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserIDsByUsernameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ids

	if len(errors) > 0 {
		return GetAllUserIDsByUsernameResponseMultiError(errors)
	}

	return nil
}

// GetAllUserIDsByUsernameResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllUserIDsByUsernameResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAllUserIDsByUsernameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserIDsByUsernameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserIDsByUsernameResponseMultiError) AllErrors() []error { return m }

// GetAllUserIDsByUsernameResponseValidationError is the validation error
// returned by GetAllUserIDsByUsernameResponse.Validate if the designated
// constraints aren't met.
type GetAllUserIDsByUsernameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserIDsByUsernameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserIDsByUsernameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserIDsByUsernameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserIDsByUsernameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserIDsByUsernameResponseValidationError) ErrorName() string {
	return "GetAllUserIDsByUsernameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUserIDsByUsernameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserIDsByUsernameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserIDsByUsernameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserIDsByUsernameResponseValidationError{}

// Validate checks the field values on Referral with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Referral) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Referral with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReferralMultiError, or nil
// if none found.
func (m *Referral) ValidateAll() error {
	return m.validate(true)
}

func (m *Referral) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReferralValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReferralValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReferralValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReferralMultiError(errors)
	}

	return nil
}

// ReferralMultiError is an error wrapping multiple validation errors returned
// by Referral.ValidateAll() if the designated constraints aren't met.
type ReferralMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferralMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferralMultiError) AllErrors() []error { return m }

// ReferralValidationError is the validation error returned by
// Referral.Validate if the designated constraints aren't met.
type ReferralValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferralValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferralValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferralValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferralValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferralValidationError) ErrorName() string { return "ReferralValidationError" }

// Error satisfies the builtin error interface
func (e ReferralValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferral.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferralValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferralValidationError{}

// Validate checks the field values on GetReferralsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReferralsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReferralsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReferralsRequestMultiError, or nil if none found.
func (m *GetReferralsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReferralsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Skip

	// no validation rules for Take

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReferralsRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReferralsRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReferralsRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReferralsRequestMultiError(errors)
	}

	return nil
}

// GetReferralsRequestMultiError is an error wrapping multiple validation
// errors returned by GetReferralsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReferralsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReferralsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReferralsRequestMultiError) AllErrors() []error { return m }

// GetReferralsRequestValidationError is the validation error returned by
// GetReferralsRequest.Validate if the designated constraints aren't met.
type GetReferralsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReferralsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReferralsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReferralsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReferralsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReferralsRequestValidationError) ErrorName() string {
	return "GetReferralsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReferralsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReferralsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReferralsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReferralsRequestValidationError{}

// Validate checks the field values on GetReferralsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReferralsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReferralsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReferralsResponseMultiError, or nil if none found.
func (m *GetReferralsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReferralsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReferrals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReferralsResponseValidationError{
						field:  fmt.Sprintf("Referrals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReferralsResponseValidationError{
						field:  fmt.Sprintf("Referrals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReferralsResponseValidationError{
					field:  fmt.Sprintf("Referrals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetReferralsResponseMultiError(errors)
	}

	return nil
}

// GetReferralsResponseMultiError is an error wrapping multiple validation
// errors returned by GetReferralsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReferralsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReferralsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReferralsResponseMultiError) AllErrors() []error { return m }

// GetReferralsResponseValidationError is the validation error returned by
// GetReferralsResponse.Validate if the designated constraints aren't met.
type GetReferralsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReferralsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReferralsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReferralsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReferralsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReferralsResponseValidationError) ErrorName() string {
	return "GetReferralsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReferralsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReferralsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReferralsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReferralsResponseValidationError{}

// Validate checks the field values on GetUsernamesByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsernamesByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsernamesByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsernamesByIDsRequestMultiError, or nil if none found.
func (m *GetUsernamesByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsernamesByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsernamesByIDsRequestMultiError(errors)
	}

	return nil
}

// GetUsernamesByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsernamesByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsernamesByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsernamesByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsernamesByIDsRequestMultiError) AllErrors() []error { return m }

// GetUsernamesByIDsRequestValidationError is the validation error returned by
// GetUsernamesByIDsRequest.Validate if the designated constraints aren't met.
type GetUsernamesByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsernamesByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsernamesByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsernamesByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsernamesByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsernamesByIDsRequestValidationError) ErrorName() string {
	return "GetUsernamesByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsernamesByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsernamesByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsernamesByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsernamesByIDsRequestValidationError{}

// Validate checks the field values on GetUsernamesByIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsernamesByIDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsernamesByIDsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsernamesByIDsResponseMultiError, or nil if none found.
func (m *GetUsernamesByIDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsernamesByIDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Usernames

	if len(errors) > 0 {
		return GetUsernamesByIDsResponseMultiError(errors)
	}

	return nil
}

// GetUsernamesByIDsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsernamesByIDsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetUsernamesByIDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsernamesByIDsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsernamesByIDsResponseMultiError) AllErrors() []error { return m }

// GetUsernamesByIDsResponseValidationError is the validation error returned by
// GetUsernamesByIDsResponse.Validate if the designated constraints aren't met.
type GetUsernamesByIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsernamesByIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsernamesByIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsernamesByIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsernamesByIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsernamesByIDsResponseValidationError) ErrorName() string {
	return "GetUsernamesByIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsernamesByIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsernamesByIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsernamesByIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsernamesByIDsResponseValidationError{}

// Validate checks the field values on GetEmailsByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailsByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailsByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailsByIDsRequestMultiError, or nil if none found.
func (m *GetEmailsByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailsByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetEmailsByIDsRequestMultiError(errors)
	}

	return nil
}

// GetEmailsByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by GetEmailsByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEmailsByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailsByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailsByIDsRequestMultiError) AllErrors() []error { return m }

// GetEmailsByIDsRequestValidationError is the validation error returned by
// GetEmailsByIDsRequest.Validate if the designated constraints aren't met.
type GetEmailsByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailsByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailsByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailsByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailsByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailsByIDsRequestValidationError) ErrorName() string {
	return "GetEmailsByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailsByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailsByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailsByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailsByIDsRequestValidationError{}

// Validate checks the field values on GetEmailsByIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmailsByIDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailsByIDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmailsByIDsResponseMultiError, or nil if none found.
func (m *GetEmailsByIDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailsByIDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Emails

	if len(errors) > 0 {
		return GetEmailsByIDsResponseMultiError(errors)
	}

	return nil
}

// GetEmailsByIDsResponseMultiError is an error wrapping multiple validation
// errors returned by GetEmailsByIDsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEmailsByIDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailsByIDsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailsByIDsResponseMultiError) AllErrors() []error { return m }

// GetEmailsByIDsResponseValidationError is the validation error returned by
// GetEmailsByIDsResponse.Validate if the designated constraints aren't met.
type GetEmailsByIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailsByIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailsByIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailsByIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailsByIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailsByIDsResponseValidationError) ErrorName() string {
	return "GetEmailsByIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailsByIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailsByIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailsByIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailsByIDsResponseValidationError{}

// Validate checks the field values on SafeDeleteByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SafeDeleteByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SafeDeleteByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SafeDeleteByIDRequestMultiError, or nil if none found.
func (m *SafeDeleteByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SafeDeleteByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return SafeDeleteByIDRequestMultiError(errors)
	}

	return nil
}

// SafeDeleteByIDRequestMultiError is an error wrapping multiple validation
// errors returned by SafeDeleteByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type SafeDeleteByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SafeDeleteByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SafeDeleteByIDRequestMultiError) AllErrors() []error { return m }

// SafeDeleteByIDRequestValidationError is the validation error returned by
// SafeDeleteByIDRequest.Validate if the designated constraints aren't met.
type SafeDeleteByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SafeDeleteByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SafeDeleteByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SafeDeleteByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SafeDeleteByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SafeDeleteByIDRequestValidationError) ErrorName() string {
	return "SafeDeleteByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SafeDeleteByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSafeDeleteByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SafeDeleteByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SafeDeleteByIDRequestValidationError{}

// Validate checks the field values on SafeDeleteByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SafeDeleteByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SafeDeleteByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SafeDeleteByIDResponseMultiError, or nil if none found.
func (m *SafeDeleteByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SafeDeleteByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SafeDeleteByIDResponseMultiError(errors)
	}

	return nil
}

// SafeDeleteByIDResponseMultiError is an error wrapping multiple validation
// errors returned by SafeDeleteByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type SafeDeleteByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SafeDeleteByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SafeDeleteByIDResponseMultiError) AllErrors() []error { return m }

// SafeDeleteByIDResponseValidationError is the validation error returned by
// SafeDeleteByIDResponse.Validate if the designated constraints aren't met.
type SafeDeleteByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SafeDeleteByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SafeDeleteByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SafeDeleteByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SafeDeleteByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SafeDeleteByIDResponseValidationError) ErrorName() string {
	return "SafeDeleteByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SafeDeleteByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSafeDeleteByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SafeDeleteByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SafeDeleteByIDResponseValidationError{}

// Validate checks the field values on SaveV4Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveV4Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveV4Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveV4RequestMultiError, or
// nil if none found.
func (m *SaveV4Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveV4Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveV4RequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveV4RequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveV4RequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveV4RequestMultiError(errors)
	}

	return nil
}

// SaveV4RequestMultiError is an error wrapping multiple validation errors
// returned by SaveV4Request.ValidateAll() if the designated constraints
// aren't met.
type SaveV4RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveV4RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveV4RequestMultiError) AllErrors() []error { return m }

// SaveV4RequestValidationError is the validation error returned by
// SaveV4Request.Validate if the designated constraints aren't met.
type SaveV4RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveV4RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveV4RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveV4RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveV4RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveV4RequestValidationError) ErrorName() string { return "SaveV4RequestValidationError" }

// Error satisfies the builtin error interface
func (e SaveV4RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveV4Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveV4RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveV4RequestValidationError{}

// Validate checks the field values on SaveV4Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveV4Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveV4Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveV4ResponseMultiError,
// or nil if none found.
func (m *SaveV4Response) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveV4Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return SaveV4ResponseMultiError(errors)
	}

	return nil
}

// SaveV4ResponseMultiError is an error wrapping multiple validation errors
// returned by SaveV4Response.ValidateAll() if the designated constraints
// aren't met.
type SaveV4ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveV4ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveV4ResponseMultiError) AllErrors() []error { return m }

// SaveV4ResponseValidationError is the validation error returned by
// SaveV4Response.Validate if the designated constraints aren't met.
type SaveV4ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveV4ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveV4ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveV4ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveV4ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveV4ResponseValidationError) ErrorName() string { return "SaveV4ResponseValidationError" }

// Error satisfies the builtin error interface
func (e SaveV4ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveV4Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveV4ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveV4ResponseValidationError{}

// Validate checks the field values on UpdateRefIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRefIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRefIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRefIDRequestMultiError, or nil if none found.
func (m *UpdateRefIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRefIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OldUserID

	// no validation rules for UserID

	// no validation rules for RefID

	if len(errors) > 0 {
		return UpdateRefIDRequestMultiError(errors)
	}

	return nil
}

// UpdateRefIDRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRefIDRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRefIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRefIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRefIDRequestMultiError) AllErrors() []error { return m }

// UpdateRefIDRequestValidationError is the validation error returned by
// UpdateRefIDRequest.Validate if the designated constraints aren't met.
type UpdateRefIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRefIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRefIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRefIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRefIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRefIDRequestValidationError) ErrorName() string {
	return "UpdateRefIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRefIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRefIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRefIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRefIDRequestValidationError{}

// Validate checks the field values on UpdateRefIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRefIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRefIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRefIDResponseMultiError, or nil if none found.
func (m *UpdateRefIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRefIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRefIDResponseMultiError(errors)
	}

	return nil
}

// UpdateRefIDResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRefIDResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRefIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRefIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRefIDResponseMultiError) AllErrors() []error { return m }

// UpdateRefIDResponseValidationError is the validation error returned by
// UpdateRefIDResponse.Validate if the designated constraints aren't met.
type UpdateRefIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRefIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRefIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRefIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRefIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRefIDResponseValidationError) ErrorName() string {
	return "UpdateRefIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRefIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRefIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRefIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRefIDResponseValidationError{}

// Validate checks the field values on GetFlagReferralLinkGeneratedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetFlagReferralLinkGeneratedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFlagReferralLinkGeneratedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetFlagReferralLinkGeneratedRequestMultiError, or nil if none found.
func (m *GetFlagReferralLinkGeneratedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFlagReferralLinkGeneratedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetFlagReferralLinkGeneratedRequestMultiError(errors)
	}

	return nil
}

// GetFlagReferralLinkGeneratedRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetFlagReferralLinkGeneratedRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFlagReferralLinkGeneratedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFlagReferralLinkGeneratedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFlagReferralLinkGeneratedRequestMultiError) AllErrors() []error { return m }

// GetFlagReferralLinkGeneratedRequestValidationError is the validation error
// returned by GetFlagReferralLinkGeneratedRequest.Validate if the designated
// constraints aren't met.
type GetFlagReferralLinkGeneratedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFlagReferralLinkGeneratedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFlagReferralLinkGeneratedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFlagReferralLinkGeneratedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFlagReferralLinkGeneratedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFlagReferralLinkGeneratedRequestValidationError) ErrorName() string {
	return "GetFlagReferralLinkGeneratedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFlagReferralLinkGeneratedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFlagReferralLinkGeneratedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFlagReferralLinkGeneratedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFlagReferralLinkGeneratedRequestValidationError{}

// Validate checks the field values on GetFlagReferralLinkGeneratedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetFlagReferralLinkGeneratedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFlagReferralLinkGeneratedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetFlagReferralLinkGeneratedResponseMultiError, or nil if none found.
func (m *GetFlagReferralLinkGeneratedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFlagReferralLinkGeneratedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GetFlagReferralLinkGeneratedResponseMultiError(errors)
	}

	return nil
}

// GetFlagReferralLinkGeneratedResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetFlagReferralLinkGeneratedResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFlagReferralLinkGeneratedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFlagReferralLinkGeneratedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFlagReferralLinkGeneratedResponseMultiError) AllErrors() []error { return m }

// GetFlagReferralLinkGeneratedResponseValidationError is the validation error
// returned by GetFlagReferralLinkGeneratedResponse.Validate if the designated
// constraints aren't met.
type GetFlagReferralLinkGeneratedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFlagReferralLinkGeneratedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFlagReferralLinkGeneratedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFlagReferralLinkGeneratedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFlagReferralLinkGeneratedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFlagReferralLinkGeneratedResponseValidationError) ErrorName() string {
	return "GetFlagReferralLinkGeneratedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFlagReferralLinkGeneratedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFlagReferralLinkGeneratedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFlagReferralLinkGeneratedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFlagReferralLinkGeneratedResponseValidationError{}

// Validate checks the field values on SetFlagReferralLinkGeneratedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetFlagReferralLinkGeneratedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFlagReferralLinkGeneratedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetFlagReferralLinkGeneratedRequestMultiError, or nil if none found.
func (m *SetFlagReferralLinkGeneratedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFlagReferralLinkGeneratedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return SetFlagReferralLinkGeneratedRequestMultiError(errors)
	}

	return nil
}

// SetFlagReferralLinkGeneratedRequestMultiError is an error wrapping multiple
// validation errors returned by
// SetFlagReferralLinkGeneratedRequest.ValidateAll() if the designated
// constraints aren't met.
type SetFlagReferralLinkGeneratedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFlagReferralLinkGeneratedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFlagReferralLinkGeneratedRequestMultiError) AllErrors() []error { return m }

// SetFlagReferralLinkGeneratedRequestValidationError is the validation error
// returned by SetFlagReferralLinkGeneratedRequest.Validate if the designated
// constraints aren't met.
type SetFlagReferralLinkGeneratedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFlagReferralLinkGeneratedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFlagReferralLinkGeneratedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFlagReferralLinkGeneratedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFlagReferralLinkGeneratedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFlagReferralLinkGeneratedRequestValidationError) ErrorName() string {
	return "SetFlagReferralLinkGeneratedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetFlagReferralLinkGeneratedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFlagReferralLinkGeneratedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFlagReferralLinkGeneratedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFlagReferralLinkGeneratedRequestValidationError{}

// Validate checks the field values on UpdateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileRequestMultiError, or nil if none found.
func (m *UpdateProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProfileRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProfileRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProfileRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateProfileRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileRequestMultiError) AllErrors() []error { return m }

// UpdateProfileRequestValidationError is the validation error returned by
// UpdateProfileRequest.Validate if the designated constraints aren't met.
type UpdateProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileRequestValidationError) ErrorName() string {
	return "UpdateProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileRequestValidationError{}

// Validate checks the field values on UpdateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProfileResponseMultiError, or nil if none found.
func (m *UpdateProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProfileResponseMultiError(errors)
	}

	return nil
}

// UpdateProfileResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProfileResponseMultiError) AllErrors() []error { return m }

// UpdateProfileResponseValidationError is the validation error returned by
// UpdateProfileResponse.Validate if the designated constraints aren't met.
type UpdateProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProfileResponseValidationError) ErrorName() string {
	return "UpdateProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProfileResponseValidationError{}

// Validate checks the field values on SetTimezoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTimezoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTimezoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTimezoneRequestMultiError, or nil if none found.
func (m *SetTimezoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTimezoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Timezone

	if len(errors) > 0 {
		return SetTimezoneRequestMultiError(errors)
	}

	return nil
}

// SetTimezoneRequestMultiError is an error wrapping multiple validation errors
// returned by SetTimezoneRequest.ValidateAll() if the designated constraints
// aren't met.
type SetTimezoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTimezoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTimezoneRequestMultiError) AllErrors() []error { return m }

// SetTimezoneRequestValidationError is the validation error returned by
// SetTimezoneRequest.Validate if the designated constraints aren't met.
type SetTimezoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTimezoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTimezoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTimezoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTimezoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTimezoneRequestValidationError) ErrorName() string {
	return "SetTimezoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetTimezoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTimezoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTimezoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTimezoneRequestValidationError{}

// Validate checks the field values on SetTimezoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTimezoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTimezoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTimezoneResponseMultiError, or nil if none found.
func (m *SetTimezoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTimezoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetTimezoneResponseMultiError(errors)
	}

	return nil
}

// SetTimezoneResponseMultiError is an error wrapping multiple validation
// errors returned by SetTimezoneResponse.ValidateAll() if the designated
// constraints aren't met.
type SetTimezoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTimezoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTimezoneResponseMultiError) AllErrors() []error { return m }

// SetTimezoneResponseValidationError is the validation error returned by
// SetTimezoneResponse.Validate if the designated constraints aren't met.
type SetTimezoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTimezoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTimezoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTimezoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTimezoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTimezoneResponseValidationError) ErrorName() string {
	return "SetTimezoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetTimezoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTimezoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTimezoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTimezoneResponseValidationError{}

// Validate checks the field values on SetLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetLanguageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetLanguageRequestMultiError, or nil if none found.
func (m *SetLanguageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLanguageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Language

	if len(errors) > 0 {
		return SetLanguageRequestMultiError(errors)
	}

	return nil
}

// SetLanguageRequestMultiError is an error wrapping multiple validation errors
// returned by SetLanguageRequest.ValidateAll() if the designated constraints
// aren't met.
type SetLanguageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLanguageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLanguageRequestMultiError) AllErrors() []error { return m }

// SetLanguageRequestValidationError is the validation error returned by
// SetLanguageRequest.Validate if the designated constraints aren't met.
type SetLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLanguageRequestValidationError) ErrorName() string {
	return "SetLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLanguageRequestValidationError{}

// Validate checks the field values on SetLanguageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetLanguageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLanguageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetLanguageResponseMultiError, or nil if none found.
func (m *SetLanguageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLanguageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetLanguageResponseMultiError(errors)
	}

	return nil
}

// SetLanguageResponseMultiError is an error wrapping multiple validation
// errors returned by SetLanguageResponse.ValidateAll() if the designated
// constraints aren't met.
type SetLanguageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLanguageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLanguageResponseMultiError) AllErrors() []error { return m }

// SetLanguageResponseValidationError is the validation error returned by
// SetLanguageResponse.Validate if the designated constraints aren't met.
type SetLanguageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLanguageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLanguageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLanguageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLanguageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLanguageResponseValidationError) ErrorName() string {
	return "SetLanguageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetLanguageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLanguageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLanguageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLanguageResponseValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Coin

	// no validation rules for Minpay

	// no validation rules for WalletAddress

	// no validation rules for MiningAddress

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on GetAddressesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressesRequestMultiError, or nil if none found.
func (m *GetAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetAddressesRequestMultiError(errors)
	}

	return nil
}

// GetAddressesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAddressesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressesRequestMultiError) AllErrors() []error { return m }

// GetAddressesRequestValidationError is the validation error returned by
// GetAddressesRequest.Validate if the designated constraints aren't met.
type GetAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressesRequestValidationError) ErrorName() string {
	return "GetAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressesRequestValidationError{}

// Validate checks the field values on GetAddressesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressesResponseMultiError, or nil if none found.
func (m *GetAddressesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAddressesResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAddressesResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAddressesResponseMultiError(errors)
	}

	return nil
}

// GetAddressesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAddressesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAddressesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressesResponseMultiError) AllErrors() []error { return m }

// GetAddressesResponseValidationError is the validation error returned by
// GetAddressesResponse.Validate if the designated constraints aren't met.
type GetAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressesResponseValidationError) ErrorName() string {
	return "GetAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressesResponseValidationError{}

// Validate checks the field values on CoinAndAddress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CoinAndAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoinAndAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoinAndAddressMultiError,
// or nil if none found.
func (m *CoinAndAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *CoinAndAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Coin

	// no validation rules for Address

	if len(errors) > 0 {
		return CoinAndAddressMultiError(errors)
	}

	return nil
}

// CoinAndAddressMultiError is an error wrapping multiple validation errors
// returned by CoinAndAddress.ValidateAll() if the designated constraints
// aren't met.
type CoinAndAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoinAndAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoinAndAddressMultiError) AllErrors() []error { return m }

// CoinAndAddressValidationError is the validation error returned by
// CoinAndAddress.Validate if the designated constraints aren't met.
type CoinAndAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoinAndAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoinAndAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoinAndAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoinAndAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoinAndAddressValidationError) ErrorName() string { return "CoinAndAddressValidationError" }

// Error satisfies the builtin error interface
func (e CoinAndAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoinAndAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoinAndAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoinAndAddressValidationError{}

// Validate checks the field values on CreateSubUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubUserRequestMultiError, or nil if none found.
func (m *CreateSubUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentUserUUID

	// no validation rules for Username

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSubUserRequestValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSubUserRequestValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSubUserRequestValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateSubUserRequestMultiError(errors)
	}

	return nil
}

// CreateSubUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubUserRequestMultiError) AllErrors() []error { return m }

// CreateSubUserRequestValidationError is the validation error returned by
// CreateSubUserRequest.Validate if the designated constraints aren't met.
type CreateSubUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubUserRequestValidationError) ErrorName() string {
	return "CreateSubUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubUserRequestValidationError{}

// Validate checks the field values on CreateSubUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubUserResponseMultiError, or nil if none found.
func (m *CreateSubUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewUserUUID

	// no validation rules for OldID

	if len(errors) > 0 {
		return CreateSubUserResponseMultiError(errors)
	}

	return nil
}

// CreateSubUserResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSubUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSubUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubUserResponseMultiError) AllErrors() []error { return m }

// CreateSubUserResponseValidationError is the validation error returned by
// CreateSubUserResponse.Validate if the designated constraints aren't met.
type CreateSubUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubUserResponseValidationError) ErrorName() string {
	return "CreateSubUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubUserResponseValidationError{}

// Validate checks the field values on GetUserByTgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByTgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByTgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByTgRequestMultiError, or nil if none found.
func (m *GetUserByTgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByTgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TgID

	if len(errors) > 0 {
		return GetUserByTgRequestMultiError(errors)
	}

	return nil
}

// GetUserByTgRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserByTgRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserByTgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByTgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByTgRequestMultiError) AllErrors() []error { return m }

// GetUserByTgRequestValidationError is the validation error returned by
// GetUserByTgRequest.Validate if the designated constraints aren't met.
type GetUserByTgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByTgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByTgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByTgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByTgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByTgRequestValidationError) ErrorName() string {
	return "GetUserByTgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByTgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByTgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByTgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByTgRequestValidationError{}

// Validate checks the field values on GetUserByTgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByTgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByTgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByTgResponseMultiError, or nil if none found.
func (m *GetUserByTgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByTgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByTgResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByTgResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByTgResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByTgResponseMultiError(errors)
	}

	return nil
}

// GetUserByTgResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByTgResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserByTgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByTgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByTgResponseMultiError) AllErrors() []error { return m }

// GetUserByTgResponseValidationError is the validation error returned by
// GetUserByTgResponse.Validate if the designated constraints aren't met.
type GetUserByTgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByTgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByTgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByTgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByTgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByTgResponseValidationError) ErrorName() string {
	return "GetUserByTgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByTgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByTgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByTgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByTgResponseValidationError{}

// Validate checks the field values on SetUserAttributesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserAttributesRequestMultiError, or nil if none found.
func (m *SetUserAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Language != nil {
		// no validation rules for Language
	}

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.WhiteLabelID != nil {
		// no validation rules for WhiteLabelID
	}

	if m.WasReferralLinkGenerated != nil {
		// no validation rules for WasReferralLinkGenerated
	}

	if m.IsAmbassador != nil {
		// no validation rules for IsAmbassador
	}

	if m.PoolType != nil {
		// no validation rules for PoolType
	}

	if len(errors) > 0 {
		return SetUserAttributesRequestMultiError(errors)
	}

	return nil
}

// SetUserAttributesRequestMultiError is an error wrapping multiple validation
// errors returned by SetUserAttributesRequest.ValidateAll() if the designated
// constraints aren't met.
type SetUserAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserAttributesRequestMultiError) AllErrors() []error { return m }

// SetUserAttributesRequestValidationError is the validation error returned by
// SetUserAttributesRequest.Validate if the designated constraints aren't met.
type SetUserAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserAttributesRequestValidationError) ErrorName() string {
	return "SetUserAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserAttributesRequestValidationError{}

// Validate checks the field values on GetOldIDByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOldIDByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOldIDByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOldIDByIDRequestMultiError, or nil if none found.
func (m *GetOldIDByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOldIDByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOldIDByIDRequestMultiError(errors)
	}

	return nil
}

// GetOldIDByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetOldIDByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOldIDByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOldIDByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOldIDByIDRequestMultiError) AllErrors() []error { return m }

// GetOldIDByIDRequestValidationError is the validation error returned by
// GetOldIDByIDRequest.Validate if the designated constraints aren't met.
type GetOldIDByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOldIDByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOldIDByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOldIDByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOldIDByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOldIDByIDRequestValidationError) ErrorName() string {
	return "GetOldIDByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOldIDByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOldIDByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOldIDByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOldIDByIDRequestValidationError{}

// Validate checks the field values on GetOldIDByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOldIDByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOldIDByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOldIDByIDResponseMultiError, or nil if none found.
func (m *GetOldIDByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOldIDByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewId

	// no validation rules for OldId

	if len(errors) > 0 {
		return GetOldIDByIDResponseMultiError(errors)
	}

	return nil
}

// GetOldIDByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetOldIDByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOldIDByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOldIDByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOldIDByIDResponseMultiError) AllErrors() []error { return m }

// GetOldIDByIDResponseValidationError is the validation error returned by
// GetOldIDByIDResponse.Validate if the designated constraints aren't met.
type GetOldIDByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOldIDByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOldIDByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOldIDByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOldIDByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOldIDByIDResponseValidationError) ErrorName() string {
	return "GetOldIDByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOldIDByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOldIDByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOldIDByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOldIDByIDResponseValidationError{}

// Validate checks the field values on GetAllSubUsersResponse_Subs with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllSubUsersResponse_Subs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllSubUsersResponse_Subs with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllSubUsersResponse_SubsMultiError, or nil if none found.
func (m *GetAllSubUsersResponse_Subs) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllSubUsersResponse_Subs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for UserOldId

	if len(errors) > 0 {
		return GetAllSubUsersResponse_SubsMultiError(errors)
	}

	return nil
}

// GetAllSubUsersResponse_SubsMultiError is an error wrapping multiple
// validation errors returned by GetAllSubUsersResponse_Subs.ValidateAll() if
// the designated constraints aren't met.
type GetAllSubUsersResponse_SubsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllSubUsersResponse_SubsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllSubUsersResponse_SubsMultiError) AllErrors() []error { return m }

// GetAllSubUsersResponse_SubsValidationError is the validation error returned
// by GetAllSubUsersResponse_Subs.Validate if the designated constraints
// aren't met.
type GetAllSubUsersResponse_SubsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllSubUsersResponse_SubsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllSubUsersResponse_SubsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllSubUsersResponse_SubsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllSubUsersResponse_SubsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllSubUsersResponse_SubsValidationError) ErrorName() string {
	return "GetAllSubUsersResponse_SubsValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllSubUsersResponse_SubsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllSubUsersResponse_Subs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllSubUsersResponse_SubsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllSubUsersResponse_SubsValidationError{}
