// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protocol/proto/profile.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileService_Create_FullMethodName                       = "/profile.ProfileService/Create"
	ProfileService_SaveV3_FullMethodName                       = "/profile.ProfileService/SaveV3"
	ProfileService_GetByUserID_FullMethodName                  = "/profile.ProfileService/GetByUserID"
	ProfileService_GetByUserIDV2_FullMethodName                = "/profile.ProfileService/GetByUserIDV2"
	ProfileService_GetUserIDByOldID_FullMethodName             = "/profile.ProfileService/GetUserIDByOldID"
	ProfileService_UpdatePassword_FullMethodName               = "/profile.ProfileService/UpdatePassword"
	ProfileService_GetUserByEmailAndWl_FullMethodName          = "/profile.ProfileService/GetUserByEmailAndWl"
	ProfileService_GetOldUserByEmailAndWl_FullMethodName       = "/profile.ProfileService/GetOldUserByEmailAndWl"
	ProfileService_GetAllUsers_FullMethodName                  = "/profile.ProfileService/GetAllUsers"
	ProfileService_GetAllUsersByWlID_FullMethodName            = "/profile.ProfileService/GetAllUsersByWlID"
	ProfileService_GetUserByApiKey_FullMethodName              = "/profile.ProfileService/GetUserByApiKey"
	ProfileService_GetOldByEmailAndWl_FullMethodName           = "/profile.ProfileService/GetOldByEmailAndWl"
	ProfileService_GetOldByEmailAndWlV2_FullMethodName         = "/profile.ProfileService/GetOldByEmailAndWlV2"
	ProfileService_GetSuspended_FullMethodName                 = "/profile.ProfileService/GetSuspended"
	ProfileService_SetSuspended_FullMethodName                 = "/profile.ProfileService/SetSuspended"
	ProfileService_ChangeWalletAddress_FullMethodName          = "/profile.ProfileService/ChangeWalletAddress"
	ProfileService_UpdateMinPay_FullMethodName                 = "/profile.ProfileService/UpdateMinPay"
	ProfileService_ChangeWalletAddressConfirm_FullMethodName   = "/profile.ProfileService/ChangeWalletAddressConfirm"
	ProfileService_UpdateUserIsActive_FullMethodName           = "/profile.ProfileService/UpdateUserIsActive"
	ProfileService_GetUserIsActive_FullMethodName              = "/profile.ProfileService/GetUserIsActive"
	ProfileService_GetKycStatus_FullMethodName                 = "/profile.ProfileService/GetKycStatus"
	ProfileService_SetKycStatus_FullMethodName                 = "/profile.ProfileService/SetKycStatus"
	ProfileService_InsertKycHistory_FullMethodName             = "/profile.ProfileService/InsertKycHistory"
	ProfileService_CheckAppleAccount_FullMethodName            = "/profile.ProfileService/CheckAppleAccount"
	ProfileService_SaveNotificationSettings_FullMethodName     = "/profile.ProfileService/SaveNotificationSettings"
	ProfileService_GetNotificationSettings_FullMethodName      = "/profile.ProfileService/GetNotificationSettings"
	ProfileService_RelatedUsers_FullMethodName                 = "/profile.ProfileService/RelatedUsers"
	ProfileService_GetAllSubUsers_FullMethodName               = "/profile.ProfileService/GetAllSubUsers"
	ProfileService_GetAllUserIDsByUsername_FullMethodName      = "/profile.ProfileService/GetAllUserIDsByUsername"
	ProfileService_GetReferrals_FullMethodName                 = "/profile.ProfileService/GetReferrals"
	ProfileService_GetUsernamesByIDs_FullMethodName            = "/profile.ProfileService/GetUsernamesByIDs"
	ProfileService_GetEmailsByIDs_FullMethodName               = "/profile.ProfileService/GetEmailsByIDs"
	ProfileService_SafeDeleteByID_FullMethodName               = "/profile.ProfileService/SafeDeleteByID"
	ProfileService_SaveV4_FullMethodName                       = "/profile.ProfileService/SaveV4"
	ProfileService_GetByUsernames_FullMethodName               = "/profile.ProfileService/GetByUsernames"
	ProfileService_UpdateRefID_FullMethodName                  = "/profile.ProfileService/UpdateRefID"
	ProfileService_GetFlagReferralLinkGenerated_FullMethodName = "/profile.ProfileService/GetFlagReferralLinkGenerated"
	ProfileService_SetFlagReferralLinkGenerated_FullMethodName = "/profile.ProfileService/SetFlagReferralLinkGenerated"
	ProfileService_UpdateProfile_FullMethodName                = "/profile.ProfileService/UpdateProfile"
	ProfileService_SetTimezone_FullMethodName                  = "/profile.ProfileService/SetTimezone"
	ProfileService_SetLanguage_FullMethodName                  = "/profile.ProfileService/SetLanguage"
	ProfileService_GetAddresses_FullMethodName                 = "/profile.ProfileService/GetAddresses"
	ProfileService_GetUserByTg_FullMethodName                  = "/profile.ProfileService/GetUserByTg"
	ProfileService_CreateAPIKey_FullMethodName                 = "/profile.ProfileService/CreateAPIKey"
	ProfileService_GetAPIKey_FullMethodName                    = "/profile.ProfileService/GetAPIKey"
	ProfileService_DeleteAPIKey_FullMethodName                 = "/profile.ProfileService/DeleteAPIKey"
	ProfileService_GetNoPayStatus_FullMethodName               = "/profile.ProfileService/GetNoPayStatus"
	ProfileService_UpdateNoPay_FullMethodName                  = "/profile.ProfileService/UpdateNoPay"
	ProfileService_CancelNoPayJob_FullMethodName               = "/profile.ProfileService/CancelNoPayJob"
	ProfileService_GetUsersWithWL_FullMethodName               = "/profile.ProfileService/GetUsersWithWL"
	ProfileService_GetUsersByUUIDs_FullMethodName              = "/profile.ProfileService/GetUsersByUUIDs"
	ProfileService_GetByUsernamesForReferrals_FullMethodName   = "/profile.ProfileService/GetByUsernamesForReferrals"
	ProfileService_CreateSubUser_FullMethodName                = "/profile.ProfileService/CreateSubUser"
	ProfileService_SetUserAttributes_FullMethodName            = "/profile.ProfileService/SetUserAttributes"
	ProfileService_CreateProfile_FullMethodName                = "/profile.ProfileService/CreateProfile"
	ProfileService_GetUserBySegmentID_FullMethodName           = "/profile.ProfileService/GetUserBySegmentID"
	ProfileService_GetOldIDByID_FullMethodName                 = "/profile.ProfileService/GetOldIDByID"
	ProfileService_GetOrCreateSecretKey_FullMethodName         = "/profile.ProfileService/GetOrCreateSecretKey"
	ProfileService_CheckSignature_FullMethodName               = "/profile.ProfileService/CheckSignature"
)

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	SaveV3(ctx context.Context, in *SaveV3Request, opts ...grpc.CallOption) (*SaveV3Response, error)
	GetByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (*GetByUserIDResponse, error)
	GetByUserIDV2(ctx context.Context, in *GetByUserIDV2Request, opts ...grpc.CallOption) (*GetByUserIDV2Response, error)
	GetUserIDByOldID(ctx context.Context, in *GetUserIDByOldIDRequest, opts ...grpc.CallOption) (*GetUserIDByOldIDResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	GetUserByEmailAndWl(ctx context.Context, in *GetUserByEmailAndWlRequest, opts ...grpc.CallOption) (*GetUserByEmailAndWlResponse, error)
	GetOldUserByEmailAndWl(ctx context.Context, in *GetOldUserByEmailAndWlRequest, opts ...grpc.CallOption) (*GetOldUserByEmailAndWlResponse, error)
	GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	GetAllUsersByWlID(ctx context.Context, in *GetAllUsersByWlIDRequest, opts ...grpc.CallOption) (*GetAllUsersByWlIDResponse, error)
	GetUserByApiKey(ctx context.Context, in *GetUserByApiKeyRequest, opts ...grpc.CallOption) (*GetUserByApiKeyResponse, error)
	GetOldByEmailAndWl(ctx context.Context, in *GetOldByEmailAndWlRequest, opts ...grpc.CallOption) (*GetOldByEmailAndWlResponse, error)
	GetOldByEmailAndWlV2(ctx context.Context, in *GetOldByEmailAndWlV2Request, opts ...grpc.CallOption) (*GetOldByEmailAndWlV2Response, error)
	GetSuspended(ctx context.Context, in *GetSuspendedRequest, opts ...grpc.CallOption) (*GetSuspendedResponse, error)
	SetSuspended(ctx context.Context, in *SetSuspendedRequest, opts ...grpc.CallOption) (*SetSuspendedResponse, error)
	ChangeWalletAddress(ctx context.Context, in *ChangeWalletAddressRequest, opts ...grpc.CallOption) (*ChangeWalletAddressResponse, error)
	UpdateMinPay(ctx context.Context, in *UpdateMinPayRequest, opts ...grpc.CallOption) (*UpdateMinPayResponse, error)
	ChangeWalletAddressConfirm(ctx context.Context, in *ChangeWalletAddressConfirmRequest, opts ...grpc.CallOption) (*ChangeWalletAddressConfirmResponse, error)
	UpdateUserIsActive(ctx context.Context, in *UpdateUserIsActiveRequest, opts ...grpc.CallOption) (*UpdateUserIsActiveResponse, error)
	GetUserIsActive(ctx context.Context, in *GetUserIsActiveRequest, opts ...grpc.CallOption) (*GetUserIsActiveResponse, error)
	GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error)
	SetKycStatus(ctx context.Context, in *SetKycStatusRequest, opts ...grpc.CallOption) (*SetKycStatusResponse, error)
	InsertKycHistory(ctx context.Context, in *InsertKycHistoryRequest, opts ...grpc.CallOption) (*InsertKycHistoryResponse, error)
	CheckAppleAccount(ctx context.Context, in *CheckAppleAccountRequest, opts ...grpc.CallOption) (*CheckAppleAccountResponse, error)
	SaveNotificationSettings(ctx context.Context, in *SaveNotificationSettingsRequest, opts ...grpc.CallOption) (*SaveNotificationSettingsResponse, error)
	GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*GetNotificationSettingsResponse, error)
	RelatedUsers(ctx context.Context, in *RelatedUsersRequest, opts ...grpc.CallOption) (*RelatedUsersResponse, error)
	GetAllSubUsers(ctx context.Context, in *GetAllSubUsersRequest, opts ...grpc.CallOption) (*GetAllSubUsersResponse, error)
	GetAllUserIDsByUsername(ctx context.Context, in *GetAllUserIDsByUsernameRequest, opts ...grpc.CallOption) (*GetAllUserIDsByUsernameResponse, error)
	GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error)
	GetUsernamesByIDs(ctx context.Context, in *GetUsernamesByIDsRequest, opts ...grpc.CallOption) (*GetUsernamesByIDsResponse, error)
	GetEmailsByIDs(ctx context.Context, in *GetEmailsByIDsRequest, opts ...grpc.CallOption) (*GetEmailsByIDsResponse, error)
	SafeDeleteByID(ctx context.Context, in *SafeDeleteByIDRequest, opts ...grpc.CallOption) (*SafeDeleteByIDResponse, error)
	SaveV4(ctx context.Context, in *SaveV4Request, opts ...grpc.CallOption) (*SaveV4Response, error)
	GetByUsernames(ctx context.Context, in *GetByUsernamesRequest, opts ...grpc.CallOption) (*GetByUsernamesResponse, error)
	UpdateRefID(ctx context.Context, in *UpdateRefIDRequest, opts ...grpc.CallOption) (*UpdateRefIDResponse, error)
	GetFlagReferralLinkGenerated(ctx context.Context, in *GetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption) (*GetFlagReferralLinkGeneratedResponse, error)
	SetFlagReferralLinkGenerated(ctx context.Context, in *SetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	SetTimezone(ctx context.Context, in *SetTimezoneRequest, opts ...grpc.CallOption) (*SetTimezoneResponse, error)
	SetLanguage(ctx context.Context, in *SetLanguageRequest, opts ...grpc.CallOption) (*SetLanguageResponse, error)
	GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error)
	GetUserByTg(ctx context.Context, in *GetUserByTgRequest, opts ...grpc.CallOption) (*GetUserByTgResponse, error)
	CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error)
	GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error)
	DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*DeleteAPIKeyResponse, error)
	GetNoPayStatus(ctx context.Context, in *GetNoPayStatusRequest, opts ...grpc.CallOption) (*GetNoPayStatusResponse, error)
	UpdateNoPay(ctx context.Context, in *UpdateNoPayRequest, opts ...grpc.CallOption) (*UpdateNoPayResponse, error)
	CancelNoPayJob(ctx context.Context, in *CancelNoPayJobRequest, opts ...grpc.CallOption) (*CancelNoPayJobResponse, error)
	// GetUsersWithWL returns count of user with wl uuid and users names
	GetUsersWithWL(ctx context.Context, in *GetUsersWithWLRequest, opts ...grpc.CallOption) (*GetUsersWithWLResponse, error)
	// GetUserByUUIDs get user by their uuids
	GetUsersByUUIDs(ctx context.Context, in *GetUsersByUUIDsRequest, opts ...grpc.CallOption) (*GetUsersByUUIDsResponse, error)
	// GetByUsernamesForReferrals in this RPC call not all field fill cause optimization purpose.
	GetByUsernamesForReferrals(ctx context.Context, in *GetByUsernamesForReferralsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetByUsernamesForReferralsResponse], error)
	CreateSubUser(ctx context.Context, in *CreateSubUserRequest, opts ...grpc.CallOption) (*CreateSubUserResponse, error)
	SetUserAttributes(ctx context.Context, in *SetUserAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	// GetUserBySegmentID получения данных пользователя по segment ID
	GetUserBySegmentID(ctx context.Context, in *GetUserBySegmentIDRequest, opts ...grpc.CallOption) (*GetUserBySegmentIDResponse, error)
	GetOldIDByID(ctx context.Context, in *GetOldIDByIDRequest, opts ...grpc.CallOption) (*GetOldIDByIDResponse, error)
	GetOrCreateSecretKey(ctx context.Context, in *GetOrCreateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKeyResponse, error)
	CheckSignature(ctx context.Context, in *Signature, opts ...grpc.CallOption) (*SignatureResponse, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ProfileService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SaveV3(ctx context.Context, in *SaveV3Request, opts ...grpc.CallOption) (*SaveV3Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveV3Response)
	err := c.cc.Invoke(ctx, ProfileService_SaveV3_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (*GetByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByUserIDResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetByUserIDV2(ctx context.Context, in *GetByUserIDV2Request, opts ...grpc.CallOption) (*GetByUserIDV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByUserIDV2Response)
	err := c.cc.Invoke(ctx, ProfileService_GetByUserIDV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserIDByOldID(ctx context.Context, in *GetUserIDByOldIDRequest, opts ...grpc.CallOption) (*GetUserIDByOldIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIDByOldIDResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUserIDByOldID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserByEmailAndWl(ctx context.Context, in *GetUserByEmailAndWlRequest, opts ...grpc.CallOption) (*GetUserByEmailAndWlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByEmailAndWlResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUserByEmailAndWl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetOldUserByEmailAndWl(ctx context.Context, in *GetOldUserByEmailAndWlRequest, opts ...grpc.CallOption) (*GetOldUserByEmailAndWlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOldUserByEmailAndWlResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetOldUserByEmailAndWl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetAllUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetAllUsersByWlID(ctx context.Context, in *GetAllUsersByWlIDRequest, opts ...grpc.CallOption) (*GetAllUsersByWlIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUsersByWlIDResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetAllUsersByWlID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserByApiKey(ctx context.Context, in *GetUserByApiKeyRequest, opts ...grpc.CallOption) (*GetUserByApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByApiKeyResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUserByApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetOldByEmailAndWl(ctx context.Context, in *GetOldByEmailAndWlRequest, opts ...grpc.CallOption) (*GetOldByEmailAndWlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOldByEmailAndWlResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetOldByEmailAndWl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetOldByEmailAndWlV2(ctx context.Context, in *GetOldByEmailAndWlV2Request, opts ...grpc.CallOption) (*GetOldByEmailAndWlV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOldByEmailAndWlV2Response)
	err := c.cc.Invoke(ctx, ProfileService_GetOldByEmailAndWlV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetSuspended(ctx context.Context, in *GetSuspendedRequest, opts ...grpc.CallOption) (*GetSuspendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSuspendedResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetSuspended_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetSuspended(ctx context.Context, in *SetSuspendedRequest, opts ...grpc.CallOption) (*SetSuspendedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSuspendedResponse)
	err := c.cc.Invoke(ctx, ProfileService_SetSuspended_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ChangeWalletAddress(ctx context.Context, in *ChangeWalletAddressRequest, opts ...grpc.CallOption) (*ChangeWalletAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeWalletAddressResponse)
	err := c.cc.Invoke(ctx, ProfileService_ChangeWalletAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateMinPay(ctx context.Context, in *UpdateMinPayRequest, opts ...grpc.CallOption) (*UpdateMinPayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMinPayResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdateMinPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ChangeWalletAddressConfirm(ctx context.Context, in *ChangeWalletAddressConfirmRequest, opts ...grpc.CallOption) (*ChangeWalletAddressConfirmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeWalletAddressConfirmResponse)
	err := c.cc.Invoke(ctx, ProfileService_ChangeWalletAddressConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateUserIsActive(ctx context.Context, in *UpdateUserIsActiveRequest, opts ...grpc.CallOption) (*UpdateUserIsActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserIsActiveResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdateUserIsActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserIsActive(ctx context.Context, in *GetUserIsActiveRequest, opts ...grpc.CallOption) (*GetUserIsActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIsActiveResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUserIsActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKycStatusResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetKycStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetKycStatus(ctx context.Context, in *SetKycStatusRequest, opts ...grpc.CallOption) (*SetKycStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetKycStatusResponse)
	err := c.cc.Invoke(ctx, ProfileService_SetKycStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) InsertKycHistory(ctx context.Context, in *InsertKycHistoryRequest, opts ...grpc.CallOption) (*InsertKycHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertKycHistoryResponse)
	err := c.cc.Invoke(ctx, ProfileService_InsertKycHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CheckAppleAccount(ctx context.Context, in *CheckAppleAccountRequest, opts ...grpc.CallOption) (*CheckAppleAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAppleAccountResponse)
	err := c.cc.Invoke(ctx, ProfileService_CheckAppleAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SaveNotificationSettings(ctx context.Context, in *SaveNotificationSettingsRequest, opts ...grpc.CallOption) (*SaveNotificationSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, ProfileService_SaveNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*GetNotificationSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) RelatedUsers(ctx context.Context, in *RelatedUsersRequest, opts ...grpc.CallOption) (*RelatedUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelatedUsersResponse)
	err := c.cc.Invoke(ctx, ProfileService_RelatedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetAllSubUsers(ctx context.Context, in *GetAllSubUsersRequest, opts ...grpc.CallOption) (*GetAllSubUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSubUsersResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetAllSubUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetAllUserIDsByUsername(ctx context.Context, in *GetAllUserIDsByUsernameRequest, opts ...grpc.CallOption) (*GetAllUserIDsByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUserIDsByUsernameResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetAllUserIDsByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReferralsResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetReferrals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUsernamesByIDs(ctx context.Context, in *GetUsernamesByIDsRequest, opts ...grpc.CallOption) (*GetUsernamesByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsernamesByIDsResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUsernamesByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetEmailsByIDs(ctx context.Context, in *GetEmailsByIDsRequest, opts ...grpc.CallOption) (*GetEmailsByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailsByIDsResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetEmailsByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SafeDeleteByID(ctx context.Context, in *SafeDeleteByIDRequest, opts ...grpc.CallOption) (*SafeDeleteByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SafeDeleteByIDResponse)
	err := c.cc.Invoke(ctx, ProfileService_SafeDeleteByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SaveV4(ctx context.Context, in *SaveV4Request, opts ...grpc.CallOption) (*SaveV4Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveV4Response)
	err := c.cc.Invoke(ctx, ProfileService_SaveV4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetByUsernames(ctx context.Context, in *GetByUsernamesRequest, opts ...grpc.CallOption) (*GetByUsernamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByUsernamesResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetByUsernames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateRefID(ctx context.Context, in *UpdateRefIDRequest, opts ...grpc.CallOption) (*UpdateRefIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRefIDResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdateRefID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetFlagReferralLinkGenerated(ctx context.Context, in *GetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption) (*GetFlagReferralLinkGeneratedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlagReferralLinkGeneratedResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetFlagReferralLinkGenerated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetFlagReferralLinkGenerated(ctx context.Context, in *SetFlagReferralLinkGeneratedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProfileService_SetFlagReferralLinkGenerated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetTimezone(ctx context.Context, in *SetTimezoneRequest, opts ...grpc.CallOption) (*SetTimezoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTimezoneResponse)
	err := c.cc.Invoke(ctx, ProfileService_SetTimezone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetLanguage(ctx context.Context, in *SetLanguageRequest, opts ...grpc.CallOption) (*SetLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLanguageResponse)
	err := c.cc.Invoke(ctx, ProfileService_SetLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressesResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserByTg(ctx context.Context, in *GetUserByTgRequest, opts ...grpc.CallOption) (*GetUserByTgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByTgResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUserByTg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAPIKeyResponse)
	err := c.cc.Invoke(ctx, ProfileService_CreateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAPIKeyResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*DeleteAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAPIKeyResponse)
	err := c.cc.Invoke(ctx, ProfileService_DeleteAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetNoPayStatus(ctx context.Context, in *GetNoPayStatusRequest, opts ...grpc.CallOption) (*GetNoPayStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoPayStatusResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetNoPayStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateNoPay(ctx context.Context, in *UpdateNoPayRequest, opts ...grpc.CallOption) (*UpdateNoPayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNoPayResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdateNoPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CancelNoPayJob(ctx context.Context, in *CancelNoPayJobRequest, opts ...grpc.CallOption) (*CancelNoPayJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelNoPayJobResponse)
	err := c.cc.Invoke(ctx, ProfileService_CancelNoPayJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUsersWithWL(ctx context.Context, in *GetUsersWithWLRequest, opts ...grpc.CallOption) (*GetUsersWithWLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersWithWLResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUsersWithWL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUsersByUUIDs(ctx context.Context, in *GetUsersByUUIDsRequest, opts ...grpc.CallOption) (*GetUsersByUUIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersByUUIDsResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUsersByUUIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetByUsernamesForReferrals(ctx context.Context, in *GetByUsernamesForReferralsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetByUsernamesForReferralsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfileService_ServiceDesc.Streams[0], ProfileService_GetByUsernamesForReferrals_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetByUsernamesForReferralsRequest, GetByUsernamesForReferralsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileService_GetByUsernamesForReferralsClient = grpc.ServerStreamingClient[GetByUsernamesForReferralsResponse]

func (c *profileServiceClient) CreateSubUser(ctx context.Context, in *CreateSubUserRequest, opts ...grpc.CallOption) (*CreateSubUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubUserResponse)
	err := c.cc.Invoke(ctx, ProfileService_CreateSubUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetUserAttributes(ctx context.Context, in *SetUserAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProfileService_SetUserAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_CreateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetUserBySegmentID(ctx context.Context, in *GetUserBySegmentIDRequest, opts ...grpc.CallOption) (*GetUserBySegmentIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBySegmentIDResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetUserBySegmentID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetOldIDByID(ctx context.Context, in *GetOldIDByIDRequest, opts ...grpc.CallOption) (*GetOldIDByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOldIDByIDResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetOldIDByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetOrCreateSecretKey(ctx context.Context, in *GetOrCreateSecretKeyRequest, opts ...grpc.CallOption) (*SecretKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretKeyResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetOrCreateSecretKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CheckSignature(ctx context.Context, in *Signature, opts ...grpc.CallOption) (*SignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignatureResponse)
	err := c.cc.Invoke(ctx, ProfileService_CheckSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility.
type ProfileServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	SaveV3(context.Context, *SaveV3Request) (*SaveV3Response, error)
	GetByUserID(context.Context, *GetByUserIDRequest) (*GetByUserIDResponse, error)
	GetByUserIDV2(context.Context, *GetByUserIDV2Request) (*GetByUserIDV2Response, error)
	GetUserIDByOldID(context.Context, *GetUserIDByOldIDRequest) (*GetUserIDByOldIDResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	GetUserByEmailAndWl(context.Context, *GetUserByEmailAndWlRequest) (*GetUserByEmailAndWlResponse, error)
	GetOldUserByEmailAndWl(context.Context, *GetOldUserByEmailAndWlRequest) (*GetOldUserByEmailAndWlResponse, error)
	GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error)
	GetAllUsersByWlID(context.Context, *GetAllUsersByWlIDRequest) (*GetAllUsersByWlIDResponse, error)
	GetUserByApiKey(context.Context, *GetUserByApiKeyRequest) (*GetUserByApiKeyResponse, error)
	GetOldByEmailAndWl(context.Context, *GetOldByEmailAndWlRequest) (*GetOldByEmailAndWlResponse, error)
	GetOldByEmailAndWlV2(context.Context, *GetOldByEmailAndWlV2Request) (*GetOldByEmailAndWlV2Response, error)
	GetSuspended(context.Context, *GetSuspendedRequest) (*GetSuspendedResponse, error)
	SetSuspended(context.Context, *SetSuspendedRequest) (*SetSuspendedResponse, error)
	ChangeWalletAddress(context.Context, *ChangeWalletAddressRequest) (*ChangeWalletAddressResponse, error)
	UpdateMinPay(context.Context, *UpdateMinPayRequest) (*UpdateMinPayResponse, error)
	ChangeWalletAddressConfirm(context.Context, *ChangeWalletAddressConfirmRequest) (*ChangeWalletAddressConfirmResponse, error)
	UpdateUserIsActive(context.Context, *UpdateUserIsActiveRequest) (*UpdateUserIsActiveResponse, error)
	GetUserIsActive(context.Context, *GetUserIsActiveRequest) (*GetUserIsActiveResponse, error)
	GetKycStatus(context.Context, *GetKycStatusRequest) (*GetKycStatusResponse, error)
	SetKycStatus(context.Context, *SetKycStatusRequest) (*SetKycStatusResponse, error)
	InsertKycHistory(context.Context, *InsertKycHistoryRequest) (*InsertKycHistoryResponse, error)
	CheckAppleAccount(context.Context, *CheckAppleAccountRequest) (*CheckAppleAccountResponse, error)
	SaveNotificationSettings(context.Context, *SaveNotificationSettingsRequest) (*SaveNotificationSettingsResponse, error)
	GetNotificationSettings(context.Context, *GetNotificationSettingsRequest) (*GetNotificationSettingsResponse, error)
	RelatedUsers(context.Context, *RelatedUsersRequest) (*RelatedUsersResponse, error)
	GetAllSubUsers(context.Context, *GetAllSubUsersRequest) (*GetAllSubUsersResponse, error)
	GetAllUserIDsByUsername(context.Context, *GetAllUserIDsByUsernameRequest) (*GetAllUserIDsByUsernameResponse, error)
	GetReferrals(context.Context, *GetReferralsRequest) (*GetReferralsResponse, error)
	GetUsernamesByIDs(context.Context, *GetUsernamesByIDsRequest) (*GetUsernamesByIDsResponse, error)
	GetEmailsByIDs(context.Context, *GetEmailsByIDsRequest) (*GetEmailsByIDsResponse, error)
	SafeDeleteByID(context.Context, *SafeDeleteByIDRequest) (*SafeDeleteByIDResponse, error)
	SaveV4(context.Context, *SaveV4Request) (*SaveV4Response, error)
	GetByUsernames(context.Context, *GetByUsernamesRequest) (*GetByUsernamesResponse, error)
	UpdateRefID(context.Context, *UpdateRefIDRequest) (*UpdateRefIDResponse, error)
	GetFlagReferralLinkGenerated(context.Context, *GetFlagReferralLinkGeneratedRequest) (*GetFlagReferralLinkGeneratedResponse, error)
	SetFlagReferralLinkGenerated(context.Context, *SetFlagReferralLinkGeneratedRequest) (*emptypb.Empty, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	SetTimezone(context.Context, *SetTimezoneRequest) (*SetTimezoneResponse, error)
	SetLanguage(context.Context, *SetLanguageRequest) (*SetLanguageResponse, error)
	GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesResponse, error)
	GetUserByTg(context.Context, *GetUserByTgRequest) (*GetUserByTgResponse, error)
	CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error)
	GetAPIKey(context.Context, *GetAPIKeyRequest) (*GetAPIKeyResponse, error)
	DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*DeleteAPIKeyResponse, error)
	GetNoPayStatus(context.Context, *GetNoPayStatusRequest) (*GetNoPayStatusResponse, error)
	UpdateNoPay(context.Context, *UpdateNoPayRequest) (*UpdateNoPayResponse, error)
	CancelNoPayJob(context.Context, *CancelNoPayJobRequest) (*CancelNoPayJobResponse, error)
	// GetUsersWithWL returns count of user with wl uuid and users names
	GetUsersWithWL(context.Context, *GetUsersWithWLRequest) (*GetUsersWithWLResponse, error)
	// GetUserByUUIDs get user by their uuids
	GetUsersByUUIDs(context.Context, *GetUsersByUUIDsRequest) (*GetUsersByUUIDsResponse, error)
	// GetByUsernamesForReferrals in this RPC call not all field fill cause optimization purpose.
	GetByUsernamesForReferrals(*GetByUsernamesForReferralsRequest, grpc.ServerStreamingServer[GetByUsernamesForReferralsResponse]) error
	CreateSubUser(context.Context, *CreateSubUserRequest) (*CreateSubUserResponse, error)
	SetUserAttributes(context.Context, *SetUserAttributesRequest) (*emptypb.Empty, error)
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	// GetUserBySegmentID получения данных пользователя по segment ID
	GetUserBySegmentID(context.Context, *GetUserBySegmentIDRequest) (*GetUserBySegmentIDResponse, error)
	GetOldIDByID(context.Context, *GetOldIDByIDRequest) (*GetOldIDByIDResponse, error)
	GetOrCreateSecretKey(context.Context, *GetOrCreateSecretKeyRequest) (*SecretKeyResponse, error)
	CheckSignature(context.Context, *Signature) (*SignatureResponse, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileServiceServer struct{}

func (UnimplementedProfileServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProfileServiceServer) SaveV3(context.Context, *SaveV3Request) (*SaveV3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveV3 not implemented")
}
func (UnimplementedProfileServiceServer) GetByUserID(context.Context, *GetByUserIDRequest) (*GetByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserID not implemented")
}
func (UnimplementedProfileServiceServer) GetByUserIDV2(context.Context, *GetByUserIDV2Request) (*GetByUserIDV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserIDV2 not implemented")
}
func (UnimplementedProfileServiceServer) GetUserIDByOldID(context.Context, *GetUserIDByOldIDRequest) (*GetUserIDByOldIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByOldID not implemented")
}
func (UnimplementedProfileServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedProfileServiceServer) GetUserByEmailAndWl(context.Context, *GetUserByEmailAndWlRequest) (*GetUserByEmailAndWlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmailAndWl not implemented")
}
func (UnimplementedProfileServiceServer) GetOldUserByEmailAndWl(context.Context, *GetOldUserByEmailAndWlRequest) (*GetOldUserByEmailAndWlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOldUserByEmailAndWl not implemented")
}
func (UnimplementedProfileServiceServer) GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedProfileServiceServer) GetAllUsersByWlID(context.Context, *GetAllUsersByWlIDRequest) (*GetAllUsersByWlIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsersByWlID not implemented")
}
func (UnimplementedProfileServiceServer) GetUserByApiKey(context.Context, *GetUserByApiKeyRequest) (*GetUserByApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByApiKey not implemented")
}
func (UnimplementedProfileServiceServer) GetOldByEmailAndWl(context.Context, *GetOldByEmailAndWlRequest) (*GetOldByEmailAndWlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOldByEmailAndWl not implemented")
}
func (UnimplementedProfileServiceServer) GetOldByEmailAndWlV2(context.Context, *GetOldByEmailAndWlV2Request) (*GetOldByEmailAndWlV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOldByEmailAndWlV2 not implemented")
}
func (UnimplementedProfileServiceServer) GetSuspended(context.Context, *GetSuspendedRequest) (*GetSuspendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuspended not implemented")
}
func (UnimplementedProfileServiceServer) SetSuspended(context.Context, *SetSuspendedRequest) (*SetSuspendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSuspended not implemented")
}
func (UnimplementedProfileServiceServer) ChangeWalletAddress(context.Context, *ChangeWalletAddressRequest) (*ChangeWalletAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWalletAddress not implemented")
}
func (UnimplementedProfileServiceServer) UpdateMinPay(context.Context, *UpdateMinPayRequest) (*UpdateMinPayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMinPay not implemented")
}
func (UnimplementedProfileServiceServer) ChangeWalletAddressConfirm(context.Context, *ChangeWalletAddressConfirmRequest) (*ChangeWalletAddressConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWalletAddressConfirm not implemented")
}
func (UnimplementedProfileServiceServer) UpdateUserIsActive(context.Context, *UpdateUserIsActiveRequest) (*UpdateUserIsActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIsActive not implemented")
}
func (UnimplementedProfileServiceServer) GetUserIsActive(context.Context, *GetUserIsActiveRequest) (*GetUserIsActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIsActive not implemented")
}
func (UnimplementedProfileServiceServer) GetKycStatus(context.Context, *GetKycStatusRequest) (*GetKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycStatus not implemented")
}
func (UnimplementedProfileServiceServer) SetKycStatus(context.Context, *SetKycStatusRequest) (*SetKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKycStatus not implemented")
}
func (UnimplementedProfileServiceServer) InsertKycHistory(context.Context, *InsertKycHistoryRequest) (*InsertKycHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertKycHistory not implemented")
}
func (UnimplementedProfileServiceServer) CheckAppleAccount(context.Context, *CheckAppleAccountRequest) (*CheckAppleAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppleAccount not implemented")
}
func (UnimplementedProfileServiceServer) SaveNotificationSettings(context.Context, *SaveNotificationSettingsRequest) (*SaveNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNotificationSettings not implemented")
}
func (UnimplementedProfileServiceServer) GetNotificationSettings(context.Context, *GetNotificationSettingsRequest) (*GetNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationSettings not implemented")
}
func (UnimplementedProfileServiceServer) RelatedUsers(context.Context, *RelatedUsersRequest) (*RelatedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedUsers not implemented")
}
func (UnimplementedProfileServiceServer) GetAllSubUsers(context.Context, *GetAllSubUsersRequest) (*GetAllSubUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubUsers not implemented")
}
func (UnimplementedProfileServiceServer) GetAllUserIDsByUsername(context.Context, *GetAllUserIDsByUsernameRequest) (*GetAllUserIDsByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserIDsByUsername not implemented")
}
func (UnimplementedProfileServiceServer) GetReferrals(context.Context, *GetReferralsRequest) (*GetReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrals not implemented")
}
func (UnimplementedProfileServiceServer) GetUsernamesByIDs(context.Context, *GetUsernamesByIDsRequest) (*GetUsernamesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsernamesByIDs not implemented")
}
func (UnimplementedProfileServiceServer) GetEmailsByIDs(context.Context, *GetEmailsByIDsRequest) (*GetEmailsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailsByIDs not implemented")
}
func (UnimplementedProfileServiceServer) SafeDeleteByID(context.Context, *SafeDeleteByIDRequest) (*SafeDeleteByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SafeDeleteByID not implemented")
}
func (UnimplementedProfileServiceServer) SaveV4(context.Context, *SaveV4Request) (*SaveV4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveV4 not implemented")
}
func (UnimplementedProfileServiceServer) GetByUsernames(context.Context, *GetByUsernamesRequest) (*GetByUsernamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUsernames not implemented")
}
func (UnimplementedProfileServiceServer) UpdateRefID(context.Context, *UpdateRefIDRequest) (*UpdateRefIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefID not implemented")
}
func (UnimplementedProfileServiceServer) GetFlagReferralLinkGenerated(context.Context, *GetFlagReferralLinkGeneratedRequest) (*GetFlagReferralLinkGeneratedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlagReferralLinkGenerated not implemented")
}
func (UnimplementedProfileServiceServer) SetFlagReferralLinkGenerated(context.Context, *SetFlagReferralLinkGeneratedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFlagReferralLinkGenerated not implemented")
}
func (UnimplementedProfileServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServiceServer) SetTimezone(context.Context, *SetTimezoneRequest) (*SetTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimezone not implemented")
}
func (UnimplementedProfileServiceServer) SetLanguage(context.Context, *SetLanguageRequest) (*SetLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLanguage not implemented")
}
func (UnimplementedProfileServiceServer) GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddresses not implemented")
}
func (UnimplementedProfileServiceServer) GetUserByTg(context.Context, *GetUserByTgRequest) (*GetUserByTgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByTg not implemented")
}
func (UnimplementedProfileServiceServer) CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedProfileServiceServer) GetAPIKey(context.Context, *GetAPIKeyRequest) (*GetAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (UnimplementedProfileServiceServer) DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*DeleteAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedProfileServiceServer) GetNoPayStatus(context.Context, *GetNoPayStatusRequest) (*GetNoPayStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoPayStatus not implemented")
}
func (UnimplementedProfileServiceServer) UpdateNoPay(context.Context, *UpdateNoPayRequest) (*UpdateNoPayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoPay not implemented")
}
func (UnimplementedProfileServiceServer) CancelNoPayJob(context.Context, *CancelNoPayJobRequest) (*CancelNoPayJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNoPayJob not implemented")
}
func (UnimplementedProfileServiceServer) GetUsersWithWL(context.Context, *GetUsersWithWLRequest) (*GetUsersWithWLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithWL not implemented")
}
func (UnimplementedProfileServiceServer) GetUsersByUUIDs(context.Context, *GetUsersByUUIDsRequest) (*GetUsersByUUIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByUUIDs not implemented")
}
func (UnimplementedProfileServiceServer) GetByUsernamesForReferrals(*GetByUsernamesForReferralsRequest, grpc.ServerStreamingServer[GetByUsernamesForReferralsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetByUsernamesForReferrals not implemented")
}
func (UnimplementedProfileServiceServer) CreateSubUser(context.Context, *CreateSubUserRequest) (*CreateSubUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubUser not implemented")
}
func (UnimplementedProfileServiceServer) SetUserAttributes(context.Context, *SetUserAttributesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserAttributes not implemented")
}
func (UnimplementedProfileServiceServer) CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedProfileServiceServer) GetUserBySegmentID(context.Context, *GetUserBySegmentIDRequest) (*GetUserBySegmentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBySegmentID not implemented")
}
func (UnimplementedProfileServiceServer) GetOldIDByID(context.Context, *GetOldIDByIDRequest) (*GetOldIDByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOldIDByID not implemented")
}
func (UnimplementedProfileServiceServer) GetOrCreateSecretKey(context.Context, *GetOrCreateSecretKeyRequest) (*SecretKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateSecretKey not implemented")
}
func (UnimplementedProfileServiceServer) CheckSignature(context.Context, *Signature) (*SignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSignature not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}
func (UnimplementedProfileServiceServer) testEmbeddedByValue()                        {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	// If the following call panics, it indicates UnimplementedProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SaveV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SaveV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SaveV3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SaveV3(ctx, req.(*SaveV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetByUserID(ctx, req.(*GetByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetByUserIDV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserIDV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetByUserIDV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetByUserIDV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetByUserIDV2(ctx, req.(*GetByUserIDV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserIDByOldID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDByOldIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserIDByOldID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUserIDByOldID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserIDByOldID(ctx, req.(*GetUserIDByOldIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserByEmailAndWl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailAndWlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserByEmailAndWl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUserByEmailAndWl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserByEmailAndWl(ctx, req.(*GetUserByEmailAndWlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetOldUserByEmailAndWl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOldUserByEmailAndWlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetOldUserByEmailAndWl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetOldUserByEmailAndWl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetOldUserByEmailAndWl(ctx, req.(*GetOldUserByEmailAndWlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetAllUsers(ctx, req.(*GetAllUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetAllUsersByWlID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersByWlIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetAllUsersByWlID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetAllUsersByWlID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetAllUsersByWlID(ctx, req.(*GetAllUsersByWlIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserByApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserByApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUserByApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserByApiKey(ctx, req.(*GetUserByApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetOldByEmailAndWl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOldByEmailAndWlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetOldByEmailAndWl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetOldByEmailAndWl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetOldByEmailAndWl(ctx, req.(*GetOldByEmailAndWlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetOldByEmailAndWlV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOldByEmailAndWlV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetOldByEmailAndWlV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetOldByEmailAndWlV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetOldByEmailAndWlV2(ctx, req.(*GetOldByEmailAndWlV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetSuspended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuspendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetSuspended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetSuspended_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetSuspended(ctx, req.(*GetSuspendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetSuspended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSuspendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetSuspended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SetSuspended_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetSuspended(ctx, req.(*SetSuspendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ChangeWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeWalletAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ChangeWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ChangeWalletAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ChangeWalletAddress(ctx, req.(*ChangeWalletAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateMinPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMinPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateMinPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateMinPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateMinPay(ctx, req.(*UpdateMinPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ChangeWalletAddressConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeWalletAddressConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ChangeWalletAddressConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ChangeWalletAddressConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ChangeWalletAddressConfirm(ctx, req.(*ChangeWalletAddressConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateUserIsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIsActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateUserIsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateUserIsActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateUserIsActive(ctx, req.(*UpdateUserIsActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserIsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIsActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserIsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUserIsActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserIsActive(ctx, req.(*GetUserIsActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetKycStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetKycStatus(ctx, req.(*GetKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SetKycStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetKycStatus(ctx, req.(*SetKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_InsertKycHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertKycHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).InsertKycHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_InsertKycHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).InsertKycHistory(ctx, req.(*InsertKycHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CheckAppleAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppleAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CheckAppleAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CheckAppleAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CheckAppleAccount(ctx, req.(*CheckAppleAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SaveNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SaveNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SaveNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SaveNotificationSettings(ctx, req.(*SaveNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetNotificationSettings(ctx, req.(*GetNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_RelatedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelatedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).RelatedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_RelatedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).RelatedUsers(ctx, req.(*RelatedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetAllSubUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSubUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetAllSubUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetAllSubUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetAllSubUsers(ctx, req.(*GetAllSubUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetAllUserIDsByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserIDsByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetAllUserIDsByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetAllUserIDsByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetAllUserIDsByUsername(ctx, req.(*GetAllUserIDsByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetReferrals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetReferrals(ctx, req.(*GetReferralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUsernamesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsernamesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUsernamesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUsernamesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUsernamesByIDs(ctx, req.(*GetUsernamesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetEmailsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetEmailsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetEmailsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetEmailsByIDs(ctx, req.(*GetEmailsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SafeDeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SafeDeleteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SafeDeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SafeDeleteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SafeDeleteByID(ctx, req.(*SafeDeleteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SaveV4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveV4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SaveV4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SaveV4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SaveV4(ctx, req.(*SaveV4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetByUsernames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUsernamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetByUsernames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetByUsernames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetByUsernames(ctx, req.(*GetByUsernamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateRefID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateRefID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateRefID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateRefID(ctx, req.(*UpdateRefIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetFlagReferralLinkGenerated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlagReferralLinkGeneratedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetFlagReferralLinkGenerated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetFlagReferralLinkGenerated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetFlagReferralLinkGenerated(ctx, req.(*GetFlagReferralLinkGeneratedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetFlagReferralLinkGenerated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFlagReferralLinkGeneratedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetFlagReferralLinkGenerated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SetFlagReferralLinkGenerated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetFlagReferralLinkGenerated(ctx, req.(*SetFlagReferralLinkGeneratedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SetTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetTimezone(ctx, req.(*SetTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SetLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetLanguage(ctx, req.(*SetLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetAddresses(ctx, req.(*GetAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserByTg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserByTg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUserByTg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserByTg(ctx, req.(*GetUserByTgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CreateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateAPIKey(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetAPIKey(ctx, req.(*GetAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_DeleteAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteAPIKey(ctx, req.(*DeleteAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetNoPayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoPayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetNoPayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetNoPayStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetNoPayStatus(ctx, req.(*GetNoPayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateNoPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateNoPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateNoPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateNoPay(ctx, req.(*UpdateNoPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CancelNoPayJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelNoPayJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CancelNoPayJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CancelNoPayJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CancelNoPayJob(ctx, req.(*CancelNoPayJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUsersWithWL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersWithWLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUsersWithWL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUsersWithWL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUsersWithWL(ctx, req.(*GetUsersWithWLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUsersByUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByUUIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUsersByUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUsersByUUIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUsersByUUIDs(ctx, req.(*GetUsersByUUIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetByUsernamesForReferrals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetByUsernamesForReferralsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).GetByUsernamesForReferrals(m, &grpc.GenericServerStream[GetByUsernamesForReferralsRequest, GetByUsernamesForReferralsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileService_GetByUsernamesForReferralsServer = grpc.ServerStreamingServer[GetByUsernamesForReferralsResponse]

func _ProfileService_CreateSubUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateSubUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CreateSubUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateSubUser(ctx, req.(*CreateSubUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SetUserAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetUserAttributes(ctx, req.(*SetUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetUserBySegmentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBySegmentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetUserBySegmentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetUserBySegmentID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetUserBySegmentID(ctx, req.(*GetUserBySegmentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetOldIDByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOldIDByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetOldIDByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetOldIDByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetOldIDByID(ctx, req.(*GetOldIDByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetOrCreateSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateSecretKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetOrCreateSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetOrCreateSecretKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetOrCreateSecretKey(ctx, req.(*GetOrCreateSecretKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CheckSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Signature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CheckSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CheckSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CheckSignature(ctx, req.(*Signature))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProfileService_Create_Handler,
		},
		{
			MethodName: "SaveV3",
			Handler:    _ProfileService_SaveV3_Handler,
		},
		{
			MethodName: "GetByUserID",
			Handler:    _ProfileService_GetByUserID_Handler,
		},
		{
			MethodName: "GetByUserIDV2",
			Handler:    _ProfileService_GetByUserIDV2_Handler,
		},
		{
			MethodName: "GetUserIDByOldID",
			Handler:    _ProfileService_GetUserIDByOldID_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _ProfileService_UpdatePassword_Handler,
		},
		{
			MethodName: "GetUserByEmailAndWl",
			Handler:    _ProfileService_GetUserByEmailAndWl_Handler,
		},
		{
			MethodName: "GetOldUserByEmailAndWl",
			Handler:    _ProfileService_GetOldUserByEmailAndWl_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _ProfileService_GetAllUsers_Handler,
		},
		{
			MethodName: "GetAllUsersByWlID",
			Handler:    _ProfileService_GetAllUsersByWlID_Handler,
		},
		{
			MethodName: "GetUserByApiKey",
			Handler:    _ProfileService_GetUserByApiKey_Handler,
		},
		{
			MethodName: "GetOldByEmailAndWl",
			Handler:    _ProfileService_GetOldByEmailAndWl_Handler,
		},
		{
			MethodName: "GetOldByEmailAndWlV2",
			Handler:    _ProfileService_GetOldByEmailAndWlV2_Handler,
		},
		{
			MethodName: "GetSuspended",
			Handler:    _ProfileService_GetSuspended_Handler,
		},
		{
			MethodName: "SetSuspended",
			Handler:    _ProfileService_SetSuspended_Handler,
		},
		{
			MethodName: "ChangeWalletAddress",
			Handler:    _ProfileService_ChangeWalletAddress_Handler,
		},
		{
			MethodName: "UpdateMinPay",
			Handler:    _ProfileService_UpdateMinPay_Handler,
		},
		{
			MethodName: "ChangeWalletAddressConfirm",
			Handler:    _ProfileService_ChangeWalletAddressConfirm_Handler,
		},
		{
			MethodName: "UpdateUserIsActive",
			Handler:    _ProfileService_UpdateUserIsActive_Handler,
		},
		{
			MethodName: "GetUserIsActive",
			Handler:    _ProfileService_GetUserIsActive_Handler,
		},
		{
			MethodName: "GetKycStatus",
			Handler:    _ProfileService_GetKycStatus_Handler,
		},
		{
			MethodName: "SetKycStatus",
			Handler:    _ProfileService_SetKycStatus_Handler,
		},
		{
			MethodName: "InsertKycHistory",
			Handler:    _ProfileService_InsertKycHistory_Handler,
		},
		{
			MethodName: "CheckAppleAccount",
			Handler:    _ProfileService_CheckAppleAccount_Handler,
		},
		{
			MethodName: "SaveNotificationSettings",
			Handler:    _ProfileService_SaveNotificationSettings_Handler,
		},
		{
			MethodName: "GetNotificationSettings",
			Handler:    _ProfileService_GetNotificationSettings_Handler,
		},
		{
			MethodName: "RelatedUsers",
			Handler:    _ProfileService_RelatedUsers_Handler,
		},
		{
			MethodName: "GetAllSubUsers",
			Handler:    _ProfileService_GetAllSubUsers_Handler,
		},
		{
			MethodName: "GetAllUserIDsByUsername",
			Handler:    _ProfileService_GetAllUserIDsByUsername_Handler,
		},
		{
			MethodName: "GetReferrals",
			Handler:    _ProfileService_GetReferrals_Handler,
		},
		{
			MethodName: "GetUsernamesByIDs",
			Handler:    _ProfileService_GetUsernamesByIDs_Handler,
		},
		{
			MethodName: "GetEmailsByIDs",
			Handler:    _ProfileService_GetEmailsByIDs_Handler,
		},
		{
			MethodName: "SafeDeleteByID",
			Handler:    _ProfileService_SafeDeleteByID_Handler,
		},
		{
			MethodName: "SaveV4",
			Handler:    _ProfileService_SaveV4_Handler,
		},
		{
			MethodName: "GetByUsernames",
			Handler:    _ProfileService_GetByUsernames_Handler,
		},
		{
			MethodName: "UpdateRefID",
			Handler:    _ProfileService_UpdateRefID_Handler,
		},
		{
			MethodName: "GetFlagReferralLinkGenerated",
			Handler:    _ProfileService_GetFlagReferralLinkGenerated_Handler,
		},
		{
			MethodName: "SetFlagReferralLinkGenerated",
			Handler:    _ProfileService_SetFlagReferralLinkGenerated_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileService_UpdateProfile_Handler,
		},
		{
			MethodName: "SetTimezone",
			Handler:    _ProfileService_SetTimezone_Handler,
		},
		{
			MethodName: "SetLanguage",
			Handler:    _ProfileService_SetLanguage_Handler,
		},
		{
			MethodName: "GetAddresses",
			Handler:    _ProfileService_GetAddresses_Handler,
		},
		{
			MethodName: "GetUserByTg",
			Handler:    _ProfileService_GetUserByTg_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _ProfileService_CreateAPIKey_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _ProfileService_GetAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _ProfileService_DeleteAPIKey_Handler,
		},
		{
			MethodName: "GetNoPayStatus",
			Handler:    _ProfileService_GetNoPayStatus_Handler,
		},
		{
			MethodName: "UpdateNoPay",
			Handler:    _ProfileService_UpdateNoPay_Handler,
		},
		{
			MethodName: "CancelNoPayJob",
			Handler:    _ProfileService_CancelNoPayJob_Handler,
		},
		{
			MethodName: "GetUsersWithWL",
			Handler:    _ProfileService_GetUsersWithWL_Handler,
		},
		{
			MethodName: "GetUsersByUUIDs",
			Handler:    _ProfileService_GetUsersByUUIDs_Handler,
		},
		{
			MethodName: "CreateSubUser",
			Handler:    _ProfileService_CreateSubUser_Handler,
		},
		{
			MethodName: "SetUserAttributes",
			Handler:    _ProfileService_SetUserAttributes_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _ProfileService_CreateProfile_Handler,
		},
		{
			MethodName: "GetUserBySegmentID",
			Handler:    _ProfileService_GetUserBySegmentID_Handler,
		},
		{
			MethodName: "GetOldIDByID",
			Handler:    _ProfileService_GetOldIDByID_Handler,
		},
		{
			MethodName: "GetOrCreateSecretKey",
			Handler:    _ProfileService_GetOrCreateSecretKey_Handler,
		},
		{
			MethodName: "CheckSignature",
			Handler:    _ProfileService_CheckSignature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetByUsernamesForReferrals",
			Handler:       _ProfileService_GetByUsernamesForReferrals_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/proto/profile.proto",
}
