// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protocol/user_account/user_account.proto

package user_account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserAccountService_CreateUserAccounts_FullMethodName         = "/user_account.UserAccountService/CreateUserAccounts"
	UserAccountService_GetOrCreateUserAccount_FullMethodName     = "/user_account.UserAccountService/GetOrCreateUserAccount"
	UserAccountService_GetUserAccountsByFilter_FullMethodName    = "/user_account.UserAccountService/GetUserAccountsByFilter"
	UserAccountService_GetUserAccountById_FullMethodName         = "/user_account.UserAccountService/GetUserAccountById"
	UserAccountService_GetUserAccountByConstraint_FullMethodName = "/user_account.UserAccountService/GetUserAccountByConstraint"
	UserAccountService_GetUserAccountsByUuid_FullMethodName      = "/user_account.UserAccountService/GetUserAccountsByUuid"
)

// UserAccountServiceClient is the client API for UserAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccountServiceClient interface {
	// User Account
	CreateUserAccounts(ctx context.Context, in *UserAccountMultiRequest, opts ...grpc.CallOption) (*UserAccountMultiResponse, error)
	GetOrCreateUserAccount(ctx context.Context, in *UserAccountOneRequest, opts ...grpc.CallOption) (*UserAccountResponse, error)
	GetUserAccountsByFilter(ctx context.Context, in *UserAccountFilter, opts ...grpc.CallOption) (*UserAccountMultiResponse, error)
	GetUserAccountById(ctx context.Context, in *UserAccountId, opts ...grpc.CallOption) (*UserAccountResponse, error)
	GetUserAccountByConstraint(ctx context.Context, in *UserAccountConstraintRequest, opts ...grpc.CallOption) (*UserAccountResponse, error)
	GetUserAccountsByUuid(ctx context.Context, in *UserAccountUuid, opts ...grpc.CallOption) (*UserAccountMultiResponse, error)
}

type userAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccountServiceClient(cc grpc.ClientConnInterface) UserAccountServiceClient {
	return &userAccountServiceClient{cc}
}

func (c *userAccountServiceClient) CreateUserAccounts(ctx context.Context, in *UserAccountMultiRequest, opts ...grpc.CallOption) (*UserAccountMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccountMultiResponse)
	err := c.cc.Invoke(ctx, UserAccountService_CreateUserAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) GetOrCreateUserAccount(ctx context.Context, in *UserAccountOneRequest, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccountResponse)
	err := c.cc.Invoke(ctx, UserAccountService_GetOrCreateUserAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) GetUserAccountsByFilter(ctx context.Context, in *UserAccountFilter, opts ...grpc.CallOption) (*UserAccountMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccountMultiResponse)
	err := c.cc.Invoke(ctx, UserAccountService_GetUserAccountsByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) GetUserAccountById(ctx context.Context, in *UserAccountId, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccountResponse)
	err := c.cc.Invoke(ctx, UserAccountService_GetUserAccountById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) GetUserAccountByConstraint(ctx context.Context, in *UserAccountConstraintRequest, opts ...grpc.CallOption) (*UserAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccountResponse)
	err := c.cc.Invoke(ctx, UserAccountService_GetUserAccountByConstraint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountServiceClient) GetUserAccountsByUuid(ctx context.Context, in *UserAccountUuid, opts ...grpc.CallOption) (*UserAccountMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccountMultiResponse)
	err := c.cc.Invoke(ctx, UserAccountService_GetUserAccountsByUuid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccountServiceServer is the server API for UserAccountService service.
// All implementations must embed UnimplementedUserAccountServiceServer
// for forward compatibility
type UserAccountServiceServer interface {
	// User Account
	CreateUserAccounts(context.Context, *UserAccountMultiRequest) (*UserAccountMultiResponse, error)
	GetOrCreateUserAccount(context.Context, *UserAccountOneRequest) (*UserAccountResponse, error)
	GetUserAccountsByFilter(context.Context, *UserAccountFilter) (*UserAccountMultiResponse, error)
	GetUserAccountById(context.Context, *UserAccountId) (*UserAccountResponse, error)
	GetUserAccountByConstraint(context.Context, *UserAccountConstraintRequest) (*UserAccountResponse, error)
	GetUserAccountsByUuid(context.Context, *UserAccountUuid) (*UserAccountMultiResponse, error)
	mustEmbedUnimplementedUserAccountServiceServer()
}

// UnimplementedUserAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAccountServiceServer struct {
}

func (UnimplementedUserAccountServiceServer) CreateUserAccounts(context.Context, *UserAccountMultiRequest) (*UserAccountMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAccounts not implemented")
}
func (UnimplementedUserAccountServiceServer) GetOrCreateUserAccount(context.Context, *UserAccountOneRequest) (*UserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateUserAccount not implemented")
}
func (UnimplementedUserAccountServiceServer) GetUserAccountsByFilter(context.Context, *UserAccountFilter) (*UserAccountMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccountsByFilter not implemented")
}
func (UnimplementedUserAccountServiceServer) GetUserAccountById(context.Context, *UserAccountId) (*UserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccountById not implemented")
}
func (UnimplementedUserAccountServiceServer) GetUserAccountByConstraint(context.Context, *UserAccountConstraintRequest) (*UserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccountByConstraint not implemented")
}
func (UnimplementedUserAccountServiceServer) GetUserAccountsByUuid(context.Context, *UserAccountUuid) (*UserAccountMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccountsByUuid not implemented")
}
func (UnimplementedUserAccountServiceServer) mustEmbedUnimplementedUserAccountServiceServer() {}

// UnsafeUserAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccountServiceServer will
// result in compilation errors.
type UnsafeUserAccountServiceServer interface {
	mustEmbedUnimplementedUserAccountServiceServer()
}

func RegisterUserAccountServiceServer(s grpc.ServiceRegistrar, srv UserAccountServiceServer) {
	s.RegisterService(&UserAccountService_ServiceDesc, srv)
}

func _UserAccountService_CreateUserAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).CreateUserAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_CreateUserAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).CreateUserAccounts(ctx, req.(*UserAccountMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_GetOrCreateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetOrCreateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_GetOrCreateUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetOrCreateUserAccount(ctx, req.(*UserAccountOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_GetUserAccountsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetUserAccountsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_GetUserAccountsByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetUserAccountsByFilter(ctx, req.(*UserAccountFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_GetUserAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetUserAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_GetUserAccountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetUserAccountById(ctx, req.(*UserAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_GetUserAccountByConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetUserAccountByConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_GetUserAccountByConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetUserAccountByConstraint(ctx, req.(*UserAccountConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccountService_GetUserAccountsByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountUuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServiceServer).GetUserAccountsByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccountService_GetUserAccountsByUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServiceServer).GetUserAccountsByUuid(ctx, req.(*UserAccountUuid))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccountService_ServiceDesc is the grpc.ServiceDesc for UserAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_account.UserAccountService",
	HandlerType: (*UserAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserAccounts",
			Handler:    _UserAccountService_CreateUserAccounts_Handler,
		},
		{
			MethodName: "GetOrCreateUserAccount",
			Handler:    _UserAccountService_GetOrCreateUserAccount_Handler,
		},
		{
			MethodName: "GetUserAccountsByFilter",
			Handler:    _UserAccountService_GetUserAccountsByFilter_Handler,
		},
		{
			MethodName: "GetUserAccountById",
			Handler:    _UserAccountService_GetUserAccountById_Handler,
		},
		{
			MethodName: "GetUserAccountByConstraint",
			Handler:    _UserAccountService_GetUserAccountByConstraint_Handler,
		},
		{
			MethodName: "GetUserAccountsByUuid",
			Handler:    _UserAccountService_GetUserAccountsByUuid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/user_account/user_account.proto",
}
