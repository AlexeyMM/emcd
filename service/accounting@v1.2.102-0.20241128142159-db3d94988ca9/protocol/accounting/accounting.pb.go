// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: protocol/accounting/accounting.proto

package accounting

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserIDRequest) Reset() {
	*x = UserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDRequest) ProtoMessage() {}

func (x *UserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDRequest.ProtoReflect.Descriptor instead.
func (*UserIDRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{0}
}

func (x *UserIDRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CoinBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId                      string `protobuf:"bytes,1,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	WalletBalance               string `protobuf:"bytes,2,opt,name=wallet_balance,json=walletBalance,proto3" json:"wallet_balance,omitempty"`
	MiningBalance               string `protobuf:"bytes,3,opt,name=mining_balance,json=miningBalance,proto3" json:"mining_balance,omitempty"`
	CoinholdsBalance            string `protobuf:"bytes,4,opt,name=coinholds_balance,json=coinholdsBalance,proto3" json:"coinholds_balance,omitempty"`
	P2PBalance                  string `protobuf:"bytes,5,opt,name=p2p_balance,json=p2pBalance,proto3" json:"p2p_balance,omitempty"`
	BlockedBalanceCoinhold      string `protobuf:"bytes,6,opt,name=blocked_balance_coinhold,json=blockedBalanceCoinhold,proto3" json:"blocked_balance_coinhold,omitempty"`
	BlockedBalanceFreeWithdraw  string `protobuf:"bytes,7,opt,name=blocked_balance_free_withdraw,json=blockedBalanceFreeWithdraw,proto3" json:"blocked_balance_free_withdraw,omitempty"`
	BlockedBalanceP2P           string `protobuf:"bytes,8,opt,name=blocked_balance_p2p,json=blockedBalanceP2p,proto3" json:"blocked_balance_p2p,omitempty"`
	BlockedBalanceMinimgPayouts string `protobuf:"bytes,9,opt,name=blocked_balance_minimg_payouts,json=blockedBalanceMinimgPayouts,proto3" json:"blocked_balance_minimg_payouts,omitempty"`
}

func (x *CoinBalance) Reset() {
	*x = CoinBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinBalance) ProtoMessage() {}

func (x *CoinBalance) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinBalance.ProtoReflect.Descriptor instead.
func (*CoinBalance) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{1}
}

func (x *CoinBalance) GetCoinId() string {
	if x != nil {
		return x.CoinId
	}
	return ""
}

func (x *CoinBalance) GetWalletBalance() string {
	if x != nil {
		return x.WalletBalance
	}
	return ""
}

func (x *CoinBalance) GetMiningBalance() string {
	if x != nil {
		return x.MiningBalance
	}
	return ""
}

func (x *CoinBalance) GetCoinholdsBalance() string {
	if x != nil {
		return x.CoinholdsBalance
	}
	return ""
}

func (x *CoinBalance) GetP2PBalance() string {
	if x != nil {
		return x.P2PBalance
	}
	return ""
}

func (x *CoinBalance) GetBlockedBalanceCoinhold() string {
	if x != nil {
		return x.BlockedBalanceCoinhold
	}
	return ""
}

func (x *CoinBalance) GetBlockedBalanceFreeWithdraw() string {
	if x != nil {
		return x.BlockedBalanceFreeWithdraw
	}
	return ""
}

func (x *CoinBalance) GetBlockedBalanceP2P() string {
	if x != nil {
		return x.BlockedBalanceP2P
	}
	return ""
}

func (x *CoinBalance) GetBlockedBalanceMinimgPayouts() string {
	if x != nil {
		return x.BlockedBalanceMinimgPayouts
	}
	return ""
}

type GetBalancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinBalance []*CoinBalance `protobuf:"bytes,1,rep,name=coin_balance,json=coinBalance,proto3" json:"coin_balance,omitempty"`
}

func (x *GetBalancesResponse) Reset() {
	*x = GetBalancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesResponse) ProtoMessage() {}

func (x *GetBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesResponse.ProtoReflect.Descriptor instead.
func (*GetBalancesResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{2}
}

func (x *GetBalancesResponse) GetCoinBalance() []*CoinBalance {
	if x != nil {
		return x.CoinBalance
	}
	return nil
}

type GetBalanceByCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Coin   string `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (x *GetBalanceByCoinRequest) Reset() {
	*x = GetBalanceByCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceByCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceByCoinRequest) ProtoMessage() {}

func (x *GetBalanceByCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceByCoinRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceByCoinRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{3}
}

func (x *GetBalanceByCoinRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetBalanceByCoinRequest) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

type GetBalanceByCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinBalance *CoinBalance `protobuf:"bytes,1,opt,name=coin_balance,json=coinBalance,proto3" json:"coin_balance,omitempty"`
}

func (x *GetBalanceByCoinResponse) Reset() {
	*x = GetBalanceByCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceByCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceByCoinResponse) ProtoMessage() {}

func (x *GetBalanceByCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceByCoinResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceByCoinResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{4}
}

func (x *GetBalanceByCoinResponse) GetCoinBalance() *CoinBalance {
	if x != nil {
		return x.CoinBalance
	}
	return nil
}

type GetPaidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Coin   string                 `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
	From   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *GetPaidRequest) Reset() {
	*x = GetPaidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaidRequest) ProtoMessage() {}

func (x *GetPaidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaidRequest.ProtoReflect.Descriptor instead.
func (*GetPaidRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{5}
}

func (x *GetPaidRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPaidRequest) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *GetPaidRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetPaidRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type GetPaidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paid string `protobuf:"bytes,1,opt,name=paid,proto3" json:"paid,omitempty"`
}

func (x *GetPaidResponse) Reset() {
	*x = GetPaidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaidResponse) ProtoMessage() {}

func (x *GetPaidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaidResponse.ProtoReflect.Descriptor instead.
func (*GetPaidResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{6}
}

func (x *GetPaidResponse) GetPaid() string {
	if x != nil {
		return x.Paid
	}
	return ""
}

type CoinSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId      string `protobuf:"bytes,1,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	TotalAmount string `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *CoinSummary) Reset() {
	*x = CoinSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinSummary) ProtoMessage() {}

func (x *CoinSummary) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinSummary.ProtoReflect.Descriptor instead.
func (*CoinSummary) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{7}
}

func (x *CoinSummary) GetCoinId() string {
	if x != nil {
		return x.CoinId
	}
	return ""
}

func (x *CoinSummary) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

type GetCoinsSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinSummary []*CoinSummary `protobuf:"bytes,1,rep,name=coin_summary,json=coinSummary,proto3" json:"coin_summary,omitempty"`
}

func (x *GetCoinsSummaryResponse) Reset() {
	*x = GetCoinsSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsSummaryResponse) ProtoMessage() {}

func (x *GetCoinsSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsSummaryResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{8}
}

func (x *GetCoinsSummaryResponse) GetCoinSummary() []*CoinSummary {
	if x != nil {
		return x.CoinSummary
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              int64                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SenderAccountID   int64                  `protobuf:"varint,3,opt,name=senderAccountID,proto3" json:"senderAccountID,omitempty"`
	ReceiverAccountID int64                  `protobuf:"varint,4,opt,name=receiverAccountID,proto3" json:"receiverAccountID,omitempty"`
	// Deprecated: Marked as deprecated in protocol/accounting/accounting.proto.
	CoinID          string `protobuf:"bytes,5,opt,name=coinID,proto3" json:"coinID,omitempty"` // TODO: выпилить
	Amount          string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Comment         string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	Hash            string `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	ReceiverAddress string `protobuf:"bytes,9,opt,name=receiverAddress,proto3" json:"receiverAddress,omitempty"`
	TokenID         int64  `protobuf:"varint,10,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Hashrate        int64  `protobuf:"varint,11,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	FromReferralId  int64  `protobuf:"varint,12,opt,name=fromReferralId,proto3" json:"fromReferralId,omitempty"`
	ActionID        string `protobuf:"bytes,13,opt,name=actionID,proto3" json:"actionID,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{9}
}

func (x *Transaction) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Transaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Transaction) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *Transaction) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

// Deprecated: Marked as deprecated in protocol/accounting/accounting.proto.
func (x *Transaction) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *Transaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transaction) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *Transaction) GetTokenID() int64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *Transaction) GetHashrate() int64 {
	if x != nil {
		return x.Hashrate
	}
	return 0
}

func (x *Transaction) GetFromReferralId() int64 {
	if x != nil {
		return x.FromReferralId
	}
	return 0
}

func (x *Transaction) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedTill        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=blockedTill,proto3" json:"blockedTill,omitempty"`
	UnblockToAccountID int64                  `protobuf:"varint,2,opt,name=unblockToAccountID,proto3" json:"unblockToAccountID,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{10}
}

func (x *Block) GetBlockedTill() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockedTill
	}
	return nil
}

func (x *Block) GetUnblockToAccountID() int64 {
	if x != nil {
		return x.UnblockToAccountID
	}
	return 0
}

type OperationSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount            string                 `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountID         int64                  `protobuf:"varint,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	OperationCoinID   string                 `protobuf:"bytes,3,opt,name=operationCoinID,proto3" json:"operationCoinID,omitempty"`
	UserAccountCoinID string                 `protobuf:"bytes,4,opt,name=userAccountCoinID,proto3" json:"userAccountCoinID,omitempty"`
	AccountTypeID     int64                  `protobuf:"varint,5,opt,name=accountTypeID,proto3" json:"accountTypeID,omitempty"`
	IsActive          bool                   `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Type              int64                  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	TransactionID     int64                  `protobuf:"varint,9,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
}

func (x *OperationSelection) Reset() {
	*x = OperationSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSelection) ProtoMessage() {}

func (x *OperationSelection) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSelection.ProtoReflect.Descriptor instead.
func (*OperationSelection) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{11}
}

func (x *OperationSelection) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OperationSelection) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *OperationSelection) GetOperationCoinID() string {
	if x != nil {
		return x.OperationCoinID
	}
	return ""
}

func (x *OperationSelection) GetUserAccountCoinID() string {
	if x != nil {
		return x.UserAccountCoinID
	}
	return ""
}

func (x *OperationSelection) GetAccountTypeID() int64 {
	if x != nil {
		return x.AccountTypeID
	}
	return 0
}

func (x *OperationSelection) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *OperationSelection) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OperationSelection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OperationSelection) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

type UserIDCoinID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CoinID string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *UserIDCoinID) Reset() {
	*x = UserIDCoinID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIDCoinID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDCoinID) ProtoMessage() {}

func (x *UserIDCoinID) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDCoinID.ProtoReflect.Descriptor instead.
func (*UserIDCoinID) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{12}
}

func (x *UserIDCoinID) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserIDCoinID) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type BatchOperationSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int64                 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Operations []*OperationSelection `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *BatchOperationSelection) Reset() {
	*x = BatchOperationSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperationSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationSelection) ProtoMessage() {}

func (x *BatchOperationSelection) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationSelection.ProtoReflect.Descriptor instead.
func (*BatchOperationSelection) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{13}
}

func (x *BatchOperationSelection) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *BatchOperationSelection) GetOperations() []*OperationSelection {
	if x != nil {
		return x.Operations
	}
	return nil
}

type OperationSelectionWithBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount               string                 `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountID            int64                  `protobuf:"varint,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	OperationCoinID      string                 `protobuf:"bytes,3,opt,name=operationCoinID,proto3" json:"operationCoinID,omitempty"`
	UserAccountCoinID    string                 `protobuf:"bytes,4,opt,name=userAccountCoinID,proto3" json:"userAccountCoinID,omitempty"`
	AccountTypeID        int64                  `protobuf:"varint,5,opt,name=accountTypeID,proto3" json:"accountTypeID,omitempty"`
	IsActive             bool                   `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	UnblockTransactionID int64                  `protobuf:"varint,7,opt,name=unblockTransactionID,proto3" json:"unblockTransactionID,omitempty"`
	UnblockToAccountID   int64                  `protobuf:"varint,8,opt,name=unblockToAccountID,proto3" json:"unblockToAccountID,omitempty"`
	Type                 int64                  `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	TransactionID        int64                  `protobuf:"varint,11,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
}

func (x *OperationSelectionWithBlock) Reset() {
	*x = OperationSelectionWithBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSelectionWithBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSelectionWithBlock) ProtoMessage() {}

func (x *OperationSelectionWithBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSelectionWithBlock.ProtoReflect.Descriptor instead.
func (*OperationSelectionWithBlock) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{14}
}

func (x *OperationSelectionWithBlock) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OperationSelectionWithBlock) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *OperationSelectionWithBlock) GetOperationCoinID() string {
	if x != nil {
		return x.OperationCoinID
	}
	return ""
}

func (x *OperationSelectionWithBlock) GetUserAccountCoinID() string {
	if x != nil {
		return x.UserAccountCoinID
	}
	return ""
}

func (x *OperationSelectionWithBlock) GetAccountTypeID() int64 {
	if x != nil {
		return x.AccountTypeID
	}
	return 0
}

func (x *OperationSelectionWithBlock) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *OperationSelectionWithBlock) GetUnblockTransactionID() int64 {
	if x != nil {
		return x.UnblockTransactionID
	}
	return 0
}

func (x *OperationSelectionWithBlock) GetUnblockToAccountID() int64 {
	if x != nil {
		return x.UnblockToAccountID
	}
	return 0
}

func (x *OperationSelectionWithBlock) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OperationSelectionWithBlock) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OperationSelectionWithBlock) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

type TransactionSelectionWithBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountID    int64  `protobuf:"varint,1,opt,name=receiverAccountID,proto3" json:"receiverAccountID,omitempty"`
	CoinID               string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Type                 int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Amount               string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BlockID              int64  `protobuf:"varint,5,opt,name=blockID,proto3" json:"blockID,omitempty"`
	UnblockToAccountID   int64  `protobuf:"varint,6,opt,name=unblockToAccountID,proto3" json:"unblockToAccountID,omitempty"`
	SenderAccountID      int64  `protobuf:"varint,7,opt,name=senderAccountID,proto3" json:"senderAccountID,omitempty"`
	UnblockTransactionID int64  `protobuf:"varint,8,opt,name=unblockTransactionID,proto3" json:"unblockTransactionID,omitempty"`
	ActionID             string `protobuf:"bytes,9,opt,name=actionID,proto3" json:"actionID,omitempty"`
}

func (x *TransactionSelectionWithBlock) Reset() {
	*x = TransactionSelectionWithBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSelectionWithBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSelectionWithBlock) ProtoMessage() {}

func (x *TransactionSelectionWithBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSelectionWithBlock.ProtoReflect.Descriptor instead.
func (*TransactionSelectionWithBlock) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{15}
}

func (x *TransactionSelectionWithBlock) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *TransactionSelectionWithBlock) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *TransactionSelectionWithBlock) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TransactionSelectionWithBlock) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransactionSelectionWithBlock) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

func (x *TransactionSelectionWithBlock) GetUnblockToAccountID() int64 {
	if x != nil {
		return x.UnblockToAccountID
	}
	return 0
}

func (x *TransactionSelectionWithBlock) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *TransactionSelectionWithBlock) GetUnblockTransactionID() int64 {
	if x != nil {
		return x.UnblockTransactionID
	}
	return 0
}

func (x *TransactionSelectionWithBlock) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

type UserBlockTimeBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *UserBlockTimeBalance) Reset() {
	*x = UserBlockTimeBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBlockTimeBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBlockTimeBalance) ProtoMessage() {}

func (x *UserBlockTimeBalance) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBlockTimeBalance.ProtoReflect.Descriptor instead.
func (*UserBlockTimeBalance) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{16}
}

func (x *UserBlockTimeBalance) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserBlockTimeBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type UserBeforePayoutMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	AccountTypeID int64                  `protobuf:"varint,2,opt,name=accountTypeID,proto3" json:"accountTypeID,omitempty"`
	BlockID       int64                  `protobuf:"varint,3,opt,name=blockID,proto3" json:"blockID,omitempty"`
	CoinID        string                 `protobuf:"bytes,4,opt,name=coinID,proto3" json:"coinID,omitempty"`
	LastPay       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastPay,proto3" json:"lastPay,omitempty"`
}

func (x *UserBeforePayoutMining) Reset() {
	*x = UserBeforePayoutMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBeforePayoutMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBeforePayoutMining) ProtoMessage() {}

func (x *UserBeforePayoutMining) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBeforePayoutMining.ProtoReflect.Descriptor instead.
func (*UserBeforePayoutMining) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{17}
}

func (x *UserBeforePayoutMining) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserBeforePayoutMining) GetAccountTypeID() int64 {
	if x != nil {
		return x.AccountTypeID
	}
	return 0
}

func (x *UserBeforePayoutMining) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

func (x *UserBeforePayoutMining) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *UserBeforePayoutMining) GetLastPay() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPay
	}
	return nil
}

type UserMiningDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockID int64  `protobuf:"varint,1,opt,name=blockID,proto3" json:"blockID,omitempty"`
	Diff    string `protobuf:"bytes,2,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *UserMiningDiff) Reset() {
	*x = UserMiningDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMiningDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMiningDiff) ProtoMessage() {}

func (x *UserMiningDiff) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMiningDiff.ProtoReflect.Descriptor instead.
func (*UserMiningDiff) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{18}
}

func (x *UserMiningDiff) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

func (x *UserMiningDiff) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

type UserBeforePayoutWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         int64   `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	AccountTypeID  int64   `protobuf:"varint,2,opt,name=accountTypeID,proto3" json:"accountTypeID,omitempty"`
	CoinID         string  `protobuf:"bytes,3,opt,name=coinID,proto3" json:"coinID,omitempty"`
	TransactionIDs []int64 `protobuf:"varint,4,rep,packed,name=transactionIDs,proto3" json:"transactionIDs,omitempty"`
}

func (x *UserBeforePayoutWallet) Reset() {
	*x = UserBeforePayoutWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBeforePayoutWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBeforePayoutWallet) ProtoMessage() {}

func (x *UserBeforePayoutWallet) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBeforePayoutWallet.ProtoReflect.Descriptor instead.
func (*UserBeforePayoutWallet) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{19}
}

func (x *UserBeforePayoutWallet) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserBeforePayoutWallet) GetAccountTypeID() int64 {
	if x != nil {
		return x.AccountTypeID
	}
	return 0
}

func (x *UserBeforePayoutWallet) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *UserBeforePayoutWallet) GetTransactionIDs() []int64 {
	if x != nil {
		return x.TransactionIDs
	}
	return nil
}

type UserWalletDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	BlockID int64  `protobuf:"varint,2,opt,name=blockID,proto3" json:"blockID,omitempty"`
	Diff    string `protobuf:"bytes,3,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *UserWalletDiff) Reset() {
	*x = UserWalletDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWalletDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWalletDiff) ProtoMessage() {}

func (x *UserWalletDiff) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWalletDiff.ProtoReflect.Descriptor instead.
func (*UserWalletDiff) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{20}
}

func (x *UserWalletDiff) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserWalletDiff) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

func (x *UserWalletDiff) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

type Income struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diff          int64                  `protobuf:"varint,1,opt,name=diff,proto3" json:"diff,omitempty"`
	ChangePercent string                 `protobuf:"bytes,2,opt,name=changePercent,proto3" json:"changePercent,omitempty"`
	Time          string                 `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Income        string                 `protobuf:"bytes,4,opt,name=income,proto3" json:"income,omitempty"`
	Code          int64                  `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	HashRate      *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=hashRate,proto3" json:"hashRate,omitempty"`
}

func (x *Income) Reset() {
	*x = Income{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Income) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Income) ProtoMessage() {}

func (x *Income) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Income.ProtoReflect.Descriptor instead.
func (*Income) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{21}
}

func (x *Income) GetDiff() int64 {
	if x != nil {
		return x.Diff
	}
	return 0
}

func (x *Income) GetChangePercent() string {
	if x != nil {
		return x.ChangePercent
	}
	return ""
}

func (x *Income) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Income) GetIncome() string {
	if x != nil {
		return x.Income
	}
	return ""
}

func (x *Income) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Income) GetHashRate() *wrapperspb.Int64Value {
	if x != nil {
		return x.HashRate
	}
	return nil
}

type Payout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   string                  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Amount string                  `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Tx     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	TxID   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=txID,proto3" json:"txID,omitempty"`
}

func (x *Payout) Reset() {
	*x = Payout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payout) ProtoMessage() {}

func (x *Payout) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payout.ProtoReflect.Descriptor instead.
func (*Payout) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{22}
}

func (x *Payout) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Payout) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Payout) GetTx() *wrapperspb.StringValue {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *Payout) GetTxID() *wrapperspb.StringValue {
	if x != nil {
		return x.TxID
	}
	return nil
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID                  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=txID,proto3" json:"txID,omitempty"`
	FiatStatus            *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=fiatStatus,proto3" json:"fiatStatus,omitempty"`
	Address               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Comment               *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CoinholdType          string                  `protobuf:"bytes,5,opt,name=coinholdType,proto3" json:"coinholdType,omitempty"`
	ExchangeToCoinID      *wrapperspb.Int64Value  `protobuf:"bytes,6,opt,name=exchangeToCoinID,proto3" json:"exchangeToCoinID,omitempty"`
	CoinholdID            *wrapperspb.Int64Value  `protobuf:"bytes,7,opt,name=coinholdID,proto3" json:"coinholdID,omitempty"`
	OrderID               *wrapperspb.Int64Value  `protobuf:"bytes,8,opt,name=orderID,proto3" json:"orderID,omitempty"`
	CreatedAt             *wrapperspb.Int64Value  `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Amount                *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee                   *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=fee,proto3" json:"fee,omitempty"`
	FiatAmount            *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=fiatAmount,proto3" json:"fiatAmount,omitempty"`
	ExchangeAmountReceive *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=exchangeAmountReceive,proto3" json:"exchangeAmountReceive,omitempty"`
	ExchangeAmountSent    *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=exchangeAmountSent,proto3" json:"exchangeAmountSent,omitempty"`
	ExchangeRate          *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	ExchangeIsSuccess     *wrapperspb.BoolValue   `protobuf:"bytes,16,opt,name=exchangeIsSuccess,proto3" json:"exchangeIsSuccess,omitempty"`
	Date                  *timestamppb.Timestamp  `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	TokenID               int64                   `protobuf:"varint,18,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	CoinID                int64                   `protobuf:"varint,19,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Status                int64                   `protobuf:"varint,20,opt,name=status,proto3" json:"status,omitempty"`
	Type                  int64                   `protobuf:"varint,21,opt,name=type,proto3" json:"type,omitempty"`
	Id                    int64                   `protobuf:"varint,22,opt,name=id,proto3" json:"id,omitempty"`
	P2PStatus             int64                   `protobuf:"varint,23,opt,name=p2pStatus,proto3" json:"p2pStatus,omitempty"`
	P2POrderID            int64                   `protobuf:"varint,24,opt,name=p2pOrderID,proto3" json:"p2pOrderID,omitempty"`
	ReferralEmail         *wrapperspb.StringValue `protobuf:"bytes,25,opt,name=referralEmail,proto3" json:"referralEmail,omitempty"`
	ReferralType          *wrapperspb.Int64Value  `protobuf:"bytes,26,opt,name=referralType,proto3" json:"referralType,omitempty"`
	NetworkID             string                  `protobuf:"bytes,27,opt,name=networkID,proto3" json:"networkID,omitempty"`
	CoinStrID             string                  `protobuf:"bytes,28,opt,name=coinStrID,proto3" json:"coinStrID,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{23}
}

func (x *Wallet) GetTxID() *wrapperspb.StringValue {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *Wallet) GetFiatStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.FiatStatus
	}
	return nil
}

func (x *Wallet) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Wallet) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Wallet) GetCoinholdType() string {
	if x != nil {
		return x.CoinholdType
	}
	return ""
}

func (x *Wallet) GetExchangeToCoinID() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExchangeToCoinID
	}
	return nil
}

func (x *Wallet) GetCoinholdID() *wrapperspb.Int64Value {
	if x != nil {
		return x.CoinholdID
	}
	return nil
}

func (x *Wallet) GetOrderID() *wrapperspb.Int64Value {
	if x != nil {
		return x.OrderID
	}
	return nil
}

func (x *Wallet) GetCreatedAt() *wrapperspb.Int64Value {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Wallet) GetAmount() *wrapperspb.StringValue {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Wallet) GetFee() *wrapperspb.StringValue {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Wallet) GetFiatAmount() *wrapperspb.StringValue {
	if x != nil {
		return x.FiatAmount
	}
	return nil
}

func (x *Wallet) GetExchangeAmountReceive() *wrapperspb.StringValue {
	if x != nil {
		return x.ExchangeAmountReceive
	}
	return nil
}

func (x *Wallet) GetExchangeAmountSent() *wrapperspb.StringValue {
	if x != nil {
		return x.ExchangeAmountSent
	}
	return nil
}

func (x *Wallet) GetExchangeRate() *wrapperspb.StringValue {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *Wallet) GetExchangeIsSuccess() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExchangeIsSuccess
	}
	return nil
}

func (x *Wallet) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Wallet) GetTokenID() int64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *Wallet) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *Wallet) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Wallet) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Wallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Wallet) GetP2PStatus() int64 {
	if x != nil {
		return x.P2PStatus
	}
	return 0
}

func (x *Wallet) GetP2POrderID() int64 {
	if x != nil {
		return x.P2POrderID
	}
	return 0
}

func (x *Wallet) GetReferralEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.ReferralEmail
	}
	return nil
}

func (x *Wallet) GetReferralType() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReferralType
	}
	return nil
}

func (x *Wallet) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *Wallet) GetCoinStrID() string {
	if x != nil {
		return x.CoinStrID
	}
	return ""
}

type ViewBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        int64  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CoinID        string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	AccountTypeID int64  `protobuf:"varint,3,opt,name=accountTypeID,proto3" json:"accountTypeID,omitempty"`
	TotalBalance  bool   `protobuf:"varint,4,opt,name=totalBalance,proto3" json:"totalBalance,omitempty"`
}

func (x *ViewBalanceRequest) Reset() {
	*x = ViewBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewBalanceRequest) ProtoMessage() {}

func (x *ViewBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewBalanceRequest.ProtoReflect.Descriptor instead.
func (*ViewBalanceRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{24}
}

func (x *ViewBalanceRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ViewBalanceRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *ViewBalanceRequest) GetAccountTypeID() int64 {
	if x != nil {
		return x.AccountTypeID
	}
	return 0
}

func (x *ViewBalanceRequest) GetTotalBalance() bool {
	if x != nil {
		return x.TotalBalance
	}
	return false
}

type ViewBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *ViewBalanceResponse) Reset() {
	*x = ViewBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewBalanceResponse) ProtoMessage() {}

func (x *ViewBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewBalanceResponse.ProtoReflect.Descriptor instead.
func (*ViewBalanceResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{25}
}

func (x *ViewBalanceResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type ChangeBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *ChangeBalanceRequest) Reset() {
	*x = ChangeBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBalanceRequest) ProtoMessage() {}

func (x *ChangeBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBalanceRequest.ProtoReflect.Descriptor instead.
func (*ChangeBalanceRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{26}
}

func (x *ChangeBalanceRequest) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type ChangeBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeBalanceResponse) Reset() {
	*x = ChangeBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBalanceResponse) ProtoMessage() {}

func (x *ChangeBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBalanceResponse.ProtoReflect.Descriptor instead.
func (*ChangeBalanceResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{27}
}

type FindOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CoinID string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *FindOperationsRequest) Reset() {
	*x = FindOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOperationsRequest) ProtoMessage() {}

func (x *FindOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOperationsRequest.ProtoReflect.Descriptor instead.
func (*FindOperationsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{28}
}

func (x *FindOperationsRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *FindOperationsRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type FindOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*OperationSelectionWithBlock `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *FindOperationsResponse) Reset() {
	*x = FindOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOperationsResponse) ProtoMessage() {}

func (x *FindOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOperationsResponse.ProtoReflect.Descriptor instead.
func (*FindOperationsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{29}
}

func (x *FindOperationsResponse) GetOperations() []*OperationSelectionWithBlock {
	if x != nil {
		return x.Operations
	}
	return nil
}

type FindBatchOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserIDCoinID `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *FindBatchOperationsRequest) Reset() {
	*x = FindBatchOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBatchOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBatchOperationsRequest) ProtoMessage() {}

func (x *FindBatchOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBatchOperationsRequest.ProtoReflect.Descriptor instead.
func (*FindBatchOperationsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{30}
}

func (x *FindBatchOperationsRequest) GetUsers() []*UserIDCoinID {
	if x != nil {
		return x.Users
	}
	return nil
}

type FindBatchOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationsByUsers []*BatchOperationSelection `protobuf:"bytes,1,rep,name=operationsByUsers,proto3" json:"operationsByUsers,omitempty"`
}

func (x *FindBatchOperationsResponse) Reset() {
	*x = FindBatchOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBatchOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBatchOperationsResponse) ProtoMessage() {}

func (x *FindBatchOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBatchOperationsResponse.ProtoReflect.Descriptor instead.
func (*FindBatchOperationsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{31}
}

func (x *FindBatchOperationsResponse) GetOperationsByUsers() []*BatchOperationSelection {
	if x != nil {
		return x.OperationsByUsers
	}
	return nil
}

type FindTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types         []int64                `protobuf:"varint,1,rep,packed,name=types,proto3" json:"types,omitempty"`
	UserID        int64                  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	AccountTypeID int64                  `protobuf:"varint,3,opt,name=accountTypeID,proto3" json:"accountTypeID,omitempty"`
	CoinIDs       []string               `protobuf:"bytes,4,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	From          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *FindTransactionsRequest) Reset() {
	*x = FindTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTransactionsRequest) ProtoMessage() {}

func (x *FindTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTransactionsRequest.ProtoReflect.Descriptor instead.
func (*FindTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{32}
}

func (x *FindTransactionsRequest) GetTypes() []int64 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *FindTransactionsRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *FindTransactionsRequest) GetAccountTypeID() int64 {
	if x != nil {
		return x.AccountTypeID
	}
	return 0
}

func (x *FindTransactionsRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *FindTransactionsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

type FindTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *FindTransactionsResponse) Reset() {
	*x = FindTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTransactionsResponse) ProtoMessage() {}

func (x *FindTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTransactionsResponse.ProtoReflect.Descriptor instead.
func (*FindTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{33}
}

func (x *FindTransactionsResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// количество в запросе к бд
	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// сдвиг в запросе к бд
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{34}
}

func (x *Pagination) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TransactionCollectorFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// тип транзакции
	Types []int32 `protobuf:"varint,1,rep,packed,name=types,proto3" json:"types,omitempty"`
	// монета
	CoinCode *string `protobuf:"bytes,2,opt,name=coin_code,json=coinCode,proto3,oneof" json:"coin_code,omitempty"`
	// дата создания, больше
	CreatedAtGt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at_gt,json=createdAtGt,proto3,oneof" json:"created_at_gt,omitempty"`
	// дата создания, меньше или равно
	CreatedAtLte *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at_lte,json=createdAtLte,proto3,oneof" json:"created_at_lte,omitempty"`
	// пагинация
	Pagination *Pagination `protobuf:"bytes,5,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
}

func (x *TransactionCollectorFilter) Reset() {
	*x = TransactionCollectorFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionCollectorFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionCollectorFilter) ProtoMessage() {}

func (x *TransactionCollectorFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionCollectorFilter.ProtoReflect.Descriptor instead.
func (*TransactionCollectorFilter) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{35}
}

func (x *TransactionCollectorFilter) GetTypes() []int32 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *TransactionCollectorFilter) GetCoinCode() string {
	if x != nil && x.CoinCode != nil {
		return *x.CoinCode
	}
	return ""
}

func (x *TransactionCollectorFilter) GetCreatedAtGt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAtGt
	}
	return nil
}

func (x *TransactionCollectorFilter) GetCreatedAtLte() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAtLte
	}
	return nil
}

func (x *TransactionCollectorFilter) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type TransactionMultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// транзакции
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// общее количество
	TotalCount *uint64 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
}

func (x *TransactionMultiResponse) Reset() {
	*x = TransactionMultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMultiResponse) ProtoMessage() {}

func (x *TransactionMultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMultiResponse.ProtoReflect.Descriptor instead.
func (*TransactionMultiResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{36}
}

func (x *TransactionMultiResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *TransactionMultiResponse) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type GetTransactionsByActionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionID string `protobuf:"bytes,1,opt,name=actionID,proto3" json:"actionID,omitempty"`
}

func (x *GetTransactionsByActionIDRequest) Reset() {
	*x = GetTransactionsByActionIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsByActionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsByActionIDRequest) ProtoMessage() {}

func (x *GetTransactionsByActionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsByActionIDRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionsByActionIDRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{37}
}

func (x *GetTransactionsByActionIDRequest) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

type GetTransactionsByActionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *GetTransactionsByActionIDResponse) Reset() {
	*x = GetTransactionsByActionIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsByActionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsByActionIDResponse) ProtoMessage() {}

func (x *GetTransactionsByActionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsByActionIDResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionsByActionIDResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{38}
}

func (x *GetTransactionsByActionIDResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type FindTransactionsWithBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedTill *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=blockedTill,proto3" json:"blockedTill,omitempty"`
}

func (x *FindTransactionsWithBlocksRequest) Reset() {
	*x = FindTransactionsWithBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTransactionsWithBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTransactionsWithBlocksRequest) ProtoMessage() {}

func (x *FindTransactionsWithBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTransactionsWithBlocksRequest.ProtoReflect.Descriptor instead.
func (*FindTransactionsWithBlocksRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{39}
}

func (x *FindTransactionsWithBlocksRequest) GetBlockedTill() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockedTill
	}
	return nil
}

type FindTransactionsWithBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*TransactionSelectionWithBlock `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *FindTransactionsWithBlocksResponse) Reset() {
	*x = FindTransactionsWithBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTransactionsWithBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTransactionsWithBlocksResponse) ProtoMessage() {}

func (x *FindTransactionsWithBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTransactionsWithBlocksResponse.ProtoReflect.Descriptor instead.
func (*FindTransactionsWithBlocksResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{40}
}

func (x *FindTransactionsWithBlocksResponse) GetTransactions() []*TransactionSelectionWithBlock {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetTransactionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTransactionByIDRequest) Reset() {
	*x = GetTransactionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByIDRequest) ProtoMessage() {}

func (x *GetTransactionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionByIDRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{41}
}

func (x *GetTransactionByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTransactionByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *TransactionSelectionWithBlock `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *GetTransactionByIDResponse) Reset() {
	*x = GetTransactionByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByIDResponse) ProtoMessage() {}

func (x *GetTransactionByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByIDResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionByIDResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{42}
}

func (x *GetTransactionByIDResponse) GetTransaction() *TransactionSelectionWithBlock {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type GetTransactionIDByActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionID string `protobuf:"bytes,1,opt,name=actionID,proto3" json:"actionID,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Type     int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetTransactionIDByActionRequest) Reset() {
	*x = GetTransactionIDByActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionIDByActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionIDByActionRequest) ProtoMessage() {}

func (x *GetTransactionIDByActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionIDByActionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionIDByActionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{43}
}

func (x *GetTransactionIDByActionRequest) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

func (x *GetTransactionIDByActionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetTransactionIDByActionRequest) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type GetTransactionIDByActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTransactionIDByActionResponse) Reset() {
	*x = GetTransactionIDByActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionIDByActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionIDByActionResponse) ProtoMessage() {}

func (x *GetTransactionIDByActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionIDByActionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionIDByActionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{44}
}

func (x *GetTransactionIDByActionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindLastBlockTimeBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccountIDs []int64 `protobuf:"varint,1,rep,packed,name=userAccountIDs,proto3" json:"userAccountIDs,omitempty"`
}

func (x *FindLastBlockTimeBalancesRequest) Reset() {
	*x = FindLastBlockTimeBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLastBlockTimeBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLastBlockTimeBalancesRequest) ProtoMessage() {}

func (x *FindLastBlockTimeBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLastBlockTimeBalancesRequest.ProtoReflect.Descriptor instead.
func (*FindLastBlockTimeBalancesRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{45}
}

func (x *FindLastBlockTimeBalancesRequest) GetUserAccountIDs() []int64 {
	if x != nil {
		return x.UserAccountIDs
	}
	return nil
}

type FindLastBlockTimeBalancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*UserBlockTimeBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *FindLastBlockTimeBalancesResponse) Reset() {
	*x = FindLastBlockTimeBalancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLastBlockTimeBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLastBlockTimeBalancesResponse) ProtoMessage() {}

func (x *FindLastBlockTimeBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLastBlockTimeBalancesResponse.ProtoReflect.Descriptor instead.
func (*FindLastBlockTimeBalancesResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{46}
}

func (x *FindLastBlockTimeBalancesResponse) GetBalances() []*UserBlockTimeBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// for 21 type (PoolPaysUsersBalanceTrTypeID)
type FindBalancesDiffMiningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserBeforePayoutMining `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *FindBalancesDiffMiningRequest) Reset() {
	*x = FindBalancesDiffMiningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBalancesDiffMiningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBalancesDiffMiningRequest) ProtoMessage() {}

func (x *FindBalancesDiffMiningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBalancesDiffMiningRequest.ProtoReflect.Descriptor instead.
func (*FindBalancesDiffMiningRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{47}
}

func (x *FindBalancesDiffMiningRequest) GetUsers() []*UserBeforePayoutMining {
	if x != nil {
		return x.Users
	}
	return nil
}

// for 21 type (PoolPaysUsersBalanceTrTypeID)
type FindBalancesDiffMiningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs []*UserMiningDiff `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
}

func (x *FindBalancesDiffMiningResponse) Reset() {
	*x = FindBalancesDiffMiningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBalancesDiffMiningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBalancesDiffMiningResponse) ProtoMessage() {}

func (x *FindBalancesDiffMiningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBalancesDiffMiningResponse.ProtoReflect.Descriptor instead.
func (*FindBalancesDiffMiningResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{48}
}

func (x *FindBalancesDiffMiningResponse) GetDiffs() []*UserMiningDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

// for 31 type (WalletMiningTransferTrTypeID)
type FindBalancesDiffWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserBeforePayoutWallet `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *FindBalancesDiffWalletRequest) Reset() {
	*x = FindBalancesDiffWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBalancesDiffWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBalancesDiffWalletRequest) ProtoMessage() {}

func (x *FindBalancesDiffWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBalancesDiffWalletRequest.ProtoReflect.Descriptor instead.
func (*FindBalancesDiffWalletRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{49}
}

func (x *FindBalancesDiffWalletRequest) GetUsers() []*UserBeforePayoutWallet {
	if x != nil {
		return x.Users
	}
	return nil
}

// for 31 type (WalletMiningTransferTrTypeID)
type FindBalancesDiffWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs []*UserWalletDiff `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
}

func (x *FindBalancesDiffWalletResponse) Reset() {
	*x = FindBalancesDiffWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBalancesDiffWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBalancesDiffWalletResponse) ProtoMessage() {}

func (x *FindBalancesDiffWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBalancesDiffWalletResponse.ProtoReflect.Descriptor instead.
func (*FindBalancesDiffWalletResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{50}
}

func (x *FindBalancesDiffWalletResponse) GetDiffs() []*UserWalletDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

type GetHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CoinCode            string  `protobuf:"bytes,2,opt,name=coinCode,proto3" json:"coinCode,omitempty"`
	From                string  `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                  string  `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Limit               int32   `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset              int32   `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	CoinholdID          int64   `protobuf:"varint,7,opt,name=coinholdID,proto3" json:"coinholdID,omitempty"`
	UserID              int64   `protobuf:"varint,8,opt,name=userID,proto3" json:"userID,omitempty"`
	TransactionTypesIDs []int64 `protobuf:"varint,9,rep,packed,name=transactionTypesIDs,proto3" json:"transactionTypesIDs,omitempty"`
	AccountTypeIDs      []int64 `protobuf:"varint,10,rep,packed,name=accountTypeIDs,proto3" json:"accountTypeIDs,omitempty"`
	CoinsIDs            []int64 `protobuf:"varint,11,rep,packed,name=coinsIDs,proto3" json:"coinsIDs,omitempty"`
}

func (x *GetHistoryRequest) Reset() {
	*x = GetHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryRequest) ProtoMessage() {}

func (x *GetHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{51}
}

func (x *GetHistoryRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetHistoryRequest) GetCoinCode() string {
	if x != nil {
		return x.CoinCode
	}
	return ""
}

func (x *GetHistoryRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetHistoryRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetHistoryRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetHistoryRequest) GetCoinholdID() int64 {
	if x != nil {
		return x.CoinholdID
	}
	return 0
}

func (x *GetHistoryRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetHistoryRequest) GetTransactionTypesIDs() []int64 {
	if x != nil {
		return x.TransactionTypesIDs
	}
	return nil
}

func (x *GetHistoryRequest) GetAccountTypeIDs() []int64 {
	if x != nil {
		return x.AccountTypeIDs
	}
	return nil
}

func (x *GetHistoryRequest) GetCoinsIDs() []int64 {
	if x != nil {
		return x.CoinsIDs
	}
	return nil
}

type GetHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount    int64                 `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	IncomesSum    string                `protobuf:"bytes,2,opt,name=incomesSum,proto3" json:"incomesSum,omitempty"`
	PayoutsSum    string                `protobuf:"bytes,3,opt,name=payoutsSum,proto3" json:"payoutsSum,omitempty"`
	HasNewIncome  *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=hasNewIncome,proto3" json:"hasNewIncome,omitempty"`
	HasNewPayouts *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=hasNewPayouts,proto3" json:"hasNewPayouts,omitempty"`
	Incomes       []*Income             `protobuf:"bytes,6,rep,name=incomes,proto3" json:"incomes,omitempty"`
	Payouts       []*Payout             `protobuf:"bytes,7,rep,name=payouts,proto3" json:"payouts,omitempty"`
	Wallets       []*Wallet             `protobuf:"bytes,8,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *GetHistoryResponse) Reset() {
	*x = GetHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryResponse) ProtoMessage() {}

func (x *GetHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetHistoryResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{52}
}

func (x *GetHistoryResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetHistoryResponse) GetIncomesSum() string {
	if x != nil {
		return x.IncomesSum
	}
	return ""
}

func (x *GetHistoryResponse) GetPayoutsSum() string {
	if x != nil {
		return x.PayoutsSum
	}
	return ""
}

func (x *GetHistoryResponse) GetHasNewIncome() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasNewIncome
	}
	return nil
}

func (x *GetHistoryResponse) GetHasNewPayouts() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasNewPayouts
	}
	return nil
}

func (x *GetHistoryResponse) GetIncomes() []*Income {
	if x != nil {
		return x.Incomes
	}
	return nil
}

func (x *GetHistoryResponse) GetPayouts() []*Payout {
	if x != nil {
		return x.Payouts
	}
	return nil
}

func (x *GetHistoryResponse) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type ChangeMultipleBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *ChangeMultipleBalanceRequest) Reset() {
	*x = ChangeMultipleBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMultipleBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMultipleBalanceRequest) ProtoMessage() {}

func (x *ChangeMultipleBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMultipleBalanceRequest.ProtoReflect.Descriptor instead.
func (*ChangeMultipleBalanceRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{53}
}

func (x *ChangeMultipleBalanceRequest) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type ChangeMultipleBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeMultipleBalanceResponse) Reset() {
	*x = ChangeMultipleBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMultipleBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMultipleBalanceResponse) ProtoMessage() {}

func (x *ChangeMultipleBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMultipleBalanceResponse.ProtoReflect.Descriptor instead.
func (*ChangeMultipleBalanceResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{54}
}

type CheckPayoutsLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64   `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CoinID string  `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Amount float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CheckPayoutsLimitRequest) Reset() {
	*x = CheckPayoutsLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPayoutsLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPayoutsLimitRequest) ProtoMessage() {}

func (x *CheckPayoutsLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPayoutsLimitRequest.ProtoReflect.Descriptor instead.
func (*CheckPayoutsLimitRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{55}
}

func (x *CheckPayoutsLimitRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CheckPayoutsLimitRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *CheckPayoutsLimitRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CheckPayoutsLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckPayoutsLimitResponse) Reset() {
	*x = CheckPayoutsLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPayoutsLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPayoutsLimitResponse) ProtoMessage() {}

func (x *CheckPayoutsLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPayoutsLimitResponse.ProtoReflect.Descriptor instead.
func (*CheckPayoutsLimitResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{56}
}

type GetPayoutsBlockStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetPayoutsBlockStatusRequest) Reset() {
	*x = GetPayoutsBlockStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayoutsBlockStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayoutsBlockStatusRequest) ProtoMessage() {}

func (x *GetPayoutsBlockStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayoutsBlockStatusRequest.ProtoReflect.Descriptor instead.
func (*GetPayoutsBlockStatusRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{57}
}

func (x *GetPayoutsBlockStatusRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetPayoutsBlockStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetPayoutsBlockStatusResponse) Reset() {
	*x = GetPayoutsBlockStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayoutsBlockStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayoutsBlockStatusResponse) ProtoMessage() {}

func (x *GetPayoutsBlockStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayoutsBlockStatusResponse.ProtoReflect.Descriptor instead.
func (*GetPayoutsBlockStatusResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{58}
}

func (x *GetPayoutsBlockStatusResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPayoutsBlockStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SetPayoutsBlockStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetPayoutsBlockStatusRequest) Reset() {
	*x = SetPayoutsBlockStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPayoutsBlockStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPayoutsBlockStatusRequest) ProtoMessage() {}

func (x *SetPayoutsBlockStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPayoutsBlockStatusRequest.ProtoReflect.Descriptor instead.
func (*SetPayoutsBlockStatusRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{59}
}

func (x *SetPayoutsBlockStatusRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SetPayoutsBlockStatusRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SetPayoutsBlockStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetPayoutsBlockStatusResponse) Reset() {
	*x = SetPayoutsBlockStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPayoutsBlockStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPayoutsBlockStatusResponse) ProtoMessage() {}

func (x *SetPayoutsBlockStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPayoutsBlockStatusResponse.ProtoReflect.Descriptor instead.
func (*SetPayoutsBlockStatusResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{60}
}

func (x *SetPayoutsBlockStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetPayoutsBlockStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FindOperationsAndTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID               *int64  `protobuf:"varint,1,opt,name=userID,proto3,oneof" json:"userID,omitempty"`
	CoinID               *int64  `protobuf:"varint,2,opt,name=coinID,proto3,oneof" json:"coinID,omitempty"`
	TokenID              *int64  `protobuf:"varint,3,opt,name=tokenID,proto3,oneof" json:"tokenID,omitempty"`
	ActionID             *string `protobuf:"bytes,4,opt,name=actionID,proto3,oneof" json:"actionID,omitempty"`
	AccountType          *int32  `protobuf:"varint,5,opt,name=accountType,proto3,oneof" json:"accountType,omitempty"`
	OperationTypes       []int32 `protobuf:"varint,6,rep,packed,name=operationTypes,proto3" json:"operationTypes,omitempty"`
	DateFrom             *string `protobuf:"bytes,7,opt,name=dateFrom,proto3,oneof" json:"dateFrom,omitempty"`
	DateTo               *string `protobuf:"bytes,8,opt,name=dateTo,proto3,oneof" json:"dateTo,omitempty"`
	Amount               *string `protobuf:"bytes,9,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Hash                 *string `protobuf:"bytes,10,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
	ReceiverAccountID    *int64  `protobuf:"varint,11,opt,name=receiverAccountID,proto3,oneof" json:"receiverAccountID,omitempty"`
	ReceiverAddress      *string `protobuf:"bytes,12,opt,name=receiverAddress,proto3,oneof" json:"receiverAddress,omitempty"`
	SenderAccountID      *int64  `protobuf:"varint,13,opt,name=senderAccountID,proto3,oneof" json:"senderAccountID,omitempty"`
	TransactionBlockID   *int64  `protobuf:"varint,14,opt,name=transactionBlockID,proto3,oneof" json:"transactionBlockID,omitempty"`
	UnblockToAccountId   *int64  `protobuf:"varint,15,opt,name=unblockToAccountId,proto3,oneof" json:"unblockToAccountId,omitempty"`
	UnblockTransactionId *int64  `protobuf:"varint,16,opt,name=unblockTransactionId,proto3,oneof" json:"unblockTransactionId,omitempty"`
	FromReferralId       *int64  `protobuf:"varint,17,opt,name=fromReferralId,proto3,oneof" json:"fromReferralId,omitempty"`
	Limit                int32   `protobuf:"varint,18,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32   `protobuf:"varint,19,opt,name=offset,proto3" json:"offset,omitempty"`
	Sort                 *Sort   `protobuf:"bytes,20,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *FindOperationsAndTransactionsRequest) Reset() {
	*x = FindOperationsAndTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOperationsAndTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOperationsAndTransactionsRequest) ProtoMessage() {}

func (x *FindOperationsAndTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOperationsAndTransactionsRequest.ProtoReflect.Descriptor instead.
func (*FindOperationsAndTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{61}
}

func (x *FindOperationsAndTransactionsRequest) GetUserID() int64 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetCoinID() int64 {
	if x != nil && x.CoinID != nil {
		return *x.CoinID
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetTokenID() int64 {
	if x != nil && x.TokenID != nil {
		return *x.TokenID
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetActionID() string {
	if x != nil && x.ActionID != nil {
		return *x.ActionID
	}
	return ""
}

func (x *FindOperationsAndTransactionsRequest) GetAccountType() int32 {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetOperationTypes() []int32 {
	if x != nil {
		return x.OperationTypes
	}
	return nil
}

func (x *FindOperationsAndTransactionsRequest) GetDateFrom() string {
	if x != nil && x.DateFrom != nil {
		return *x.DateFrom
	}
	return ""
}

func (x *FindOperationsAndTransactionsRequest) GetDateTo() string {
	if x != nil && x.DateTo != nil {
		return *x.DateTo
	}
	return ""
}

func (x *FindOperationsAndTransactionsRequest) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *FindOperationsAndTransactionsRequest) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

func (x *FindOperationsAndTransactionsRequest) GetReceiverAccountID() int64 {
	if x != nil && x.ReceiverAccountID != nil {
		return *x.ReceiverAccountID
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetReceiverAddress() string {
	if x != nil && x.ReceiverAddress != nil {
		return *x.ReceiverAddress
	}
	return ""
}

func (x *FindOperationsAndTransactionsRequest) GetSenderAccountID() int64 {
	if x != nil && x.SenderAccountID != nil {
		return *x.SenderAccountID
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetTransactionBlockID() int64 {
	if x != nil && x.TransactionBlockID != nil {
		return *x.TransactionBlockID
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetUnblockToAccountId() int64 {
	if x != nil && x.UnblockToAccountId != nil {
		return *x.UnblockToAccountId
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetUnblockTransactionId() int64 {
	if x != nil && x.UnblockTransactionId != nil {
		return *x.UnblockTransactionId
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetFromReferralId() int64 {
	if x != nil && x.FromReferralId != nil {
		return *x.FromReferralId
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FindOperationsAndTransactionsRequest) GetSort() *Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type FindOperationsAndTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int64                       `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Operations []*OperationWithTransaction `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *FindOperationsAndTransactionsResponse) Reset() {
	*x = FindOperationsAndTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOperationsAndTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOperationsAndTransactionsResponse) ProtoMessage() {}

func (x *FindOperationsAndTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOperationsAndTransactionsResponse.ProtoReflect.Descriptor instead.
func (*FindOperationsAndTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{62}
}

func (x *FindOperationsAndTransactionsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FindOperationsAndTransactionsResponse) GetOperations() []*OperationWithTransaction {
	if x != nil {
		return x.Operations
	}
	return nil
}

type OperationWithTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountID            int64                  `protobuf:"varint,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	CoinID               int64                  `protobuf:"varint,3,opt,name=coinID,proto3" json:"coinID,omitempty"`
	TokenID              int64                  `protobuf:"varint,4,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Amount               string                 `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Type                 int64                  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	TransactionID        int64                  `protobuf:"varint,7,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	ActionID             string                 `protobuf:"bytes,8,opt,name=actionID,proto3" json:"actionID,omitempty"`
	Comment              string                 `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	Fee                  string                 `protobuf:"bytes,10,opt,name=fee,proto3" json:"fee,omitempty"`
	FromReferralId       int64                  `protobuf:"varint,11,opt,name=fromReferralId,proto3" json:"fromReferralId,omitempty"`
	GasPrice             string                 `protobuf:"bytes,12,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	Hash                 string                 `protobuf:"bytes,13,opt,name=hash,proto3" json:"hash,omitempty"`
	Hashrate             int64                  `protobuf:"varint,14,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	ReceiverAccountID    int64                  `protobuf:"varint,15,opt,name=receiverAccountID,proto3" json:"receiverAccountID,omitempty"`
	ReceiverAddress      string                 `protobuf:"bytes,16,opt,name=receiverAddress,proto3" json:"receiverAddress,omitempty"`
	SenderAccountID      int64                  `protobuf:"varint,17,opt,name=senderAccountID,proto3" json:"senderAccountID,omitempty"`
	TransactionBlockID   int64                  `protobuf:"varint,18,opt,name=transactionBlockID,proto3" json:"transactionBlockID,omitempty"`
	BlockedTill          *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=blockedTill,proto3" json:"blockedTill,omitempty"`
	UnblockToAccountId   int64                  `protobuf:"varint,20,opt,name=unblockToAccountId,proto3" json:"unblockToAccountId,omitempty"`
	UnblockTransactionId int64                  `protobuf:"varint,21,opt,name=unblockTransactionId,proto3" json:"unblockTransactionId,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *OperationWithTransaction) Reset() {
	*x = OperationWithTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationWithTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationWithTransaction) ProtoMessage() {}

func (x *OperationWithTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationWithTransaction.ProtoReflect.Descriptor instead.
func (*OperationWithTransaction) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{63}
}

func (x *OperationWithTransaction) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OperationWithTransaction) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *OperationWithTransaction) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *OperationWithTransaction) GetTokenID() int64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *OperationWithTransaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OperationWithTransaction) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OperationWithTransaction) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

func (x *OperationWithTransaction) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

func (x *OperationWithTransaction) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *OperationWithTransaction) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *OperationWithTransaction) GetFromReferralId() int64 {
	if x != nil {
		return x.FromReferralId
	}
	return 0
}

func (x *OperationWithTransaction) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *OperationWithTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *OperationWithTransaction) GetHashrate() int64 {
	if x != nil {
		return x.Hashrate
	}
	return 0
}

func (x *OperationWithTransaction) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *OperationWithTransaction) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *OperationWithTransaction) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *OperationWithTransaction) GetTransactionBlockID() int64 {
	if x != nil {
		return x.TransactionBlockID
	}
	return 0
}

func (x *OperationWithTransaction) GetBlockedTill() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockedTill
	}
	return nil
}

func (x *OperationWithTransaction) GetUnblockToAccountId() int64 {
	if x != nil {
		return x.UnblockToAccountId
	}
	return 0
}

func (x *OperationWithTransaction) GetUnblockTransactionId() int64 {
	if x != nil {
		return x.UnblockTransactionId
	}
	return 0
}

func (x *OperationWithTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Asc   bool   `protobuf:"varint,2,opt,name=asc,proto3" json:"asc,omitempty"`
}

func (x *Sort) Reset() {
	*x = Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{64}
}

func (x *Sort) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Sort) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

type ListTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverAccountIds []int64                `protobuf:"varint,1,rep,packed,name=receiver_account_ids,json=receiverAccountIds,proto3" json:"receiver_account_ids,omitempty"`
	Types              []int64                `protobuf:"varint,2,rep,packed,name=types,proto3" json:"types,omitempty"`
	From               *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                 *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	FromTransactionId  int64                  `protobuf:"varint,5,opt,name=from_transaction_id,json=fromTransactionId,proto3" json:"from_transaction_id,omitempty"`
}

func (x *ListTransactionsRequest) Reset() {
	*x = ListTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsRequest) ProtoMessage() {}

func (x *ListTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{65}
}

func (x *ListTransactionsRequest) GetReceiverAccountIds() []int64 {
	if x != nil {
		return x.ReceiverAccountIds
	}
	return nil
}

func (x *ListTransactionsRequest) GetTypes() []int64 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListTransactionsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ListTransactionsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ListTransactionsRequest) GetFromTransactionId() int64 {
	if x != nil {
		return x.FromTransactionId
	}
	return 0
}

type ListTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions      []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	LastTransactionId int64          `protobuf:"varint,2,opt,name=last_transaction_id,json=lastTransactionId,proto3" json:"last_transaction_id,omitempty"`
}

func (x *ListTransactionsResponse) Reset() {
	*x = ListTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsResponse) ProtoMessage() {}

func (x *ListTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{66}
}

func (x *ListTransactionsResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ListTransactionsResponse) GetLastTransactionId() int64 {
	if x != nil {
		return x.LastTransactionId
	}
	return 0
}

type GetUserAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserAccountRequest) Reset() {
	*x = GetUserAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAccountRequest) ProtoMessage() {}

func (x *GetUserAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAccountRequest.ProtoReflect.Descriptor instead.
func (*GetUserAccountRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{67}
}

func (x *GetUserAccountRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetUserAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccount *UserAccount `protobuf:"bytes,1,opt,name=user_account,json=userAccount,proto3" json:"user_account,omitempty"`
}

func (x *GetUserAccountResponse) Reset() {
	*x = GetUserAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAccountResponse) ProtoMessage() {}

func (x *GetUserAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAccountResponse.ProtoReflect.Descriptor instead.
func (*GetUserAccountResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{68}
}

func (x *GetUserAccountResponse) GetUserAccount() *UserAccount {
	if x != nil {
		return x.UserAccount
	}
	return nil
}

type GetUserAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserAccountsRequest) Reset() {
	*x = GetUserAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAccountsRequest) ProtoMessage() {}

func (x *GetUserAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAccountsRequest.ProtoReflect.Descriptor instead.
func (*GetUserAccountsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{69}
}

func (x *GetUserAccountsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccounts []*UserAccount `protobuf:"bytes,1,rep,name=user_accounts,json=userAccounts,proto3" json:"user_accounts,omitempty"`
}

func (x *GetUserAccountsResponse) Reset() {
	*x = GetUserAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAccountsResponse) ProtoMessage() {}

func (x *GetUserAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAccountsResponse.ProtoReflect.Descriptor instead.
func (*GetUserAccountsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{70}
}

func (x *GetUserAccountsResponse) GetUserAccounts() []*UserAccount {
	if x != nil {
		return x.UserAccounts
	}
	return nil
}

type UserAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CoinId string `protobuf:"bytes,3,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	TypeId int32  `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
}

func (x *UserAccount) Reset() {
	*x = UserAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccount) ProtoMessage() {}

func (x *UserAccount) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccount.ProtoReflect.Descriptor instead.
func (*UserAccount) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{71}
}

func (x *UserAccount) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAccount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAccount) GetCoinId() string {
	if x != nil {
		return x.CoinId
	}
	return ""
}

func (x *UserAccount) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type FindPayoutsForBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID    int64                  `protobuf:"varint,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	MinPay    float32                `protobuf:"fixed32,2,opt,name=minPay,proto3" json:"minPay,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *FindPayoutsForBlockRequest) Reset() {
	*x = FindPayoutsForBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPayoutsForBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPayoutsForBlockRequest) ProtoMessage() {}

func (x *FindPayoutsForBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPayoutsForBlockRequest.ProtoReflect.Descriptor instead.
func (*FindPayoutsForBlockRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{72}
}

func (x *FindPayoutsForBlockRequest) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *FindPayoutsForBlockRequest) GetMinPay() float32 {
	if x != nil {
		return x.MinPay
	}
	return 0
}

func (x *FindPayoutsForBlockRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type FindPayoutsForBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payouts []*PayoutForBlock `protobuf:"bytes,1,rep,name=payouts,proto3" json:"payouts,omitempty"`
}

func (x *FindPayoutsForBlockResponse) Reset() {
	*x = FindPayoutsForBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPayoutsForBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPayoutsForBlockResponse) ProtoMessage() {}

func (x *FindPayoutsForBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPayoutsForBlockResponse.ProtoReflect.Descriptor instead.
func (*FindPayoutsForBlockResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{73}
}

func (x *FindPayoutsForBlockResponse) GetPayouts() []*PayoutForBlock {
	if x != nil {
		return x.Payouts
	}
	return nil
}

type PayoutForBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID int64  `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	UserID    int64  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Balance   string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	Address   string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PayoutForBlock) Reset() {
	*x = PayoutForBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutForBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutForBlock) ProtoMessage() {}

func (x *PayoutForBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutForBlock.ProtoReflect.Descriptor instead.
func (*PayoutForBlock) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{74}
}

func (x *PayoutForBlock) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *PayoutForBlock) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PayoutForBlock) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *PayoutForBlock) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetCurrentPayoutsBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID    int64  `protobuf:"varint,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	IsService bool   `protobuf:"varint,3,opt,name=is_service,json=isService,proto3" json:"is_service,omitempty"`
}

func (x *GetCurrentPayoutsBlockRequest) Reset() {
	*x = GetCurrentPayoutsBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPayoutsBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPayoutsBlockRequest) ProtoMessage() {}

func (x *GetCurrentPayoutsBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPayoutsBlockRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentPayoutsBlockRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{75}
}

func (x *GetCurrentPayoutsBlockRequest) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *GetCurrentPayoutsBlockRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetCurrentPayoutsBlockRequest) GetIsService() bool {
	if x != nil {
		return x.IsService
	}
	return false
}

type GetCurrentPayoutsBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*PayoutBlockTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *GetCurrentPayoutsBlockResponse) Reset() {
	*x = GetCurrentPayoutsBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPayoutsBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPayoutsBlockResponse) ProtoMessage() {}

func (x *GetCurrentPayoutsBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPayoutsBlockResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentPayoutsBlockResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{76}
}

func (x *GetCurrentPayoutsBlockResponse) GetTransactions() []*PayoutBlockTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type PayoutBlockTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *PayoutBlockTransaction) Reset() {
	*x = PayoutBlockTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutBlockTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutBlockTransaction) ProtoMessage() {}

func (x *PayoutBlockTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutBlockTransaction.ProtoReflect.Descriptor instead.
func (*PayoutBlockTransaction) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{77}
}

func (x *PayoutBlockTransaction) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PayoutBlockTransaction) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type GetFreePayoutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID int64 `protobuf:"varint,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *GetFreePayoutsRequest) Reset() {
	*x = GetFreePayoutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFreePayoutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreePayoutsRequest) ProtoMessage() {}

func (x *GetFreePayoutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreePayoutsRequest.ProtoReflect.Descriptor instead.
func (*GetFreePayoutsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{78}
}

func (x *GetFreePayoutsRequest) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

type GetFreePayoutsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payouts []*FreePayout `protobuf:"bytes,1,rep,name=payouts,proto3" json:"payouts,omitempty"`
}

func (x *GetFreePayoutsResponse) Reset() {
	*x = GetFreePayoutsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFreePayoutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreePayoutsResponse) ProtoMessage() {}

func (x *GetFreePayoutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreePayoutsResponse.ProtoReflect.Descriptor instead.
func (*GetFreePayoutsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{79}
}

func (x *GetFreePayoutsResponse) GetPayouts() []*FreePayout {
	if x != nil {
		return x.Payouts
	}
	return nil
}

type FreePayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         int64                  `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	UserId            int64                  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Username          string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	ID                int64                  `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"`
	ActionID          string                 `protobuf:"bytes,5,opt,name=actionID,proto3" json:"actionID,omitempty"`
	Amount            string                 `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	CoinID            int64                  `protobuf:"varint,7,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Comment           string                 `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Fee               string                 `protobuf:"bytes,10,opt,name=fee,proto3" json:"fee,omitempty"`
	FromReferralID    int64                  `protobuf:"varint,11,opt,name=fromReferralID,proto3" json:"fromReferralID,omitempty"`
	GasPrice          string                 `protobuf:"bytes,12,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	Hash              string                 `protobuf:"bytes,13,opt,name=hash,proto3" json:"hash,omitempty"`
	Hashrate          int64                  `protobuf:"varint,14,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	IsViewer          bool                   `protobuf:"varint,15,opt,name=isViewer,proto3" json:"isViewer,omitempty"`
	ReceiverAccountID int64                  `protobuf:"varint,16,opt,name=receiverAccountID,proto3" json:"receiverAccountID,omitempty"`
	ReceiverAddress   string                 `protobuf:"bytes,17,opt,name=receiverAddress,proto3" json:"receiverAddress,omitempty"`
	SenderAccountID   int64                  `protobuf:"varint,18,opt,name=senderAccountID,proto3" json:"senderAccountID,omitempty"`
	TokenID           int64                  `protobuf:"varint,19,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Type              int64                  `protobuf:"varint,20,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FreePayout) Reset() {
	*x = FreePayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreePayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreePayout) ProtoMessage() {}

func (x *FreePayout) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreePayout.ProtoReflect.Descriptor instead.
func (*FreePayout) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{80}
}

func (x *FreePayout) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *FreePayout) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FreePayout) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FreePayout) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *FreePayout) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

func (x *FreePayout) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *FreePayout) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *FreePayout) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *FreePayout) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FreePayout) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *FreePayout) GetFromReferralID() int64 {
	if x != nil {
		return x.FromReferralID
	}
	return 0
}

func (x *FreePayout) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *FreePayout) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *FreePayout) GetHashrate() int64 {
	if x != nil {
		return x.Hashrate
	}
	return 0
}

func (x *FreePayout) GetIsViewer() bool {
	if x != nil {
		return x.IsViewer
	}
	return false
}

func (x *FreePayout) GetReceiverAccountID() int64 {
	if x != nil {
		return x.ReceiverAccountID
	}
	return 0
}

func (x *FreePayout) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *FreePayout) GetSenderAccountID() int64 {
	if x != nil {
		return x.SenderAccountID
	}
	return 0
}

func (x *FreePayout) GetTokenID() int64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *FreePayout) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type GetCurrentPayoutsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId                 int64 `protobuf:"varint,1,opt,name=coinId,proto3" json:"coinId,omitempty"`
	PaymentTransactionType int64 `protobuf:"varint,2,opt,name=paymentTransactionType,proto3" json:"paymentTransactionType,omitempty"`
}

func (x *GetCurrentPayoutsListRequest) Reset() {
	*x = GetCurrentPayoutsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPayoutsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPayoutsListRequest) ProtoMessage() {}

func (x *GetCurrentPayoutsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPayoutsListRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentPayoutsListRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{81}
}

func (x *GetCurrentPayoutsListRequest) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *GetCurrentPayoutsListRequest) GetPaymentTransactionType() int64 {
	if x != nil {
		return x.PaymentTransactionType
	}
	return 0
}

type GetCurrentReferralsPayoutsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId                 int64 `protobuf:"varint,1,opt,name=coinId,proto3" json:"coinId,omitempty"`
	PaymentTransactionType int64 `protobuf:"varint,2,opt,name=paymentTransactionType,proto3" json:"paymentTransactionType,omitempty"`
	ReferralId             int64 `protobuf:"varint,3,opt,name=referralId,proto3" json:"referralId,omitempty"`
}

func (x *GetCurrentReferralsPayoutsListRequest) Reset() {
	*x = GetCurrentReferralsPayoutsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentReferralsPayoutsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentReferralsPayoutsListRequest) ProtoMessage() {}

func (x *GetCurrentReferralsPayoutsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentReferralsPayoutsListRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentReferralsPayoutsListRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{82}
}

func (x *GetCurrentReferralsPayoutsListRequest) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *GetCurrentReferralsPayoutsListRequest) GetPaymentTransactionType() int64 {
	if x != nil {
		return x.PaymentTransactionType
	}
	return 0
}

func (x *GetCurrentReferralsPayoutsListRequest) GetReferralId() int64 {
	if x != nil {
		return x.ReferralId
	}
	return 0
}

type GetCurrentPayoutsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payouts []*CurrentPayout `protobuf:"bytes,1,rep,name=payouts,proto3" json:"payouts,omitempty"`
}

func (x *GetCurrentPayoutsListResponse) Reset() {
	*x = GetCurrentPayoutsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPayoutsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPayoutsListResponse) ProtoMessage() {}

func (x *GetCurrentPayoutsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPayoutsListResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentPayoutsListResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{83}
}

func (x *GetCurrentPayoutsListResponse) GetPayouts() []*CurrentPayout {
	if x != nil {
		return x.Payouts
	}
	return nil
}

type GetCurrentReferralsPayoutsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payouts []*CurrentReferralPayout `protobuf:"bytes,1,rep,name=payouts,proto3" json:"payouts,omitempty"`
}

func (x *GetCurrentReferralsPayoutsListResponse) Reset() {
	*x = GetCurrentReferralsPayoutsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentReferralsPayoutsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentReferralsPayoutsListResponse) ProtoMessage() {}

func (x *GetCurrentReferralsPayoutsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentReferralsPayoutsListResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentReferralsPayoutsListResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{84}
}

func (x *GetCurrentReferralsPayoutsListResponse) GetPayouts() []*CurrentReferralPayout {
	if x != nil {
		return x.Payouts
	}
	return nil
}

type CurrentPayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountID2  int64                  `protobuf:"varint,2,opt,name=accountID2,proto3" json:"accountID2,omitempty"`
	UserID      int64                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	RefID       int64                  `protobuf:"varint,4,opt,name=refID,proto3" json:"refID,omitempty"`
	CoinID      int64                  `protobuf:"varint,5,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Username    string                 `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Minpay      string                 `protobuf:"bytes,7,opt,name=minpay,proto3" json:"minpay,omitempty"`
	MasterID    int64                  `protobuf:"varint,8,opt,name=masterID,proto3" json:"masterID,omitempty"`
	Address     string                 `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	Balance     string                 `protobuf:"bytes,10,opt,name=balance,proto3" json:"balance,omitempty"`
	BlockID     int64                  `protobuf:"varint,11,opt,name=blockID,proto3" json:"blockID,omitempty"`
	BlockCreate *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=blockCreate,proto3" json:"blockCreate,omitempty"`
	Calc        *PayoutCalculationData `protobuf:"bytes,13,opt,name=calc,proto3" json:"calc,omitempty"`
}

func (x *CurrentPayout) Reset() {
	*x = CurrentPayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentPayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentPayout) ProtoMessage() {}

func (x *CurrentPayout) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentPayout.ProtoReflect.Descriptor instead.
func (*CurrentPayout) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{85}
}

func (x *CurrentPayout) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CurrentPayout) GetAccountID2() int64 {
	if x != nil {
		return x.AccountID2
	}
	return 0
}

func (x *CurrentPayout) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CurrentPayout) GetRefID() int64 {
	if x != nil {
		return x.RefID
	}
	return 0
}

func (x *CurrentPayout) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *CurrentPayout) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CurrentPayout) GetMinpay() string {
	if x != nil {
		return x.Minpay
	}
	return ""
}

func (x *CurrentPayout) GetMasterID() int64 {
	if x != nil {
		return x.MasterID
	}
	return 0
}

func (x *CurrentPayout) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CurrentPayout) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *CurrentPayout) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

func (x *CurrentPayout) GetBlockCreate() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockCreate
	}
	return nil
}

func (x *CurrentPayout) GetCalc() *PayoutCalculationData {
	if x != nil {
		return x.Calc
	}
	return nil
}

type CurrentReferralPayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountID2 int64                  `protobuf:"varint,2,opt,name=accountID2,proto3" json:"accountID2,omitempty"`
	UserID     int64                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	RefID      int64                  `protobuf:"varint,4,opt,name=refID,proto3" json:"refID,omitempty"`
	CoinID     int64                  `protobuf:"varint,5,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Username   string                 `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Minpay     string                 `protobuf:"bytes,7,opt,name=minpay,proto3" json:"minpay,omitempty"`
	MasterID   int64                  `protobuf:"varint,8,opt,name=masterID,proto3" json:"masterID,omitempty"`
	Address    string                 `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	Balance    string                 `protobuf:"bytes,10,opt,name=balance,proto3" json:"balance,omitempty"`
	Calc       *PayoutCalculationData `protobuf:"bytes,11,opt,name=calc,proto3" json:"calc,omitempty"`
}

func (x *CurrentReferralPayout) Reset() {
	*x = CurrentReferralPayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentReferralPayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentReferralPayout) ProtoMessage() {}

func (x *CurrentReferralPayout) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentReferralPayout.ProtoReflect.Descriptor instead.
func (*CurrentReferralPayout) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{86}
}

func (x *CurrentReferralPayout) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CurrentReferralPayout) GetAccountID2() int64 {
	if x != nil {
		return x.AccountID2
	}
	return 0
}

func (x *CurrentReferralPayout) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CurrentReferralPayout) GetRefID() int64 {
	if x != nil {
		return x.RefID
	}
	return 0
}

func (x *CurrentReferralPayout) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *CurrentReferralPayout) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CurrentReferralPayout) GetMinpay() string {
	if x != nil {
		return x.Minpay
	}
	return ""
}

func (x *CurrentReferralPayout) GetMasterID() int64 {
	if x != nil {
		return x.MasterID
	}
	return 0
}

func (x *CurrentReferralPayout) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CurrentReferralPayout) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *CurrentReferralPayout) GetCalc() *PayoutCalculationData {
	if x != nil {
		return x.Calc
	}
	return nil
}

type PayoutCalculationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coinhold    string                 `protobuf:"bytes,1,opt,name=coinhold,proto3" json:"coinhold,omitempty"`
	Incomes     string                 `protobuf:"bytes,2,opt,name=incomes,proto3" json:"incomes,omitempty"`
	Hashrate    string                 `protobuf:"bytes,3,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	FeeAndMore  string                 `protobuf:"bytes,4,opt,name=feeAndMore,proto3" json:"feeAndMore,omitempty"`
	Ref         string                 `protobuf:"bytes,5,opt,name=ref,proto3" json:"ref,omitempty"`
	Other       string                 `protobuf:"bytes,6,opt,name=other,proto3" json:"other,omitempty"`
	Types       string                 `protobuf:"bytes,7,opt,name=types,proto3" json:"types,omitempty"`
	AccountId   int64                  `protobuf:"varint,8,opt,name=accountId,proto3" json:"accountId,omitempty"`
	LastPay     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=lastPay,proto3" json:"lastPay,omitempty"`
	IncomeFirst *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=incomeFirst,proto3" json:"incomeFirst,omitempty"`
	IncomeLast  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=incomeLast,proto3" json:"incomeLast,omitempty"`
}

func (x *PayoutCalculationData) Reset() {
	*x = PayoutCalculationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutCalculationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutCalculationData) ProtoMessage() {}

func (x *PayoutCalculationData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutCalculationData.ProtoReflect.Descriptor instead.
func (*PayoutCalculationData) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{87}
}

func (x *PayoutCalculationData) GetCoinhold() string {
	if x != nil {
		return x.Coinhold
	}
	return ""
}

func (x *PayoutCalculationData) GetIncomes() string {
	if x != nil {
		return x.Incomes
	}
	return ""
}

func (x *PayoutCalculationData) GetHashrate() string {
	if x != nil {
		return x.Hashrate
	}
	return ""
}

func (x *PayoutCalculationData) GetFeeAndMore() string {
	if x != nil {
		return x.FeeAndMore
	}
	return ""
}

func (x *PayoutCalculationData) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *PayoutCalculationData) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

func (x *PayoutCalculationData) GetTypes() string {
	if x != nil {
		return x.Types
	}
	return ""
}

func (x *PayoutCalculationData) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *PayoutCalculationData) GetLastPay() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPay
	}
	return nil
}

func (x *PayoutCalculationData) GetIncomeFirst() *timestamppb.Timestamp {
	if x != nil {
		return x.IncomeFirst
	}
	return nil
}

func (x *PayoutCalculationData) GetIncomeLast() *timestamppb.Timestamp {
	if x != nil {
		return x.IncomeLast
	}
	return nil
}

type CheckFreePayoutTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     int64 `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TransactionID int64 `protobuf:"varint,2,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
}

func (x *CheckFreePayoutTransactionRequest) Reset() {
	*x = CheckFreePayoutTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFreePayoutTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFreePayoutTransactionRequest) ProtoMessage() {}

func (x *CheckFreePayoutTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFreePayoutTransactionRequest.ProtoReflect.Descriptor instead.
func (*CheckFreePayoutTransactionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{88}
}

func (x *CheckFreePayoutTransactionRequest) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *CheckFreePayoutTransactionRequest) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

type CheckFreePayoutTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sum string `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *CheckFreePayoutTransactionResponse) Reset() {
	*x = CheckFreePayoutTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFreePayoutTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFreePayoutTransactionResponse) ProtoMessage() {}

func (x *CheckFreePayoutTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFreePayoutTransactionResponse.ProtoReflect.Descriptor instead.
func (*CheckFreePayoutTransactionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{89}
}

func (x *CheckFreePayoutTransactionResponse) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

type CheckPayoutBlockStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockTransactionIds []int64 `protobuf:"varint,1,rep,packed,name=blockTransactionIds,proto3" json:"blockTransactionIds,omitempty"`
}

func (x *CheckPayoutBlockStatusRequest) Reset() {
	*x = CheckPayoutBlockStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPayoutBlockStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPayoutBlockStatusRequest) ProtoMessage() {}

func (x *CheckPayoutBlockStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPayoutBlockStatusRequest.ProtoReflect.Descriptor instead.
func (*CheckPayoutBlockStatusRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{90}
}

func (x *CheckPayoutBlockStatusRequest) GetBlockTransactionIds() []int64 {
	if x != nil {
		return x.BlockTransactionIds
	}
	return nil
}

type CheckPayoutBlockStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayoutBlocks []*PayoutBlock `protobuf:"bytes,1,rep,name=payoutBlocks,proto3" json:"payoutBlocks,omitempty"`
}

func (x *CheckPayoutBlockStatusResponse) Reset() {
	*x = CheckPayoutBlockStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPayoutBlockStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPayoutBlockStatusResponse) ProtoMessage() {}

func (x *CheckPayoutBlockStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPayoutBlockStatusResponse.ProtoReflect.Descriptor instead.
func (*CheckPayoutBlockStatusResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{91}
}

func (x *CheckPayoutBlockStatusResponse) GetPayoutBlocks() []*PayoutBlock {
	if x != nil {
		return x.PayoutBlocks
	}
	return nil
}

type PayoutBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToAccountId     int64  `protobuf:"varint,1,opt,name=toAccountId,proto3" json:"toAccountId,omitempty"`
	Type            int64  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	ReceiverAddress string `protobuf:"bytes,3,opt,name=receiverAddress,proto3" json:"receiverAddress,omitempty"`
	UbTrId          int64  `protobuf:"varint,4,opt,name=ubTrId,proto3" json:"ubTrId,omitempty"`
	Amount          string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PayoutBlock) Reset() {
	*x = PayoutBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutBlock) ProtoMessage() {}

func (x *PayoutBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutBlock.ProtoReflect.Descriptor instead.
func (*PayoutBlock) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{92}
}

func (x *PayoutBlock) GetToAccountId() int64 {
	if x != nil {
		return x.ToAccountId
	}
	return 0
}

func (x *PayoutBlock) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PayoutBlock) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *PayoutBlock) GetUbTrId() int64 {
	if x != nil {
		return x.UbTrId
	}
	return 0
}

func (x *PayoutBlock) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CheckIncomeOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Coin      string                 `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
	UserID    int64                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	AccountID int64                  `protobuf:"varint,4,opt,name=accountID,proto3" json:"accountID,omitempty"`
	LastPayAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastPayAt,proto3" json:"lastPayAt,omitempty"`
}

func (x *CheckIncomeOperationsRequest) Reset() {
	*x = CheckIncomeOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIncomeOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIncomeOperationsRequest) ProtoMessage() {}

func (x *CheckIncomeOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIncomeOperationsRequest.ProtoReflect.Descriptor instead.
func (*CheckIncomeOperationsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{93}
}

func (x *CheckIncomeOperationsRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CheckIncomeOperationsRequest) GetCoin() string {
	if x != nil {
		return x.Coin
	}
	return ""
}

func (x *CheckIncomeOperationsRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CheckIncomeOperationsRequest) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *CheckIncomeOperationsRequest) GetLastPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPayAt
	}
	return nil
}

type CheckIncomeOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incomes []*IncomeWithFee `protobuf:"bytes,1,rep,name=incomes,proto3" json:"incomes,omitempty"`
}

func (x *CheckIncomeOperationsResponse) Reset() {
	*x = CheckIncomeOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIncomeOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIncomeOperationsResponse) ProtoMessage() {}

func (x *CheckIncomeOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIncomeOperationsResponse.ProtoReflect.Descriptor instead.
func (*CheckIncomeOperationsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{94}
}

func (x *CheckIncomeOperationsResponse) GetIncomes() []*IncomeWithFee {
	if x != nil {
		return x.Incomes
	}
	return nil
}

type IncomeWithFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId int64                  `protobuf:"varint,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Amount        string                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Hashrate      int64                  `protobuf:"varint,3,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Fee           string                 `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *IncomeWithFee) Reset() {
	*x = IncomeWithFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomeWithFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomeWithFee) ProtoMessage() {}

func (x *IncomeWithFee) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomeWithFee.ProtoReflect.Descriptor instead.
func (*IncomeWithFee) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{95}
}

func (x *IncomeWithFee) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *IncomeWithFee) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *IncomeWithFee) GetHashrate() int64 {
	if x != nil {
		return x.Hashrate
	}
	return 0
}

func (x *IncomeWithFee) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *IncomeWithFee) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type GetAveragePaidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID            int64  `protobuf:"varint,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Days              int64  `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
	TransactionTypeID int64  `protobuf:"varint,3,opt,name=transactionTypeID,proto3" json:"transactionTypeID,omitempty"`
	AccountTypeID     int64  `protobuf:"varint,4,opt,name=accountTypeID,proto3" json:"accountTypeID,omitempty"`
	Username          string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetAveragePaidRequest) Reset() {
	*x = GetAveragePaidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAveragePaidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAveragePaidRequest) ProtoMessage() {}

func (x *GetAveragePaidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAveragePaidRequest.ProtoReflect.Descriptor instead.
func (*GetAveragePaidRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{96}
}

func (x *GetAveragePaidRequest) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *GetAveragePaidRequest) GetDays() int64 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *GetAveragePaidRequest) GetTransactionTypeID() int64 {
	if x != nil {
		return x.TransactionTypeID
	}
	return 0
}

func (x *GetAveragePaidRequest) GetAccountTypeID() int64 {
	if x != nil {
		return x.AccountTypeID
	}
	return 0
}

func (x *GetAveragePaidRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetAveragePaidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg string `protobuf:"bytes,1,opt,name=avg,proto3" json:"avg,omitempty"`
}

func (x *GetAveragePaidResponse) Reset() {
	*x = GetAveragePaidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAveragePaidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAveragePaidResponse) ProtoMessage() {}

func (x *GetAveragePaidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAveragePaidResponse.ProtoReflect.Descriptor instead.
func (*GetAveragePaidResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{97}
}

func (x *GetAveragePaidResponse) GetAvg() string {
	if x != nil {
		return x.Avg
	}
	return ""
}

type CheckOthersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID      int64                  `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Types          []int64                `protobuf:"varint,2,rep,packed,name=types,proto3" json:"types,omitempty"`
	LastPayAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lastPayAt,proto3" json:"lastPayAt,omitempty"`
	BlockCreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=blockCreatedAt,proto3,oneof" json:"blockCreatedAt,omitempty"`
}

func (x *CheckOthersRequest) Reset() {
	*x = CheckOthersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOthersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOthersRequest) ProtoMessage() {}

func (x *CheckOthersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOthersRequest.ProtoReflect.Descriptor instead.
func (*CheckOthersRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{98}
}

func (x *CheckOthersRequest) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *CheckOthersRequest) GetTypes() []int64 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *CheckOthersRequest) GetLastPayAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPayAt
	}
	return nil
}

func (x *CheckOthersRequest) GetBlockCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockCreatedAt
	}
	return nil
}

type CheckOthersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Others []*OtherOperationsWithTransaction `protobuf:"bytes,1,rep,name=others,proto3" json:"others,omitempty"`
}

func (x *CheckOthersResponse) Reset() {
	*x = CheckOthersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOthersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOthersResponse) ProtoMessage() {}

func (x *CheckOthersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOthersResponse.ProtoReflect.Descriptor instead.
func (*CheckOthersResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{99}
}

func (x *CheckOthersResponse) GetOthers() []*OtherOperationsWithTransaction {
	if x != nil {
		return x.Others
	}
	return nil
}

type OtherOperationsWithTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionID  int64                  `protobuf:"varint,1,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	SenderID       int64                  `protobuf:"varint,2,opt,name=senderID,proto3" json:"senderID,omitempty"`
	ReceiverID     int64                  `protobuf:"varint,3,opt,name=receiverID,proto3" json:"receiverID,omitempty"`
	Hash           string                 `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	OperationID    int64                  `protobuf:"varint,5,opt,name=operationID,proto3" json:"operationID,omitempty"`
	SenderUserID   int64                  `protobuf:"varint,6,opt,name=senderUserID,proto3" json:"senderUserID,omitempty"`
	ReceiverUserID int64                  `protobuf:"varint,7,opt,name=receiverUserID,proto3" json:"receiverUserID,omitempty"`
	Amount         string                 `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Type           int64                  `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Comment        string                 `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *OtherOperationsWithTransaction) Reset() {
	*x = OtherOperationsWithTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherOperationsWithTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherOperationsWithTransaction) ProtoMessage() {}

func (x *OtherOperationsWithTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherOperationsWithTransaction.ProtoReflect.Descriptor instead.
func (*OtherOperationsWithTransaction) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{100}
}

func (x *OtherOperationsWithTransaction) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

func (x *OtherOperationsWithTransaction) GetSenderID() int64 {
	if x != nil {
		return x.SenderID
	}
	return 0
}

func (x *OtherOperationsWithTransaction) GetReceiverID() int64 {
	if x != nil {
		return x.ReceiverID
	}
	return 0
}

func (x *OtherOperationsWithTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *OtherOperationsWithTransaction) GetOperationID() int64 {
	if x != nil {
		return x.OperationID
	}
	return 0
}

func (x *OtherOperationsWithTransaction) GetSenderUserID() int64 {
	if x != nil {
		return x.SenderUserID
	}
	return 0
}

func (x *OtherOperationsWithTransaction) GetReceiverUserID() int64 {
	if x != nil {
		return x.ReceiverUserID
	}
	return 0
}

func (x *OtherOperationsWithTransaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OtherOperationsWithTransaction) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OtherOperationsWithTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OtherOperationsWithTransaction) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type GetBalanceBeforeTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     int64 `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TransactionID int64 `protobuf:"varint,2,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
}

func (x *GetBalanceBeforeTransactionRequest) Reset() {
	*x = GetBalanceBeforeTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceBeforeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceBeforeTransactionRequest) ProtoMessage() {}

func (x *GetBalanceBeforeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceBeforeTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceBeforeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{101}
}

func (x *GetBalanceBeforeTransactionRequest) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *GetBalanceBeforeTransactionRequest) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

type GetBalanceBeforeTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sum string `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *GetBalanceBeforeTransactionResponse) Reset() {
	*x = GetBalanceBeforeTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceBeforeTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceBeforeTransactionResponse) ProtoMessage() {}

func (x *GetBalanceBeforeTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceBeforeTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceBeforeTransactionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{102}
}

func (x *GetBalanceBeforeTransactionResponse) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

type GetServiceUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID   int64  `protobuf:"varint,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Limit    int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetServiceUserDataRequest) Reset() {
	*x = GetServiceUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceUserDataRequest) ProtoMessage() {}

func (x *GetServiceUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceUserDataRequest.ProtoReflect.Descriptor instead.
func (*GetServiceUserDataRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{103}
}

func (x *GetServiceUserDataRequest) GetCoinID() int64 {
	if x != nil {
		return x.CoinID
	}
	return 0
}

func (x *GetServiceUserDataRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetServiceUserDataRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetServiceUserDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*ServiceUserBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetServiceUserDataResponse) Reset() {
	*x = GetServiceUserDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceUserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceUserDataResponse) ProtoMessage() {}

func (x *GetServiceUserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceUserDataResponse.ProtoReflect.Descriptor instead.
func (*GetServiceUserDataResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{104}
}

func (x *GetServiceUserDataResponse) GetBlocks() []*ServiceUserBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type ServiceUserBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SuAccountID int64  `protobuf:"varint,2,opt,name=suAccountID,proto3" json:"suAccountID,omitempty"`
	UserID      int64  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Username    string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Amount      string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	BlockID     int64  `protobuf:"varint,6,opt,name=blockID,proto3" json:"blockID,omitempty"`
}

func (x *ServiceUserBlock) Reset() {
	*x = ServiceUserBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceUserBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceUserBlock) ProtoMessage() {}

func (x *ServiceUserBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceUserBlock.ProtoReflect.Descriptor instead.
func (*ServiceUserBlock) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{105}
}

func (x *ServiceUserBlock) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServiceUserBlock) GetSuAccountID() int64 {
	if x != nil {
		return x.SuAccountID
	}
	return 0
}

func (x *ServiceUserBlock) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ServiceUserBlock) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ServiceUserBlock) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ServiceUserBlock) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

type GetIncomesHashrateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetIncomesHashrateRequest) Reset() {
	*x = GetIncomesHashrateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIncomesHashrateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncomesHashrateRequest) ProtoMessage() {}

func (x *GetIncomesHashrateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncomesHashrateRequest.ProtoReflect.Descriptor instead.
func (*GetIncomesHashrateRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{106}
}

func (x *GetIncomesHashrateRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type GetIncomesHashrateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashrateByDate []*HashrateByDate `protobuf:"bytes,1,rep,name=hashrateByDate,proto3" json:"hashrateByDate,omitempty"`
}

func (x *GetIncomesHashrateResponse) Reset() {
	*x = GetIncomesHashrateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIncomesHashrateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncomesHashrateResponse) ProtoMessage() {}

func (x *GetIncomesHashrateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncomesHashrateResponse.ProtoReflect.Descriptor instead.
func (*GetIncomesHashrateResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{107}
}

func (x *GetIncomesHashrateResponse) GetHashrateByDate() []*HashrateByDate {
	if x != nil {
		return x.HashrateByDate
	}
	return nil
}

type HashrateByDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId   int64  `protobuf:"varint,1,opt,name=coinId,proto3" json:"coinId,omitempty"`
	Hashrate string `protobuf:"bytes,2,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
}

func (x *HashrateByDate) Reset() {
	*x = HashrateByDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashrateByDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashrateByDate) ProtoMessage() {}

func (x *HashrateByDate) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashrateByDate.ProtoReflect.Descriptor instead.
func (*HashrateByDate) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{108}
}

func (x *HashrateByDate) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *HashrateByDate) GetHashrate() string {
	if x != nil {
		return x.Hashrate
	}
	return ""
}

type GetCoinsOperationsSumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCoinsOperationsSumRequest) Reset() {
	*x = GetCoinsOperationsSumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsOperationsSumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsOperationsSumRequest) ProtoMessage() {}

func (x *GetCoinsOperationsSumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsOperationsSumRequest.ProtoReflect.Descriptor instead.
func (*GetCoinsOperationsSumRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{109}
}

type GetCoinsOperationsSumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*OperationsSumData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCoinsOperationsSumResponse) Reset() {
	*x = GetCoinsOperationsSumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsOperationsSumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsOperationsSumResponse) ProtoMessage() {}

func (x *GetCoinsOperationsSumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsOperationsSumResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsOperationsSumResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{110}
}

func (x *GetCoinsOperationsSumResponse) GetData() []*OperationsSumData {
	if x != nil {
		return x.Data
	}
	return nil
}

type OperationsSumData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinId int64  `protobuf:"varint,1,opt,name=coinId,proto3" json:"coinId,omitempty"`
	Sum    string `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *OperationsSumData) Reset() {
	*x = OperationsSumData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationsSumData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsSumData) ProtoMessage() {}

func (x *OperationsSumData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsSumData.ProtoReflect.Descriptor instead.
func (*OperationsSumData) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{111}
}

func (x *OperationsSumData) GetCoinId() int64 {
	if x != nil {
		return x.CoinId
	}
	return 0
}

func (x *OperationsSumData) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

type GetTransactionOperationsIntegrityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTransactionOperationsIntegrityRequest) Reset() {
	*x = GetTransactionOperationsIntegrityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionOperationsIntegrityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionOperationsIntegrityRequest) ProtoMessage() {}

func (x *GetTransactionOperationsIntegrityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionOperationsIntegrityRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionOperationsIntegrityRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{112}
}

type GetTransactionOperationsIntegrityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TransactionOperationsIntegrityData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTransactionOperationsIntegrityResponse) Reset() {
	*x = GetTransactionOperationsIntegrityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionOperationsIntegrityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionOperationsIntegrityResponse) ProtoMessage() {}

func (x *GetTransactionOperationsIntegrityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionOperationsIntegrityResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionOperationsIntegrityResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{113}
}

func (x *GetTransactionOperationsIntegrityResponse) GetData() []*TransactionOperationsIntegrityData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TransactionOperationsIntegrityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count       int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	TrId        int64 `protobuf:"varint,2,opt,name=trId,proto3" json:"trId,omitempty"`
	Op2Id       int64 `protobuf:"varint,3,opt,name=op2Id,proto3" json:"op2Id,omitempty"`
	Op1Id       int64 `protobuf:"varint,4,opt,name=op1Id,proto3" json:"op1Id,omitempty"`
	OpPairCheck bool  `protobuf:"varint,5,opt,name=opPairCheck,proto3" json:"opPairCheck,omitempty"`
	TrNegChk    bool  `protobuf:"varint,6,opt,name=trNegChk,proto3" json:"trNegChk,omitempty"`
	OpSumChk    bool  `protobuf:"varint,7,opt,name=opSumChk,proto3" json:"opSumChk,omitempty"`
	DiffChk     bool  `protobuf:"varint,8,opt,name=diffChk,proto3" json:"diffChk,omitempty"`
	TrDateChk   bool  `protobuf:"varint,9,opt,name=trDateChk,proto3" json:"trDateChk,omitempty"`
	CoinChk     bool  `protobuf:"varint,10,opt,name=coinChk,proto3" json:"coinChk,omitempty"`
	AccChk      bool  `protobuf:"varint,11,opt,name=accChk,proto3" json:"accChk,omitempty"`
}

func (x *TransactionOperationsIntegrityData) Reset() {
	*x = TransactionOperationsIntegrityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionOperationsIntegrityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionOperationsIntegrityData) ProtoMessage() {}

func (x *TransactionOperationsIntegrityData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionOperationsIntegrityData.ProtoReflect.Descriptor instead.
func (*TransactionOperationsIntegrityData) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{114}
}

func (x *TransactionOperationsIntegrityData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TransactionOperationsIntegrityData) GetTrId() int64 {
	if x != nil {
		return x.TrId
	}
	return 0
}

func (x *TransactionOperationsIntegrityData) GetOp2Id() int64 {
	if x != nil {
		return x.Op2Id
	}
	return 0
}

func (x *TransactionOperationsIntegrityData) GetOp1Id() int64 {
	if x != nil {
		return x.Op1Id
	}
	return 0
}

func (x *TransactionOperationsIntegrityData) GetOpPairCheck() bool {
	if x != nil {
		return x.OpPairCheck
	}
	return false
}

func (x *TransactionOperationsIntegrityData) GetTrNegChk() bool {
	if x != nil {
		return x.TrNegChk
	}
	return false
}

func (x *TransactionOperationsIntegrityData) GetOpSumChk() bool {
	if x != nil {
		return x.OpSumChk
	}
	return false
}

func (x *TransactionOperationsIntegrityData) GetDiffChk() bool {
	if x != nil {
		return x.DiffChk
	}
	return false
}

func (x *TransactionOperationsIntegrityData) GetTrDateChk() bool {
	if x != nil {
		return x.TrDateChk
	}
	return false
}

func (x *TransactionOperationsIntegrityData) GetCoinChk() bool {
	if x != nil {
		return x.CoinChk
	}
	return false
}

func (x *TransactionOperationsIntegrityData) GetAccChk() bool {
	if x != nil {
		return x.AccChk
	}
	return false
}

type GetCheckTransactionCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCheckTransactionCoinsRequest) Reset() {
	*x = GetCheckTransactionCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCheckTransactionCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCheckTransactionCoinsRequest) ProtoMessage() {}

func (x *GetCheckTransactionCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCheckTransactionCoinsRequest.ProtoReflect.Descriptor instead.
func (*GetCheckTransactionCoinsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{115}
}

type GetCheckTransactionCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrIds []int64 `protobuf:"varint,1,rep,packed,name=trIds,proto3" json:"trIds,omitempty"`
	OpIds []int64 `protobuf:"varint,2,rep,packed,name=opIds,proto3" json:"opIds,omitempty"`
}

func (x *GetCheckTransactionCoinsResponse) Reset() {
	*x = GetCheckTransactionCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCheckTransactionCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCheckTransactionCoinsResponse) ProtoMessage() {}

func (x *GetCheckTransactionCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCheckTransactionCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetCheckTransactionCoinsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{116}
}

func (x *GetCheckTransactionCoinsResponse) GetTrIds() []int64 {
	if x != nil {
		return x.TrIds
	}
	return nil
}

func (x *GetCheckTransactionCoinsResponse) GetOpIds() []int64 {
	if x != nil {
		return x.OpIds
	}
	return nil
}

type GetCheckFreezePayoutsBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCheckFreezePayoutsBlocksRequest) Reset() {
	*x = GetCheckFreezePayoutsBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCheckFreezePayoutsBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCheckFreezePayoutsBlocksRequest) ProtoMessage() {}

func (x *GetCheckFreezePayoutsBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCheckFreezePayoutsBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetCheckFreezePayoutsBlocksRequest) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{117}
}

type GetCheckFreezePayoutsBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CheckFreezePayoutsBlocksData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCheckFreezePayoutsBlocksResponse) Reset() {
	*x = GetCheckFreezePayoutsBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCheckFreezePayoutsBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCheckFreezePayoutsBlocksResponse) ProtoMessage() {}

func (x *GetCheckFreezePayoutsBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCheckFreezePayoutsBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetCheckFreezePayoutsBlocksResponse) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{118}
}

func (x *GetCheckFreezePayoutsBlocksResponse) GetData() []*CheckFreezePayoutsBlocksData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckFreezePayoutsBlocksData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrId      int64                  `protobuf:"varint,1,opt,name=trId,proto3" json:"trId,omitempty"`
	Type      int64                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	UserId    int64                  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *CheckFreezePayoutsBlocksData) Reset() {
	*x = CheckFreezePayoutsBlocksData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_accounting_accounting_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFreezePayoutsBlocksData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFreezePayoutsBlocksData) ProtoMessage() {}

func (x *CheckFreezePayoutsBlocksData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_accounting_accounting_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFreezePayoutsBlocksData.ProtoReflect.Descriptor instead.
func (*CheckFreezePayoutsBlocksData) Descriptor() ([]byte, []int) {
	return file_protocol_accounting_accounting_proto_rawDescGZIP(), []int{119}
}

func (x *CheckFreezePayoutsBlocksData) GetTrId() int64 {
	if x != nil {
		return x.TrId
	}
	return 0
}

func (x *CheckFreezePayoutsBlocksData) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CheckFreezePayoutsBlocksData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckFreezePayoutsBlocksData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_protocol_accounting_accounting_proto protoreflect.FileDescriptor

var file_protocol_accounting_accounting_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb4, 0x03,
	0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x1d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x72, 0x65, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x32, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x32, 0x70, 0x12,
	0x43, 0x0a, 0x1e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x67, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22,
	0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x0b, 0x43, 0x6f,
	0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xb9, 0x03, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x12,
	0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0xd8, 0x02, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x17, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc5, 0x03,
	0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x75, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75,
	0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xd5, 0x02, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x14, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x75, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x48, 0x0a,
	0x14, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x22, 0x3e, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x73, 0x22, 0x56, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22, 0xbb, 0x01, 0x0a, 0x06, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x74, 0x78, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x78, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x22, 0xf3,
	0x0a, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x78, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0a, 0x66,
	0x69, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66,
	0x69, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x69,
	0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a,
	0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x66,
	0x69, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66,
	0x69, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a,
	0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x32, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x32, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x32, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x32, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x61, 0x0a,
	0x16, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x4c, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x70,
	0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x22, 0xb7, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x57, 0x0a, 0x18, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0xdf, 0x02, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x47, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x02, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4c, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6c,
	0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x3e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x60, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x22, 0x73, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x4a, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0x61,
	0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x59, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x1e,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x69, 0x66, 0x66,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73,
	0x22, 0x59, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x44, 0x69, 0x66, 0x66, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x1e, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x69, 0x66, 0x66, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x22,
	0xc3, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x69,
	0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x49, 0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x44,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x49, 0x44, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x49, 0x44, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x68, 0x61, 0x73, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x51, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4e, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x53, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9b, 0x08, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0d, 0x52, 0x12, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x75, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x14, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x06, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6c,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6c, 0x6c,
	0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2e,
	0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x22, 0xed,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x87,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x68, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x86, 0x01,
	0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x53, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x0e, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x72, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x68, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x22, 0xe0, 0x04, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x25, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x22, 0x98, 0x03, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x66, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x70, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x70, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x22, 0xc8, 0x02, 0x0a, 0x15,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x66, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65,
	0x66, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x70, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x70, 0x61, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x22, 0x95, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x22, 0x67,
	0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22,
	0x51, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x22, 0x5d, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x62, 0x54, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x62, 0x54, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xdc, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x41, 0x74,
	0x22, 0x54, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x52, 0x07, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x67,
	0x22, 0xde, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x59, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x22, 0x84, 0x03, 0x0a,
	0x1e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x37, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x65, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x52, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x60, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x22, 0x1e, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3d, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d,
	0x22, 0x2a, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x29,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x02,
	0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x70, 0x32, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x70, 0x32, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x70, 0x31, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x70, 0x31, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70,
	0x50, 0x61, 0x69, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6f, 0x70, 0x50, 0x61, 0x69, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x4e, 0x65, 0x67, 0x43, 0x68, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x72, 0x4e, 0x65, 0x67, 0x43, 0x68, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x53, 0x75,
	0x6d, 0x43, 0x68, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x53, 0x75,
	0x6d, 0x43, 0x68, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x66, 0x66, 0x43, 0x68, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x66, 0x66, 0x43, 0x68, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x74, 0x72, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63,
	0x6f, 0x69, 0x6e, 0x43, 0x68, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x43, 0x68, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x43, 0x68, 0x6b, 0x22, 0x21,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x4e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x74, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x70, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x70, 0x49, 0x64,
	0x73, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x01, 0x0a,
	0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xc7, 0x23, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x2c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7b, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x65, 0x65, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x65, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x87, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x1a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x69, 0x64, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x2c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a,
	0x16, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x69, 0x66,
	0x66, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x69, 0x66, 0x66,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f,
	0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x69,
	0x66, 0x66, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x44, 0x69, 0x66, 0x66, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x69, 0x66,
	0x66, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x11,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x75, 0x6d, 0x12, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x2e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_accounting_accounting_proto_rawDescOnce sync.Once
	file_protocol_accounting_accounting_proto_rawDescData = file_protocol_accounting_accounting_proto_rawDesc
)

func file_protocol_accounting_accounting_proto_rawDescGZIP() []byte {
	file_protocol_accounting_accounting_proto_rawDescOnce.Do(func() {
		file_protocol_accounting_accounting_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_accounting_accounting_proto_rawDescData)
	})
	return file_protocol_accounting_accounting_proto_rawDescData
}

var file_protocol_accounting_accounting_proto_msgTypes = make([]protoimpl.MessageInfo, 120)
var file_protocol_accounting_accounting_proto_goTypes = []any{
	(*UserIDRequest)(nil),                             // 0: accounting.UserIDRequest
	(*CoinBalance)(nil),                               // 1: accounting.CoinBalance
	(*GetBalancesResponse)(nil),                       // 2: accounting.GetBalancesResponse
	(*GetBalanceByCoinRequest)(nil),                   // 3: accounting.GetBalanceByCoinRequest
	(*GetBalanceByCoinResponse)(nil),                  // 4: accounting.GetBalanceByCoinResponse
	(*GetPaidRequest)(nil),                            // 5: accounting.GetPaidRequest
	(*GetPaidResponse)(nil),                           // 6: accounting.GetPaidResponse
	(*CoinSummary)(nil),                               // 7: accounting.CoinSummary
	(*GetCoinsSummaryResponse)(nil),                   // 8: accounting.GetCoinsSummaryResponse
	(*Transaction)(nil),                               // 9: accounting.Transaction
	(*Block)(nil),                                     // 10: accounting.Block
	(*OperationSelection)(nil),                        // 11: accounting.OperationSelection
	(*UserIDCoinID)(nil),                              // 12: accounting.UserIDCoinID
	(*BatchOperationSelection)(nil),                   // 13: accounting.BatchOperationSelection
	(*OperationSelectionWithBlock)(nil),               // 14: accounting.OperationSelectionWithBlock
	(*TransactionSelectionWithBlock)(nil),             // 15: accounting.TransactionSelectionWithBlock
	(*UserBlockTimeBalance)(nil),                      // 16: accounting.UserBlockTimeBalance
	(*UserBeforePayoutMining)(nil),                    // 17: accounting.UserBeforePayoutMining
	(*UserMiningDiff)(nil),                            // 18: accounting.UserMiningDiff
	(*UserBeforePayoutWallet)(nil),                    // 19: accounting.UserBeforePayoutWallet
	(*UserWalletDiff)(nil),                            // 20: accounting.UserWalletDiff
	(*Income)(nil),                                    // 21: accounting.Income
	(*Payout)(nil),                                    // 22: accounting.Payout
	(*Wallet)(nil),                                    // 23: accounting.Wallet
	(*ViewBalanceRequest)(nil),                        // 24: accounting.ViewBalanceRequest
	(*ViewBalanceResponse)(nil),                       // 25: accounting.ViewBalanceResponse
	(*ChangeBalanceRequest)(nil),                      // 26: accounting.ChangeBalanceRequest
	(*ChangeBalanceResponse)(nil),                     // 27: accounting.ChangeBalanceResponse
	(*FindOperationsRequest)(nil),                     // 28: accounting.FindOperationsRequest
	(*FindOperationsResponse)(nil),                    // 29: accounting.FindOperationsResponse
	(*FindBatchOperationsRequest)(nil),                // 30: accounting.FindBatchOperationsRequest
	(*FindBatchOperationsResponse)(nil),               // 31: accounting.FindBatchOperationsResponse
	(*FindTransactionsRequest)(nil),                   // 32: accounting.FindTransactionsRequest
	(*FindTransactionsResponse)(nil),                  // 33: accounting.FindTransactionsResponse
	(*Pagination)(nil),                                // 34: accounting.Pagination
	(*TransactionCollectorFilter)(nil),                // 35: accounting.TransactionCollectorFilter
	(*TransactionMultiResponse)(nil),                  // 36: accounting.TransactionMultiResponse
	(*GetTransactionsByActionIDRequest)(nil),          // 37: accounting.GetTransactionsByActionIDRequest
	(*GetTransactionsByActionIDResponse)(nil),         // 38: accounting.GetTransactionsByActionIDResponse
	(*FindTransactionsWithBlocksRequest)(nil),         // 39: accounting.FindTransactionsWithBlocksRequest
	(*FindTransactionsWithBlocksResponse)(nil),        // 40: accounting.FindTransactionsWithBlocksResponse
	(*GetTransactionByIDRequest)(nil),                 // 41: accounting.GetTransactionByIDRequest
	(*GetTransactionByIDResponse)(nil),                // 42: accounting.GetTransactionByIDResponse
	(*GetTransactionIDByActionRequest)(nil),           // 43: accounting.GetTransactionIDByActionRequest
	(*GetTransactionIDByActionResponse)(nil),          // 44: accounting.GetTransactionIDByActionResponse
	(*FindLastBlockTimeBalancesRequest)(nil),          // 45: accounting.FindLastBlockTimeBalancesRequest
	(*FindLastBlockTimeBalancesResponse)(nil),         // 46: accounting.FindLastBlockTimeBalancesResponse
	(*FindBalancesDiffMiningRequest)(nil),             // 47: accounting.FindBalancesDiffMiningRequest
	(*FindBalancesDiffMiningResponse)(nil),            // 48: accounting.FindBalancesDiffMiningResponse
	(*FindBalancesDiffWalletRequest)(nil),             // 49: accounting.FindBalancesDiffWalletRequest
	(*FindBalancesDiffWalletResponse)(nil),            // 50: accounting.FindBalancesDiffWalletResponse
	(*GetHistoryRequest)(nil),                         // 51: accounting.GetHistoryRequest
	(*GetHistoryResponse)(nil),                        // 52: accounting.GetHistoryResponse
	(*ChangeMultipleBalanceRequest)(nil),              // 53: accounting.ChangeMultipleBalanceRequest
	(*ChangeMultipleBalanceResponse)(nil),             // 54: accounting.ChangeMultipleBalanceResponse
	(*CheckPayoutsLimitRequest)(nil),                  // 55: accounting.CheckPayoutsLimitRequest
	(*CheckPayoutsLimitResponse)(nil),                 // 56: accounting.CheckPayoutsLimitResponse
	(*GetPayoutsBlockStatusRequest)(nil),              // 57: accounting.GetPayoutsBlockStatusRequest
	(*GetPayoutsBlockStatusResponse)(nil),             // 58: accounting.GetPayoutsBlockStatusResponse
	(*SetPayoutsBlockStatusRequest)(nil),              // 59: accounting.SetPayoutsBlockStatusRequest
	(*SetPayoutsBlockStatusResponse)(nil),             // 60: accounting.SetPayoutsBlockStatusResponse
	(*FindOperationsAndTransactionsRequest)(nil),      // 61: accounting.FindOperationsAndTransactionsRequest
	(*FindOperationsAndTransactionsResponse)(nil),     // 62: accounting.FindOperationsAndTransactionsResponse
	(*OperationWithTransaction)(nil),                  // 63: accounting.OperationWithTransaction
	(*Sort)(nil),                                      // 64: accounting.Sort
	(*ListTransactionsRequest)(nil),                   // 65: accounting.ListTransactionsRequest
	(*ListTransactionsResponse)(nil),                  // 66: accounting.ListTransactionsResponse
	(*GetUserAccountRequest)(nil),                     // 67: accounting.GetUserAccountRequest
	(*GetUserAccountResponse)(nil),                    // 68: accounting.GetUserAccountResponse
	(*GetUserAccountsRequest)(nil),                    // 69: accounting.GetUserAccountsRequest
	(*GetUserAccountsResponse)(nil),                   // 70: accounting.GetUserAccountsResponse
	(*UserAccount)(nil),                               // 71: accounting.UserAccount
	(*FindPayoutsForBlockRequest)(nil),                // 72: accounting.FindPayoutsForBlockRequest
	(*FindPayoutsForBlockResponse)(nil),               // 73: accounting.FindPayoutsForBlockResponse
	(*PayoutForBlock)(nil),                            // 74: accounting.PayoutForBlock
	(*GetCurrentPayoutsBlockRequest)(nil),             // 75: accounting.GetCurrentPayoutsBlockRequest
	(*GetCurrentPayoutsBlockResponse)(nil),            // 76: accounting.GetCurrentPayoutsBlockResponse
	(*PayoutBlockTransaction)(nil),                    // 77: accounting.PayoutBlockTransaction
	(*GetFreePayoutsRequest)(nil),                     // 78: accounting.GetFreePayoutsRequest
	(*GetFreePayoutsResponse)(nil),                    // 79: accounting.GetFreePayoutsResponse
	(*FreePayout)(nil),                                // 80: accounting.FreePayout
	(*GetCurrentPayoutsListRequest)(nil),              // 81: accounting.GetCurrentPayoutsListRequest
	(*GetCurrentReferralsPayoutsListRequest)(nil),     // 82: accounting.GetCurrentReferralsPayoutsListRequest
	(*GetCurrentPayoutsListResponse)(nil),             // 83: accounting.GetCurrentPayoutsListResponse
	(*GetCurrentReferralsPayoutsListResponse)(nil),    // 84: accounting.GetCurrentReferralsPayoutsListResponse
	(*CurrentPayout)(nil),                             // 85: accounting.CurrentPayout
	(*CurrentReferralPayout)(nil),                     // 86: accounting.CurrentReferralPayout
	(*PayoutCalculationData)(nil),                     // 87: accounting.PayoutCalculationData
	(*CheckFreePayoutTransactionRequest)(nil),         // 88: accounting.CheckFreePayoutTransactionRequest
	(*CheckFreePayoutTransactionResponse)(nil),        // 89: accounting.CheckFreePayoutTransactionResponse
	(*CheckPayoutBlockStatusRequest)(nil),             // 90: accounting.CheckPayoutBlockStatusRequest
	(*CheckPayoutBlockStatusResponse)(nil),            // 91: accounting.CheckPayoutBlockStatusResponse
	(*PayoutBlock)(nil),                               // 92: accounting.PayoutBlock
	(*CheckIncomeOperationsRequest)(nil),              // 93: accounting.CheckIncomeOperationsRequest
	(*CheckIncomeOperationsResponse)(nil),             // 94: accounting.CheckIncomeOperationsResponse
	(*IncomeWithFee)(nil),                             // 95: accounting.IncomeWithFee
	(*GetAveragePaidRequest)(nil),                     // 96: accounting.GetAveragePaidRequest
	(*GetAveragePaidResponse)(nil),                    // 97: accounting.GetAveragePaidResponse
	(*CheckOthersRequest)(nil),                        // 98: accounting.CheckOthersRequest
	(*CheckOthersResponse)(nil),                       // 99: accounting.CheckOthersResponse
	(*OtherOperationsWithTransaction)(nil),            // 100: accounting.OtherOperationsWithTransaction
	(*GetBalanceBeforeTransactionRequest)(nil),        // 101: accounting.GetBalanceBeforeTransactionRequest
	(*GetBalanceBeforeTransactionResponse)(nil),       // 102: accounting.GetBalanceBeforeTransactionResponse
	(*GetServiceUserDataRequest)(nil),                 // 103: accounting.GetServiceUserDataRequest
	(*GetServiceUserDataResponse)(nil),                // 104: accounting.GetServiceUserDataResponse
	(*ServiceUserBlock)(nil),                          // 105: accounting.ServiceUserBlock
	(*GetIncomesHashrateRequest)(nil),                 // 106: accounting.GetIncomesHashrateRequest
	(*GetIncomesHashrateResponse)(nil),                // 107: accounting.GetIncomesHashrateResponse
	(*HashrateByDate)(nil),                            // 108: accounting.HashrateByDate
	(*GetCoinsOperationsSumRequest)(nil),              // 109: accounting.GetCoinsOperationsSumRequest
	(*GetCoinsOperationsSumResponse)(nil),             // 110: accounting.GetCoinsOperationsSumResponse
	(*OperationsSumData)(nil),                         // 111: accounting.OperationsSumData
	(*GetTransactionOperationsIntegrityRequest)(nil),  // 112: accounting.GetTransactionOperationsIntegrityRequest
	(*GetTransactionOperationsIntegrityResponse)(nil), // 113: accounting.GetTransactionOperationsIntegrityResponse
	(*TransactionOperationsIntegrityData)(nil),        // 114: accounting.TransactionOperationsIntegrityData
	(*GetCheckTransactionCoinsRequest)(nil),           // 115: accounting.GetCheckTransactionCoinsRequest
	(*GetCheckTransactionCoinsResponse)(nil),          // 116: accounting.GetCheckTransactionCoinsResponse
	(*GetCheckFreezePayoutsBlocksRequest)(nil),        // 117: accounting.GetCheckFreezePayoutsBlocksRequest
	(*GetCheckFreezePayoutsBlocksResponse)(nil),       // 118: accounting.GetCheckFreezePayoutsBlocksResponse
	(*CheckFreezePayoutsBlocksData)(nil),              // 119: accounting.CheckFreezePayoutsBlocksData
	(*timestamppb.Timestamp)(nil),                     // 120: google.protobuf.Timestamp
	(*wrapperspb.Int64Value)(nil),                     // 121: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),                    // 122: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                      // 123: google.protobuf.BoolValue
}
var file_protocol_accounting_accounting_proto_depIdxs = []int32{
	1,   // 0: accounting.GetBalancesResponse.coin_balance:type_name -> accounting.CoinBalance
	1,   // 1: accounting.GetBalanceByCoinResponse.coin_balance:type_name -> accounting.CoinBalance
	120, // 2: accounting.GetPaidRequest.from:type_name -> google.protobuf.Timestamp
	120, // 3: accounting.GetPaidRequest.to:type_name -> google.protobuf.Timestamp
	7,   // 4: accounting.GetCoinsSummaryResponse.coin_summary:type_name -> accounting.CoinSummary
	120, // 5: accounting.Transaction.createdAt:type_name -> google.protobuf.Timestamp
	120, // 6: accounting.Block.blockedTill:type_name -> google.protobuf.Timestamp
	120, // 7: accounting.OperationSelection.createdAt:type_name -> google.protobuf.Timestamp
	11,  // 8: accounting.BatchOperationSelection.operations:type_name -> accounting.OperationSelection
	120, // 9: accounting.OperationSelectionWithBlock.createdAt:type_name -> google.protobuf.Timestamp
	120, // 10: accounting.UserBeforePayoutMining.lastPay:type_name -> google.protobuf.Timestamp
	121, // 11: accounting.Income.hashRate:type_name -> google.protobuf.Int64Value
	122, // 12: accounting.Payout.tx:type_name -> google.protobuf.StringValue
	122, // 13: accounting.Payout.txID:type_name -> google.protobuf.StringValue
	122, // 14: accounting.Wallet.txID:type_name -> google.protobuf.StringValue
	122, // 15: accounting.Wallet.fiatStatus:type_name -> google.protobuf.StringValue
	122, // 16: accounting.Wallet.address:type_name -> google.protobuf.StringValue
	122, // 17: accounting.Wallet.comment:type_name -> google.protobuf.StringValue
	121, // 18: accounting.Wallet.exchangeToCoinID:type_name -> google.protobuf.Int64Value
	121, // 19: accounting.Wallet.coinholdID:type_name -> google.protobuf.Int64Value
	121, // 20: accounting.Wallet.orderID:type_name -> google.protobuf.Int64Value
	121, // 21: accounting.Wallet.createdAt:type_name -> google.protobuf.Int64Value
	122, // 22: accounting.Wallet.amount:type_name -> google.protobuf.StringValue
	122, // 23: accounting.Wallet.fee:type_name -> google.protobuf.StringValue
	122, // 24: accounting.Wallet.fiatAmount:type_name -> google.protobuf.StringValue
	122, // 25: accounting.Wallet.exchangeAmountReceive:type_name -> google.protobuf.StringValue
	122, // 26: accounting.Wallet.exchangeAmountSent:type_name -> google.protobuf.StringValue
	122, // 27: accounting.Wallet.exchangeRate:type_name -> google.protobuf.StringValue
	123, // 28: accounting.Wallet.exchangeIsSuccess:type_name -> google.protobuf.BoolValue
	120, // 29: accounting.Wallet.date:type_name -> google.protobuf.Timestamp
	122, // 30: accounting.Wallet.referralEmail:type_name -> google.protobuf.StringValue
	121, // 31: accounting.Wallet.referralType:type_name -> google.protobuf.Int64Value
	9,   // 32: accounting.ChangeBalanceRequest.transactions:type_name -> accounting.Transaction
	14,  // 33: accounting.FindOperationsResponse.operations:type_name -> accounting.OperationSelectionWithBlock
	12,  // 34: accounting.FindBatchOperationsRequest.users:type_name -> accounting.UserIDCoinID
	13,  // 35: accounting.FindBatchOperationsResponse.operationsByUsers:type_name -> accounting.BatchOperationSelection
	120, // 36: accounting.FindTransactionsRequest.from:type_name -> google.protobuf.Timestamp
	9,   // 37: accounting.FindTransactionsResponse.transactions:type_name -> accounting.Transaction
	120, // 38: accounting.TransactionCollectorFilter.created_at_gt:type_name -> google.protobuf.Timestamp
	120, // 39: accounting.TransactionCollectorFilter.created_at_lte:type_name -> google.protobuf.Timestamp
	34,  // 40: accounting.TransactionCollectorFilter.pagination:type_name -> accounting.Pagination
	9,   // 41: accounting.TransactionMultiResponse.transactions:type_name -> accounting.Transaction
	9,   // 42: accounting.GetTransactionsByActionIDResponse.transactions:type_name -> accounting.Transaction
	120, // 43: accounting.FindTransactionsWithBlocksRequest.blockedTill:type_name -> google.protobuf.Timestamp
	15,  // 44: accounting.FindTransactionsWithBlocksResponse.transactions:type_name -> accounting.TransactionSelectionWithBlock
	15,  // 45: accounting.GetTransactionByIDResponse.transaction:type_name -> accounting.TransactionSelectionWithBlock
	16,  // 46: accounting.FindLastBlockTimeBalancesResponse.balances:type_name -> accounting.UserBlockTimeBalance
	17,  // 47: accounting.FindBalancesDiffMiningRequest.users:type_name -> accounting.UserBeforePayoutMining
	18,  // 48: accounting.FindBalancesDiffMiningResponse.diffs:type_name -> accounting.UserMiningDiff
	19,  // 49: accounting.FindBalancesDiffWalletRequest.users:type_name -> accounting.UserBeforePayoutWallet
	20,  // 50: accounting.FindBalancesDiffWalletResponse.diffs:type_name -> accounting.UserWalletDiff
	123, // 51: accounting.GetHistoryResponse.hasNewIncome:type_name -> google.protobuf.BoolValue
	123, // 52: accounting.GetHistoryResponse.hasNewPayouts:type_name -> google.protobuf.BoolValue
	21,  // 53: accounting.GetHistoryResponse.incomes:type_name -> accounting.Income
	22,  // 54: accounting.GetHistoryResponse.payouts:type_name -> accounting.Payout
	23,  // 55: accounting.GetHistoryResponse.wallets:type_name -> accounting.Wallet
	9,   // 56: accounting.ChangeMultipleBalanceRequest.transactions:type_name -> accounting.Transaction
	64,  // 57: accounting.FindOperationsAndTransactionsRequest.sort:type_name -> accounting.Sort
	63,  // 58: accounting.FindOperationsAndTransactionsResponse.operations:type_name -> accounting.OperationWithTransaction
	120, // 59: accounting.OperationWithTransaction.blockedTill:type_name -> google.protobuf.Timestamp
	120, // 60: accounting.OperationWithTransaction.createdAt:type_name -> google.protobuf.Timestamp
	120, // 61: accounting.ListTransactionsRequest.from:type_name -> google.protobuf.Timestamp
	120, // 62: accounting.ListTransactionsRequest.to:type_name -> google.protobuf.Timestamp
	9,   // 63: accounting.ListTransactionsResponse.transactions:type_name -> accounting.Transaction
	71,  // 64: accounting.GetUserAccountResponse.user_account:type_name -> accounting.UserAccount
	71,  // 65: accounting.GetUserAccountsResponse.user_accounts:type_name -> accounting.UserAccount
	120, // 66: accounting.FindPayoutsForBlockRequest.timestamp:type_name -> google.protobuf.Timestamp
	74,  // 67: accounting.FindPayoutsForBlockResponse.payouts:type_name -> accounting.PayoutForBlock
	77,  // 68: accounting.GetCurrentPayoutsBlockResponse.transactions:type_name -> accounting.PayoutBlockTransaction
	80,  // 69: accounting.GetFreePayoutsResponse.payouts:type_name -> accounting.FreePayout
	120, // 70: accounting.FreePayout.createdAt:type_name -> google.protobuf.Timestamp
	85,  // 71: accounting.GetCurrentPayoutsListResponse.payouts:type_name -> accounting.CurrentPayout
	86,  // 72: accounting.GetCurrentReferralsPayoutsListResponse.payouts:type_name -> accounting.CurrentReferralPayout
	120, // 73: accounting.CurrentPayout.blockCreate:type_name -> google.protobuf.Timestamp
	87,  // 74: accounting.CurrentPayout.calc:type_name -> accounting.PayoutCalculationData
	87,  // 75: accounting.CurrentReferralPayout.calc:type_name -> accounting.PayoutCalculationData
	120, // 76: accounting.PayoutCalculationData.lastPay:type_name -> google.protobuf.Timestamp
	120, // 77: accounting.PayoutCalculationData.incomeFirst:type_name -> google.protobuf.Timestamp
	120, // 78: accounting.PayoutCalculationData.incomeLast:type_name -> google.protobuf.Timestamp
	92,  // 79: accounting.CheckPayoutBlockStatusResponse.payoutBlocks:type_name -> accounting.PayoutBlock
	120, // 80: accounting.CheckIncomeOperationsRequest.createdAt:type_name -> google.protobuf.Timestamp
	120, // 81: accounting.CheckIncomeOperationsRequest.lastPayAt:type_name -> google.protobuf.Timestamp
	95,  // 82: accounting.CheckIncomeOperationsResponse.incomes:type_name -> accounting.IncomeWithFee
	120, // 83: accounting.IncomeWithFee.createdAt:type_name -> google.protobuf.Timestamp
	120, // 84: accounting.CheckOthersRequest.lastPayAt:type_name -> google.protobuf.Timestamp
	120, // 85: accounting.CheckOthersRequest.blockCreatedAt:type_name -> google.protobuf.Timestamp
	100, // 86: accounting.CheckOthersResponse.others:type_name -> accounting.OtherOperationsWithTransaction
	120, // 87: accounting.OtherOperationsWithTransaction.createdAt:type_name -> google.protobuf.Timestamp
	105, // 88: accounting.GetServiceUserDataResponse.blocks:type_name -> accounting.ServiceUserBlock
	120, // 89: accounting.GetIncomesHashrateRequest.date:type_name -> google.protobuf.Timestamp
	108, // 90: accounting.GetIncomesHashrateResponse.hashrateByDate:type_name -> accounting.HashrateByDate
	111, // 91: accounting.GetCoinsOperationsSumResponse.data:type_name -> accounting.OperationsSumData
	114, // 92: accounting.GetTransactionOperationsIntegrityResponse.data:type_name -> accounting.TransactionOperationsIntegrityData
	119, // 93: accounting.GetCheckFreezePayoutsBlocksResponse.data:type_name -> accounting.CheckFreezePayoutsBlocksData
	120, // 94: accounting.CheckFreezePayoutsBlocksData.createdAt:type_name -> google.protobuf.Timestamp
	24,  // 95: accounting.AccountingService.ViewBalance:input_type -> accounting.ViewBalanceRequest
	26,  // 96: accounting.AccountingService.ChangeBalance:input_type -> accounting.ChangeBalanceRequest
	53,  // 97: accounting.AccountingService.ChangeMultipleBalance:input_type -> accounting.ChangeMultipleBalanceRequest
	0,   // 98: accounting.AccountingService.GetBalances:input_type -> accounting.UserIDRequest
	3,   // 99: accounting.AccountingService.GetBalanceByCoin:input_type -> accounting.GetBalanceByCoinRequest
	5,   // 100: accounting.AccountingService.GetPaid:input_type -> accounting.GetPaidRequest
	0,   // 101: accounting.AccountingService.GetCoinsSummary:input_type -> accounting.UserIDRequest
	28,  // 102: accounting.AccountingService.FindOperations:input_type -> accounting.FindOperationsRequest
	30,  // 103: accounting.AccountingService.FindBatchOperations:input_type -> accounting.FindBatchOperationsRequest
	32,  // 104: accounting.AccountingService.FindTransactions:input_type -> accounting.FindTransactionsRequest
	35,  // 105: accounting.AccountingService.FindTransactionsByCollectorFilter:input_type -> accounting.TransactionCollectorFilter
	37,  // 106: accounting.AccountingService.GetTransactionsByActionID:input_type -> accounting.GetTransactionsByActionIDRequest
	39,  // 107: accounting.AccountingService.FindTransactionsWithBlocks:input_type -> accounting.FindTransactionsWithBlocksRequest
	41,  // 108: accounting.AccountingService.GetTransactionByID:input_type -> accounting.GetTransactionByIDRequest
	43,  // 109: accounting.AccountingService.GetTransactionIDByAction:input_type -> accounting.GetTransactionIDByActionRequest
	61,  // 110: accounting.AccountingService.FindOperationsAndTransactions:input_type -> accounting.FindOperationsAndTransactionsRequest
	72,  // 111: accounting.AccountingService.FindPayoutsForBlock:input_type -> accounting.FindPayoutsForBlockRequest
	75,  // 112: accounting.AccountingService.GetCurrentPayoutsBlock:input_type -> accounting.GetCurrentPayoutsBlockRequest
	78,  // 113: accounting.AccountingService.GetFreePayouts:input_type -> accounting.GetFreePayoutsRequest
	81,  // 114: accounting.AccountingService.GetCurrentPayoutsList:input_type -> accounting.GetCurrentPayoutsListRequest
	82,  // 115: accounting.AccountingService.GetCurrentReferralsPayoutsList:input_type -> accounting.GetCurrentReferralsPayoutsListRequest
	88,  // 116: accounting.AccountingService.CheckFreePayoutTransaction:input_type -> accounting.CheckFreePayoutTransactionRequest
	90,  // 117: accounting.AccountingService.CheckPayoutBlockStatus:input_type -> accounting.CheckPayoutBlockStatusRequest
	93,  // 118: accounting.AccountingService.CheckIncomeOperations:input_type -> accounting.CheckIncomeOperationsRequest
	98,  // 119: accounting.AccountingService.CheckOthers:input_type -> accounting.CheckOthersRequest
	96,  // 120: accounting.AccountingService.GetAveragePaid:input_type -> accounting.GetAveragePaidRequest
	101, // 121: accounting.AccountingService.GetBalanceBeforeTransaction:input_type -> accounting.GetBalanceBeforeTransactionRequest
	103, // 122: accounting.AccountingService.GetServiceUserData:input_type -> accounting.GetServiceUserDataRequest
	45,  // 123: accounting.AccountingService.FindLastBlockTimeBalances:input_type -> accounting.FindLastBlockTimeBalancesRequest
	47,  // 124: accounting.AccountingService.FindBalancesDiffMining:input_type -> accounting.FindBalancesDiffMiningRequest
	49,  // 125: accounting.AccountingService.FindBalancesDiffWallet:input_type -> accounting.FindBalancesDiffWalletRequest
	51,  // 126: accounting.AccountingService.GetHistory:input_type -> accounting.GetHistoryRequest
	55,  // 127: accounting.AccountingService.CheckPayoutsLimit:input_type -> accounting.CheckPayoutsLimitRequest
	57,  // 128: accounting.AccountingService.GetPayoutsBlockStatus:input_type -> accounting.GetPayoutsBlockStatusRequest
	59,  // 129: accounting.AccountingService.SetPayoutsBlockStatus:input_type -> accounting.SetPayoutsBlockStatusRequest
	65,  // 130: accounting.AccountingService.ListTransactions:input_type -> accounting.ListTransactionsRequest
	67,  // 131: accounting.AccountingService.GetUserAccount:input_type -> accounting.GetUserAccountRequest
	69,  // 132: accounting.AccountingService.GetUserAccounts:input_type -> accounting.GetUserAccountsRequest
	106, // 133: accounting.AccountingService.GetIncomesHashrateByDate:input_type -> accounting.GetIncomesHashrateRequest
	109, // 134: accounting.AccountingService.GetCoinsOperationsSum:input_type -> accounting.GetCoinsOperationsSumRequest
	112, // 135: accounting.AccountingService.GetTransactionOperationsIntegrity:input_type -> accounting.GetTransactionOperationsIntegrityRequest
	115, // 136: accounting.AccountingService.GetCheckTransactionCoins:input_type -> accounting.GetCheckTransactionCoinsRequest
	117, // 137: accounting.AccountingService.GetCheckFreezePayoutsBlocks:input_type -> accounting.GetCheckFreezePayoutsBlocksRequest
	25,  // 138: accounting.AccountingService.ViewBalance:output_type -> accounting.ViewBalanceResponse
	27,  // 139: accounting.AccountingService.ChangeBalance:output_type -> accounting.ChangeBalanceResponse
	54,  // 140: accounting.AccountingService.ChangeMultipleBalance:output_type -> accounting.ChangeMultipleBalanceResponse
	2,   // 141: accounting.AccountingService.GetBalances:output_type -> accounting.GetBalancesResponse
	4,   // 142: accounting.AccountingService.GetBalanceByCoin:output_type -> accounting.GetBalanceByCoinResponse
	6,   // 143: accounting.AccountingService.GetPaid:output_type -> accounting.GetPaidResponse
	8,   // 144: accounting.AccountingService.GetCoinsSummary:output_type -> accounting.GetCoinsSummaryResponse
	29,  // 145: accounting.AccountingService.FindOperations:output_type -> accounting.FindOperationsResponse
	31,  // 146: accounting.AccountingService.FindBatchOperations:output_type -> accounting.FindBatchOperationsResponse
	33,  // 147: accounting.AccountingService.FindTransactions:output_type -> accounting.FindTransactionsResponse
	36,  // 148: accounting.AccountingService.FindTransactionsByCollectorFilter:output_type -> accounting.TransactionMultiResponse
	38,  // 149: accounting.AccountingService.GetTransactionsByActionID:output_type -> accounting.GetTransactionsByActionIDResponse
	40,  // 150: accounting.AccountingService.FindTransactionsWithBlocks:output_type -> accounting.FindTransactionsWithBlocksResponse
	42,  // 151: accounting.AccountingService.GetTransactionByID:output_type -> accounting.GetTransactionByIDResponse
	44,  // 152: accounting.AccountingService.GetTransactionIDByAction:output_type -> accounting.GetTransactionIDByActionResponse
	62,  // 153: accounting.AccountingService.FindOperationsAndTransactions:output_type -> accounting.FindOperationsAndTransactionsResponse
	73,  // 154: accounting.AccountingService.FindPayoutsForBlock:output_type -> accounting.FindPayoutsForBlockResponse
	76,  // 155: accounting.AccountingService.GetCurrentPayoutsBlock:output_type -> accounting.GetCurrentPayoutsBlockResponse
	79,  // 156: accounting.AccountingService.GetFreePayouts:output_type -> accounting.GetFreePayoutsResponse
	83,  // 157: accounting.AccountingService.GetCurrentPayoutsList:output_type -> accounting.GetCurrentPayoutsListResponse
	84,  // 158: accounting.AccountingService.GetCurrentReferralsPayoutsList:output_type -> accounting.GetCurrentReferralsPayoutsListResponse
	89,  // 159: accounting.AccountingService.CheckFreePayoutTransaction:output_type -> accounting.CheckFreePayoutTransactionResponse
	91,  // 160: accounting.AccountingService.CheckPayoutBlockStatus:output_type -> accounting.CheckPayoutBlockStatusResponse
	94,  // 161: accounting.AccountingService.CheckIncomeOperations:output_type -> accounting.CheckIncomeOperationsResponse
	99,  // 162: accounting.AccountingService.CheckOthers:output_type -> accounting.CheckOthersResponse
	97,  // 163: accounting.AccountingService.GetAveragePaid:output_type -> accounting.GetAveragePaidResponse
	102, // 164: accounting.AccountingService.GetBalanceBeforeTransaction:output_type -> accounting.GetBalanceBeforeTransactionResponse
	104, // 165: accounting.AccountingService.GetServiceUserData:output_type -> accounting.GetServiceUserDataResponse
	46,  // 166: accounting.AccountingService.FindLastBlockTimeBalances:output_type -> accounting.FindLastBlockTimeBalancesResponse
	48,  // 167: accounting.AccountingService.FindBalancesDiffMining:output_type -> accounting.FindBalancesDiffMiningResponse
	50,  // 168: accounting.AccountingService.FindBalancesDiffWallet:output_type -> accounting.FindBalancesDiffWalletResponse
	52,  // 169: accounting.AccountingService.GetHistory:output_type -> accounting.GetHistoryResponse
	56,  // 170: accounting.AccountingService.CheckPayoutsLimit:output_type -> accounting.CheckPayoutsLimitResponse
	58,  // 171: accounting.AccountingService.GetPayoutsBlockStatus:output_type -> accounting.GetPayoutsBlockStatusResponse
	60,  // 172: accounting.AccountingService.SetPayoutsBlockStatus:output_type -> accounting.SetPayoutsBlockStatusResponse
	66,  // 173: accounting.AccountingService.ListTransactions:output_type -> accounting.ListTransactionsResponse
	68,  // 174: accounting.AccountingService.GetUserAccount:output_type -> accounting.GetUserAccountResponse
	70,  // 175: accounting.AccountingService.GetUserAccounts:output_type -> accounting.GetUserAccountsResponse
	107, // 176: accounting.AccountingService.GetIncomesHashrateByDate:output_type -> accounting.GetIncomesHashrateResponse
	110, // 177: accounting.AccountingService.GetCoinsOperationsSum:output_type -> accounting.GetCoinsOperationsSumResponse
	113, // 178: accounting.AccountingService.GetTransactionOperationsIntegrity:output_type -> accounting.GetTransactionOperationsIntegrityResponse
	116, // 179: accounting.AccountingService.GetCheckTransactionCoins:output_type -> accounting.GetCheckTransactionCoinsResponse
	118, // 180: accounting.AccountingService.GetCheckFreezePayoutsBlocks:output_type -> accounting.GetCheckFreezePayoutsBlocksResponse
	138, // [138:181] is the sub-list for method output_type
	95,  // [95:138] is the sub-list for method input_type
	95,  // [95:95] is the sub-list for extension type_name
	95,  // [95:95] is the sub-list for extension extendee
	0,   // [0:95] is the sub-list for field type_name
}

func init() { file_protocol_accounting_accounting_proto_init() }
func file_protocol_accounting_accounting_proto_init() {
	if File_protocol_accounting_accounting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_accounting_accounting_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CoinBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetBalancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetBalanceByCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetBalanceByCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetPaidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetPaidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CoinSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetCoinsSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*OperationSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UserIDCoinID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*BatchOperationSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*OperationSelectionWithBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionSelectionWithBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UserBlockTimeBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UserBeforePayoutMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UserMiningDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UserBeforePayoutWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UserWalletDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Income); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Payout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ViewBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ViewBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*FindOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*FindOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*FindBatchOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*FindBatchOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*FindTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*FindTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionCollectorFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionMultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionsByActionIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionsByActionIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*FindTransactionsWithBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*FindTransactionsWithBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionIDByActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionIDByActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*FindLastBlockTimeBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*FindLastBlockTimeBalancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*FindBalancesDiffMiningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*FindBalancesDiffMiningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*FindBalancesDiffWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*FindBalancesDiffWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*GetHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*GetHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeMultipleBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeMultipleBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*CheckPayoutsLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*CheckPayoutsLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*GetPayoutsBlockStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*GetPayoutsBlockStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*SetPayoutsBlockStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*SetPayoutsBlockStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*FindOperationsAndTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*FindOperationsAndTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*OperationWithTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*ListTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*ListTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*UserAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*FindPayoutsForBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*FindPayoutsForBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*PayoutForBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentPayoutsBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentPayoutsBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*PayoutBlockTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*GetFreePayoutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*GetFreePayoutsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*FreePayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentPayoutsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentReferralsPayoutsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentPayoutsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentReferralsPayoutsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentPayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentReferralPayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*PayoutCalculationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*CheckFreePayoutTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*CheckFreePayoutTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*CheckPayoutBlockStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*CheckPayoutBlockStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*PayoutBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*CheckIncomeOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*CheckIncomeOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*IncomeWithFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*GetAveragePaidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*GetAveragePaidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*CheckOthersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*CheckOthersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*OtherOperationsWithTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*GetBalanceBeforeTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*GetBalanceBeforeTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*GetServiceUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*GetServiceUserDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*ServiceUserBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*GetIncomesHashrateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*GetIncomesHashrateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*HashrateByDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*GetCoinsOperationsSumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*GetCoinsOperationsSumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*OperationsSumData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionOperationsIntegrityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionOperationsIntegrityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*TransactionOperationsIntegrityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*GetCheckTransactionCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*GetCheckTransactionCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*GetCheckFreezePayoutsBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*GetCheckFreezePayoutsBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_accounting_accounting_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*CheckFreezePayoutsBlocksData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_accounting_accounting_proto_msgTypes[35].OneofWrappers = []any{}
	file_protocol_accounting_accounting_proto_msgTypes[36].OneofWrappers = []any{}
	file_protocol_accounting_accounting_proto_msgTypes[61].OneofWrappers = []any{}
	file_protocol_accounting_accounting_proto_msgTypes[98].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_accounting_accounting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   120,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_accounting_accounting_proto_goTypes,
		DependencyIndexes: file_protocol_accounting_accounting_proto_depIdxs,
		MessageInfos:      file_protocol_accounting_accounting_proto_msgTypes,
	}.Build()
	File_protocol_accounting_accounting_proto = out.File
	file_protocol_accounting_accounting_proto_rawDesc = nil
	file_protocol_accounting_accounting_proto_goTypes = nil
	file_protocol_accounting_accounting_proto_depIdxs = nil
}
