// Code generated by mockery v2.43.2. DO NOT EDIT.

package accounting

import (
	context "context"

	accounting "code.emcdtech.com/emcd/service/accounting/protocol/accounting"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountingServiceServer is an autogenerated mock type for the AccountingServiceServer type
type MockAccountingServiceServer struct {
	mock.Mock
}

type MockAccountingServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingServiceServer) EXPECT() *MockAccountingServiceServer_Expecter {
	return &MockAccountingServiceServer_Expecter{mock: &_m.Mock}
}

// ChangeBalance provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) ChangeBalance(_a0 context.Context, _a1 *accounting.ChangeBalanceRequest) (*accounting.ChangeBalanceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ChangeBalance")
	}

	var r0 *accounting.ChangeBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.ChangeBalanceRequest) (*accounting.ChangeBalanceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.ChangeBalanceRequest) *accounting.ChangeBalanceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.ChangeBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.ChangeBalanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_ChangeBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeBalance'
type MockAccountingServiceServer_ChangeBalance_Call struct {
	*mock.Call
}

// ChangeBalance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.ChangeBalanceRequest
func (_e *MockAccountingServiceServer_Expecter) ChangeBalance(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_ChangeBalance_Call {
	return &MockAccountingServiceServer_ChangeBalance_Call{Call: _e.mock.On("ChangeBalance", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_ChangeBalance_Call) Run(run func(_a0 context.Context, _a1 *accounting.ChangeBalanceRequest)) *MockAccountingServiceServer_ChangeBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.ChangeBalanceRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_ChangeBalance_Call) Return(_a0 *accounting.ChangeBalanceResponse, _a1 error) *MockAccountingServiceServer_ChangeBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_ChangeBalance_Call) RunAndReturn(run func(context.Context, *accounting.ChangeBalanceRequest) (*accounting.ChangeBalanceResponse, error)) *MockAccountingServiceServer_ChangeBalance_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeMultipleBalance provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) ChangeMultipleBalance(_a0 context.Context, _a1 *accounting.ChangeMultipleBalanceRequest) (*accounting.ChangeMultipleBalanceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ChangeMultipleBalance")
	}

	var r0 *accounting.ChangeMultipleBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.ChangeMultipleBalanceRequest) (*accounting.ChangeMultipleBalanceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.ChangeMultipleBalanceRequest) *accounting.ChangeMultipleBalanceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.ChangeMultipleBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.ChangeMultipleBalanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_ChangeMultipleBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeMultipleBalance'
type MockAccountingServiceServer_ChangeMultipleBalance_Call struct {
	*mock.Call
}

// ChangeMultipleBalance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.ChangeMultipleBalanceRequest
func (_e *MockAccountingServiceServer_Expecter) ChangeMultipleBalance(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_ChangeMultipleBalance_Call {
	return &MockAccountingServiceServer_ChangeMultipleBalance_Call{Call: _e.mock.On("ChangeMultipleBalance", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_ChangeMultipleBalance_Call) Run(run func(_a0 context.Context, _a1 *accounting.ChangeMultipleBalanceRequest)) *MockAccountingServiceServer_ChangeMultipleBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.ChangeMultipleBalanceRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_ChangeMultipleBalance_Call) Return(_a0 *accounting.ChangeMultipleBalanceResponse, _a1 error) *MockAccountingServiceServer_ChangeMultipleBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_ChangeMultipleBalance_Call) RunAndReturn(run func(context.Context, *accounting.ChangeMultipleBalanceRequest) (*accounting.ChangeMultipleBalanceResponse, error)) *MockAccountingServiceServer_ChangeMultipleBalance_Call {
	_c.Call.Return(run)
	return _c
}

// CheckFreePayoutTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) CheckFreePayoutTransaction(_a0 context.Context, _a1 *accounting.CheckFreePayoutTransactionRequest) (*accounting.CheckFreePayoutTransactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckFreePayoutTransaction")
	}

	var r0 *accounting.CheckFreePayoutTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckFreePayoutTransactionRequest) (*accounting.CheckFreePayoutTransactionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckFreePayoutTransactionRequest) *accounting.CheckFreePayoutTransactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.CheckFreePayoutTransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.CheckFreePayoutTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_CheckFreePayoutTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckFreePayoutTransaction'
type MockAccountingServiceServer_CheckFreePayoutTransaction_Call struct {
	*mock.Call
}

// CheckFreePayoutTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.CheckFreePayoutTransactionRequest
func (_e *MockAccountingServiceServer_Expecter) CheckFreePayoutTransaction(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_CheckFreePayoutTransaction_Call {
	return &MockAccountingServiceServer_CheckFreePayoutTransaction_Call{Call: _e.mock.On("CheckFreePayoutTransaction", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_CheckFreePayoutTransaction_Call) Run(run func(_a0 context.Context, _a1 *accounting.CheckFreePayoutTransactionRequest)) *MockAccountingServiceServer_CheckFreePayoutTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.CheckFreePayoutTransactionRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_CheckFreePayoutTransaction_Call) Return(_a0 *accounting.CheckFreePayoutTransactionResponse, _a1 error) *MockAccountingServiceServer_CheckFreePayoutTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_CheckFreePayoutTransaction_Call) RunAndReturn(run func(context.Context, *accounting.CheckFreePayoutTransactionRequest) (*accounting.CheckFreePayoutTransactionResponse, error)) *MockAccountingServiceServer_CheckFreePayoutTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIncomeOperations provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) CheckIncomeOperations(_a0 context.Context, _a1 *accounting.CheckIncomeOperationsRequest) (*accounting.CheckIncomeOperationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckIncomeOperations")
	}

	var r0 *accounting.CheckIncomeOperationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckIncomeOperationsRequest) (*accounting.CheckIncomeOperationsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckIncomeOperationsRequest) *accounting.CheckIncomeOperationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.CheckIncomeOperationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.CheckIncomeOperationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_CheckIncomeOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIncomeOperations'
type MockAccountingServiceServer_CheckIncomeOperations_Call struct {
	*mock.Call
}

// CheckIncomeOperations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.CheckIncomeOperationsRequest
func (_e *MockAccountingServiceServer_Expecter) CheckIncomeOperations(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_CheckIncomeOperations_Call {
	return &MockAccountingServiceServer_CheckIncomeOperations_Call{Call: _e.mock.On("CheckIncomeOperations", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_CheckIncomeOperations_Call) Run(run func(_a0 context.Context, _a1 *accounting.CheckIncomeOperationsRequest)) *MockAccountingServiceServer_CheckIncomeOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.CheckIncomeOperationsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_CheckIncomeOperations_Call) Return(_a0 *accounting.CheckIncomeOperationsResponse, _a1 error) *MockAccountingServiceServer_CheckIncomeOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_CheckIncomeOperations_Call) RunAndReturn(run func(context.Context, *accounting.CheckIncomeOperationsRequest) (*accounting.CheckIncomeOperationsResponse, error)) *MockAccountingServiceServer_CheckIncomeOperations_Call {
	_c.Call.Return(run)
	return _c
}

// CheckOthers provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) CheckOthers(_a0 context.Context, _a1 *accounting.CheckOthersRequest) (*accounting.CheckOthersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckOthers")
	}

	var r0 *accounting.CheckOthersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckOthersRequest) (*accounting.CheckOthersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckOthersRequest) *accounting.CheckOthersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.CheckOthersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.CheckOthersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_CheckOthers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOthers'
type MockAccountingServiceServer_CheckOthers_Call struct {
	*mock.Call
}

// CheckOthers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.CheckOthersRequest
func (_e *MockAccountingServiceServer_Expecter) CheckOthers(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_CheckOthers_Call {
	return &MockAccountingServiceServer_CheckOthers_Call{Call: _e.mock.On("CheckOthers", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_CheckOthers_Call) Run(run func(_a0 context.Context, _a1 *accounting.CheckOthersRequest)) *MockAccountingServiceServer_CheckOthers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.CheckOthersRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_CheckOthers_Call) Return(_a0 *accounting.CheckOthersResponse, _a1 error) *MockAccountingServiceServer_CheckOthers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_CheckOthers_Call) RunAndReturn(run func(context.Context, *accounting.CheckOthersRequest) (*accounting.CheckOthersResponse, error)) *MockAccountingServiceServer_CheckOthers_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPayoutBlockStatus provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) CheckPayoutBlockStatus(_a0 context.Context, _a1 *accounting.CheckPayoutBlockStatusRequest) (*accounting.CheckPayoutBlockStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckPayoutBlockStatus")
	}

	var r0 *accounting.CheckPayoutBlockStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckPayoutBlockStatusRequest) (*accounting.CheckPayoutBlockStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckPayoutBlockStatusRequest) *accounting.CheckPayoutBlockStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.CheckPayoutBlockStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.CheckPayoutBlockStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_CheckPayoutBlockStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPayoutBlockStatus'
type MockAccountingServiceServer_CheckPayoutBlockStatus_Call struct {
	*mock.Call
}

// CheckPayoutBlockStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.CheckPayoutBlockStatusRequest
func (_e *MockAccountingServiceServer_Expecter) CheckPayoutBlockStatus(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_CheckPayoutBlockStatus_Call {
	return &MockAccountingServiceServer_CheckPayoutBlockStatus_Call{Call: _e.mock.On("CheckPayoutBlockStatus", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_CheckPayoutBlockStatus_Call) Run(run func(_a0 context.Context, _a1 *accounting.CheckPayoutBlockStatusRequest)) *MockAccountingServiceServer_CheckPayoutBlockStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.CheckPayoutBlockStatusRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_CheckPayoutBlockStatus_Call) Return(_a0 *accounting.CheckPayoutBlockStatusResponse, _a1 error) *MockAccountingServiceServer_CheckPayoutBlockStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_CheckPayoutBlockStatus_Call) RunAndReturn(run func(context.Context, *accounting.CheckPayoutBlockStatusRequest) (*accounting.CheckPayoutBlockStatusResponse, error)) *MockAccountingServiceServer_CheckPayoutBlockStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPayoutsLimit provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) CheckPayoutsLimit(_a0 context.Context, _a1 *accounting.CheckPayoutsLimitRequest) (*accounting.CheckPayoutsLimitResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckPayoutsLimit")
	}

	var r0 *accounting.CheckPayoutsLimitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckPayoutsLimitRequest) (*accounting.CheckPayoutsLimitResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.CheckPayoutsLimitRequest) *accounting.CheckPayoutsLimitResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.CheckPayoutsLimitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.CheckPayoutsLimitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_CheckPayoutsLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPayoutsLimit'
type MockAccountingServiceServer_CheckPayoutsLimit_Call struct {
	*mock.Call
}

// CheckPayoutsLimit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.CheckPayoutsLimitRequest
func (_e *MockAccountingServiceServer_Expecter) CheckPayoutsLimit(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_CheckPayoutsLimit_Call {
	return &MockAccountingServiceServer_CheckPayoutsLimit_Call{Call: _e.mock.On("CheckPayoutsLimit", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_CheckPayoutsLimit_Call) Run(run func(_a0 context.Context, _a1 *accounting.CheckPayoutsLimitRequest)) *MockAccountingServiceServer_CheckPayoutsLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.CheckPayoutsLimitRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_CheckPayoutsLimit_Call) Return(_a0 *accounting.CheckPayoutsLimitResponse, _a1 error) *MockAccountingServiceServer_CheckPayoutsLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_CheckPayoutsLimit_Call) RunAndReturn(run func(context.Context, *accounting.CheckPayoutsLimitRequest) (*accounting.CheckPayoutsLimitResponse, error)) *MockAccountingServiceServer_CheckPayoutsLimit_Call {
	_c.Call.Return(run)
	return _c
}

// FindBalancesDiffMining provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindBalancesDiffMining(_a0 context.Context, _a1 *accounting.FindBalancesDiffMiningRequest) (*accounting.FindBalancesDiffMiningResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindBalancesDiffMining")
	}

	var r0 *accounting.FindBalancesDiffMiningResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindBalancesDiffMiningRequest) (*accounting.FindBalancesDiffMiningResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindBalancesDiffMiningRequest) *accounting.FindBalancesDiffMiningResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindBalancesDiffMiningResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindBalancesDiffMiningRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindBalancesDiffMining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBalancesDiffMining'
type MockAccountingServiceServer_FindBalancesDiffMining_Call struct {
	*mock.Call
}

// FindBalancesDiffMining is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindBalancesDiffMiningRequest
func (_e *MockAccountingServiceServer_Expecter) FindBalancesDiffMining(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindBalancesDiffMining_Call {
	return &MockAccountingServiceServer_FindBalancesDiffMining_Call{Call: _e.mock.On("FindBalancesDiffMining", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindBalancesDiffMining_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindBalancesDiffMiningRequest)) *MockAccountingServiceServer_FindBalancesDiffMining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindBalancesDiffMiningRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindBalancesDiffMining_Call) Return(_a0 *accounting.FindBalancesDiffMiningResponse, _a1 error) *MockAccountingServiceServer_FindBalancesDiffMining_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindBalancesDiffMining_Call) RunAndReturn(run func(context.Context, *accounting.FindBalancesDiffMiningRequest) (*accounting.FindBalancesDiffMiningResponse, error)) *MockAccountingServiceServer_FindBalancesDiffMining_Call {
	_c.Call.Return(run)
	return _c
}

// FindBalancesDiffWallet provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindBalancesDiffWallet(_a0 context.Context, _a1 *accounting.FindBalancesDiffWalletRequest) (*accounting.FindBalancesDiffWalletResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindBalancesDiffWallet")
	}

	var r0 *accounting.FindBalancesDiffWalletResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindBalancesDiffWalletRequest) (*accounting.FindBalancesDiffWalletResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindBalancesDiffWalletRequest) *accounting.FindBalancesDiffWalletResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindBalancesDiffWalletResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindBalancesDiffWalletRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindBalancesDiffWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBalancesDiffWallet'
type MockAccountingServiceServer_FindBalancesDiffWallet_Call struct {
	*mock.Call
}

// FindBalancesDiffWallet is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindBalancesDiffWalletRequest
func (_e *MockAccountingServiceServer_Expecter) FindBalancesDiffWallet(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindBalancesDiffWallet_Call {
	return &MockAccountingServiceServer_FindBalancesDiffWallet_Call{Call: _e.mock.On("FindBalancesDiffWallet", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindBalancesDiffWallet_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindBalancesDiffWalletRequest)) *MockAccountingServiceServer_FindBalancesDiffWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindBalancesDiffWalletRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindBalancesDiffWallet_Call) Return(_a0 *accounting.FindBalancesDiffWalletResponse, _a1 error) *MockAccountingServiceServer_FindBalancesDiffWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindBalancesDiffWallet_Call) RunAndReturn(run func(context.Context, *accounting.FindBalancesDiffWalletRequest) (*accounting.FindBalancesDiffWalletResponse, error)) *MockAccountingServiceServer_FindBalancesDiffWallet_Call {
	_c.Call.Return(run)
	return _c
}

// FindBatchOperations provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindBatchOperations(_a0 context.Context, _a1 *accounting.FindBatchOperationsRequest) (*accounting.FindBatchOperationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindBatchOperations")
	}

	var r0 *accounting.FindBatchOperationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindBatchOperationsRequest) (*accounting.FindBatchOperationsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindBatchOperationsRequest) *accounting.FindBatchOperationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindBatchOperationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindBatchOperationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindBatchOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBatchOperations'
type MockAccountingServiceServer_FindBatchOperations_Call struct {
	*mock.Call
}

// FindBatchOperations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindBatchOperationsRequest
func (_e *MockAccountingServiceServer_Expecter) FindBatchOperations(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindBatchOperations_Call {
	return &MockAccountingServiceServer_FindBatchOperations_Call{Call: _e.mock.On("FindBatchOperations", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindBatchOperations_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindBatchOperationsRequest)) *MockAccountingServiceServer_FindBatchOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindBatchOperationsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindBatchOperations_Call) Return(_a0 *accounting.FindBatchOperationsResponse, _a1 error) *MockAccountingServiceServer_FindBatchOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindBatchOperations_Call) RunAndReturn(run func(context.Context, *accounting.FindBatchOperationsRequest) (*accounting.FindBatchOperationsResponse, error)) *MockAccountingServiceServer_FindBatchOperations_Call {
	_c.Call.Return(run)
	return _c
}

// FindLastBlockTimeBalances provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindLastBlockTimeBalances(_a0 context.Context, _a1 *accounting.FindLastBlockTimeBalancesRequest) (*accounting.FindLastBlockTimeBalancesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindLastBlockTimeBalances")
	}

	var r0 *accounting.FindLastBlockTimeBalancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindLastBlockTimeBalancesRequest) (*accounting.FindLastBlockTimeBalancesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindLastBlockTimeBalancesRequest) *accounting.FindLastBlockTimeBalancesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindLastBlockTimeBalancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindLastBlockTimeBalancesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindLastBlockTimeBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLastBlockTimeBalances'
type MockAccountingServiceServer_FindLastBlockTimeBalances_Call struct {
	*mock.Call
}

// FindLastBlockTimeBalances is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindLastBlockTimeBalancesRequest
func (_e *MockAccountingServiceServer_Expecter) FindLastBlockTimeBalances(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindLastBlockTimeBalances_Call {
	return &MockAccountingServiceServer_FindLastBlockTimeBalances_Call{Call: _e.mock.On("FindLastBlockTimeBalances", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindLastBlockTimeBalances_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindLastBlockTimeBalancesRequest)) *MockAccountingServiceServer_FindLastBlockTimeBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindLastBlockTimeBalancesRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindLastBlockTimeBalances_Call) Return(_a0 *accounting.FindLastBlockTimeBalancesResponse, _a1 error) *MockAccountingServiceServer_FindLastBlockTimeBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindLastBlockTimeBalances_Call) RunAndReturn(run func(context.Context, *accounting.FindLastBlockTimeBalancesRequest) (*accounting.FindLastBlockTimeBalancesResponse, error)) *MockAccountingServiceServer_FindLastBlockTimeBalances_Call {
	_c.Call.Return(run)
	return _c
}

// FindOperations provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindOperations(_a0 context.Context, _a1 *accounting.FindOperationsRequest) (*accounting.FindOperationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindOperations")
	}

	var r0 *accounting.FindOperationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindOperationsRequest) (*accounting.FindOperationsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindOperationsRequest) *accounting.FindOperationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindOperationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindOperationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOperations'
type MockAccountingServiceServer_FindOperations_Call struct {
	*mock.Call
}

// FindOperations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindOperationsRequest
func (_e *MockAccountingServiceServer_Expecter) FindOperations(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindOperations_Call {
	return &MockAccountingServiceServer_FindOperations_Call{Call: _e.mock.On("FindOperations", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindOperations_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindOperationsRequest)) *MockAccountingServiceServer_FindOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindOperationsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindOperations_Call) Return(_a0 *accounting.FindOperationsResponse, _a1 error) *MockAccountingServiceServer_FindOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindOperations_Call) RunAndReturn(run func(context.Context, *accounting.FindOperationsRequest) (*accounting.FindOperationsResponse, error)) *MockAccountingServiceServer_FindOperations_Call {
	_c.Call.Return(run)
	return _c
}

// FindOperationsAndTransactions provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindOperationsAndTransactions(_a0 context.Context, _a1 *accounting.FindOperationsAndTransactionsRequest) (*accounting.FindOperationsAndTransactionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindOperationsAndTransactions")
	}

	var r0 *accounting.FindOperationsAndTransactionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindOperationsAndTransactionsRequest) (*accounting.FindOperationsAndTransactionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindOperationsAndTransactionsRequest) *accounting.FindOperationsAndTransactionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindOperationsAndTransactionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindOperationsAndTransactionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindOperationsAndTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOperationsAndTransactions'
type MockAccountingServiceServer_FindOperationsAndTransactions_Call struct {
	*mock.Call
}

// FindOperationsAndTransactions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindOperationsAndTransactionsRequest
func (_e *MockAccountingServiceServer_Expecter) FindOperationsAndTransactions(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindOperationsAndTransactions_Call {
	return &MockAccountingServiceServer_FindOperationsAndTransactions_Call{Call: _e.mock.On("FindOperationsAndTransactions", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindOperationsAndTransactions_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindOperationsAndTransactionsRequest)) *MockAccountingServiceServer_FindOperationsAndTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindOperationsAndTransactionsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindOperationsAndTransactions_Call) Return(_a0 *accounting.FindOperationsAndTransactionsResponse, _a1 error) *MockAccountingServiceServer_FindOperationsAndTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindOperationsAndTransactions_Call) RunAndReturn(run func(context.Context, *accounting.FindOperationsAndTransactionsRequest) (*accounting.FindOperationsAndTransactionsResponse, error)) *MockAccountingServiceServer_FindOperationsAndTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// FindPayoutsForBlock provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindPayoutsForBlock(_a0 context.Context, _a1 *accounting.FindPayoutsForBlockRequest) (*accounting.FindPayoutsForBlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindPayoutsForBlock")
	}

	var r0 *accounting.FindPayoutsForBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindPayoutsForBlockRequest) (*accounting.FindPayoutsForBlockResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindPayoutsForBlockRequest) *accounting.FindPayoutsForBlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindPayoutsForBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindPayoutsForBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindPayoutsForBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPayoutsForBlock'
type MockAccountingServiceServer_FindPayoutsForBlock_Call struct {
	*mock.Call
}

// FindPayoutsForBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindPayoutsForBlockRequest
func (_e *MockAccountingServiceServer_Expecter) FindPayoutsForBlock(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindPayoutsForBlock_Call {
	return &MockAccountingServiceServer_FindPayoutsForBlock_Call{Call: _e.mock.On("FindPayoutsForBlock", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindPayoutsForBlock_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindPayoutsForBlockRequest)) *MockAccountingServiceServer_FindPayoutsForBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindPayoutsForBlockRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindPayoutsForBlock_Call) Return(_a0 *accounting.FindPayoutsForBlockResponse, _a1 error) *MockAccountingServiceServer_FindPayoutsForBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindPayoutsForBlock_Call) RunAndReturn(run func(context.Context, *accounting.FindPayoutsForBlockRequest) (*accounting.FindPayoutsForBlockResponse, error)) *MockAccountingServiceServer_FindPayoutsForBlock_Call {
	_c.Call.Return(run)
	return _c
}

// FindTransactions provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindTransactions(_a0 context.Context, _a1 *accounting.FindTransactionsRequest) (*accounting.FindTransactionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactions")
	}

	var r0 *accounting.FindTransactionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindTransactionsRequest) (*accounting.FindTransactionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindTransactionsRequest) *accounting.FindTransactionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindTransactionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindTransactionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTransactions'
type MockAccountingServiceServer_FindTransactions_Call struct {
	*mock.Call
}

// FindTransactions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindTransactionsRequest
func (_e *MockAccountingServiceServer_Expecter) FindTransactions(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindTransactions_Call {
	return &MockAccountingServiceServer_FindTransactions_Call{Call: _e.mock.On("FindTransactions", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindTransactions_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindTransactionsRequest)) *MockAccountingServiceServer_FindTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindTransactionsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindTransactions_Call) Return(_a0 *accounting.FindTransactionsResponse, _a1 error) *MockAccountingServiceServer_FindTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindTransactions_Call) RunAndReturn(run func(context.Context, *accounting.FindTransactionsRequest) (*accounting.FindTransactionsResponse, error)) *MockAccountingServiceServer_FindTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// FindTransactionsByCollectorFilter provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindTransactionsByCollectorFilter(_a0 context.Context, _a1 *accounting.TransactionCollectorFilter) (*accounting.TransactionMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionsByCollectorFilter")
	}

	var r0 *accounting.TransactionMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.TransactionCollectorFilter) (*accounting.TransactionMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.TransactionCollectorFilter) *accounting.TransactionMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.TransactionMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.TransactionCollectorFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTransactionsByCollectorFilter'
type MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call struct {
	*mock.Call
}

// FindTransactionsByCollectorFilter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.TransactionCollectorFilter
func (_e *MockAccountingServiceServer_Expecter) FindTransactionsByCollectorFilter(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call {
	return &MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call{Call: _e.mock.On("FindTransactionsByCollectorFilter", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call) Run(run func(_a0 context.Context, _a1 *accounting.TransactionCollectorFilter)) *MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.TransactionCollectorFilter))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call) Return(_a0 *accounting.TransactionMultiResponse, _a1 error) *MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call) RunAndReturn(run func(context.Context, *accounting.TransactionCollectorFilter) (*accounting.TransactionMultiResponse, error)) *MockAccountingServiceServer_FindTransactionsByCollectorFilter_Call {
	_c.Call.Return(run)
	return _c
}

// FindTransactionsWithBlocks provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) FindTransactionsWithBlocks(_a0 context.Context, _a1 *accounting.FindTransactionsWithBlocksRequest) (*accounting.FindTransactionsWithBlocksResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionsWithBlocks")
	}

	var r0 *accounting.FindTransactionsWithBlocksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindTransactionsWithBlocksRequest) (*accounting.FindTransactionsWithBlocksResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.FindTransactionsWithBlocksRequest) *accounting.FindTransactionsWithBlocksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.FindTransactionsWithBlocksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.FindTransactionsWithBlocksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_FindTransactionsWithBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTransactionsWithBlocks'
type MockAccountingServiceServer_FindTransactionsWithBlocks_Call struct {
	*mock.Call
}

// FindTransactionsWithBlocks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.FindTransactionsWithBlocksRequest
func (_e *MockAccountingServiceServer_Expecter) FindTransactionsWithBlocks(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_FindTransactionsWithBlocks_Call {
	return &MockAccountingServiceServer_FindTransactionsWithBlocks_Call{Call: _e.mock.On("FindTransactionsWithBlocks", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_FindTransactionsWithBlocks_Call) Run(run func(_a0 context.Context, _a1 *accounting.FindTransactionsWithBlocksRequest)) *MockAccountingServiceServer_FindTransactionsWithBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.FindTransactionsWithBlocksRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_FindTransactionsWithBlocks_Call) Return(_a0 *accounting.FindTransactionsWithBlocksResponse, _a1 error) *MockAccountingServiceServer_FindTransactionsWithBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_FindTransactionsWithBlocks_Call) RunAndReturn(run func(context.Context, *accounting.FindTransactionsWithBlocksRequest) (*accounting.FindTransactionsWithBlocksResponse, error)) *MockAccountingServiceServer_FindTransactionsWithBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetAveragePaid provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetAveragePaid(_a0 context.Context, _a1 *accounting.GetAveragePaidRequest) (*accounting.GetAveragePaidResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAveragePaid")
	}

	var r0 *accounting.GetAveragePaidResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetAveragePaidRequest) (*accounting.GetAveragePaidResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetAveragePaidRequest) *accounting.GetAveragePaidResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetAveragePaidResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetAveragePaidRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetAveragePaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAveragePaid'
type MockAccountingServiceServer_GetAveragePaid_Call struct {
	*mock.Call
}

// GetAveragePaid is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetAveragePaidRequest
func (_e *MockAccountingServiceServer_Expecter) GetAveragePaid(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetAveragePaid_Call {
	return &MockAccountingServiceServer_GetAveragePaid_Call{Call: _e.mock.On("GetAveragePaid", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetAveragePaid_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetAveragePaidRequest)) *MockAccountingServiceServer_GetAveragePaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetAveragePaidRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetAveragePaid_Call) Return(_a0 *accounting.GetAveragePaidResponse, _a1 error) *MockAccountingServiceServer_GetAveragePaid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetAveragePaid_Call) RunAndReturn(run func(context.Context, *accounting.GetAveragePaidRequest) (*accounting.GetAveragePaidResponse, error)) *MockAccountingServiceServer_GetAveragePaid_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalanceBeforeTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetBalanceBeforeTransaction(_a0 context.Context, _a1 *accounting.GetBalanceBeforeTransactionRequest) (*accounting.GetBalanceBeforeTransactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceBeforeTransaction")
	}

	var r0 *accounting.GetBalanceBeforeTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetBalanceBeforeTransactionRequest) (*accounting.GetBalanceBeforeTransactionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetBalanceBeforeTransactionRequest) *accounting.GetBalanceBeforeTransactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetBalanceBeforeTransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetBalanceBeforeTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetBalanceBeforeTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceBeforeTransaction'
type MockAccountingServiceServer_GetBalanceBeforeTransaction_Call struct {
	*mock.Call
}

// GetBalanceBeforeTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetBalanceBeforeTransactionRequest
func (_e *MockAccountingServiceServer_Expecter) GetBalanceBeforeTransaction(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetBalanceBeforeTransaction_Call {
	return &MockAccountingServiceServer_GetBalanceBeforeTransaction_Call{Call: _e.mock.On("GetBalanceBeforeTransaction", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetBalanceBeforeTransaction_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetBalanceBeforeTransactionRequest)) *MockAccountingServiceServer_GetBalanceBeforeTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetBalanceBeforeTransactionRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetBalanceBeforeTransaction_Call) Return(_a0 *accounting.GetBalanceBeforeTransactionResponse, _a1 error) *MockAccountingServiceServer_GetBalanceBeforeTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetBalanceBeforeTransaction_Call) RunAndReturn(run func(context.Context, *accounting.GetBalanceBeforeTransactionRequest) (*accounting.GetBalanceBeforeTransactionResponse, error)) *MockAccountingServiceServer_GetBalanceBeforeTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalanceByCoin provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetBalanceByCoin(_a0 context.Context, _a1 *accounting.GetBalanceByCoinRequest) (*accounting.GetBalanceByCoinResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceByCoin")
	}

	var r0 *accounting.GetBalanceByCoinResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetBalanceByCoinRequest) (*accounting.GetBalanceByCoinResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetBalanceByCoinRequest) *accounting.GetBalanceByCoinResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetBalanceByCoinResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetBalanceByCoinRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetBalanceByCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalanceByCoin'
type MockAccountingServiceServer_GetBalanceByCoin_Call struct {
	*mock.Call
}

// GetBalanceByCoin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetBalanceByCoinRequest
func (_e *MockAccountingServiceServer_Expecter) GetBalanceByCoin(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetBalanceByCoin_Call {
	return &MockAccountingServiceServer_GetBalanceByCoin_Call{Call: _e.mock.On("GetBalanceByCoin", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetBalanceByCoin_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetBalanceByCoinRequest)) *MockAccountingServiceServer_GetBalanceByCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetBalanceByCoinRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetBalanceByCoin_Call) Return(_a0 *accounting.GetBalanceByCoinResponse, _a1 error) *MockAccountingServiceServer_GetBalanceByCoin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetBalanceByCoin_Call) RunAndReturn(run func(context.Context, *accounting.GetBalanceByCoinRequest) (*accounting.GetBalanceByCoinResponse, error)) *MockAccountingServiceServer_GetBalanceByCoin_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalances provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetBalances(_a0 context.Context, _a1 *accounting.UserIDRequest) (*accounting.GetBalancesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBalances")
	}

	var r0 *accounting.GetBalancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.UserIDRequest) (*accounting.GetBalancesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.UserIDRequest) *accounting.GetBalancesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetBalancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.UserIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalances'
type MockAccountingServiceServer_GetBalances_Call struct {
	*mock.Call
}

// GetBalances is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.UserIDRequest
func (_e *MockAccountingServiceServer_Expecter) GetBalances(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetBalances_Call {
	return &MockAccountingServiceServer_GetBalances_Call{Call: _e.mock.On("GetBalances", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetBalances_Call) Run(run func(_a0 context.Context, _a1 *accounting.UserIDRequest)) *MockAccountingServiceServer_GetBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.UserIDRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetBalances_Call) Return(_a0 *accounting.GetBalancesResponse, _a1 error) *MockAccountingServiceServer_GetBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetBalances_Call) RunAndReturn(run func(context.Context, *accounting.UserIDRequest) (*accounting.GetBalancesResponse, error)) *MockAccountingServiceServer_GetBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheckFreezePayoutsBlocks provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetCheckFreezePayoutsBlocks(_a0 context.Context, _a1 *accounting.GetCheckFreezePayoutsBlocksRequest) (*accounting.GetCheckFreezePayoutsBlocksResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckFreezePayoutsBlocks")
	}

	var r0 *accounting.GetCheckFreezePayoutsBlocksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCheckFreezePayoutsBlocksRequest) (*accounting.GetCheckFreezePayoutsBlocksResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCheckFreezePayoutsBlocksRequest) *accounting.GetCheckFreezePayoutsBlocksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetCheckFreezePayoutsBlocksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetCheckFreezePayoutsBlocksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckFreezePayoutsBlocks'
type MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call struct {
	*mock.Call
}

// GetCheckFreezePayoutsBlocks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetCheckFreezePayoutsBlocksRequest
func (_e *MockAccountingServiceServer_Expecter) GetCheckFreezePayoutsBlocks(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call {
	return &MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call{Call: _e.mock.On("GetCheckFreezePayoutsBlocks", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetCheckFreezePayoutsBlocksRequest)) *MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetCheckFreezePayoutsBlocksRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call) Return(_a0 *accounting.GetCheckFreezePayoutsBlocksResponse, _a1 error) *MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call) RunAndReturn(run func(context.Context, *accounting.GetCheckFreezePayoutsBlocksRequest) (*accounting.GetCheckFreezePayoutsBlocksResponse, error)) *MockAccountingServiceServer_GetCheckFreezePayoutsBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheckTransactionCoins provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetCheckTransactionCoins(_a0 context.Context, _a1 *accounting.GetCheckTransactionCoinsRequest) (*accounting.GetCheckTransactionCoinsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckTransactionCoins")
	}

	var r0 *accounting.GetCheckTransactionCoinsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCheckTransactionCoinsRequest) (*accounting.GetCheckTransactionCoinsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCheckTransactionCoinsRequest) *accounting.GetCheckTransactionCoinsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetCheckTransactionCoinsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetCheckTransactionCoinsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetCheckTransactionCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckTransactionCoins'
type MockAccountingServiceServer_GetCheckTransactionCoins_Call struct {
	*mock.Call
}

// GetCheckTransactionCoins is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetCheckTransactionCoinsRequest
func (_e *MockAccountingServiceServer_Expecter) GetCheckTransactionCoins(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetCheckTransactionCoins_Call {
	return &MockAccountingServiceServer_GetCheckTransactionCoins_Call{Call: _e.mock.On("GetCheckTransactionCoins", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetCheckTransactionCoins_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetCheckTransactionCoinsRequest)) *MockAccountingServiceServer_GetCheckTransactionCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetCheckTransactionCoinsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetCheckTransactionCoins_Call) Return(_a0 *accounting.GetCheckTransactionCoinsResponse, _a1 error) *MockAccountingServiceServer_GetCheckTransactionCoins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetCheckTransactionCoins_Call) RunAndReturn(run func(context.Context, *accounting.GetCheckTransactionCoinsRequest) (*accounting.GetCheckTransactionCoinsResponse, error)) *MockAccountingServiceServer_GetCheckTransactionCoins_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoinsOperationsSum provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetCoinsOperationsSum(_a0 context.Context, _a1 *accounting.GetCoinsOperationsSumRequest) (*accounting.GetCoinsOperationsSumResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsOperationsSum")
	}

	var r0 *accounting.GetCoinsOperationsSumResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCoinsOperationsSumRequest) (*accounting.GetCoinsOperationsSumResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCoinsOperationsSumRequest) *accounting.GetCoinsOperationsSumResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetCoinsOperationsSumResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetCoinsOperationsSumRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetCoinsOperationsSum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoinsOperationsSum'
type MockAccountingServiceServer_GetCoinsOperationsSum_Call struct {
	*mock.Call
}

// GetCoinsOperationsSum is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetCoinsOperationsSumRequest
func (_e *MockAccountingServiceServer_Expecter) GetCoinsOperationsSum(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetCoinsOperationsSum_Call {
	return &MockAccountingServiceServer_GetCoinsOperationsSum_Call{Call: _e.mock.On("GetCoinsOperationsSum", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetCoinsOperationsSum_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetCoinsOperationsSumRequest)) *MockAccountingServiceServer_GetCoinsOperationsSum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetCoinsOperationsSumRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetCoinsOperationsSum_Call) Return(_a0 *accounting.GetCoinsOperationsSumResponse, _a1 error) *MockAccountingServiceServer_GetCoinsOperationsSum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetCoinsOperationsSum_Call) RunAndReturn(run func(context.Context, *accounting.GetCoinsOperationsSumRequest) (*accounting.GetCoinsOperationsSumResponse, error)) *MockAccountingServiceServer_GetCoinsOperationsSum_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoinsSummary provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetCoinsSummary(_a0 context.Context, _a1 *accounting.UserIDRequest) (*accounting.GetCoinsSummaryResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsSummary")
	}

	var r0 *accounting.GetCoinsSummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.UserIDRequest) (*accounting.GetCoinsSummaryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.UserIDRequest) *accounting.GetCoinsSummaryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetCoinsSummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.UserIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetCoinsSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoinsSummary'
type MockAccountingServiceServer_GetCoinsSummary_Call struct {
	*mock.Call
}

// GetCoinsSummary is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.UserIDRequest
func (_e *MockAccountingServiceServer_Expecter) GetCoinsSummary(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetCoinsSummary_Call {
	return &MockAccountingServiceServer_GetCoinsSummary_Call{Call: _e.mock.On("GetCoinsSummary", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetCoinsSummary_Call) Run(run func(_a0 context.Context, _a1 *accounting.UserIDRequest)) *MockAccountingServiceServer_GetCoinsSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.UserIDRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetCoinsSummary_Call) Return(_a0 *accounting.GetCoinsSummaryResponse, _a1 error) *MockAccountingServiceServer_GetCoinsSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetCoinsSummary_Call) RunAndReturn(run func(context.Context, *accounting.UserIDRequest) (*accounting.GetCoinsSummaryResponse, error)) *MockAccountingServiceServer_GetCoinsSummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentPayoutsBlock provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetCurrentPayoutsBlock(_a0 context.Context, _a1 *accounting.GetCurrentPayoutsBlockRequest) (*accounting.GetCurrentPayoutsBlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentPayoutsBlock")
	}

	var r0 *accounting.GetCurrentPayoutsBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCurrentPayoutsBlockRequest) (*accounting.GetCurrentPayoutsBlockResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCurrentPayoutsBlockRequest) *accounting.GetCurrentPayoutsBlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetCurrentPayoutsBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetCurrentPayoutsBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetCurrentPayoutsBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentPayoutsBlock'
type MockAccountingServiceServer_GetCurrentPayoutsBlock_Call struct {
	*mock.Call
}

// GetCurrentPayoutsBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetCurrentPayoutsBlockRequest
func (_e *MockAccountingServiceServer_Expecter) GetCurrentPayoutsBlock(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetCurrentPayoutsBlock_Call {
	return &MockAccountingServiceServer_GetCurrentPayoutsBlock_Call{Call: _e.mock.On("GetCurrentPayoutsBlock", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetCurrentPayoutsBlock_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetCurrentPayoutsBlockRequest)) *MockAccountingServiceServer_GetCurrentPayoutsBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetCurrentPayoutsBlockRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetCurrentPayoutsBlock_Call) Return(_a0 *accounting.GetCurrentPayoutsBlockResponse, _a1 error) *MockAccountingServiceServer_GetCurrentPayoutsBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetCurrentPayoutsBlock_Call) RunAndReturn(run func(context.Context, *accounting.GetCurrentPayoutsBlockRequest) (*accounting.GetCurrentPayoutsBlockResponse, error)) *MockAccountingServiceServer_GetCurrentPayoutsBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentPayoutsList provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetCurrentPayoutsList(_a0 context.Context, _a1 *accounting.GetCurrentPayoutsListRequest) (*accounting.GetCurrentPayoutsListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentPayoutsList")
	}

	var r0 *accounting.GetCurrentPayoutsListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCurrentPayoutsListRequest) (*accounting.GetCurrentPayoutsListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCurrentPayoutsListRequest) *accounting.GetCurrentPayoutsListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetCurrentPayoutsListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetCurrentPayoutsListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetCurrentPayoutsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentPayoutsList'
type MockAccountingServiceServer_GetCurrentPayoutsList_Call struct {
	*mock.Call
}

// GetCurrentPayoutsList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetCurrentPayoutsListRequest
func (_e *MockAccountingServiceServer_Expecter) GetCurrentPayoutsList(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetCurrentPayoutsList_Call {
	return &MockAccountingServiceServer_GetCurrentPayoutsList_Call{Call: _e.mock.On("GetCurrentPayoutsList", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetCurrentPayoutsList_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetCurrentPayoutsListRequest)) *MockAccountingServiceServer_GetCurrentPayoutsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetCurrentPayoutsListRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetCurrentPayoutsList_Call) Return(_a0 *accounting.GetCurrentPayoutsListResponse, _a1 error) *MockAccountingServiceServer_GetCurrentPayoutsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetCurrentPayoutsList_Call) RunAndReturn(run func(context.Context, *accounting.GetCurrentPayoutsListRequest) (*accounting.GetCurrentPayoutsListResponse, error)) *MockAccountingServiceServer_GetCurrentPayoutsList_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentReferralsPayoutsList provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetCurrentReferralsPayoutsList(_a0 context.Context, _a1 *accounting.GetCurrentReferralsPayoutsListRequest) (*accounting.GetCurrentReferralsPayoutsListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentReferralsPayoutsList")
	}

	var r0 *accounting.GetCurrentReferralsPayoutsListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCurrentReferralsPayoutsListRequest) (*accounting.GetCurrentReferralsPayoutsListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetCurrentReferralsPayoutsListRequest) *accounting.GetCurrentReferralsPayoutsListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetCurrentReferralsPayoutsListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetCurrentReferralsPayoutsListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentReferralsPayoutsList'
type MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call struct {
	*mock.Call
}

// GetCurrentReferralsPayoutsList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetCurrentReferralsPayoutsListRequest
func (_e *MockAccountingServiceServer_Expecter) GetCurrentReferralsPayoutsList(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call {
	return &MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call{Call: _e.mock.On("GetCurrentReferralsPayoutsList", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetCurrentReferralsPayoutsListRequest)) *MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetCurrentReferralsPayoutsListRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call) Return(_a0 *accounting.GetCurrentReferralsPayoutsListResponse, _a1 error) *MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call) RunAndReturn(run func(context.Context, *accounting.GetCurrentReferralsPayoutsListRequest) (*accounting.GetCurrentReferralsPayoutsListResponse, error)) *MockAccountingServiceServer_GetCurrentReferralsPayoutsList_Call {
	_c.Call.Return(run)
	return _c
}

// GetFreePayouts provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetFreePayouts(_a0 context.Context, _a1 *accounting.GetFreePayoutsRequest) (*accounting.GetFreePayoutsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetFreePayouts")
	}

	var r0 *accounting.GetFreePayoutsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetFreePayoutsRequest) (*accounting.GetFreePayoutsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetFreePayoutsRequest) *accounting.GetFreePayoutsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetFreePayoutsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetFreePayoutsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetFreePayouts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFreePayouts'
type MockAccountingServiceServer_GetFreePayouts_Call struct {
	*mock.Call
}

// GetFreePayouts is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetFreePayoutsRequest
func (_e *MockAccountingServiceServer_Expecter) GetFreePayouts(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetFreePayouts_Call {
	return &MockAccountingServiceServer_GetFreePayouts_Call{Call: _e.mock.On("GetFreePayouts", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetFreePayouts_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetFreePayoutsRequest)) *MockAccountingServiceServer_GetFreePayouts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetFreePayoutsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetFreePayouts_Call) Return(_a0 *accounting.GetFreePayoutsResponse, _a1 error) *MockAccountingServiceServer_GetFreePayouts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetFreePayouts_Call) RunAndReturn(run func(context.Context, *accounting.GetFreePayoutsRequest) (*accounting.GetFreePayoutsResponse, error)) *MockAccountingServiceServer_GetFreePayouts_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetHistory(_a0 context.Context, _a1 *accounting.GetHistoryRequest) (*accounting.GetHistoryResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *accounting.GetHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetHistoryRequest) (*accounting.GetHistoryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetHistoryRequest) *accounting.GetHistoryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetHistoryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type MockAccountingServiceServer_GetHistory_Call struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetHistoryRequest
func (_e *MockAccountingServiceServer_Expecter) GetHistory(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetHistory_Call {
	return &MockAccountingServiceServer_GetHistory_Call{Call: _e.mock.On("GetHistory", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetHistory_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetHistoryRequest)) *MockAccountingServiceServer_GetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetHistoryRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetHistory_Call) Return(_a0 *accounting.GetHistoryResponse, _a1 error) *MockAccountingServiceServer_GetHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetHistory_Call) RunAndReturn(run func(context.Context, *accounting.GetHistoryRequest) (*accounting.GetHistoryResponse, error)) *MockAccountingServiceServer_GetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetIncomesHashrateByDate provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetIncomesHashrateByDate(_a0 context.Context, _a1 *accounting.GetIncomesHashrateRequest) (*accounting.GetIncomesHashrateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetIncomesHashrateByDate")
	}

	var r0 *accounting.GetIncomesHashrateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetIncomesHashrateRequest) (*accounting.GetIncomesHashrateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetIncomesHashrateRequest) *accounting.GetIncomesHashrateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetIncomesHashrateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetIncomesHashrateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetIncomesHashrateByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIncomesHashrateByDate'
type MockAccountingServiceServer_GetIncomesHashrateByDate_Call struct {
	*mock.Call
}

// GetIncomesHashrateByDate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetIncomesHashrateRequest
func (_e *MockAccountingServiceServer_Expecter) GetIncomesHashrateByDate(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetIncomesHashrateByDate_Call {
	return &MockAccountingServiceServer_GetIncomesHashrateByDate_Call{Call: _e.mock.On("GetIncomesHashrateByDate", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetIncomesHashrateByDate_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetIncomesHashrateRequest)) *MockAccountingServiceServer_GetIncomesHashrateByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetIncomesHashrateRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetIncomesHashrateByDate_Call) Return(_a0 *accounting.GetIncomesHashrateResponse, _a1 error) *MockAccountingServiceServer_GetIncomesHashrateByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetIncomesHashrateByDate_Call) RunAndReturn(run func(context.Context, *accounting.GetIncomesHashrateRequest) (*accounting.GetIncomesHashrateResponse, error)) *MockAccountingServiceServer_GetIncomesHashrateByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaid provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetPaid(_a0 context.Context, _a1 *accounting.GetPaidRequest) (*accounting.GetPaidResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPaid")
	}

	var r0 *accounting.GetPaidResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetPaidRequest) (*accounting.GetPaidResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetPaidRequest) *accounting.GetPaidResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetPaidResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetPaidRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaid'
type MockAccountingServiceServer_GetPaid_Call struct {
	*mock.Call
}

// GetPaid is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetPaidRequest
func (_e *MockAccountingServiceServer_Expecter) GetPaid(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetPaid_Call {
	return &MockAccountingServiceServer_GetPaid_Call{Call: _e.mock.On("GetPaid", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetPaid_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetPaidRequest)) *MockAccountingServiceServer_GetPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetPaidRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetPaid_Call) Return(_a0 *accounting.GetPaidResponse, _a1 error) *MockAccountingServiceServer_GetPaid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetPaid_Call) RunAndReturn(run func(context.Context, *accounting.GetPaidRequest) (*accounting.GetPaidResponse, error)) *MockAccountingServiceServer_GetPaid_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayoutsBlockStatus provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetPayoutsBlockStatus(_a0 context.Context, _a1 *accounting.GetPayoutsBlockStatusRequest) (*accounting.GetPayoutsBlockStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPayoutsBlockStatus")
	}

	var r0 *accounting.GetPayoutsBlockStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetPayoutsBlockStatusRequest) (*accounting.GetPayoutsBlockStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetPayoutsBlockStatusRequest) *accounting.GetPayoutsBlockStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetPayoutsBlockStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetPayoutsBlockStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetPayoutsBlockStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayoutsBlockStatus'
type MockAccountingServiceServer_GetPayoutsBlockStatus_Call struct {
	*mock.Call
}

// GetPayoutsBlockStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetPayoutsBlockStatusRequest
func (_e *MockAccountingServiceServer_Expecter) GetPayoutsBlockStatus(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetPayoutsBlockStatus_Call {
	return &MockAccountingServiceServer_GetPayoutsBlockStatus_Call{Call: _e.mock.On("GetPayoutsBlockStatus", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetPayoutsBlockStatus_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetPayoutsBlockStatusRequest)) *MockAccountingServiceServer_GetPayoutsBlockStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetPayoutsBlockStatusRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetPayoutsBlockStatus_Call) Return(_a0 *accounting.GetPayoutsBlockStatusResponse, _a1 error) *MockAccountingServiceServer_GetPayoutsBlockStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetPayoutsBlockStatus_Call) RunAndReturn(run func(context.Context, *accounting.GetPayoutsBlockStatusRequest) (*accounting.GetPayoutsBlockStatusResponse, error)) *MockAccountingServiceServer_GetPayoutsBlockStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceUserData provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetServiceUserData(_a0 context.Context, _a1 *accounting.GetServiceUserDataRequest) (*accounting.GetServiceUserDataResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceUserData")
	}

	var r0 *accounting.GetServiceUserDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetServiceUserDataRequest) (*accounting.GetServiceUserDataResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetServiceUserDataRequest) *accounting.GetServiceUserDataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetServiceUserDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetServiceUserDataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetServiceUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceUserData'
type MockAccountingServiceServer_GetServiceUserData_Call struct {
	*mock.Call
}

// GetServiceUserData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetServiceUserDataRequest
func (_e *MockAccountingServiceServer_Expecter) GetServiceUserData(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetServiceUserData_Call {
	return &MockAccountingServiceServer_GetServiceUserData_Call{Call: _e.mock.On("GetServiceUserData", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetServiceUserData_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetServiceUserDataRequest)) *MockAccountingServiceServer_GetServiceUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetServiceUserDataRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetServiceUserData_Call) Return(_a0 *accounting.GetServiceUserDataResponse, _a1 error) *MockAccountingServiceServer_GetServiceUserData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetServiceUserData_Call) RunAndReturn(run func(context.Context, *accounting.GetServiceUserDataRequest) (*accounting.GetServiceUserDataResponse, error)) *MockAccountingServiceServer_GetServiceUserData_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetTransactionByID(_a0 context.Context, _a1 *accounting.GetTransactionByIDRequest) (*accounting.GetTransactionByIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *accounting.GetTransactionByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetTransactionByIDRequest) (*accounting.GetTransactionByIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetTransactionByIDRequest) *accounting.GetTransactionByIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetTransactionByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetTransactionByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type MockAccountingServiceServer_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetTransactionByIDRequest
func (_e *MockAccountingServiceServer_Expecter) GetTransactionByID(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetTransactionByID_Call {
	return &MockAccountingServiceServer_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetTransactionByID_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetTransactionByIDRequest)) *MockAccountingServiceServer_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetTransactionByIDRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetTransactionByID_Call) Return(_a0 *accounting.GetTransactionByIDResponse, _a1 error) *MockAccountingServiceServer_GetTransactionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetTransactionByID_Call) RunAndReturn(run func(context.Context, *accounting.GetTransactionByIDRequest) (*accounting.GetTransactionByIDResponse, error)) *MockAccountingServiceServer_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionIDByAction provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetTransactionIDByAction(_a0 context.Context, _a1 *accounting.GetTransactionIDByActionRequest) (*accounting.GetTransactionIDByActionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionIDByAction")
	}

	var r0 *accounting.GetTransactionIDByActionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetTransactionIDByActionRequest) (*accounting.GetTransactionIDByActionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetTransactionIDByActionRequest) *accounting.GetTransactionIDByActionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetTransactionIDByActionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetTransactionIDByActionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetTransactionIDByAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionIDByAction'
type MockAccountingServiceServer_GetTransactionIDByAction_Call struct {
	*mock.Call
}

// GetTransactionIDByAction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetTransactionIDByActionRequest
func (_e *MockAccountingServiceServer_Expecter) GetTransactionIDByAction(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetTransactionIDByAction_Call {
	return &MockAccountingServiceServer_GetTransactionIDByAction_Call{Call: _e.mock.On("GetTransactionIDByAction", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetTransactionIDByAction_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetTransactionIDByActionRequest)) *MockAccountingServiceServer_GetTransactionIDByAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetTransactionIDByActionRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetTransactionIDByAction_Call) Return(_a0 *accounting.GetTransactionIDByActionResponse, _a1 error) *MockAccountingServiceServer_GetTransactionIDByAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetTransactionIDByAction_Call) RunAndReturn(run func(context.Context, *accounting.GetTransactionIDByActionRequest) (*accounting.GetTransactionIDByActionResponse, error)) *MockAccountingServiceServer_GetTransactionIDByAction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionOperationsIntegrity provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetTransactionOperationsIntegrity(_a0 context.Context, _a1 *accounting.GetTransactionOperationsIntegrityRequest) (*accounting.GetTransactionOperationsIntegrityResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionOperationsIntegrity")
	}

	var r0 *accounting.GetTransactionOperationsIntegrityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetTransactionOperationsIntegrityRequest) (*accounting.GetTransactionOperationsIntegrityResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetTransactionOperationsIntegrityRequest) *accounting.GetTransactionOperationsIntegrityResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetTransactionOperationsIntegrityResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetTransactionOperationsIntegrityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionOperationsIntegrity'
type MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call struct {
	*mock.Call
}

// GetTransactionOperationsIntegrity is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetTransactionOperationsIntegrityRequest
func (_e *MockAccountingServiceServer_Expecter) GetTransactionOperationsIntegrity(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call {
	return &MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call{Call: _e.mock.On("GetTransactionOperationsIntegrity", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetTransactionOperationsIntegrityRequest)) *MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetTransactionOperationsIntegrityRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call) Return(_a0 *accounting.GetTransactionOperationsIntegrityResponse, _a1 error) *MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call) RunAndReturn(run func(context.Context, *accounting.GetTransactionOperationsIntegrityRequest) (*accounting.GetTransactionOperationsIntegrityResponse, error)) *MockAccountingServiceServer_GetTransactionOperationsIntegrity_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsByActionID provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetTransactionsByActionID(_a0 context.Context, _a1 *accounting.GetTransactionsByActionIDRequest) (*accounting.GetTransactionsByActionIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByActionID")
	}

	var r0 *accounting.GetTransactionsByActionIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetTransactionsByActionIDRequest) (*accounting.GetTransactionsByActionIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetTransactionsByActionIDRequest) *accounting.GetTransactionsByActionIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetTransactionsByActionIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetTransactionsByActionIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetTransactionsByActionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByActionID'
type MockAccountingServiceServer_GetTransactionsByActionID_Call struct {
	*mock.Call
}

// GetTransactionsByActionID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetTransactionsByActionIDRequest
func (_e *MockAccountingServiceServer_Expecter) GetTransactionsByActionID(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetTransactionsByActionID_Call {
	return &MockAccountingServiceServer_GetTransactionsByActionID_Call{Call: _e.mock.On("GetTransactionsByActionID", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetTransactionsByActionID_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetTransactionsByActionIDRequest)) *MockAccountingServiceServer_GetTransactionsByActionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetTransactionsByActionIDRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetTransactionsByActionID_Call) Return(_a0 *accounting.GetTransactionsByActionIDResponse, _a1 error) *MockAccountingServiceServer_GetTransactionsByActionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetTransactionsByActionID_Call) RunAndReturn(run func(context.Context, *accounting.GetTransactionsByActionIDRequest) (*accounting.GetTransactionsByActionIDResponse, error)) *MockAccountingServiceServer_GetTransactionsByActionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccount provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetUserAccount(_a0 context.Context, _a1 *accounting.GetUserAccountRequest) (*accounting.GetUserAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccount")
	}

	var r0 *accounting.GetUserAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetUserAccountRequest) (*accounting.GetUserAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetUserAccountRequest) *accounting.GetUserAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetUserAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetUserAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetUserAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccount'
type MockAccountingServiceServer_GetUserAccount_Call struct {
	*mock.Call
}

// GetUserAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetUserAccountRequest
func (_e *MockAccountingServiceServer_Expecter) GetUserAccount(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetUserAccount_Call {
	return &MockAccountingServiceServer_GetUserAccount_Call{Call: _e.mock.On("GetUserAccount", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetUserAccount_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetUserAccountRequest)) *MockAccountingServiceServer_GetUserAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetUserAccountRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetUserAccount_Call) Return(_a0 *accounting.GetUserAccountResponse, _a1 error) *MockAccountingServiceServer_GetUserAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetUserAccount_Call) RunAndReturn(run func(context.Context, *accounting.GetUserAccountRequest) (*accounting.GetUserAccountResponse, error)) *MockAccountingServiceServer_GetUserAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccounts provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) GetUserAccounts(_a0 context.Context, _a1 *accounting.GetUserAccountsRequest) (*accounting.GetUserAccountsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccounts")
	}

	var r0 *accounting.GetUserAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetUserAccountsRequest) (*accounting.GetUserAccountsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.GetUserAccountsRequest) *accounting.GetUserAccountsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.GetUserAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.GetUserAccountsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_GetUserAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccounts'
type MockAccountingServiceServer_GetUserAccounts_Call struct {
	*mock.Call
}

// GetUserAccounts is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.GetUserAccountsRequest
func (_e *MockAccountingServiceServer_Expecter) GetUserAccounts(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_GetUserAccounts_Call {
	return &MockAccountingServiceServer_GetUserAccounts_Call{Call: _e.mock.On("GetUserAccounts", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_GetUserAccounts_Call) Run(run func(_a0 context.Context, _a1 *accounting.GetUserAccountsRequest)) *MockAccountingServiceServer_GetUserAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.GetUserAccountsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_GetUserAccounts_Call) Return(_a0 *accounting.GetUserAccountsResponse, _a1 error) *MockAccountingServiceServer_GetUserAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_GetUserAccounts_Call) RunAndReturn(run func(context.Context, *accounting.GetUserAccountsRequest) (*accounting.GetUserAccountsResponse, error)) *MockAccountingServiceServer_GetUserAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransactions provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) ListTransactions(_a0 context.Context, _a1 *accounting.ListTransactionsRequest) (*accounting.ListTransactionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactions")
	}

	var r0 *accounting.ListTransactionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.ListTransactionsRequest) (*accounting.ListTransactionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.ListTransactionsRequest) *accounting.ListTransactionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.ListTransactionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.ListTransactionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_ListTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactions'
type MockAccountingServiceServer_ListTransactions_Call struct {
	*mock.Call
}

// ListTransactions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.ListTransactionsRequest
func (_e *MockAccountingServiceServer_Expecter) ListTransactions(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_ListTransactions_Call {
	return &MockAccountingServiceServer_ListTransactions_Call{Call: _e.mock.On("ListTransactions", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_ListTransactions_Call) Run(run func(_a0 context.Context, _a1 *accounting.ListTransactionsRequest)) *MockAccountingServiceServer_ListTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.ListTransactionsRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_ListTransactions_Call) Return(_a0 *accounting.ListTransactionsResponse, _a1 error) *MockAccountingServiceServer_ListTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_ListTransactions_Call) RunAndReturn(run func(context.Context, *accounting.ListTransactionsRequest) (*accounting.ListTransactionsResponse, error)) *MockAccountingServiceServer_ListTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// SetPayoutsBlockStatus provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) SetPayoutsBlockStatus(_a0 context.Context, _a1 *accounting.SetPayoutsBlockStatusRequest) (*accounting.SetPayoutsBlockStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetPayoutsBlockStatus")
	}

	var r0 *accounting.SetPayoutsBlockStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.SetPayoutsBlockStatusRequest) (*accounting.SetPayoutsBlockStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.SetPayoutsBlockStatusRequest) *accounting.SetPayoutsBlockStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.SetPayoutsBlockStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.SetPayoutsBlockStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_SetPayoutsBlockStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPayoutsBlockStatus'
type MockAccountingServiceServer_SetPayoutsBlockStatus_Call struct {
	*mock.Call
}

// SetPayoutsBlockStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.SetPayoutsBlockStatusRequest
func (_e *MockAccountingServiceServer_Expecter) SetPayoutsBlockStatus(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_SetPayoutsBlockStatus_Call {
	return &MockAccountingServiceServer_SetPayoutsBlockStatus_Call{Call: _e.mock.On("SetPayoutsBlockStatus", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_SetPayoutsBlockStatus_Call) Run(run func(_a0 context.Context, _a1 *accounting.SetPayoutsBlockStatusRequest)) *MockAccountingServiceServer_SetPayoutsBlockStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.SetPayoutsBlockStatusRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_SetPayoutsBlockStatus_Call) Return(_a0 *accounting.SetPayoutsBlockStatusResponse, _a1 error) *MockAccountingServiceServer_SetPayoutsBlockStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_SetPayoutsBlockStatus_Call) RunAndReturn(run func(context.Context, *accounting.SetPayoutsBlockStatusRequest) (*accounting.SetPayoutsBlockStatusResponse, error)) *MockAccountingServiceServer_SetPayoutsBlockStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ViewBalance provides a mock function with given fields: _a0, _a1
func (_m *MockAccountingServiceServer) ViewBalance(_a0 context.Context, _a1 *accounting.ViewBalanceRequest) (*accounting.ViewBalanceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ViewBalance")
	}

	var r0 *accounting.ViewBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.ViewBalanceRequest) (*accounting.ViewBalanceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *accounting.ViewBalanceRequest) *accounting.ViewBalanceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounting.ViewBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *accounting.ViewBalanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingServiceServer_ViewBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewBalance'
type MockAccountingServiceServer_ViewBalance_Call struct {
	*mock.Call
}

// ViewBalance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *accounting.ViewBalanceRequest
func (_e *MockAccountingServiceServer_Expecter) ViewBalance(_a0 interface{}, _a1 interface{}) *MockAccountingServiceServer_ViewBalance_Call {
	return &MockAccountingServiceServer_ViewBalance_Call{Call: _e.mock.On("ViewBalance", _a0, _a1)}
}

func (_c *MockAccountingServiceServer_ViewBalance_Call) Run(run func(_a0 context.Context, _a1 *accounting.ViewBalanceRequest)) *MockAccountingServiceServer_ViewBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*accounting.ViewBalanceRequest))
	})
	return _c
}

func (_c *MockAccountingServiceServer_ViewBalance_Call) Return(_a0 *accounting.ViewBalanceResponse, _a1 error) *MockAccountingServiceServer_ViewBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingServiceServer_ViewBalance_Call) RunAndReturn(run func(context.Context, *accounting.ViewBalanceRequest) (*accounting.ViewBalanceResponse, error)) *MockAccountingServiceServer_ViewBalance_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAccountingServiceServer provides a mock function with given fields:
func (_m *MockAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {
	_m.Called()
}

// MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAccountingServiceServer'
type MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAccountingServiceServer is a helper method to define mock.On call
func (_e *MockAccountingServiceServer_Expecter) mustEmbedUnimplementedAccountingServiceServer() *MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call {
	return &MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAccountingServiceServer")}
}

func (_c *MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call) Run(run func()) *MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call) Return() *MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call) RunAndReturn(run func()) *MockAccountingServiceServer_mustEmbedUnimplementedAccountingServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingServiceServer creates a new instance of MockAccountingServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingServiceServer {
	mock := &MockAccountingServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
