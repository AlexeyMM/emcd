// Code generated by mockery v2.43.2. DO NOT EDIT.

package user_account

import (
	context "context"

	user_account "code.emcdtech.com/emcd/service/accounting/protocol/user_account"
	mock "github.com/stretchr/testify/mock"
)

// MockUserAccountServiceServer is an autogenerated mock type for the UserAccountServiceServer type
type MockUserAccountServiceServer struct {
	mock.Mock
}

type MockUserAccountServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAccountServiceServer) EXPECT() *MockUserAccountServiceServer_Expecter {
	return &MockUserAccountServiceServer_Expecter{mock: &_m.Mock}
}

// CreateUserAccounts provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceServer) CreateUserAccounts(_a0 context.Context, _a1 *user_account.UserAccountMultiRequest) (*user_account.UserAccountMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAccounts")
	}

	var r0 *user_account.UserAccountMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountMultiRequest) (*user_account.UserAccountMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountMultiRequest) *user_account.UserAccountMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountMultiRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceServer_CreateUserAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserAccounts'
type MockUserAccountServiceServer_CreateUserAccounts_Call struct {
	*mock.Call
}

// CreateUserAccounts is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *user_account.UserAccountMultiRequest
func (_e *MockUserAccountServiceServer_Expecter) CreateUserAccounts(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceServer_CreateUserAccounts_Call {
	return &MockUserAccountServiceServer_CreateUserAccounts_Call{Call: _e.mock.On("CreateUserAccounts", _a0, _a1)}
}

func (_c *MockUserAccountServiceServer_CreateUserAccounts_Call) Run(run func(_a0 context.Context, _a1 *user_account.UserAccountMultiRequest)) *MockUserAccountServiceServer_CreateUserAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user_account.UserAccountMultiRequest))
	})
	return _c
}

func (_c *MockUserAccountServiceServer_CreateUserAccounts_Call) Return(_a0 *user_account.UserAccountMultiResponse, _a1 error) *MockUserAccountServiceServer_CreateUserAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceServer_CreateUserAccounts_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountMultiRequest) (*user_account.UserAccountMultiResponse, error)) *MockUserAccountServiceServer_CreateUserAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateUserAccount provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceServer) GetOrCreateUserAccount(_a0 context.Context, _a1 *user_account.UserAccountOneRequest) (*user_account.UserAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateUserAccount")
	}

	var r0 *user_account.UserAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountOneRequest) (*user_account.UserAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountOneRequest) *user_account.UserAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountOneRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceServer_GetOrCreateUserAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateUserAccount'
type MockUserAccountServiceServer_GetOrCreateUserAccount_Call struct {
	*mock.Call
}

// GetOrCreateUserAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *user_account.UserAccountOneRequest
func (_e *MockUserAccountServiceServer_Expecter) GetOrCreateUserAccount(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceServer_GetOrCreateUserAccount_Call {
	return &MockUserAccountServiceServer_GetOrCreateUserAccount_Call{Call: _e.mock.On("GetOrCreateUserAccount", _a0, _a1)}
}

func (_c *MockUserAccountServiceServer_GetOrCreateUserAccount_Call) Run(run func(_a0 context.Context, _a1 *user_account.UserAccountOneRequest)) *MockUserAccountServiceServer_GetOrCreateUserAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user_account.UserAccountOneRequest))
	})
	return _c
}

func (_c *MockUserAccountServiceServer_GetOrCreateUserAccount_Call) Return(_a0 *user_account.UserAccountResponse, _a1 error) *MockUserAccountServiceServer_GetOrCreateUserAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceServer_GetOrCreateUserAccount_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountOneRequest) (*user_account.UserAccountResponse, error)) *MockUserAccountServiceServer_GetOrCreateUserAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountByConstraint provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceServer) GetUserAccountByConstraint(_a0 context.Context, _a1 *user_account.UserAccountConstraintRequest) (*user_account.UserAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountByConstraint")
	}

	var r0 *user_account.UserAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountConstraintRequest) (*user_account.UserAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountConstraintRequest) *user_account.UserAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountConstraintRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceServer_GetUserAccountByConstraint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountByConstraint'
type MockUserAccountServiceServer_GetUserAccountByConstraint_Call struct {
	*mock.Call
}

// GetUserAccountByConstraint is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *user_account.UserAccountConstraintRequest
func (_e *MockUserAccountServiceServer_Expecter) GetUserAccountByConstraint(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceServer_GetUserAccountByConstraint_Call {
	return &MockUserAccountServiceServer_GetUserAccountByConstraint_Call{Call: _e.mock.On("GetUserAccountByConstraint", _a0, _a1)}
}

func (_c *MockUserAccountServiceServer_GetUserAccountByConstraint_Call) Run(run func(_a0 context.Context, _a1 *user_account.UserAccountConstraintRequest)) *MockUserAccountServiceServer_GetUserAccountByConstraint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user_account.UserAccountConstraintRequest))
	})
	return _c
}

func (_c *MockUserAccountServiceServer_GetUserAccountByConstraint_Call) Return(_a0 *user_account.UserAccountResponse, _a1 error) *MockUserAccountServiceServer_GetUserAccountByConstraint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceServer_GetUserAccountByConstraint_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountConstraintRequest) (*user_account.UserAccountResponse, error)) *MockUserAccountServiceServer_GetUserAccountByConstraint_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountById provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceServer) GetUserAccountById(_a0 context.Context, _a1 *user_account.UserAccountId) (*user_account.UserAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountById")
	}

	var r0 *user_account.UserAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountId) (*user_account.UserAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountId) *user_account.UserAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceServer_GetUserAccountById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountById'
type MockUserAccountServiceServer_GetUserAccountById_Call struct {
	*mock.Call
}

// GetUserAccountById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *user_account.UserAccountId
func (_e *MockUserAccountServiceServer_Expecter) GetUserAccountById(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceServer_GetUserAccountById_Call {
	return &MockUserAccountServiceServer_GetUserAccountById_Call{Call: _e.mock.On("GetUserAccountById", _a0, _a1)}
}

func (_c *MockUserAccountServiceServer_GetUserAccountById_Call) Run(run func(_a0 context.Context, _a1 *user_account.UserAccountId)) *MockUserAccountServiceServer_GetUserAccountById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user_account.UserAccountId))
	})
	return _c
}

func (_c *MockUserAccountServiceServer_GetUserAccountById_Call) Return(_a0 *user_account.UserAccountResponse, _a1 error) *MockUserAccountServiceServer_GetUserAccountById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceServer_GetUserAccountById_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountId) (*user_account.UserAccountResponse, error)) *MockUserAccountServiceServer_GetUserAccountById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountsByFilter provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceServer) GetUserAccountsByFilter(_a0 context.Context, _a1 *user_account.UserAccountFilter) (*user_account.UserAccountMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountsByFilter")
	}

	var r0 *user_account.UserAccountMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountFilter) (*user_account.UserAccountMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountFilter) *user_account.UserAccountMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceServer_GetUserAccountsByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountsByFilter'
type MockUserAccountServiceServer_GetUserAccountsByFilter_Call struct {
	*mock.Call
}

// GetUserAccountsByFilter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *user_account.UserAccountFilter
func (_e *MockUserAccountServiceServer_Expecter) GetUserAccountsByFilter(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceServer_GetUserAccountsByFilter_Call {
	return &MockUserAccountServiceServer_GetUserAccountsByFilter_Call{Call: _e.mock.On("GetUserAccountsByFilter", _a0, _a1)}
}

func (_c *MockUserAccountServiceServer_GetUserAccountsByFilter_Call) Run(run func(_a0 context.Context, _a1 *user_account.UserAccountFilter)) *MockUserAccountServiceServer_GetUserAccountsByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user_account.UserAccountFilter))
	})
	return _c
}

func (_c *MockUserAccountServiceServer_GetUserAccountsByFilter_Call) Return(_a0 *user_account.UserAccountMultiResponse, _a1 error) *MockUserAccountServiceServer_GetUserAccountsByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceServer_GetUserAccountsByFilter_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountFilter) (*user_account.UserAccountMultiResponse, error)) *MockUserAccountServiceServer_GetUserAccountsByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountsByUuid provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceServer) GetUserAccountsByUuid(_a0 context.Context, _a1 *user_account.UserAccountUuid) (*user_account.UserAccountMultiResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountsByUuid")
	}

	var r0 *user_account.UserAccountMultiResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountUuid) (*user_account.UserAccountMultiResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_account.UserAccountUuid) *user_account.UserAccountMultiResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_account.UserAccountMultiResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_account.UserAccountUuid) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceServer_GetUserAccountsByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountsByUuid'
type MockUserAccountServiceServer_GetUserAccountsByUuid_Call struct {
	*mock.Call
}

// GetUserAccountsByUuid is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *user_account.UserAccountUuid
func (_e *MockUserAccountServiceServer_Expecter) GetUserAccountsByUuid(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceServer_GetUserAccountsByUuid_Call {
	return &MockUserAccountServiceServer_GetUserAccountsByUuid_Call{Call: _e.mock.On("GetUserAccountsByUuid", _a0, _a1)}
}

func (_c *MockUserAccountServiceServer_GetUserAccountsByUuid_Call) Run(run func(_a0 context.Context, _a1 *user_account.UserAccountUuid)) *MockUserAccountServiceServer_GetUserAccountsByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user_account.UserAccountUuid))
	})
	return _c
}

func (_c *MockUserAccountServiceServer_GetUserAccountsByUuid_Call) Return(_a0 *user_account.UserAccountMultiResponse, _a1 error) *MockUserAccountServiceServer_GetUserAccountsByUuid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceServer_GetUserAccountsByUuid_Call) RunAndReturn(run func(context.Context, *user_account.UserAccountUuid) (*user_account.UserAccountMultiResponse, error)) *MockUserAccountServiceServer_GetUserAccountsByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedUserAccountServiceServer provides a mock function with given fields:
func (_m *MockUserAccountServiceServer) mustEmbedUnimplementedUserAccountServiceServer() {
	_m.Called()
}

// MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedUserAccountServiceServer'
type MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedUserAccountServiceServer is a helper method to define mock.On call
func (_e *MockUserAccountServiceServer_Expecter) mustEmbedUnimplementedUserAccountServiceServer() *MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call {
	return &MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedUserAccountServiceServer")}
}

func (_c *MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call) Run(run func()) *MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call) Return() *MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call) RunAndReturn(run func()) *MockUserAccountServiceServer_mustEmbedUnimplementedUserAccountServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserAccountServiceServer creates a new instance of MockUserAccountServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAccountServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAccountServiceServer {
	mock := &MockUserAccountServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
