// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "code.emcdtech.com/emcd/service/accounting/model"

	uuid "github.com/google/uuid"
)

// MockReward is an autogenerated mock type for the Reward type
type MockReward struct {
	mock.Mock
}

type MockReward_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReward) EXPECT() *MockReward_Expecter {
	return &MockReward_Expecter{mock: &_m.Mock}
}

// Calculate provides a mock function with given fields: ctx, userID, product, coin, amount
func (_m *MockReward) Calculate(ctx context.Context, userID uuid.UUID, product string, coin string, amount decimal.Decimal) ([]model.ReferralCalculation, error) {
	ret := _m.Called(ctx, userID, product, coin, amount)

	if len(ret) == 0 {
		panic("no return value specified for Calculate")
	}

	var r0 []model.ReferralCalculation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, decimal.Decimal) ([]model.ReferralCalculation, error)); ok {
		return rf(ctx, userID, product, coin, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, decimal.Decimal) []model.ReferralCalculation); ok {
		r0 = rf(ctx, userID, product, coin, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ReferralCalculation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, decimal.Decimal) error); ok {
		r1 = rf(ctx, userID, product, coin, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReward_Calculate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Calculate'
type MockReward_Calculate_Call struct {
	*mock.Call
}

// Calculate is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - product string
//   - coin string
//   - amount decimal.Decimal
func (_e *MockReward_Expecter) Calculate(ctx interface{}, userID interface{}, product interface{}, coin interface{}, amount interface{}) *MockReward_Calculate_Call {
	return &MockReward_Calculate_Call{Call: _e.mock.On("Calculate", ctx, userID, product, coin, amount)}
}

func (_c *MockReward_Calculate_Call) Run(run func(ctx context.Context, userID uuid.UUID, product string, coin string, amount decimal.Decimal)) *MockReward_Calculate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(decimal.Decimal))
	})
	return _c
}

func (_c *MockReward_Calculate_Call) Return(_a0 []model.ReferralCalculation, _a1 error) *MockReward_Calculate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReward_Calculate_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, decimal.Decimal) ([]model.ReferralCalculation, error)) *MockReward_Calculate_Call {
	_c.Call.Return(run)
	return _c
}

// GetReward provides a mock function with given fields: ctx, userID, product, coin, amount
func (_m *MockReward) GetReward(ctx context.Context, userID uuid.UUID, product string, coin string, amount decimal.Decimal) ([]*model.UserIncome, error) {
	ret := _m.Called(ctx, userID, product, coin, amount)

	if len(ret) == 0 {
		panic("no return value specified for GetReward")
	}

	var r0 []*model.UserIncome
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, decimal.Decimal) ([]*model.UserIncome, error)); ok {
		return rf(ctx, userID, product, coin, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, decimal.Decimal) []*model.UserIncome); ok {
		r0 = rf(ctx, userID, product, coin, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserIncome)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, decimal.Decimal) error); ok {
		r1 = rf(ctx, userID, product, coin, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReward_GetReward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReward'
type MockReward_GetReward_Call struct {
	*mock.Call
}

// GetReward is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - product string
//   - coin string
//   - amount decimal.Decimal
func (_e *MockReward_Expecter) GetReward(ctx interface{}, userID interface{}, product interface{}, coin interface{}, amount interface{}) *MockReward_GetReward_Call {
	return &MockReward_GetReward_Call{Call: _e.mock.On("GetReward", ctx, userID, product, coin, amount)}
}

func (_c *MockReward_GetReward_Call) Run(run func(ctx context.Context, userID uuid.UUID, product string, coin string, amount decimal.Decimal)) *MockReward_GetReward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(decimal.Decimal))
	})
	return _c
}

func (_c *MockReward_GetReward_Call) Return(_a0 []*model.UserIncome, _a1 error) *MockReward_GetReward_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReward_GetReward_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, decimal.Decimal) ([]*model.UserIncome, error)) *MockReward_GetReward_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReward creates a new instance of MockReward. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReward(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReward {
	mock := &MockReward{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
