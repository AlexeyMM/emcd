// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.emcdtech.com/emcd/service/accounting/model"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"

	transactor "code.emcdtech.com/emcd/sdk/pg"

	uuid "github.com/google/uuid"
)

// MockUserAccountRepo is an autogenerated mock type for the UserAccountRepo type
type MockUserAccountRepo struct {
	mock.Mock
}

type MockUserAccountRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAccountRepo) EXPECT() *MockUserAccountRepo_Expecter {
	return &MockUserAccountRepo_Expecter{mock: &_m.Mock}
}

// AddUserAccount provides a mock function with given fields: ctx, userAccount
func (_m *MockUserAccountRepo) AddUserAccount(ctx context.Context, userAccount *model.UserAccount) error {
	ret := _m.Called(ctx, userAccount)

	if len(ret) == 0 {
		panic("no return value specified for AddUserAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccount) error); ok {
		r0 = rf(ctx, userAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserAccountRepo_AddUserAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserAccount'
type MockUserAccountRepo_AddUserAccount_Call struct {
	*mock.Call
}

// AddUserAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - userAccount *model.UserAccount
func (_e *MockUserAccountRepo_Expecter) AddUserAccount(ctx interface{}, userAccount interface{}) *MockUserAccountRepo_AddUserAccount_Call {
	return &MockUserAccountRepo_AddUserAccount_Call{Call: _e.mock.On("AddUserAccount", ctx, userAccount)}
}

func (_c *MockUserAccountRepo_AddUserAccount_Call) Run(run func(ctx context.Context, userAccount *model.UserAccount)) *MockUserAccountRepo_AddUserAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UserAccount))
	})
	return _c
}

func (_c *MockUserAccountRepo_AddUserAccount_Call) Return(_a0 error) *MockUserAccountRepo_AddUserAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAccountRepo_AddUserAccount_Call) RunAndReturn(run func(context.Context, *model.UserAccount) error) *MockUserAccountRepo_AddUserAccount_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserAccounts provides a mock function with given fields: ctx, userId, _a2, userAccounts
func (_m *MockUserAccountRepo) AddUserAccounts(ctx context.Context, userId int32, _a2 uuid.UUID, userAccounts model.UserAccounts) error {
	ret := _m.Called(ctx, userId, _a2, userAccounts)

	if len(ret) == 0 {
		panic("no return value specified for AddUserAccounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, uuid.UUID, model.UserAccounts) error); ok {
		r0 = rf(ctx, userId, _a2, userAccounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserAccountRepo_AddUserAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserAccounts'
type MockUserAccountRepo_AddUserAccounts_Call struct {
	*mock.Call
}

// AddUserAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int32
//   - _a2 uuid.UUID
//   - userAccounts model.UserAccounts
func (_e *MockUserAccountRepo_Expecter) AddUserAccounts(ctx interface{}, userId interface{}, _a2 interface{}, userAccounts interface{}) *MockUserAccountRepo_AddUserAccounts_Call {
	return &MockUserAccountRepo_AddUserAccounts_Call{Call: _e.mock.On("AddUserAccounts", ctx, userId, _a2, userAccounts)}
}

func (_c *MockUserAccountRepo_AddUserAccounts_Call) Run(run func(ctx context.Context, userId int32, _a2 uuid.UUID, userAccounts model.UserAccounts)) *MockUserAccountRepo_AddUserAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(uuid.UUID), args[3].(model.UserAccounts))
	})
	return _c
}

func (_c *MockUserAccountRepo_AddUserAccounts_Call) Return(_a0 error) *MockUserAccountRepo_AddUserAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAccountRepo_AddUserAccounts_Call) RunAndReturn(run func(context.Context, int32, uuid.UUID, model.UserAccounts) error) *MockUserAccountRepo_AddUserAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserAccountByFilter provides a mock function with given fields: ctx, filter
func (_m *MockUserAccountRepo) FindUserAccountByFilter(ctx context.Context, filter *model.UserAccountFilter) (*uint64, model.UserAccounts, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindUserAccountByFilter")
	}

	var r0 *uint64
	var r1 model.UserAccounts
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccountFilter) (*uint64, model.UserAccounts, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccountFilter) *uint64); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserAccountFilter) model.UserAccounts); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.UserAccounts)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.UserAccountFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAccountRepo_FindUserAccountByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserAccountByFilter'
type MockUserAccountRepo_FindUserAccountByFilter_Call struct {
	*mock.Call
}

// FindUserAccountByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.UserAccountFilter
func (_e *MockUserAccountRepo_Expecter) FindUserAccountByFilter(ctx interface{}, filter interface{}) *MockUserAccountRepo_FindUserAccountByFilter_Call {
	return &MockUserAccountRepo_FindUserAccountByFilter_Call{Call: _e.mock.On("FindUserAccountByFilter", ctx, filter)}
}

func (_c *MockUserAccountRepo_FindUserAccountByFilter_Call) Run(run func(ctx context.Context, filter *model.UserAccountFilter)) *MockUserAccountRepo_FindUserAccountByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UserAccountFilter))
	})
	return _c
}

func (_c *MockUserAccountRepo_FindUserAccountByFilter_Call) Return(_a0 *uint64, _a1 model.UserAccounts, _a2 error) *MockUserAccountRepo_FindUserAccountByFilter_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAccountRepo_FindUserAccountByFilter_Call) RunAndReturn(run func(context.Context, *model.UserAccountFilter) (*uint64, model.UserAccounts, error)) *MockUserAccountRepo_FindUserAccountByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserAccountByFilterMigrateOnly provides a mock function with given fields: ctx, filter
func (_m *MockUserAccountRepo) FindUserAccountByFilterMigrateOnly(ctx context.Context, filter *model.UserAccountFilter) (*uint64, model.UserAccounts, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindUserAccountByFilterMigrateOnly")
	}

	var r0 *uint64
	var r1 model.UserAccounts
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccountFilter) (*uint64, model.UserAccounts, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccountFilter) *uint64); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserAccountFilter) model.UserAccounts); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.UserAccounts)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.UserAccountFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserAccountByFilterMigrateOnly'
type MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call struct {
	*mock.Call
}

// FindUserAccountByFilterMigrateOnly is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.UserAccountFilter
func (_e *MockUserAccountRepo_Expecter) FindUserAccountByFilterMigrateOnly(ctx interface{}, filter interface{}) *MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call {
	return &MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call{Call: _e.mock.On("FindUserAccountByFilterMigrateOnly", ctx, filter)}
}

func (_c *MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call) Run(run func(ctx context.Context, filter *model.UserAccountFilter)) *MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UserAccountFilter))
	})
	return _c
}

func (_c *MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call) Return(_a0 *uint64, _a1 model.UserAccounts, _a2 error) *MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call) RunAndReturn(run func(context.Context, *model.UserAccountFilter) (*uint64, model.UserAccounts, error)) *MockUserAccountRepo_FindUserAccountByFilterMigrateOnly_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserAccountByUserIdLegacy provides a mock function with given fields: ctx, userIdNew
func (_m *MockUserAccountRepo) FindUserAccountByUserIdLegacy(ctx context.Context, userIdNew uuid.UUID) (model.UserAccounts, error) {
	ret := _m.Called(ctx, userIdNew)

	if len(ret) == 0 {
		panic("no return value specified for FindUserAccountByUserIdLegacy")
	}

	var r0 model.UserAccounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.UserAccounts, error)); ok {
		return rf(ctx, userIdNew)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.UserAccounts); ok {
		r0 = rf(ctx, userIdNew)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.UserAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userIdNew)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserAccountByUserIdLegacy'
type MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call struct {
	*mock.Call
}

// FindUserAccountByUserIdLegacy is a helper method to define mock.On call
//   - ctx context.Context
//   - userIdNew uuid.UUID
func (_e *MockUserAccountRepo_Expecter) FindUserAccountByUserIdLegacy(ctx interface{}, userIdNew interface{}) *MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call {
	return &MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call{Call: _e.mock.On("FindUserAccountByUserIdLegacy", ctx, userIdNew)}
}

func (_c *MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call) Run(run func(ctx context.Context, userIdNew uuid.UUID)) *MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call) Return(_a0 model.UserAccounts, _a1 error) *MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.UserAccounts, error)) *MockUserAccountRepo_FindUserAccountByUserIdLegacy_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountByIdLegacy provides a mock function with given fields: ctx, id
func (_m *MockUserAccountRepo) GetUserAccountByIdLegacy(ctx context.Context, id int32) (*model.UserAccount, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountByIdLegacy")
	}

	var r0 *model.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*model.UserAccount, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *model.UserAccount); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountRepo_GetUserAccountByIdLegacy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountByIdLegacy'
type MockUserAccountRepo_GetUserAccountByIdLegacy_Call struct {
	*mock.Call
}

// GetUserAccountByIdLegacy is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockUserAccountRepo_Expecter) GetUserAccountByIdLegacy(ctx interface{}, id interface{}) *MockUserAccountRepo_GetUserAccountByIdLegacy_Call {
	return &MockUserAccountRepo_GetUserAccountByIdLegacy_Call{Call: _e.mock.On("GetUserAccountByIdLegacy", ctx, id)}
}

func (_c *MockUserAccountRepo_GetUserAccountByIdLegacy_Call) Run(run func(ctx context.Context, id int32)) *MockUserAccountRepo_GetUserAccountByIdLegacy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockUserAccountRepo_GetUserAccountByIdLegacy_Call) Return(_a0 *model.UserAccount, _a1 error) *MockUserAccountRepo_GetUserAccountByIdLegacy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountRepo_GetUserAccountByIdLegacy_Call) RunAndReturn(run func(context.Context, int32) (*model.UserAccount, error)) *MockUserAccountRepo_GetUserAccountByIdLegacy_Call {
	_c.Call.Return(run)
	return _c
}

// Runner provides a mock function with given fields: ctx
func (_m *MockUserAccountRepo) Runner(ctx context.Context) transactor.PgxQueryRunner {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Runner")
	}

	var r0 transactor.PgxQueryRunner
	if rf, ok := ret.Get(0).(func(context.Context) transactor.PgxQueryRunner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transactor.PgxQueryRunner)
		}
	}

	return r0
}

// MockUserAccountRepo_Runner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Runner'
type MockUserAccountRepo_Runner_Call struct {
	*mock.Call
}

// Runner is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAccountRepo_Expecter) Runner(ctx interface{}) *MockUserAccountRepo_Runner_Call {
	return &MockUserAccountRepo_Runner_Call{Call: _e.mock.On("Runner", ctx)}
}

func (_c *MockUserAccountRepo_Runner_Call) Run(run func(ctx context.Context)) *MockUserAccountRepo_Runner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAccountRepo_Runner_Call) Return(_a0 transactor.PgxQueryRunner) *MockUserAccountRepo_Runner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAccountRepo_Runner_Call) RunAndReturn(run func(context.Context) transactor.PgxQueryRunner) *MockUserAccountRepo_Runner_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserAccountByPartial provides a mock function with given fields: ctx, userAccount, partial
func (_m *MockUserAccountRepo) UpdateUserAccountByPartial(ctx context.Context, userAccount *model.UserAccount, partial *model.UserAccountPartial) error {
	ret := _m.Called(ctx, userAccount, partial)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAccountByPartial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAccount, *model.UserAccountPartial) error); ok {
		r0 = rf(ctx, userAccount, partial)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserAccountRepo_UpdateUserAccountByPartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserAccountByPartial'
type MockUserAccountRepo_UpdateUserAccountByPartial_Call struct {
	*mock.Call
}

// UpdateUserAccountByPartial is a helper method to define mock.On call
//   - ctx context.Context
//   - userAccount *model.UserAccount
//   - partial *model.UserAccountPartial
func (_e *MockUserAccountRepo_Expecter) UpdateUserAccountByPartial(ctx interface{}, userAccount interface{}, partial interface{}) *MockUserAccountRepo_UpdateUserAccountByPartial_Call {
	return &MockUserAccountRepo_UpdateUserAccountByPartial_Call{Call: _e.mock.On("UpdateUserAccountByPartial", ctx, userAccount, partial)}
}

func (_c *MockUserAccountRepo_UpdateUserAccountByPartial_Call) Run(run func(ctx context.Context, userAccount *model.UserAccount, partial *model.UserAccountPartial)) *MockUserAccountRepo_UpdateUserAccountByPartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.UserAccount), args[2].(*model.UserAccountPartial))
	})
	return _c
}

func (_c *MockUserAccountRepo_UpdateUserAccountByPartial_Call) Return(_a0 error) *MockUserAccountRepo_UpdateUserAccountByPartial_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAccountRepo_UpdateUserAccountByPartial_Call) RunAndReturn(run func(context.Context, *model.UserAccount, *model.UserAccountPartial) error) *MockUserAccountRepo_UpdateUserAccountByPartial_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserAccountForMigrateCoinNew provides a mock function with given fields: ctx, userAccounts
func (_m *MockUserAccountRepo) UpdateUserAccountForMigrateCoinNew(ctx context.Context, userAccounts model.UserAccounts) error {
	ret := _m.Called(ctx, userAccounts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAccountForMigrateCoinNew")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserAccounts) error); ok {
		r0 = rf(ctx, userAccounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserAccountForMigrateCoinNew'
type MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call struct {
	*mock.Call
}

// UpdateUserAccountForMigrateCoinNew is a helper method to define mock.On call
//   - ctx context.Context
//   - userAccounts model.UserAccounts
func (_e *MockUserAccountRepo_Expecter) UpdateUserAccountForMigrateCoinNew(ctx interface{}, userAccounts interface{}) *MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call {
	return &MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call{Call: _e.mock.On("UpdateUserAccountForMigrateCoinNew", ctx, userAccounts)}
}

func (_c *MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call) Run(run func(ctx context.Context, userAccounts model.UserAccounts)) *MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserAccounts))
	})
	return _c
}

func (_c *MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call) Return(_a0 error) *MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call) RunAndReturn(run func(context.Context, model.UserAccounts) error) *MockUserAccountRepo_UpdateUserAccountForMigrateCoinNew_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserAccountForMigrateUserIdNew provides a mock function with given fields: ctx, userAccounts
func (_m *MockUserAccountRepo) UpdateUserAccountForMigrateUserIdNew(ctx context.Context, userAccounts model.UserAccounts) error {
	ret := _m.Called(ctx, userAccounts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAccountForMigrateUserIdNew")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserAccounts) error); ok {
		r0 = rf(ctx, userAccounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserAccountForMigrateUserIdNew'
type MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call struct {
	*mock.Call
}

// UpdateUserAccountForMigrateUserIdNew is a helper method to define mock.On call
//   - ctx context.Context
//   - userAccounts model.UserAccounts
func (_e *MockUserAccountRepo_Expecter) UpdateUserAccountForMigrateUserIdNew(ctx interface{}, userAccounts interface{}) *MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call {
	return &MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call{Call: _e.mock.On("UpdateUserAccountForMigrateUserIdNew", ctx, userAccounts)}
}

func (_c *MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call) Run(run func(ctx context.Context, userAccounts model.UserAccounts)) *MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserAccounts))
	})
	return _c
}

func (_c *MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call) Return(_a0 error) *MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call) RunAndReturn(run func(context.Context, model.UserAccounts) error) *MockUserAccountRepo_UpdateUserAccountForMigrateUserIdNew_Call {
	_c.Call.Return(run)
	return _c
}

// WithinTransaction provides a mock function with given fields: ctx, txFn
func (_m *MockUserAccountRepo) WithinTransaction(ctx context.Context, txFn func(context.Context) error) error {
	ret := _m.Called(ctx, txFn)

	if len(ret) == 0 {
		panic("no return value specified for WithinTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, txFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserAccountRepo_WithinTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransaction'
type MockUserAccountRepo_WithinTransaction_Call struct {
	*mock.Call
}

// WithinTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txFn func(context.Context) error
func (_e *MockUserAccountRepo_Expecter) WithinTransaction(ctx interface{}, txFn interface{}) *MockUserAccountRepo_WithinTransaction_Call {
	return &MockUserAccountRepo_WithinTransaction_Call{Call: _e.mock.On("WithinTransaction", ctx, txFn)}
}

func (_c *MockUserAccountRepo_WithinTransaction_Call) Run(run func(ctx context.Context, txFn func(context.Context) error)) *MockUserAccountRepo_WithinTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *MockUserAccountRepo_WithinTransaction_Call) Return(_a0 error) *MockUserAccountRepo_WithinTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAccountRepo_WithinTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *MockUserAccountRepo_WithinTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// WithinTransactionWithOptions provides a mock function with given fields: ctx, txFn, opts
func (_m *MockUserAccountRepo) WithinTransactionWithOptions(ctx context.Context, txFn func(context.Context) error, opts pgx.TxOptions) error {
	ret := _m.Called(ctx, txFn, opts)

	if len(ret) == 0 {
		panic("no return value specified for WithinTransactionWithOptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error, pgx.TxOptions) error); ok {
		r0 = rf(ctx, txFn, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserAccountRepo_WithinTransactionWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransactionWithOptions'
type MockUserAccountRepo_WithinTransactionWithOptions_Call struct {
	*mock.Call
}

// WithinTransactionWithOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - txFn func(context.Context) error
//   - opts pgx.TxOptions
func (_e *MockUserAccountRepo_Expecter) WithinTransactionWithOptions(ctx interface{}, txFn interface{}, opts interface{}) *MockUserAccountRepo_WithinTransactionWithOptions_Call {
	return &MockUserAccountRepo_WithinTransactionWithOptions_Call{Call: _e.mock.On("WithinTransactionWithOptions", ctx, txFn, opts)}
}

func (_c *MockUserAccountRepo_WithinTransactionWithOptions_Call) Run(run func(ctx context.Context, txFn func(context.Context) error, opts pgx.TxOptions)) *MockUserAccountRepo_WithinTransactionWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error), args[2].(pgx.TxOptions))
	})
	return _c
}

func (_c *MockUserAccountRepo_WithinTransactionWithOptions_Call) Return(_a0 error) *MockUserAccountRepo_WithinTransactionWithOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAccountRepo_WithinTransactionWithOptions_Call) RunAndReturn(run func(context.Context, func(context.Context) error, pgx.TxOptions) error) *MockUserAccountRepo_WithinTransactionWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserAccountRepo creates a new instance of MockUserAccountRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAccountRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAccountRepo {
	mock := &MockUserAccountRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
