// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.emcdtech.com/emcd/service/accounting/model"
	mock "github.com/stretchr/testify/mock"
)

// MockPayoutsHistory is an autogenerated mock type for the PayoutsHistory type
type MockPayoutsHistory struct {
	mock.Mock
}

type MockPayoutsHistory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPayoutsHistory) EXPECT() *MockPayoutsHistory_Expecter {
	return &MockPayoutsHistory_Expecter{mock: &_m.Mock}
}

// GetNewPayouts provides a mock function with given fields: ctx, filter
func (_m *MockPayoutsHistory) GetNewPayouts(ctx context.Context, filter *model.HistoryInput) (*model.HistoryOutput, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetNewPayouts")
	}

	var r0 *model.HistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.HistoryInput) (*model.HistoryOutput, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.HistoryInput) *model.HistoryOutput); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.HistoryInput) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayoutsHistory_GetNewPayouts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewPayouts'
type MockPayoutsHistory_GetNewPayouts_Call struct {
	*mock.Call
}

// GetNewPayouts is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.HistoryInput
func (_e *MockPayoutsHistory_Expecter) GetNewPayouts(ctx interface{}, filter interface{}) *MockPayoutsHistory_GetNewPayouts_Call {
	return &MockPayoutsHistory_GetNewPayouts_Call{Call: _e.mock.On("GetNewPayouts", ctx, filter)}
}

func (_c *MockPayoutsHistory_GetNewPayouts_Call) Run(run func(ctx context.Context, filter *model.HistoryInput)) *MockPayoutsHistory_GetNewPayouts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.HistoryInput))
	})
	return _c
}

func (_c *MockPayoutsHistory_GetNewPayouts_Call) Return(_a0 *model.HistoryOutput, _a1 error) *MockPayoutsHistory_GetNewPayouts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayoutsHistory_GetNewPayouts_Call) RunAndReturn(run func(context.Context, *model.HistoryInput) (*model.HistoryOutput, error)) *MockPayoutsHistory_GetNewPayouts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayoutsIsViewed provides a mock function with given fields: ctx, id, coinCode
func (_m *MockPayoutsHistory) GetPayoutsIsViewed(ctx context.Context, id int, coinCode string) (bool, error) {
	ret := _m.Called(ctx, id, coinCode)

	if len(ret) == 0 {
		panic("no return value specified for GetPayoutsIsViewed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (bool, error)); ok {
		return rf(ctx, id, coinCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) bool); ok {
		r0 = rf(ctx, id, coinCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, id, coinCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayoutsHistory_GetPayoutsIsViewed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayoutsIsViewed'
type MockPayoutsHistory_GetPayoutsIsViewed_Call struct {
	*mock.Call
}

// GetPayoutsIsViewed is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - coinCode string
func (_e *MockPayoutsHistory_Expecter) GetPayoutsIsViewed(ctx interface{}, id interface{}, coinCode interface{}) *MockPayoutsHistory_GetPayoutsIsViewed_Call {
	return &MockPayoutsHistory_GetPayoutsIsViewed_Call{Call: _e.mock.On("GetPayoutsIsViewed", ctx, id, coinCode)}
}

func (_c *MockPayoutsHistory_GetPayoutsIsViewed_Call) Run(run func(ctx context.Context, id int, coinCode string)) *MockPayoutsHistory_GetPayoutsIsViewed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockPayoutsHistory_GetPayoutsIsViewed_Call) Return(_a0 bool, _a1 error) *MockPayoutsHistory_GetPayoutsIsViewed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayoutsHistory_GetPayoutsIsViewed_Call) RunAndReturn(run func(context.Context, int, string) (bool, error)) *MockPayoutsHistory_GetPayoutsIsViewed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPayoutsHistory creates a new instance of MockPayoutsHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPayoutsHistory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPayoutsHistory {
	mock := &MockPayoutsHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
