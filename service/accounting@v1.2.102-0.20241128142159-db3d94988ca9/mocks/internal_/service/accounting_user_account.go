// Code generated by mockery v2.43.2. DO NOT EDIT.

package service

import (
	context "context"

	model "code.emcdtech.com/emcd/service/accounting/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAccountingUserAccount is an autogenerated mock type for the AccountingUserAccount type
type MockAccountingUserAccount struct {
	mock.Mock
}

type MockAccountingUserAccount_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingUserAccount) EXPECT() *MockAccountingUserAccount_Expecter {
	return &MockAccountingUserAccount_Expecter{mock: &_m.Mock}
}

// GetUserAccount provides a mock function with given fields: ctx, id
func (_m *MockAccountingUserAccount) GetUserAccount(ctx context.Context, id int32) (*model.UserAccount, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccount")
	}

	var r0 *model.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*model.UserAccount, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *model.UserAccount); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingUserAccount_GetUserAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccount'
type MockAccountingUserAccount_GetUserAccount_Call struct {
	*mock.Call
}

// GetUserAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockAccountingUserAccount_Expecter) GetUserAccount(ctx interface{}, id interface{}) *MockAccountingUserAccount_GetUserAccount_Call {
	return &MockAccountingUserAccount_GetUserAccount_Call{Call: _e.mock.On("GetUserAccount", ctx, id)}
}

func (_c *MockAccountingUserAccount_GetUserAccount_Call) Run(run func(ctx context.Context, id int32)) *MockAccountingUserAccount_GetUserAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockAccountingUserAccount_GetUserAccount_Call) Return(_a0 *model.UserAccount, _a1 error) *MockAccountingUserAccount_GetUserAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingUserAccount_GetUserAccount_Call) RunAndReturn(run func(context.Context, int32) (*model.UserAccount, error)) *MockAccountingUserAccount_GetUserAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccounts provides a mock function with given fields: ctx, userID
func (_m *MockAccountingUserAccount) GetUserAccounts(ctx context.Context, userID uuid.UUID) (model.UserAccounts, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccounts")
	}

	var r0 model.UserAccounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.UserAccounts, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.UserAccounts); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.UserAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingUserAccount_GetUserAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccounts'
type MockAccountingUserAccount_GetUserAccounts_Call struct {
	*mock.Call
}

// GetUserAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockAccountingUserAccount_Expecter) GetUserAccounts(ctx interface{}, userID interface{}) *MockAccountingUserAccount_GetUserAccounts_Call {
	return &MockAccountingUserAccount_GetUserAccounts_Call{Call: _e.mock.On("GetUserAccounts", ctx, userID)}
}

func (_c *MockAccountingUserAccount_GetUserAccounts_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockAccountingUserAccount_GetUserAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountingUserAccount_GetUserAccounts_Call) Return(_a0 model.UserAccounts, _a1 error) *MockAccountingUserAccount_GetUserAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingUserAccount_GetUserAccounts_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.UserAccounts, error)) *MockAccountingUserAccount_GetUserAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingUserAccount creates a new instance of MockAccountingUserAccount. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingUserAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingUserAccount {
	mock := &MockAccountingUserAccount{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
