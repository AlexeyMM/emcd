// Code generated by mockery v2.43.2. DO NOT EDIT.

package service

import (
	context "context"

	model "code.emcdtech.com/emcd/service/accounting/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockChecker is an autogenerated mock type for the Checker type
type MockChecker struct {
	mock.Mock
}

type MockChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChecker) EXPECT() *MockChecker_Expecter {
	return &MockChecker_Expecter{mock: &_m.Mock}
}

// GetCheckFreezePayoutsBlocks provides a mock function with given fields: ctx
func (_m *MockChecker) GetCheckFreezePayoutsBlocks(ctx context.Context) ([]*model.CheckFreezePayoutsBlocksData, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckFreezePayoutsBlocks")
	}

	var r0 []*model.CheckFreezePayoutsBlocksData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.CheckFreezePayoutsBlocksData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.CheckFreezePayoutsBlocksData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CheckFreezePayoutsBlocksData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChecker_GetCheckFreezePayoutsBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckFreezePayoutsBlocks'
type MockChecker_GetCheckFreezePayoutsBlocks_Call struct {
	*mock.Call
}

// GetCheckFreezePayoutsBlocks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChecker_Expecter) GetCheckFreezePayoutsBlocks(ctx interface{}) *MockChecker_GetCheckFreezePayoutsBlocks_Call {
	return &MockChecker_GetCheckFreezePayoutsBlocks_Call{Call: _e.mock.On("GetCheckFreezePayoutsBlocks", ctx)}
}

func (_c *MockChecker_GetCheckFreezePayoutsBlocks_Call) Run(run func(ctx context.Context)) *MockChecker_GetCheckFreezePayoutsBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChecker_GetCheckFreezePayoutsBlocks_Call) Return(_a0 []*model.CheckFreezePayoutsBlocksData, _a1 error) *MockChecker_GetCheckFreezePayoutsBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChecker_GetCheckFreezePayoutsBlocks_Call) RunAndReturn(run func(context.Context) ([]*model.CheckFreezePayoutsBlocksData, error)) *MockChecker_GetCheckFreezePayoutsBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheckTransactionCoins provides a mock function with given fields: ctx
func (_m *MockChecker) GetCheckTransactionCoins(ctx context.Context) (model.CheckTransactionCoinsData, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckTransactionCoins")
	}

	var r0 model.CheckTransactionCoinsData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.CheckTransactionCoinsData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.CheckTransactionCoinsData); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.CheckTransactionCoinsData)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChecker_GetCheckTransactionCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckTransactionCoins'
type MockChecker_GetCheckTransactionCoins_Call struct {
	*mock.Call
}

// GetCheckTransactionCoins is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChecker_Expecter) GetCheckTransactionCoins(ctx interface{}) *MockChecker_GetCheckTransactionCoins_Call {
	return &MockChecker_GetCheckTransactionCoins_Call{Call: _e.mock.On("GetCheckTransactionCoins", ctx)}
}

func (_c *MockChecker_GetCheckTransactionCoins_Call) Run(run func(ctx context.Context)) *MockChecker_GetCheckTransactionCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChecker_GetCheckTransactionCoins_Call) Return(_a0 model.CheckTransactionCoinsData, _a1 error) *MockChecker_GetCheckTransactionCoins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChecker_GetCheckTransactionCoins_Call) RunAndReturn(run func(context.Context) (model.CheckTransactionCoinsData, error)) *MockChecker_GetCheckTransactionCoins_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoinsOperationsSum provides a mock function with given fields: ctx
func (_m *MockChecker) GetCoinsOperationsSum(ctx context.Context) ([]*model.SumCheckData, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsOperationsSum")
	}

	var r0 []*model.SumCheckData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.SumCheckData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.SumCheckData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SumCheckData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChecker_GetCoinsOperationsSum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoinsOperationsSum'
type MockChecker_GetCoinsOperationsSum_Call struct {
	*mock.Call
}

// GetCoinsOperationsSum is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChecker_Expecter) GetCoinsOperationsSum(ctx interface{}) *MockChecker_GetCoinsOperationsSum_Call {
	return &MockChecker_GetCoinsOperationsSum_Call{Call: _e.mock.On("GetCoinsOperationsSum", ctx)}
}

func (_c *MockChecker_GetCoinsOperationsSum_Call) Run(run func(ctx context.Context)) *MockChecker_GetCoinsOperationsSum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChecker_GetCoinsOperationsSum_Call) Return(_a0 []*model.SumCheckData, _a1 error) *MockChecker_GetCoinsOperationsSum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChecker_GetCoinsOperationsSum_Call) RunAndReturn(run func(context.Context) ([]*model.SumCheckData, error)) *MockChecker_GetCoinsOperationsSum_Call {
	_c.Call.Return(run)
	return _c
}

// GetIncomesHashrateByDate provides a mock function with given fields: ctx, date
func (_m *MockChecker) GetIncomesHashrateByDate(ctx context.Context, date time.Time) ([]*model.HashrateByDate, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetIncomesHashrateByDate")
	}

	var r0 []*model.HashrateByDate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]*model.HashrateByDate, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []*model.HashrateByDate); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.HashrateByDate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChecker_GetIncomesHashrateByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIncomesHashrateByDate'
type MockChecker_GetIncomesHashrateByDate_Call struct {
	*mock.Call
}

// GetIncomesHashrateByDate is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *MockChecker_Expecter) GetIncomesHashrateByDate(ctx interface{}, date interface{}) *MockChecker_GetIncomesHashrateByDate_Call {
	return &MockChecker_GetIncomesHashrateByDate_Call{Call: _e.mock.On("GetIncomesHashrateByDate", ctx, date)}
}

func (_c *MockChecker_GetIncomesHashrateByDate_Call) Run(run func(ctx context.Context, date time.Time)) *MockChecker_GetIncomesHashrateByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *MockChecker_GetIncomesHashrateByDate_Call) Return(_a0 []*model.HashrateByDate, _a1 error) *MockChecker_GetIncomesHashrateByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChecker_GetIncomesHashrateByDate_Call) RunAndReturn(run func(context.Context, time.Time) ([]*model.HashrateByDate, error)) *MockChecker_GetIncomesHashrateByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionOperationsIntegrity provides a mock function with given fields: ctx
func (_m *MockChecker) GetTransactionOperationsIntegrity(ctx context.Context) ([]*model.TransactionOperationsIntegrityData, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionOperationsIntegrity")
	}

	var r0 []*model.TransactionOperationsIntegrityData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.TransactionOperationsIntegrityData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.TransactionOperationsIntegrityData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TransactionOperationsIntegrityData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChecker_GetTransactionOperationsIntegrity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionOperationsIntegrity'
type MockChecker_GetTransactionOperationsIntegrity_Call struct {
	*mock.Call
}

// GetTransactionOperationsIntegrity is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChecker_Expecter) GetTransactionOperationsIntegrity(ctx interface{}) *MockChecker_GetTransactionOperationsIntegrity_Call {
	return &MockChecker_GetTransactionOperationsIntegrity_Call{Call: _e.mock.On("GetTransactionOperationsIntegrity", ctx)}
}

func (_c *MockChecker_GetTransactionOperationsIntegrity_Call) Run(run func(ctx context.Context)) *MockChecker_GetTransactionOperationsIntegrity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChecker_GetTransactionOperationsIntegrity_Call) Return(_a0 []*model.TransactionOperationsIntegrityData, _a1 error) *MockChecker_GetTransactionOperationsIntegrity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChecker_GetTransactionOperationsIntegrity_Call) RunAndReturn(run func(context.Context) ([]*model.TransactionOperationsIntegrityData, error)) *MockChecker_GetTransactionOperationsIntegrity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChecker creates a new instance of MockChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChecker {
	mock := &MockChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
