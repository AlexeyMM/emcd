// Code generated by mockery v2.43.2. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLimitPayouts is an autogenerated mock type for the LimitPayouts type
type MockLimitPayouts struct {
	mock.Mock
}

type MockLimitPayouts_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLimitPayouts) EXPECT() *MockLimitPayouts_Expecter {
	return &MockLimitPayouts_Expecter{mock: &_m.Mock}
}

// CheckLimit provides a mock function with given fields: ctx, userID, coinID, amount
func (_m *MockLimitPayouts) CheckLimit(ctx context.Context, userID int64, coinID string, amount float64) error {
	ret := _m.Called(ctx, userID, coinID, amount)

	if len(ret) == 0 {
		panic("no return value specified for CheckLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, float64) error); ok {
		r0 = rf(ctx, userID, coinID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLimitPayouts_CheckLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLimit'
type MockLimitPayouts_CheckLimit_Call struct {
	*mock.Call
}

// CheckLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - coinID string
//   - amount float64
func (_e *MockLimitPayouts_Expecter) CheckLimit(ctx interface{}, userID interface{}, coinID interface{}, amount interface{}) *MockLimitPayouts_CheckLimit_Call {
	return &MockLimitPayouts_CheckLimit_Call{Call: _e.mock.On("CheckLimit", ctx, userID, coinID, amount)}
}

func (_c *MockLimitPayouts_CheckLimit_Call) Run(run func(ctx context.Context, userID int64, coinID string, amount float64)) *MockLimitPayouts_CheckLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *MockLimitPayouts_CheckLimit_Call) Return(_a0 error) *MockLimitPayouts_CheckLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLimitPayouts_CheckLimit_Call) RunAndReturn(run func(context.Context, int64, string, float64) error) *MockLimitPayouts_CheckLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockStatus provides a mock function with given fields: ctx, userID
func (_m *MockLimitPayouts) GetBlockStatus(ctx context.Context, userID int64) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockStatus")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLimitPayouts_GetBlockStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockStatus'
type MockLimitPayouts_GetBlockStatus_Call struct {
	*mock.Call
}

// GetBlockStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockLimitPayouts_Expecter) GetBlockStatus(ctx interface{}, userID interface{}) *MockLimitPayouts_GetBlockStatus_Call {
	return &MockLimitPayouts_GetBlockStatus_Call{Call: _e.mock.On("GetBlockStatus", ctx, userID)}
}

func (_c *MockLimitPayouts_GetBlockStatus_Call) Run(run func(ctx context.Context, userID int64)) *MockLimitPayouts_GetBlockStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLimitPayouts_GetBlockStatus_Call) Return(_a0 int, _a1 error) *MockLimitPayouts_GetBlockStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLimitPayouts_GetBlockStatus_Call) RunAndReturn(run func(context.Context, int64) (int, error)) *MockLimitPayouts_GetBlockStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SetBlockStatus provides a mock function with given fields: ctx, userID, status
func (_m *MockLimitPayouts) SetBlockStatus(ctx context.Context, userID int64, status int) error {
	ret := _m.Called(ctx, userID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetBlockStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, userID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLimitPayouts_SetBlockStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBlockStatus'
type MockLimitPayouts_SetBlockStatus_Call struct {
	*mock.Call
}

// SetBlockStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - status int
func (_e *MockLimitPayouts_Expecter) SetBlockStatus(ctx interface{}, userID interface{}, status interface{}) *MockLimitPayouts_SetBlockStatus_Call {
	return &MockLimitPayouts_SetBlockStatus_Call{Call: _e.mock.On("SetBlockStatus", ctx, userID, status)}
}

func (_c *MockLimitPayouts_SetBlockStatus_Call) Run(run func(ctx context.Context, userID int64, status int)) *MockLimitPayouts_SetBlockStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *MockLimitPayouts_SetBlockStatus_Call) Return(_a0 error) *MockLimitPayouts_SetBlockStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLimitPayouts_SetBlockStatus_Call) RunAndReturn(run func(context.Context, int64, int) error) *MockLimitPayouts_SetBlockStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLimitPayouts creates a new instance of MockLimitPayouts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLimitPayouts(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLimitPayouts {
	mock := &MockLimitPayouts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
