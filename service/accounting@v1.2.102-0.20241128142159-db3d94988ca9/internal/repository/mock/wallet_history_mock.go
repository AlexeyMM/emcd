// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	context "context"

	model "code.emcdtech.com/emcd/service/accounting/model"
	mock "github.com/stretchr/testify/mock"
)

// MockWalletsHistory is an autogenerated mock type for the WalletsHistory type
type MockWalletsHistory struct {
	mock.Mock
}

type MockWalletsHistory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWalletsHistory) EXPECT() *MockWalletsHistory_Expecter {
	return &MockWalletsHistory_Expecter{mock: &_m.Mock}
}

// GetWalletHistory provides a mock function with given fields: ctx, filter
func (_m *MockWalletsHistory) GetWalletHistory(ctx context.Context, filter *model.HistoryInput) (*model.HistoryOutput, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletHistory")
	}

	var r0 *model.HistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.HistoryInput) (*model.HistoryOutput, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.HistoryInput) *model.HistoryOutput); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.HistoryInput) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletsHistory_GetWalletHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletHistory'
type MockWalletsHistory_GetWalletHistory_Call struct {
	*mock.Call
}

// GetWalletHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.HistoryInput
func (_e *MockWalletsHistory_Expecter) GetWalletHistory(ctx interface{}, filter interface{}) *MockWalletsHistory_GetWalletHistory_Call {
	return &MockWalletsHistory_GetWalletHistory_Call{Call: _e.mock.On("GetWalletHistory", ctx, filter)}
}

func (_c *MockWalletsHistory_GetWalletHistory_Call) Run(run func(ctx context.Context, filter *model.HistoryInput)) *MockWalletsHistory_GetWalletHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.HistoryInput))
	})
	return _c
}

func (_c *MockWalletsHistory_GetWalletHistory_Call) Return(_a0 *model.HistoryOutput, _a1 error) *MockWalletsHistory_GetWalletHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletsHistory_GetWalletHistory_Call) RunAndReturn(run func(context.Context, *model.HistoryInput) (*model.HistoryOutput, error)) *MockWalletsHistory_GetWalletHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletHistoryTotal provides a mock function with given fields: ctx, param
func (_m *MockWalletsHistory) GetWalletHistoryTotal(ctx context.Context, param *model.HistoryInput) (int64, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletHistoryTotal")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.HistoryInput) (int64, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.HistoryInput) int64); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.HistoryInput) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletsHistory_GetWalletHistoryTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletHistoryTotal'
type MockWalletsHistory_GetWalletHistoryTotal_Call struct {
	*mock.Call
}

// GetWalletHistoryTotal is a helper method to define mock.On call
//   - ctx context.Context
//   - param *model.HistoryInput
func (_e *MockWalletsHistory_Expecter) GetWalletHistoryTotal(ctx interface{}, param interface{}) *MockWalletsHistory_GetWalletHistoryTotal_Call {
	return &MockWalletsHistory_GetWalletHistoryTotal_Call{Call: _e.mock.On("GetWalletHistoryTotal", ctx, param)}
}

func (_c *MockWalletsHistory_GetWalletHistoryTotal_Call) Run(run func(ctx context.Context, param *model.HistoryInput)) *MockWalletsHistory_GetWalletHistoryTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.HistoryInput))
	})
	return _c
}

func (_c *MockWalletsHistory_GetWalletHistoryTotal_Call) Return(_a0 int64, _a1 error) *MockWalletsHistory_GetWalletHistoryTotal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletsHistory_GetWalletHistoryTotal_Call) RunAndReturn(run func(context.Context, *model.HistoryInput) (int64, error)) *MockWalletsHistory_GetWalletHistoryTotal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWalletsHistory creates a new instance of MockWalletsHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWalletsHistory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWalletsHistory {
	mock := &MockWalletsHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
