// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/default_whitelabel_settings/default_whitelabel_settings_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source protocol/default_whitelabel_settings/default_whitelabel_settings_grpc.pb.go -destination protocol/default_whitelabel_settings/default_whitelabel_settings_grpc.mock.pb.go -package default_whitelabel_settings
//

// Package default_whitelabel_settings is a generated GoMock package.
package default_whitelabel_settings

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDefaultWhitelabelSettingsServiceClient is a mock of DefaultWhitelabelSettingsServiceClient interface.
type MockDefaultWhitelabelSettingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultWhitelabelSettingsServiceClientMockRecorder
}

// MockDefaultWhitelabelSettingsServiceClientMockRecorder is the mock recorder for MockDefaultWhitelabelSettingsServiceClient.
type MockDefaultWhitelabelSettingsServiceClientMockRecorder struct {
	mock *MockDefaultWhitelabelSettingsServiceClient
}

// NewMockDefaultWhitelabelSettingsServiceClient creates a new mock instance.
func NewMockDefaultWhitelabelSettingsServiceClient(ctrl *gomock.Controller) *MockDefaultWhitelabelSettingsServiceClient {
	mock := &MockDefaultWhitelabelSettingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockDefaultWhitelabelSettingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultWhitelabelSettingsServiceClient) EXPECT() *MockDefaultWhitelabelSettingsServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDefaultWhitelabelSettingsServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDefaultWhitelabelSettingsServiceClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDefaultWhitelabelSettingsServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceClient)(nil).Get), varargs...)
}

// GetAll mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDefaultWhitelabelSettingsServiceClientMockRecorder) GetAll(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceClient)(nil).GetAll), varargs...)
}

// GetAllWithoutPagination mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceClient) GetAllWithoutPagination(ctx context.Context, in *GetAllWithoutPaginationRequest, opts ...grpc.CallOption) (*GetAllWithoutPaginationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllWithoutPagination", varargs...)
	ret0, _ := ret[0].(*GetAllWithoutPaginationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithoutPagination indicates an expected call of GetAllWithoutPagination.
func (mr *MockDefaultWhitelabelSettingsServiceClientMockRecorder) GetAllWithoutPagination(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithoutPagination", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceClient)(nil).GetAllWithoutPagination), varargs...)
}

// GetV2 mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceClient) GetV2(ctx context.Context, in *GetV2Request, opts ...grpc.CallOption) (*GetV2Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2", varargs...)
	ret0, _ := ret[0].(*GetV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2 indicates an expected call of GetV2.
func (mr *MockDefaultWhitelabelSettingsServiceClientMockRecorder) GetV2(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceClient)(nil).GetV2), varargs...)
}

// Update mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDefaultWhitelabelSettingsServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceClient)(nil).Update), varargs...)
}

// MockDefaultWhitelabelSettingsServiceServer is a mock of DefaultWhitelabelSettingsServiceServer interface.
type MockDefaultWhitelabelSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultWhitelabelSettingsServiceServerMockRecorder
}

// MockDefaultWhitelabelSettingsServiceServerMockRecorder is the mock recorder for MockDefaultWhitelabelSettingsServiceServer.
type MockDefaultWhitelabelSettingsServiceServerMockRecorder struct {
	mock *MockDefaultWhitelabelSettingsServiceServer
}

// NewMockDefaultWhitelabelSettingsServiceServer creates a new mock instance.
func NewMockDefaultWhitelabelSettingsServiceServer(ctrl *gomock.Controller) *MockDefaultWhitelabelSettingsServiceServer {
	mock := &MockDefaultWhitelabelSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockDefaultWhitelabelSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultWhitelabelSettingsServiceServer) EXPECT() *MockDefaultWhitelabelSettingsServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceServer) Create(arg0 context.Context, arg1 *CreateRequest) (*CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDefaultWhitelabelSettingsServiceServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceServer) Delete(arg0 context.Context, arg1 *DeleteRequest) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDefaultWhitelabelSettingsServiceServerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceServer) Get(arg0 context.Context, arg1 *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDefaultWhitelabelSettingsServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceServer)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceServer) GetAll(arg0 context.Context, arg1 *GetAllRequest) (*GetAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDefaultWhitelabelSettingsServiceServerMockRecorder) GetAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceServer)(nil).GetAll), arg0, arg1)
}

// GetAllWithoutPagination mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceServer) GetAllWithoutPagination(arg0 context.Context, arg1 *GetAllWithoutPaginationRequest) (*GetAllWithoutPaginationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithoutPagination", arg0, arg1)
	ret0, _ := ret[0].(*GetAllWithoutPaginationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithoutPagination indicates an expected call of GetAllWithoutPagination.
func (mr *MockDefaultWhitelabelSettingsServiceServerMockRecorder) GetAllWithoutPagination(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithoutPagination", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceServer)(nil).GetAllWithoutPagination), arg0, arg1)
}

// GetV2 mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceServer) GetV2(arg0 context.Context, arg1 *GetV2Request) (*GetV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV2", arg0, arg1)
	ret0, _ := ret[0].(*GetV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2 indicates an expected call of GetV2.
func (mr *MockDefaultWhitelabelSettingsServiceServerMockRecorder) GetV2(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceServer)(nil).GetV2), arg0, arg1)
}

// Update mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceServer) Update(arg0 context.Context, arg1 *UpdateRequest) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDefaultWhitelabelSettingsServiceServerMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer mocks base method.
func (m *MockDefaultWhitelabelSettingsServiceServer) mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer")
}

// mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer indicates an expected call of mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer.
func (mr *MockDefaultWhitelabelSettingsServiceServerMockRecorder) mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer", reflect.TypeOf((*MockDefaultWhitelabelSettingsServiceServer)(nil).mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer))
}

// MockUnsafeDefaultWhitelabelSettingsServiceServer is a mock of UnsafeDefaultWhitelabelSettingsServiceServer interface.
type MockUnsafeDefaultWhitelabelSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDefaultWhitelabelSettingsServiceServerMockRecorder
}

// MockUnsafeDefaultWhitelabelSettingsServiceServerMockRecorder is the mock recorder for MockUnsafeDefaultWhitelabelSettingsServiceServer.
type MockUnsafeDefaultWhitelabelSettingsServiceServerMockRecorder struct {
	mock *MockUnsafeDefaultWhitelabelSettingsServiceServer
}

// NewMockUnsafeDefaultWhitelabelSettingsServiceServer creates a new mock instance.
func NewMockUnsafeDefaultWhitelabelSettingsServiceServer(ctrl *gomock.Controller) *MockUnsafeDefaultWhitelabelSettingsServiceServer {
	mock := &MockUnsafeDefaultWhitelabelSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDefaultWhitelabelSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDefaultWhitelabelSettingsServiceServer) EXPECT() *MockUnsafeDefaultWhitelabelSettingsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer mocks base method.
func (m *MockUnsafeDefaultWhitelabelSettingsServiceServer) mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer")
}

// mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer indicates an expected call of mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer.
func (mr *MockUnsafeDefaultWhitelabelSettingsServiceServerMockRecorder) mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer", reflect.TypeOf((*MockUnsafeDefaultWhitelabelSettingsServiceServer)(nil).mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer))
}
