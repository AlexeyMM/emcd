// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protocol/default_whitelabel_settings/default_whitelabel_settings.proto

package default_whitelabel_settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DefaultWhitelabelSettingsService_Create_FullMethodName                  = "/default_whitelabel_settings.DefaultWhitelabelSettingsService/Create"
	DefaultWhitelabelSettingsService_Update_FullMethodName                  = "/default_whitelabel_settings.DefaultWhitelabelSettingsService/Update"
	DefaultWhitelabelSettingsService_Delete_FullMethodName                  = "/default_whitelabel_settings.DefaultWhitelabelSettingsService/Delete"
	DefaultWhitelabelSettingsService_GetAll_FullMethodName                  = "/default_whitelabel_settings.DefaultWhitelabelSettingsService/GetAll"
	DefaultWhitelabelSettingsService_GetAllWithoutPagination_FullMethodName = "/default_whitelabel_settings.DefaultWhitelabelSettingsService/GetAllWithoutPagination"
	DefaultWhitelabelSettingsService_GetV2_FullMethodName                   = "/default_whitelabel_settings.DefaultWhitelabelSettingsService/GetV2"
	DefaultWhitelabelSettingsService_Get_FullMethodName                     = "/default_whitelabel_settings.DefaultWhitelabelSettingsService/Get"
)

// DefaultWhitelabelSettingsServiceClient is the client API for DefaultWhitelabelSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultWhitelabelSettingsServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetAllWithoutPagination(ctx context.Context, in *GetAllWithoutPaginationRequest, opts ...grpc.CallOption) (*GetAllWithoutPaginationResponse, error)
	GetV2(ctx context.Context, in *GetV2Request, opts ...grpc.CallOption) (*GetV2Response, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type defaultWhitelabelSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultWhitelabelSettingsServiceClient(cc grpc.ClientConnInterface) DefaultWhitelabelSettingsServiceClient {
	return &defaultWhitelabelSettingsServiceClient{cc}
}

func (c *defaultWhitelabelSettingsServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, DefaultWhitelabelSettingsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultWhitelabelSettingsServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, DefaultWhitelabelSettingsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultWhitelabelSettingsServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, DefaultWhitelabelSettingsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultWhitelabelSettingsServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, DefaultWhitelabelSettingsService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultWhitelabelSettingsServiceClient) GetAllWithoutPagination(ctx context.Context, in *GetAllWithoutPaginationRequest, opts ...grpc.CallOption) (*GetAllWithoutPaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllWithoutPaginationResponse)
	err := c.cc.Invoke(ctx, DefaultWhitelabelSettingsService_GetAllWithoutPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultWhitelabelSettingsServiceClient) GetV2(ctx context.Context, in *GetV2Request, opts ...grpc.CallOption) (*GetV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetV2Response)
	err := c.cc.Invoke(ctx, DefaultWhitelabelSettingsService_GetV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultWhitelabelSettingsServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, DefaultWhitelabelSettingsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultWhitelabelSettingsServiceServer is the server API for DefaultWhitelabelSettingsService service.
// All implementations must embed UnimplementedDefaultWhitelabelSettingsServiceServer
// for forward compatibility.
type DefaultWhitelabelSettingsServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetAllWithoutPagination(context.Context, *GetAllWithoutPaginationRequest) (*GetAllWithoutPaginationResponse, error)
	GetV2(context.Context, *GetV2Request) (*GetV2Response, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer()
}

// UnimplementedDefaultWhitelabelSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultWhitelabelSettingsServiceServer struct{}

func (UnimplementedDefaultWhitelabelSettingsServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDefaultWhitelabelSettingsServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDefaultWhitelabelSettingsServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDefaultWhitelabelSettingsServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDefaultWhitelabelSettingsServiceServer) GetAllWithoutPagination(context.Context, *GetAllWithoutPaginationRequest) (*GetAllWithoutPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWithoutPagination not implemented")
}
func (UnimplementedDefaultWhitelabelSettingsServiceServer) GetV2(context.Context, *GetV2Request) (*GetV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetV2 not implemented")
}
func (UnimplementedDefaultWhitelabelSettingsServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDefaultWhitelabelSettingsServiceServer) mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer() {
}
func (UnimplementedDefaultWhitelabelSettingsServiceServer) testEmbeddedByValue() {}

// UnsafeDefaultWhitelabelSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultWhitelabelSettingsServiceServer will
// result in compilation errors.
type UnsafeDefaultWhitelabelSettingsServiceServer interface {
	mustEmbedUnimplementedDefaultWhitelabelSettingsServiceServer()
}

func RegisterDefaultWhitelabelSettingsServiceServer(s grpc.ServiceRegistrar, srv DefaultWhitelabelSettingsServiceServer) {
	// If the following call panics, it indicates UnimplementedDefaultWhitelabelSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultWhitelabelSettingsService_ServiceDesc, srv)
}

func _DefaultWhitelabelSettingsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultWhitelabelSettingsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultWhitelabelSettingsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultWhitelabelSettingsServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultWhitelabelSettingsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultWhitelabelSettingsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultWhitelabelSettingsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultWhitelabelSettingsServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultWhitelabelSettingsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultWhitelabelSettingsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultWhitelabelSettingsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultWhitelabelSettingsServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultWhitelabelSettingsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultWhitelabelSettingsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultWhitelabelSettingsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultWhitelabelSettingsServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultWhitelabelSettingsService_GetAllWithoutPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWithoutPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultWhitelabelSettingsServiceServer).GetAllWithoutPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultWhitelabelSettingsService_GetAllWithoutPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultWhitelabelSettingsServiceServer).GetAllWithoutPagination(ctx, req.(*GetAllWithoutPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultWhitelabelSettingsService_GetV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultWhitelabelSettingsServiceServer).GetV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultWhitelabelSettingsService_GetV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultWhitelabelSettingsServiceServer).GetV2(ctx, req.(*GetV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultWhitelabelSettingsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultWhitelabelSettingsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultWhitelabelSettingsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultWhitelabelSettingsServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultWhitelabelSettingsService_ServiceDesc is the grpc.ServiceDesc for DefaultWhitelabelSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultWhitelabelSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "default_whitelabel_settings.DefaultWhitelabelSettingsService",
	HandlerType: (*DefaultWhitelabelSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DefaultWhitelabelSettingsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DefaultWhitelabelSettingsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DefaultWhitelabelSettingsService_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _DefaultWhitelabelSettingsService_GetAll_Handler,
		},
		{
			MethodName: "GetAllWithoutPagination",
			Handler:    _DefaultWhitelabelSettingsService_GetAllWithoutPagination_Handler,
		},
		{
			MethodName: "GetV2",
			Handler:    _DefaultWhitelabelSettingsService_GetV2_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DefaultWhitelabelSettingsService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/default_whitelabel_settings/default_whitelabel_settings.proto",
}
