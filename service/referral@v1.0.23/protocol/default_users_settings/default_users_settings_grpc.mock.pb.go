// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/default_users_settings/default_users_settings_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source protocol/default_users_settings/default_users_settings_grpc.pb.go -destination protocol/default_users_settings/default_users_settings_grpc.mock.pb.go -package default_users_settings
//

// Package default_users_settings is a generated GoMock package.
package default_users_settings

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDefaultUsersSettingsServiceClient is a mock of DefaultUsersSettingsServiceClient interface.
type MockDefaultUsersSettingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultUsersSettingsServiceClientMockRecorder
}

// MockDefaultUsersSettingsServiceClientMockRecorder is the mock recorder for MockDefaultUsersSettingsServiceClient.
type MockDefaultUsersSettingsServiceClientMockRecorder struct {
	mock *MockDefaultUsersSettingsServiceClient
}

// NewMockDefaultUsersSettingsServiceClient creates a new mock instance.
func NewMockDefaultUsersSettingsServiceClient(ctrl *gomock.Controller) *MockDefaultUsersSettingsServiceClient {
	mock := &MockDefaultUsersSettingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockDefaultUsersSettingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultUsersSettingsServiceClient) EXPECT() *MockDefaultUsersSettingsServiceClientMockRecorder {
	return m.recorder
}

// CreateUsersSettings mocks base method.
func (m *MockDefaultUsersSettingsServiceClient) CreateUsersSettings(ctx context.Context, in *CreateUsersSettingsRequest, opts ...grpc.CallOption) (*CreateUsersSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUsersSettings", varargs...)
	ret0, _ := ret[0].(*CreateUsersSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsersSettings indicates an expected call of CreateUsersSettings.
func (mr *MockDefaultUsersSettingsServiceClientMockRecorder) CreateUsersSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersSettings", reflect.TypeOf((*MockDefaultUsersSettingsServiceClient)(nil).CreateUsersSettings), varargs...)
}

// GetUsersSettings mocks base method.
func (m *MockDefaultUsersSettingsServiceClient) GetUsersSettings(ctx context.Context, in *GetUsersSettingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUsersSettingsResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersSettings", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[GetUsersSettingsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersSettings indicates an expected call of GetUsersSettings.
func (mr *MockDefaultUsersSettingsServiceClientMockRecorder) GetUsersSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersSettings", reflect.TypeOf((*MockDefaultUsersSettingsServiceClient)(nil).GetUsersSettings), varargs...)
}

// UpdateUsersSettings mocks base method.
func (m *MockDefaultUsersSettingsServiceClient) UpdateUsersSettings(ctx context.Context, in *UpdateUsersSettingsRequest, opts ...grpc.CallOption) (*UpdateUsersSettingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsersSettings", varargs...)
	ret0, _ := ret[0].(*UpdateUsersSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsersSettings indicates an expected call of UpdateUsersSettings.
func (mr *MockDefaultUsersSettingsServiceClientMockRecorder) UpdateUsersSettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersSettings", reflect.TypeOf((*MockDefaultUsersSettingsServiceClient)(nil).UpdateUsersSettings), varargs...)
}

// MockDefaultUsersSettingsServiceServer is a mock of DefaultUsersSettingsServiceServer interface.
type MockDefaultUsersSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultUsersSettingsServiceServerMockRecorder
}

// MockDefaultUsersSettingsServiceServerMockRecorder is the mock recorder for MockDefaultUsersSettingsServiceServer.
type MockDefaultUsersSettingsServiceServerMockRecorder struct {
	mock *MockDefaultUsersSettingsServiceServer
}

// NewMockDefaultUsersSettingsServiceServer creates a new mock instance.
func NewMockDefaultUsersSettingsServiceServer(ctrl *gomock.Controller) *MockDefaultUsersSettingsServiceServer {
	mock := &MockDefaultUsersSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockDefaultUsersSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultUsersSettingsServiceServer) EXPECT() *MockDefaultUsersSettingsServiceServerMockRecorder {
	return m.recorder
}

// CreateUsersSettings mocks base method.
func (m *MockDefaultUsersSettingsServiceServer) CreateUsersSettings(arg0 context.Context, arg1 *CreateUsersSettingsRequest) (*CreateUsersSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsersSettings", arg0, arg1)
	ret0, _ := ret[0].(*CreateUsersSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsersSettings indicates an expected call of CreateUsersSettings.
func (mr *MockDefaultUsersSettingsServiceServerMockRecorder) CreateUsersSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersSettings", reflect.TypeOf((*MockDefaultUsersSettingsServiceServer)(nil).CreateUsersSettings), arg0, arg1)
}

// GetUsersSettings mocks base method.
func (m *MockDefaultUsersSettingsServiceServer) GetUsersSettings(arg0 *GetUsersSettingsRequest, arg1 grpc.ServerStreamingServer[GetUsersSettingsResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersSettings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsersSettings indicates an expected call of GetUsersSettings.
func (mr *MockDefaultUsersSettingsServiceServerMockRecorder) GetUsersSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersSettings", reflect.TypeOf((*MockDefaultUsersSettingsServiceServer)(nil).GetUsersSettings), arg0, arg1)
}

// UpdateUsersSettings mocks base method.
func (m *MockDefaultUsersSettingsServiceServer) UpdateUsersSettings(arg0 context.Context, arg1 *UpdateUsersSettingsRequest) (*UpdateUsersSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsersSettings", arg0, arg1)
	ret0, _ := ret[0].(*UpdateUsersSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsersSettings indicates an expected call of UpdateUsersSettings.
func (mr *MockDefaultUsersSettingsServiceServerMockRecorder) UpdateUsersSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersSettings", reflect.TypeOf((*MockDefaultUsersSettingsServiceServer)(nil).UpdateUsersSettings), arg0, arg1)
}

// mustEmbedUnimplementedDefaultUsersSettingsServiceServer mocks base method.
func (m *MockDefaultUsersSettingsServiceServer) mustEmbedUnimplementedDefaultUsersSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDefaultUsersSettingsServiceServer")
}

// mustEmbedUnimplementedDefaultUsersSettingsServiceServer indicates an expected call of mustEmbedUnimplementedDefaultUsersSettingsServiceServer.
func (mr *MockDefaultUsersSettingsServiceServerMockRecorder) mustEmbedUnimplementedDefaultUsersSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDefaultUsersSettingsServiceServer", reflect.TypeOf((*MockDefaultUsersSettingsServiceServer)(nil).mustEmbedUnimplementedDefaultUsersSettingsServiceServer))
}

// MockUnsafeDefaultUsersSettingsServiceServer is a mock of UnsafeDefaultUsersSettingsServiceServer interface.
type MockUnsafeDefaultUsersSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDefaultUsersSettingsServiceServerMockRecorder
}

// MockUnsafeDefaultUsersSettingsServiceServerMockRecorder is the mock recorder for MockUnsafeDefaultUsersSettingsServiceServer.
type MockUnsafeDefaultUsersSettingsServiceServerMockRecorder struct {
	mock *MockUnsafeDefaultUsersSettingsServiceServer
}

// NewMockUnsafeDefaultUsersSettingsServiceServer creates a new mock instance.
func NewMockUnsafeDefaultUsersSettingsServiceServer(ctrl *gomock.Controller) *MockUnsafeDefaultUsersSettingsServiceServer {
	mock := &MockUnsafeDefaultUsersSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDefaultUsersSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDefaultUsersSettingsServiceServer) EXPECT() *MockUnsafeDefaultUsersSettingsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDefaultUsersSettingsServiceServer mocks base method.
func (m *MockUnsafeDefaultUsersSettingsServiceServer) mustEmbedUnimplementedDefaultUsersSettingsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDefaultUsersSettingsServiceServer")
}

// mustEmbedUnimplementedDefaultUsersSettingsServiceServer indicates an expected call of mustEmbedUnimplementedDefaultUsersSettingsServiceServer.
func (mr *MockUnsafeDefaultUsersSettingsServiceServerMockRecorder) mustEmbedUnimplementedDefaultUsersSettingsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDefaultUsersSettingsServiceServer", reflect.TypeOf((*MockUnsafeDefaultUsersSettingsServiceServer)(nil).mustEmbedUnimplementedDefaultUsersSettingsServiceServer))
}
