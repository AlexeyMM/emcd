// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/default_users_settings/default_users_settings.proto

package default_users_settings

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserSettingsMultiError, or
// nil if none found.
func (m *UserSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	for idx, item := range m.GetSettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserSettingsValidationError{
						field:  fmt.Sprintf("Settings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserSettingsValidationError{
						field:  fmt.Sprintf("Settings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserSettingsValidationError{
					field:  fmt.Sprintf("Settings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserSettingsMultiError(errors)
	}

	return nil
}

// UserSettingsMultiError is an error wrapping multiple validation errors
// returned by UserSettings.ValidateAll() if the designated constraints aren't met.
type UserSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSettingsMultiError) AllErrors() []error { return m }

// UserSettingsValidationError is the validation error returned by
// UserSettings.Validate if the designated constraints aren't met.
type UserSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSettingsValidationError) ErrorName() string { return "UserSettingsValidationError" }

// Error satisfies the builtin error interface
func (e UserSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSettingsValidationError{}

// Validate checks the field values on UserPreference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPreference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPreference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPreferenceMultiError,
// or nil if none found.
func (m *UserPreference) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPreference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Product

	// no validation rules for Coin

	// no validation rules for Fee

	// no validation rules for ReferralFee

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserPreferenceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserPreferenceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserPreferenceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserPreferenceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserPreferenceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserPreferenceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserPreferenceMultiError(errors)
	}

	return nil
}

// UserPreferenceMultiError is an error wrapping multiple validation errors
// returned by UserPreference.ValidateAll() if the designated constraints
// aren't met.
type UserPreferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPreferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPreferenceMultiError) AllErrors() []error { return m }

// UserPreferenceValidationError is the validation error returned by
// UserPreference.Validate if the designated constraints aren't met.
type UserPreferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPreferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPreferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPreferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPreferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPreferenceValidationError) ErrorName() string { return "UserPreferenceValidationError" }

// Error satisfies the builtin error interface
func (e UserPreferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPreference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPreferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPreferenceValidationError{}

// Validate checks the field values on CreateUsersSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUsersSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUsersSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUsersSettingsRequestMultiError, or nil if none found.
func (m *CreateUsersSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUsersSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUsersSettingsRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUsersSettingsRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUsersSettingsRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateUsersSettingsRequestMultiError(errors)
	}

	return nil
}

// CreateUsersSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUsersSettingsRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateUsersSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUsersSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUsersSettingsRequestMultiError) AllErrors() []error { return m }

// CreateUsersSettingsRequestValidationError is the validation error returned
// by CreateUsersSettingsRequest.Validate if the designated constraints aren't met.
type CreateUsersSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUsersSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUsersSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUsersSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUsersSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUsersSettingsRequestValidationError) ErrorName() string {
	return "CreateUsersSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUsersSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUsersSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUsersSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUsersSettingsRequestValidationError{}

// Validate checks the field values on CreateUsersSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUsersSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUsersSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUsersSettingsResponseMultiError, or nil if none found.
func (m *CreateUsersSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUsersSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUsersSettingsResponseMultiError(errors)
	}

	return nil
}

// CreateUsersSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by CreateUsersSettingsResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateUsersSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUsersSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUsersSettingsResponseMultiError) AllErrors() []error { return m }

// CreateUsersSettingsResponseValidationError is the validation error returned
// by CreateUsersSettingsResponse.Validate if the designated constraints
// aren't met.
type CreateUsersSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUsersSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUsersSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUsersSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUsersSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUsersSettingsResponseValidationError) ErrorName() string {
	return "CreateUsersSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUsersSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUsersSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUsersSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUsersSettingsResponseValidationError{}

// Validate checks the field values on UpdateUsersSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUsersSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUsersSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUsersSettingsRequestMultiError, or nil if none found.
func (m *UpdateUsersSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUsersSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UpdateMode

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUsersSettingsRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUsersSettingsRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUsersSettingsRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateUsersSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateUsersSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUsersSettingsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUsersSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUsersSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUsersSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateUsersSettingsRequestValidationError is the validation error returned
// by UpdateUsersSettingsRequest.Validate if the designated constraints aren't met.
type UpdateUsersSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUsersSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUsersSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUsersSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUsersSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUsersSettingsRequestValidationError) ErrorName() string {
	return "UpdateUsersSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUsersSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUsersSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUsersSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUsersSettingsRequestValidationError{}

// Validate checks the field values on UpdateUsersSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUsersSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUsersSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUsersSettingsResponseMultiError, or nil if none found.
func (m *UpdateUsersSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUsersSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUsersSettingsResponseMultiError(errors)
	}

	return nil
}

// UpdateUsersSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUsersSettingsResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUsersSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUsersSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUsersSettingsResponseMultiError) AllErrors() []error { return m }

// UpdateUsersSettingsResponseValidationError is the validation error returned
// by UpdateUsersSettingsResponse.Validate if the designated constraints
// aren't met.
type UpdateUsersSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUsersSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUsersSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUsersSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUsersSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUsersSettingsResponseValidationError) ErrorName() string {
	return "UpdateUsersSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUsersSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUsersSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUsersSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUsersSettingsResponseValidationError{}

// Validate checks the field values on GetUsersSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersSettingsRequestMultiError, or nil if none found.
func (m *GetUsersSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersSettingsRequestMultiError(errors)
	}

	return nil
}

// GetUsersSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersSettingsRequestMultiError) AllErrors() []error { return m }

// GetUsersSettingsRequestValidationError is the validation error returned by
// GetUsersSettingsRequest.Validate if the designated constraints aren't met.
type GetUsersSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersSettingsRequestValidationError) ErrorName() string {
	return "GetUsersSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersSettingsRequestValidationError{}

// Validate checks the field values on GetUsersSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersSettingsResponseMultiError, or nil if none found.
func (m *GetUsersSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersSettingsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersSettingsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersSettingsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersSettingsResponseMultiError(errors)
	}

	return nil
}

// GetUsersSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsersSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersSettingsResponseMultiError) AllErrors() []error { return m }

// GetUsersSettingsResponseValidationError is the validation error returned by
// GetUsersSettingsResponse.Validate if the designated constraints aren't met.
type GetUsersSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersSettingsResponseValidationError) ErrorName() string {
	return "GetUsersSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersSettingsResponseValidationError{}
