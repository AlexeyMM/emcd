// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protocol/default_users_settings/default_users_settings.proto

package default_users_settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DefaultUsersSettingsService_CreateUsersSettings_FullMethodName = "/default_users_settings.DefaultUsersSettingsService/CreateUsersSettings"
	DefaultUsersSettingsService_UpdateUsersSettings_FullMethodName = "/default_users_settings.DefaultUsersSettingsService/UpdateUsersSettings"
	DefaultUsersSettingsService_GetUsersSettings_FullMethodName    = "/default_users_settings.DefaultUsersSettingsService/GetUsersSettings"
)

// DefaultUsersSettingsServiceClient is the client API for DefaultUsersSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultUsersSettingsServiceClient interface {
	// CreateUsersSettings создания реферальных настроек процентов рефоводу
	CreateUsersSettings(ctx context.Context, in *CreateUsersSettingsRequest, opts ...grpc.CallOption) (*CreateUsersSettingsResponse, error)
	// UpdateUsersSettings обновление дефолтных настоек у рефовода
	UpdateUsersSettings(ctx context.Context, in *UpdateUsersSettingsRequest, opts ...grpc.CallOption) (*UpdateUsersSettingsResponse, error)
	// GetUsersSettings возвращает реферальные настройки по пользователям, может вернуть только для 100 пользователей.
	GetUsersSettings(ctx context.Context, in *GetUsersSettingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUsersSettingsResponse], error)
}

type defaultUsersSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultUsersSettingsServiceClient(cc grpc.ClientConnInterface) DefaultUsersSettingsServiceClient {
	return &defaultUsersSettingsServiceClient{cc}
}

func (c *defaultUsersSettingsServiceClient) CreateUsersSettings(ctx context.Context, in *CreateUsersSettingsRequest, opts ...grpc.CallOption) (*CreateUsersSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUsersSettingsResponse)
	err := c.cc.Invoke(ctx, DefaultUsersSettingsService_CreateUsersSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultUsersSettingsServiceClient) UpdateUsersSettings(ctx context.Context, in *UpdateUsersSettingsRequest, opts ...grpc.CallOption) (*UpdateUsersSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUsersSettingsResponse)
	err := c.cc.Invoke(ctx, DefaultUsersSettingsService_UpdateUsersSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultUsersSettingsServiceClient) GetUsersSettings(ctx context.Context, in *GetUsersSettingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUsersSettingsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DefaultUsersSettingsService_ServiceDesc.Streams[0], DefaultUsersSettingsService_GetUsersSettings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUsersSettingsRequest, GetUsersSettingsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DefaultUsersSettingsService_GetUsersSettingsClient = grpc.ServerStreamingClient[GetUsersSettingsResponse]

// DefaultUsersSettingsServiceServer is the server API for DefaultUsersSettingsService service.
// All implementations must embed UnimplementedDefaultUsersSettingsServiceServer
// for forward compatibility.
type DefaultUsersSettingsServiceServer interface {
	// CreateUsersSettings создания реферальных настроек процентов рефоводу
	CreateUsersSettings(context.Context, *CreateUsersSettingsRequest) (*CreateUsersSettingsResponse, error)
	// UpdateUsersSettings обновление дефолтных настоек у рефовода
	UpdateUsersSettings(context.Context, *UpdateUsersSettingsRequest) (*UpdateUsersSettingsResponse, error)
	// GetUsersSettings возвращает реферальные настройки по пользователям, может вернуть только для 100 пользователей.
	GetUsersSettings(*GetUsersSettingsRequest, grpc.ServerStreamingServer[GetUsersSettingsResponse]) error
	mustEmbedUnimplementedDefaultUsersSettingsServiceServer()
}

// UnimplementedDefaultUsersSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultUsersSettingsServiceServer struct{}

func (UnimplementedDefaultUsersSettingsServiceServer) CreateUsersSettings(context.Context, *CreateUsersSettingsRequest) (*CreateUsersSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsersSettings not implemented")
}
func (UnimplementedDefaultUsersSettingsServiceServer) UpdateUsersSettings(context.Context, *UpdateUsersSettingsRequest) (*UpdateUsersSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsersSettings not implemented")
}
func (UnimplementedDefaultUsersSettingsServiceServer) GetUsersSettings(*GetUsersSettingsRequest, grpc.ServerStreamingServer[GetUsersSettingsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersSettings not implemented")
}
func (UnimplementedDefaultUsersSettingsServiceServer) mustEmbedUnimplementedDefaultUsersSettingsServiceServer() {
}
func (UnimplementedDefaultUsersSettingsServiceServer) testEmbeddedByValue() {}

// UnsafeDefaultUsersSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultUsersSettingsServiceServer will
// result in compilation errors.
type UnsafeDefaultUsersSettingsServiceServer interface {
	mustEmbedUnimplementedDefaultUsersSettingsServiceServer()
}

func RegisterDefaultUsersSettingsServiceServer(s grpc.ServiceRegistrar, srv DefaultUsersSettingsServiceServer) {
	// If the following call panics, it indicates UnimplementedDefaultUsersSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultUsersSettingsService_ServiceDesc, srv)
}

func _DefaultUsersSettingsService_CreateUsersSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultUsersSettingsServiceServer).CreateUsersSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultUsersSettingsService_CreateUsersSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultUsersSettingsServiceServer).CreateUsersSettings(ctx, req.(*CreateUsersSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultUsersSettingsService_UpdateUsersSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsersSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultUsersSettingsServiceServer).UpdateUsersSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultUsersSettingsService_UpdateUsersSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultUsersSettingsServiceServer).UpdateUsersSettings(ctx, req.(*UpdateUsersSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultUsersSettingsService_GetUsersSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersSettingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DefaultUsersSettingsServiceServer).GetUsersSettings(m, &grpc.GenericServerStream[GetUsersSettingsRequest, GetUsersSettingsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DefaultUsersSettingsService_GetUsersSettingsServer = grpc.ServerStreamingServer[GetUsersSettingsResponse]

// DefaultUsersSettingsService_ServiceDesc is the grpc.ServiceDesc for DefaultUsersSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultUsersSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "default_users_settings.DefaultUsersSettingsService",
	HandlerType: (*DefaultUsersSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUsersSettings",
			Handler:    _DefaultUsersSettingsService_CreateUsersSettings_Handler,
		},
		{
			MethodName: "UpdateUsersSettings",
			Handler:    _DefaultUsersSettingsService_UpdateUsersSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsersSettings",
			Handler:       _DefaultUsersSettingsService_GetUsersSettings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/default_users_settings/default_users_settings.proto",
}
