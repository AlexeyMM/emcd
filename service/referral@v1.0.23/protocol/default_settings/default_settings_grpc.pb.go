// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protocol/default_settings/default_settings.proto

package default_settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DefaultSettingsService_Create_FullMethodName                  = "/default_settings.DefaultSettingsService/Create"
	DefaultSettingsService_Update_FullMethodName                  = "/default_settings.DefaultSettingsService/Update"
	DefaultSettingsService_Delete_FullMethodName                  = "/default_settings.DefaultSettingsService/Delete"
	DefaultSettingsService_Get_FullMethodName                     = "/default_settings.DefaultSettingsService/Get"
	DefaultSettingsService_GetAll_FullMethodName                  = "/default_settings.DefaultSettingsService/GetAll"
	DefaultSettingsService_GetAllWithoutPagination_FullMethodName = "/default_settings.DefaultSettingsService/GetAllWithoutPagination"
)

// DefaultSettingsServiceClient is the client API for DefaultSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultSettingsServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	// GetAllWithoutPagination функция возвращает дефолтные значения по продуктам и монетам. Если передали referrer_id
	// то сначала проверяется таблица default_users_settings на наличие в ней записей, а потом обычные дефолтные
	// при этом возвращаются слитые значение, то есть то чего не было в default_users_settings добавляется из default_settings
	GetAllWithoutPagination(ctx context.Context, in *GetAllWithoutPaginationRequest, opts ...grpc.CallOption) (*GetAllWithoutPaginationResponse, error)
}

type defaultSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultSettingsServiceClient(cc grpc.ClientConnInterface) DefaultSettingsServiceClient {
	return &defaultSettingsServiceClient{cc}
}

func (c *defaultSettingsServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, DefaultSettingsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultSettingsServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, DefaultSettingsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultSettingsServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, DefaultSettingsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultSettingsServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, DefaultSettingsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultSettingsServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, DefaultSettingsService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultSettingsServiceClient) GetAllWithoutPagination(ctx context.Context, in *GetAllWithoutPaginationRequest, opts ...grpc.CallOption) (*GetAllWithoutPaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllWithoutPaginationResponse)
	err := c.cc.Invoke(ctx, DefaultSettingsService_GetAllWithoutPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultSettingsServiceServer is the server API for DefaultSettingsService service.
// All implementations must embed UnimplementedDefaultSettingsServiceServer
// for forward compatibility.
type DefaultSettingsServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	// GetAllWithoutPagination функция возвращает дефолтные значения по продуктам и монетам. Если передали referrer_id
	// то сначала проверяется таблица default_users_settings на наличие в ней записей, а потом обычные дефолтные
	// при этом возвращаются слитые значение, то есть то чего не было в default_users_settings добавляется из default_settings
	GetAllWithoutPagination(context.Context, *GetAllWithoutPaginationRequest) (*GetAllWithoutPaginationResponse, error)
	mustEmbedUnimplementedDefaultSettingsServiceServer()
}

// UnimplementedDefaultSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultSettingsServiceServer struct{}

func (UnimplementedDefaultSettingsServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDefaultSettingsServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDefaultSettingsServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDefaultSettingsServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDefaultSettingsServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDefaultSettingsServiceServer) GetAllWithoutPagination(context.Context, *GetAllWithoutPaginationRequest) (*GetAllWithoutPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWithoutPagination not implemented")
}
func (UnimplementedDefaultSettingsServiceServer) mustEmbedUnimplementedDefaultSettingsServiceServer() {
}
func (UnimplementedDefaultSettingsServiceServer) testEmbeddedByValue() {}

// UnsafeDefaultSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultSettingsServiceServer will
// result in compilation errors.
type UnsafeDefaultSettingsServiceServer interface {
	mustEmbedUnimplementedDefaultSettingsServiceServer()
}

func RegisterDefaultSettingsServiceServer(s grpc.ServiceRegistrar, srv DefaultSettingsServiceServer) {
	// If the following call panics, it indicates UnimplementedDefaultSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultSettingsService_ServiceDesc, srv)
}

func _DefaultSettingsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultSettingsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultSettingsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultSettingsServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultSettingsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultSettingsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultSettingsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultSettingsServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultSettingsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultSettingsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultSettingsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultSettingsServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultSettingsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultSettingsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultSettingsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultSettingsServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultSettingsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultSettingsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultSettingsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultSettingsServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultSettingsService_GetAllWithoutPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWithoutPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultSettingsServiceServer).GetAllWithoutPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultSettingsService_GetAllWithoutPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultSettingsServiceServer).GetAllWithoutPagination(ctx, req.(*GetAllWithoutPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultSettingsService_ServiceDesc is the grpc.ServiceDesc for DefaultSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "default_settings.DefaultSettingsService",
	HandlerType: (*DefaultSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DefaultSettingsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DefaultSettingsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DefaultSettingsService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DefaultSettingsService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _DefaultSettingsService_GetAll_Handler,
		},
		{
			MethodName: "GetAllWithoutPagination",
			Handler:    _DefaultSettingsService_GetAllWithoutPagination_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/default_settings/default_settings.proto",
}
