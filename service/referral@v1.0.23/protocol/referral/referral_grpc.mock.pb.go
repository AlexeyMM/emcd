// Code generated by MockGen. DO NOT EDIT.
// Source: protocol/referral/referral_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source protocol/referral/referral_grpc.pb.go -destination protocol/referral/referral_grpc.mock.pb.go -package referral
//

// Package referral is a generated GoMock package.
package referral

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockReferralServiceClient is a mock of ReferralServiceClient interface.
type MockReferralServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockReferralServiceClientMockRecorder
}

// MockReferralServiceClientMockRecorder is the mock recorder for MockReferralServiceClient.
type MockReferralServiceClientMockRecorder struct {
	mock *MockReferralServiceClient
}

// NewMockReferralServiceClient creates a new mock instance.
func NewMockReferralServiceClient(ctrl *gomock.Controller) *MockReferralServiceClient {
	mock := &MockReferralServiceClient{ctrl: ctrl}
	mock.recorder = &MockReferralServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferralServiceClient) EXPECT() *MockReferralServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReferralServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReferralServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReferralServiceClient)(nil).Create), varargs...)
}

// CreateMultiple mocks base method.
func (m *MockReferralServiceClient) CreateMultiple(ctx context.Context, in *CreateMultipleRequest, opts ...grpc.CallOption) (*CreateMultipleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultiple", varargs...)
	ret0, _ := ret[0].(*CreateMultipleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiple indicates an expected call of CreateMultiple.
func (mr *MockReferralServiceClientMockRecorder) CreateMultiple(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockReferralServiceClient)(nil).CreateMultiple), varargs...)
}

// Delete mocks base method.
func (m *MockReferralServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockReferralServiceClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReferralServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockReferralServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReferralServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReferralServiceClient)(nil).Get), varargs...)
}

// GetUserReferrals mocks base method.
func (m *MockReferralServiceClient) GetUserReferrals(ctx context.Context, in *GetUserReferralsRequest, opts ...grpc.CallOption) (*GetUserReferralsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserReferrals", varargs...)
	ret0, _ := ret[0].(*GetUserReferralsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReferrals indicates an expected call of GetUserReferrals.
func (mr *MockReferralServiceClientMockRecorder) GetUserReferrals(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReferrals", reflect.TypeOf((*MockReferralServiceClient)(nil).GetUserReferrals), varargs...)
}

// History mocks base method.
func (m *MockReferralServiceClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "History", varargs...)
	ret0, _ := ret[0].(*HistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockReferralServiceClientMockRecorder) History(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockReferralServiceClient)(nil).History), varargs...)
}

// List mocks base method.
func (m *MockReferralServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReferralServiceClientMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReferralServiceClient)(nil).List), varargs...)
}

// SetFee mocks base method.
func (m *MockReferralServiceClient) SetFee(ctx context.Context, in *SetFeeRequest, opts ...grpc.CallOption) (*SetFeeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFee", varargs...)
	ret0, _ := ret[0].(*SetFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFee indicates an expected call of SetFee.
func (mr *MockReferralServiceClientMockRecorder) SetFee(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFee", reflect.TypeOf((*MockReferralServiceClient)(nil).SetFee), varargs...)
}

// SetReferralUUID mocks base method.
func (m *MockReferralServiceClient) SetReferralUUID(ctx context.Context, in *SetReferralUUIDRequest, opts ...grpc.CallOption) (*SetReferralUUIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetReferralUUID", varargs...)
	ret0, _ := ret[0].(*SetReferralUUIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetReferralUUID indicates an expected call of SetReferralUUID.
func (mr *MockReferralServiceClientMockRecorder) SetReferralUUID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReferralUUID", reflect.TypeOf((*MockReferralServiceClient)(nil).SetReferralUUID), varargs...)
}

// Update mocks base method.
func (m *MockReferralServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockReferralServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReferralServiceClient)(nil).Update), varargs...)
}

// UpdateFeeToDefault mocks base method.
func (m *MockReferralServiceClient) UpdateFeeToDefault(ctx context.Context, in *UpdateFeeToDefaultRequest, opts ...grpc.CallOption) (*UpdateFeeToDefaultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFeeToDefault", varargs...)
	ret0, _ := ret[0].(*UpdateFeeToDefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeeToDefault indicates an expected call of UpdateFeeToDefault.
func (mr *MockReferralServiceClientMockRecorder) UpdateFeeToDefault(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeeToDefault", reflect.TypeOf((*MockReferralServiceClient)(nil).UpdateFeeToDefault), varargs...)
}

// UpdateFeeWithMultiplier mocks base method.
func (m *MockReferralServiceClient) UpdateFeeWithMultiplier(ctx context.Context, in *UpdateFeeWithMultiplierRequest, opts ...grpc.CallOption) (*UpdateFeeWithMultiplierResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFeeWithMultiplier", varargs...)
	ret0, _ := ret[0].(*UpdateFeeWithMultiplierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeeWithMultiplier indicates an expected call of UpdateFeeWithMultiplier.
func (mr *MockReferralServiceClientMockRecorder) UpdateFeeWithMultiplier(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeeWithMultiplier", reflect.TypeOf((*MockReferralServiceClient)(nil).UpdateFeeWithMultiplier), varargs...)
}

// UpdateWithPromoCode mocks base method.
func (m *MockReferralServiceClient) UpdateWithPromoCode(ctx context.Context, in *UpdateWithPromoCodeRequest, opts ...grpc.CallOption) (*UpdateWithPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWithPromoCode", varargs...)
	ret0, _ := ret[0].(*UpdateWithPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithPromoCode indicates an expected call of UpdateWithPromoCode.
func (mr *MockReferralServiceClientMockRecorder) UpdateWithPromoCode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithPromoCode", reflect.TypeOf((*MockReferralServiceClient)(nil).UpdateWithPromoCode), varargs...)
}

// MockReferralServiceServer is a mock of ReferralServiceServer interface.
type MockReferralServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockReferralServiceServerMockRecorder
}

// MockReferralServiceServerMockRecorder is the mock recorder for MockReferralServiceServer.
type MockReferralServiceServerMockRecorder struct {
	mock *MockReferralServiceServer
}

// NewMockReferralServiceServer creates a new mock instance.
func NewMockReferralServiceServer(ctrl *gomock.Controller) *MockReferralServiceServer {
	mock := &MockReferralServiceServer{ctrl: ctrl}
	mock.recorder = &MockReferralServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferralServiceServer) EXPECT() *MockReferralServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReferralServiceServer) Create(arg0 context.Context, arg1 *CreateRequest) (*CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReferralServiceServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReferralServiceServer)(nil).Create), arg0, arg1)
}

// CreateMultiple mocks base method.
func (m *MockReferralServiceServer) CreateMultiple(arg0 context.Context, arg1 *CreateMultipleRequest) (*CreateMultipleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiple", arg0, arg1)
	ret0, _ := ret[0].(*CreateMultipleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiple indicates an expected call of CreateMultiple.
func (mr *MockReferralServiceServerMockRecorder) CreateMultiple(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockReferralServiceServer)(nil).CreateMultiple), arg0, arg1)
}

// Delete mocks base method.
func (m *MockReferralServiceServer) Delete(arg0 context.Context, arg1 *DeleteRequest) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockReferralServiceServerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReferralServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockReferralServiceServer) Get(arg0 context.Context, arg1 *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReferralServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReferralServiceServer)(nil).Get), arg0, arg1)
}

// GetUserReferrals mocks base method.
func (m *MockReferralServiceServer) GetUserReferrals(arg0 context.Context, arg1 *GetUserReferralsRequest) (*GetUserReferralsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReferrals", arg0, arg1)
	ret0, _ := ret[0].(*GetUserReferralsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReferrals indicates an expected call of GetUserReferrals.
func (mr *MockReferralServiceServerMockRecorder) GetUserReferrals(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReferrals", reflect.TypeOf((*MockReferralServiceServer)(nil).GetUserReferrals), arg0, arg1)
}

// History mocks base method.
func (m *MockReferralServiceServer) History(arg0 context.Context, arg1 *HistoryRequest) (*HistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", arg0, arg1)
	ret0, _ := ret[0].(*HistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockReferralServiceServerMockRecorder) History(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockReferralServiceServer)(nil).History), arg0, arg1)
}

// List mocks base method.
func (m *MockReferralServiceServer) List(arg0 context.Context, arg1 *ListRequest) (*ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReferralServiceServerMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReferralServiceServer)(nil).List), arg0, arg1)
}

// SetFee mocks base method.
func (m *MockReferralServiceServer) SetFee(arg0 context.Context, arg1 *SetFeeRequest) (*SetFeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFee", arg0, arg1)
	ret0, _ := ret[0].(*SetFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFee indicates an expected call of SetFee.
func (mr *MockReferralServiceServerMockRecorder) SetFee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFee", reflect.TypeOf((*MockReferralServiceServer)(nil).SetFee), arg0, arg1)
}

// SetReferralUUID mocks base method.
func (m *MockReferralServiceServer) SetReferralUUID(arg0 context.Context, arg1 *SetReferralUUIDRequest) (*SetReferralUUIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReferralUUID", arg0, arg1)
	ret0, _ := ret[0].(*SetReferralUUIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetReferralUUID indicates an expected call of SetReferralUUID.
func (mr *MockReferralServiceServerMockRecorder) SetReferralUUID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReferralUUID", reflect.TypeOf((*MockReferralServiceServer)(nil).SetReferralUUID), arg0, arg1)
}

// Update mocks base method.
func (m *MockReferralServiceServer) Update(arg0 context.Context, arg1 *UpdateRequest) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockReferralServiceServerMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReferralServiceServer)(nil).Update), arg0, arg1)
}

// UpdateFeeToDefault mocks base method.
func (m *MockReferralServiceServer) UpdateFeeToDefault(arg0 context.Context, arg1 *UpdateFeeToDefaultRequest) (*UpdateFeeToDefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeeToDefault", arg0, arg1)
	ret0, _ := ret[0].(*UpdateFeeToDefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeeToDefault indicates an expected call of UpdateFeeToDefault.
func (mr *MockReferralServiceServerMockRecorder) UpdateFeeToDefault(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeeToDefault", reflect.TypeOf((*MockReferralServiceServer)(nil).UpdateFeeToDefault), arg0, arg1)
}

// UpdateFeeWithMultiplier mocks base method.
func (m *MockReferralServiceServer) UpdateFeeWithMultiplier(arg0 context.Context, arg1 *UpdateFeeWithMultiplierRequest) (*UpdateFeeWithMultiplierResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeeWithMultiplier", arg0, arg1)
	ret0, _ := ret[0].(*UpdateFeeWithMultiplierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeeWithMultiplier indicates an expected call of UpdateFeeWithMultiplier.
func (mr *MockReferralServiceServerMockRecorder) UpdateFeeWithMultiplier(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeeWithMultiplier", reflect.TypeOf((*MockReferralServiceServer)(nil).UpdateFeeWithMultiplier), arg0, arg1)
}

// UpdateWithPromoCode mocks base method.
func (m *MockReferralServiceServer) UpdateWithPromoCode(arg0 context.Context, arg1 *UpdateWithPromoCodeRequest) (*UpdateWithPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithPromoCode", arg0, arg1)
	ret0, _ := ret[0].(*UpdateWithPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithPromoCode indicates an expected call of UpdateWithPromoCode.
func (mr *MockReferralServiceServerMockRecorder) UpdateWithPromoCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithPromoCode", reflect.TypeOf((*MockReferralServiceServer)(nil).UpdateWithPromoCode), arg0, arg1)
}

// mustEmbedUnimplementedReferralServiceServer mocks base method.
func (m *MockReferralServiceServer) mustEmbedUnimplementedReferralServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedReferralServiceServer")
}

// mustEmbedUnimplementedReferralServiceServer indicates an expected call of mustEmbedUnimplementedReferralServiceServer.
func (mr *MockReferralServiceServerMockRecorder) mustEmbedUnimplementedReferralServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedReferralServiceServer", reflect.TypeOf((*MockReferralServiceServer)(nil).mustEmbedUnimplementedReferralServiceServer))
}

// MockUnsafeReferralServiceServer is a mock of UnsafeReferralServiceServer interface.
type MockUnsafeReferralServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeReferralServiceServerMockRecorder
}

// MockUnsafeReferralServiceServerMockRecorder is the mock recorder for MockUnsafeReferralServiceServer.
type MockUnsafeReferralServiceServerMockRecorder struct {
	mock *MockUnsafeReferralServiceServer
}

// NewMockUnsafeReferralServiceServer creates a new mock instance.
func NewMockUnsafeReferralServiceServer(ctrl *gomock.Controller) *MockUnsafeReferralServiceServer {
	mock := &MockUnsafeReferralServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeReferralServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeReferralServiceServer) EXPECT() *MockUnsafeReferralServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedReferralServiceServer mocks base method.
func (m *MockUnsafeReferralServiceServer) mustEmbedUnimplementedReferralServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedReferralServiceServer")
}

// mustEmbedUnimplementedReferralServiceServer indicates an expected call of mustEmbedUnimplementedReferralServiceServer.
func (mr *MockUnsafeReferralServiceServerMockRecorder) mustEmbedUnimplementedReferralServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedReferralServiceServer", reflect.TypeOf((*MockUnsafeReferralServiceServer)(nil).mustEmbedUnimplementedReferralServiceServer))
}
