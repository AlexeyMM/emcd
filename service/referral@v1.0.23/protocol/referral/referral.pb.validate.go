// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protocol/referral/referral.proto

package referral

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetReferralUUIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetReferralUUIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetReferralUUIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetReferralUUIDRequestMultiError, or nil if none found.
func (m *SetReferralUUIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetReferralUUIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for ReferralUuid

	if len(errors) > 0 {
		return SetReferralUUIDRequestMultiError(errors)
	}

	return nil
}

// SetReferralUUIDRequestMultiError is an error wrapping multiple validation
// errors returned by SetReferralUUIDRequest.ValidateAll() if the designated
// constraints aren't met.
type SetReferralUUIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetReferralUUIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetReferralUUIDRequestMultiError) AllErrors() []error { return m }

// SetReferralUUIDRequestValidationError is the validation error returned by
// SetReferralUUIDRequest.Validate if the designated constraints aren't met.
type SetReferralUUIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetReferralUUIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetReferralUUIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetReferralUUIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetReferralUUIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetReferralUUIDRequestValidationError) ErrorName() string {
	return "SetReferralUUIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetReferralUUIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetReferralUUIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetReferralUUIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetReferralUUIDRequestValidationError{}

// Validate checks the field values on SetReferralUUIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetReferralUUIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetReferralUUIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetReferralUUIDResponseMultiError, or nil if none found.
func (m *SetReferralUUIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetReferralUUIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetReferralUUIDResponseMultiError(errors)
	}

	return nil
}

// SetReferralUUIDResponseMultiError is an error wrapping multiple validation
// errors returned by SetReferralUUIDResponse.ValidateAll() if the designated
// constraints aren't met.
type SetReferralUUIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetReferralUUIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetReferralUUIDResponseMultiError) AllErrors() []error { return m }

// SetReferralUUIDResponseValidationError is the validation error returned by
// SetReferralUUIDResponse.Validate if the designated constraints aren't met.
type SetReferralUUIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetReferralUUIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetReferralUUIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetReferralUUIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetReferralUUIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetReferralUUIDResponseValidationError) ErrorName() string {
	return "SetReferralUUIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetReferralUUIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetReferralUUIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetReferralUUIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetReferralUUIDResponseValidationError{}

// Validate checks the field values on SetFeeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetFeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFeeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetFeeRequestMultiError, or
// nil if none found.
func (m *SetFeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	for idx, item := range m.GetFees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetFeeRequestValidationError{
						field:  fmt.Sprintf("Fees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetFeeRequestValidationError{
						field:  fmt.Sprintf("Fees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetFeeRequestValidationError{
					field:  fmt.Sprintf("Fees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetFeeRequestMultiError(errors)
	}

	return nil
}

// SetFeeRequestMultiError is an error wrapping multiple validation errors
// returned by SetFeeRequest.ValidateAll() if the designated constraints
// aren't met.
type SetFeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFeeRequestMultiError) AllErrors() []error { return m }

// SetFeeRequestValidationError is the validation error returned by
// SetFeeRequest.Validate if the designated constraints aren't met.
type SetFeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFeeRequestValidationError) ErrorName() string { return "SetFeeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetFeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFeeRequestValidationError{}

// Validate checks the field values on SetFeeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetFeeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFeeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetFeeResponseMultiError,
// or nil if none found.
func (m *SetFeeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFeeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetFeeResponseMultiError(errors)
	}

	return nil
}

// SetFeeResponseMultiError is an error wrapping multiple validation errors
// returned by SetFeeResponse.ValidateAll() if the designated constraints
// aren't met.
type SetFeeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFeeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFeeResponseMultiError) AllErrors() []error { return m }

// SetFeeResponseValidationError is the validation error returned by
// SetFeeResponse.Validate if the designated constraints aren't met.
type SetFeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFeeResponseValidationError) ErrorName() string { return "SetFeeResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetFeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFeeResponseValidationError{}

// Validate checks the field values on GetUserReferralsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserReferralsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReferralsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserReferralsRequestMultiError, or nil if none found.
func (m *GetUserReferralsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReferralsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skip

	// no validation rules for Limit

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserReferralsRequestMultiError(errors)
	}

	return nil
}

// GetUserReferralsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserReferralsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserReferralsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReferralsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReferralsRequestMultiError) AllErrors() []error { return m }

// GetUserReferralsRequestValidationError is the validation error returned by
// GetUserReferralsRequest.Validate if the designated constraints aren't met.
type GetUserReferralsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReferralsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReferralsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReferralsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReferralsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReferralsRequestValidationError) ErrorName() string {
	return "GetUserReferralsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReferralsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReferralsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReferralsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReferralsRequestValidationError{}

// Validate checks the field values on GetUserReferralsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserReferralsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReferralsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserReferralsResponseMultiError, or nil if none found.
func (m *GetUserReferralsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReferralsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserReferralsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserReferralsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserReferralsResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetUserReferralsResponseMultiError(errors)
	}

	return nil
}

// GetUserReferralsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserReferralsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserReferralsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReferralsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReferralsResponseMultiError) AllErrors() []error { return m }

// GetUserReferralsResponseValidationError is the validation error returned by
// GetUserReferralsResponse.Validate if the designated constraints aren't met.
type GetUserReferralsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReferralsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReferralsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReferralsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReferralsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReferralsResponseValidationError) ErrorName() string {
	return "GetUserReferralsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReferralsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReferralsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReferralsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReferralsResponseValidationError{}

// Validate checks the field values on UserReferral with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserReferral) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserReferral with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserReferralMultiError, or
// nil if none found.
func (m *UserReferral) ValidateAll() error {
	return m.validate(true)
}

func (m *UserReferral) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserReferralMultiError(errors)
	}

	return nil
}

// UserReferralMultiError is an error wrapping multiple validation errors
// returned by UserReferral.ValidateAll() if the designated constraints aren't met.
type UserReferralMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserReferralMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserReferralMultiError) AllErrors() []error { return m }

// UserReferralValidationError is the validation error returned by
// UserReferral.Validate if the designated constraints aren't met.
type UserReferralValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserReferralValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserReferralValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserReferralValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserReferralValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserReferralValidationError) ErrorName() string { return "UserReferralValidationError" }

// Error satisfies the builtin error interface
func (e UserReferralValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserReferral.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserReferralValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserReferralValidationError{}

// Validate checks the field values on Referral with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Referral) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Referral with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReferralMultiError, or nil
// if none found.
func (m *Referral) ValidateAll() error {
	return m.validate(true)
}

func (m *Referral) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Product

	// no validation rules for Coin

	// no validation rules for WhitelabelId

	// no validation rules for Fee

	// no validation rules for WhitelabelFee

	// no validation rules for ReferralFee

	// no validation rules for ReferralId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReferralValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReferralValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReferralValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReferralMultiError(errors)
	}

	return nil
}

// ReferralMultiError is an error wrapping multiple validation errors returned
// by Referral.ValidateAll() if the designated constraints aren't met.
type ReferralMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferralMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferralMultiError) AllErrors() []error { return m }

// ReferralValidationError is the validation error returned by
// Referral.Validate if the designated constraints aren't met.
type ReferralValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferralValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferralValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferralValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferralValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferralValidationError) ErrorName() string { return "ReferralValidationError" }

// Error satisfies the builtin error interface
func (e ReferralValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferral.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferralValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferralValidationError{}

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRequestMultiError, or
// nil if none found.
func (m *CreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReferral()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "Referral",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "Referral",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReferral()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestValidationError{
				field:  "Referral",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestMultiError(errors)
	}

	return nil
}

// CreateRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestMultiError) AllErrors() []error { return m }

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on CreateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResponseMultiError,
// or nil if none found.
func (m *CreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateResponseMultiError(errors)
	}

	return nil
}

// CreateResponseMultiError is an error wrapping multiple validation errors
// returned by CreateResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResponseMultiError) AllErrors() []error { return m }

// CreateResponseValidationError is the validation error returned by
// CreateResponse.Validate if the designated constraints aren't met.
type CreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResponseValidationError) ErrorName() string { return "CreateResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReferral()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "Referral",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "Referral",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReferral()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestValidationError{
				field:  "Referral",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Product

	// no validation rules for Coin

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Product

	// no validation rules for Coin

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReferral()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Referral",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Referral",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReferral()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Referral",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skip

	// no validation rules for Take

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on HistoryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoryRequestMultiError,
// or nil if none found.
func (m *HistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Product

	// no validation rules for Coin

	// no validation rules for WhitelabelId

	if len(errors) > 0 {
		return HistoryRequestMultiError(errors)
	}

	return nil
}

// HistoryRequestMultiError is an error wrapping multiple validation errors
// returned by HistoryRequest.ValidateAll() if the designated constraints
// aren't met.
type HistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryRequestMultiError) AllErrors() []error { return m }

// HistoryRequestValidationError is the validation error returned by
// HistoryRequest.Validate if the designated constraints aren't met.
type HistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryRequestValidationError) ErrorName() string { return "HistoryRequestValidationError" }

// Error satisfies the builtin error interface
func (e HistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryRequestValidationError{}

// Validate checks the field values on HistoryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HistoryResponseMultiError, or nil if none found.
func (m *HistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryResponseValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryResponseValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryResponseValidationError{
					field:  fmt.Sprintf("History[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HistoryResponseMultiError(errors)
	}

	return nil
}

// HistoryResponseMultiError is an error wrapping multiple validation errors
// returned by HistoryResponse.ValidateAll() if the designated constraints
// aren't met.
type HistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryResponseMultiError) AllErrors() []error { return m }

// HistoryResponseValidationError is the validation error returned by
// HistoryResponse.Validate if the designated constraints aren't met.
type HistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryResponseValidationError) ErrorName() string { return "HistoryResponseValidationError" }

// Error satisfies the builtin error interface
func (e HistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryResponseValidationError{}

// Validate checks the field values on CreateMultipleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMultipleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMultipleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMultipleRequestMultiError, or nil if none found.
func (m *CreateMultipleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMultipleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReferrals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMultipleRequestValidationError{
						field:  fmt.Sprintf("Referrals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMultipleRequestValidationError{
						field:  fmt.Sprintf("Referrals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMultipleRequestValidationError{
					field:  fmt.Sprintf("Referrals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMultipleRequestMultiError(errors)
	}

	return nil
}

// CreateMultipleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMultipleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMultipleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMultipleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMultipleRequestMultiError) AllErrors() []error { return m }

// CreateMultipleRequestValidationError is the validation error returned by
// CreateMultipleRequest.Validate if the designated constraints aren't met.
type CreateMultipleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMultipleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMultipleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMultipleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMultipleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMultipleRequestValidationError) ErrorName() string {
	return "CreateMultipleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMultipleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMultipleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMultipleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMultipleRequestValidationError{}

// Validate checks the field values on CreateMultipleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMultipleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMultipleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMultipleResponseMultiError, or nil if none found.
func (m *CreateMultipleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMultipleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateMultipleResponseMultiError(errors)
	}

	return nil
}

// CreateMultipleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMultipleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMultipleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMultipleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMultipleResponseMultiError) AllErrors() []error { return m }

// CreateMultipleResponseValidationError is the validation error returned by
// CreateMultipleResponse.Validate if the designated constraints aren't met.
type CreateMultipleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMultipleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMultipleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMultipleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMultipleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMultipleResponseValidationError) ErrorName() string {
	return "CreateMultipleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMultipleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMultipleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMultipleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMultipleResponseValidationError{}

// Validate checks the field values on UpdateFeeWithMultiplierRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeeWithMultiplierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeeWithMultiplierRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateFeeWithMultiplierRequestMultiError, or nil if none found.
func (m *UpdateFeeWithMultiplierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeeWithMultiplierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Multiplier

	// no validation rules for UserId

	// no validation rules for Product

	if len(errors) > 0 {
		return UpdateFeeWithMultiplierRequestMultiError(errors)
	}

	return nil
}

// UpdateFeeWithMultiplierRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateFeeWithMultiplierRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateFeeWithMultiplierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeeWithMultiplierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeeWithMultiplierRequestMultiError) AllErrors() []error { return m }

// UpdateFeeWithMultiplierRequestValidationError is the validation error
// returned by UpdateFeeWithMultiplierRequest.Validate if the designated
// constraints aren't met.
type UpdateFeeWithMultiplierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeeWithMultiplierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeeWithMultiplierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeeWithMultiplierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeeWithMultiplierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeeWithMultiplierRequestValidationError) ErrorName() string {
	return "UpdateFeeWithMultiplierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeeWithMultiplierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeeWithMultiplierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeeWithMultiplierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeeWithMultiplierRequestValidationError{}

// Validate checks the field values on UpdateFeeWithMultiplierResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeeWithMultiplierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeeWithMultiplierResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateFeeWithMultiplierResponseMultiError, or nil if none found.
func (m *UpdateFeeWithMultiplierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeeWithMultiplierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFeeWithMultiplierResponseMultiError(errors)
	}

	return nil
}

// UpdateFeeWithMultiplierResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateFeeWithMultiplierResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateFeeWithMultiplierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeeWithMultiplierResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeeWithMultiplierResponseMultiError) AllErrors() []error { return m }

// UpdateFeeWithMultiplierResponseValidationError is the validation error
// returned by UpdateFeeWithMultiplierResponse.Validate if the designated
// constraints aren't met.
type UpdateFeeWithMultiplierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeeWithMultiplierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeeWithMultiplierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeeWithMultiplierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeeWithMultiplierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeeWithMultiplierResponseValidationError) ErrorName() string {
	return "UpdateFeeWithMultiplierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeeWithMultiplierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeeWithMultiplierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeeWithMultiplierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeeWithMultiplierResponseValidationError{}

// Validate checks the field values on UpdateFeeToDefaultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeeToDefaultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeeToDefaultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeeToDefaultRequestMultiError, or nil if none found.
func (m *UpdateFeeToDefaultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeeToDefaultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Product

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateFeeToDefaultRequestMultiError(errors)
	}

	return nil
}

// UpdateFeeToDefaultRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFeeToDefaultRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateFeeToDefaultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeeToDefaultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeeToDefaultRequestMultiError) AllErrors() []error { return m }

// UpdateFeeToDefaultRequestValidationError is the validation error returned by
// UpdateFeeToDefaultRequest.Validate if the designated constraints aren't met.
type UpdateFeeToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeeToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeeToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeeToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeeToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeeToDefaultRequestValidationError) ErrorName() string {
	return "UpdateFeeToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeeToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeeToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeeToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeeToDefaultRequestValidationError{}

// Validate checks the field values on UpdateFeeToDefaultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeeToDefaultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeeToDefaultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeeToDefaultResponseMultiError, or nil if none found.
func (m *UpdateFeeToDefaultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeeToDefaultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFeeToDefaultResponseMultiError(errors)
	}

	return nil
}

// UpdateFeeToDefaultResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateFeeToDefaultResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateFeeToDefaultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeeToDefaultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeeToDefaultResponseMultiError) AllErrors() []error { return m }

// UpdateFeeToDefaultResponseValidationError is the validation error returned
// by UpdateFeeToDefaultResponse.Validate if the designated constraints aren't met.
type UpdateFeeToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeeToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeeToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeeToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeeToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeeToDefaultResponseValidationError) ErrorName() string {
	return "UpdateFeeToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeeToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeeToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeeToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeeToDefaultResponseValidationError{}

// Validate checks the field values on UpdateWithPromoCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWithPromoCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWithPromoCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWithPromoCodeRequestMultiError, or nil if none found.
func (m *UpdateWithPromoCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWithPromoCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FeeMultipliers

	// no validation rules for RefFeeMultipliers

	// no validation rules for ActionId

	// no validation rules for Product

	if len(errors) > 0 {
		return UpdateWithPromoCodeRequestMultiError(errors)
	}

	return nil
}

// UpdateWithPromoCodeRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWithPromoCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateWithPromoCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWithPromoCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWithPromoCodeRequestMultiError) AllErrors() []error { return m }

// UpdateWithPromoCodeRequestValidationError is the validation error returned
// by UpdateWithPromoCodeRequest.Validate if the designated constraints aren't met.
type UpdateWithPromoCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWithPromoCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWithPromoCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWithPromoCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWithPromoCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWithPromoCodeRequestValidationError) ErrorName() string {
	return "UpdateWithPromoCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWithPromoCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWithPromoCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWithPromoCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWithPromoCodeRequestValidationError{}

// Validate checks the field values on UpdateWithPromoCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWithPromoCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWithPromoCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWithPromoCodeResponseMultiError, or nil if none found.
func (m *UpdateWithPromoCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWithPromoCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateWithPromoCodeResponseMultiError(errors)
	}

	return nil
}

// UpdateWithPromoCodeResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateWithPromoCodeResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateWithPromoCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWithPromoCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWithPromoCodeResponseMultiError) AllErrors() []error { return m }

// UpdateWithPromoCodeResponseValidationError is the validation error returned
// by UpdateWithPromoCodeResponse.Validate if the designated constraints
// aren't met.
type UpdateWithPromoCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWithPromoCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWithPromoCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWithPromoCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWithPromoCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWithPromoCodeResponseValidationError) ErrorName() string {
	return "UpdateWithPromoCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWithPromoCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWithPromoCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWithPromoCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWithPromoCodeResponseValidationError{}

// Validate checks the field values on SetFeeRequest_CoinFee with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetFeeRequest_CoinFee) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFeeRequest_CoinFee with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetFeeRequest_CoinFeeMultiError, or nil if none found.
func (m *SetFeeRequest_CoinFee) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFeeRequest_CoinFee) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Coin

	// no validation rules for Product

	// no validation rules for Fee

	if len(errors) > 0 {
		return SetFeeRequest_CoinFeeMultiError(errors)
	}

	return nil
}

// SetFeeRequest_CoinFeeMultiError is an error wrapping multiple validation
// errors returned by SetFeeRequest_CoinFee.ValidateAll() if the designated
// constraints aren't met.
type SetFeeRequest_CoinFeeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFeeRequest_CoinFeeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFeeRequest_CoinFeeMultiError) AllErrors() []error { return m }

// SetFeeRequest_CoinFeeValidationError is the validation error returned by
// SetFeeRequest_CoinFee.Validate if the designated constraints aren't met.
type SetFeeRequest_CoinFeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFeeRequest_CoinFeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFeeRequest_CoinFeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFeeRequest_CoinFeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFeeRequest_CoinFeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFeeRequest_CoinFeeValidationError) ErrorName() string {
	return "SetFeeRequest_CoinFeeValidationError"
}

// Error satisfies the builtin error interface
func (e SetFeeRequest_CoinFeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFeeRequest_CoinFee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFeeRequest_CoinFeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFeeRequest_CoinFeeValidationError{}
