// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protocol/referral/referral.proto

package referral

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReferralService_Create_FullMethodName                  = "/referral.ReferralService/Create"
	ReferralService_Update_FullMethodName                  = "/referral.ReferralService/Update"
	ReferralService_Delete_FullMethodName                  = "/referral.ReferralService/Delete"
	ReferralService_Get_FullMethodName                     = "/referral.ReferralService/Get"
	ReferralService_List_FullMethodName                    = "/referral.ReferralService/List"
	ReferralService_History_FullMethodName                 = "/referral.ReferralService/History"
	ReferralService_CreateMultiple_FullMethodName          = "/referral.ReferralService/CreateMultiple"
	ReferralService_GetUserReferrals_FullMethodName        = "/referral.ReferralService/GetUserReferrals"
	ReferralService_UpdateFeeWithMultiplier_FullMethodName = "/referral.ReferralService/UpdateFeeWithMultiplier"
	ReferralService_UpdateFeeToDefault_FullMethodName      = "/referral.ReferralService/UpdateFeeToDefault"
	ReferralService_UpdateWithPromoCode_FullMethodName     = "/referral.ReferralService/UpdateWithPromoCode"
	ReferralService_SetFee_FullMethodName                  = "/referral.ReferralService/SetFee"
	ReferralService_SetReferralUUID_FullMethodName         = "/referral.ReferralService/SetReferralUUID"
)

// ReferralServiceClient is the client API for ReferralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferralServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	CreateMultiple(ctx context.Context, in *CreateMultipleRequest, opts ...grpc.CallOption) (*CreateMultipleResponse, error)
	GetUserReferrals(ctx context.Context, in *GetUserReferralsRequest, opts ...grpc.CallOption) (*GetUserReferralsResponse, error)
	// Deprecated: Do not use.
	UpdateFeeWithMultiplier(ctx context.Context, in *UpdateFeeWithMultiplierRequest, opts ...grpc.CallOption) (*UpdateFeeWithMultiplierResponse, error)
	UpdateFeeToDefault(ctx context.Context, in *UpdateFeeToDefaultRequest, opts ...grpc.CallOption) (*UpdateFeeToDefaultResponse, error)
	UpdateWithPromoCode(ctx context.Context, in *UpdateWithPromoCodeRequest, opts ...grpc.CallOption) (*UpdateWithPromoCodeResponse, error)
	// SetFee установка комиссии по монетам и продукту вручную.
	SetFee(ctx context.Context, in *SetFeeRequest, opts ...grpc.CallOption) (*SetFeeResponse, error)
	// SetReferralUUID обновление реферальной связи у пользователя.
	SetReferralUUID(ctx context.Context, in *SetReferralUUIDRequest, opts ...grpc.CallOption) (*SetReferralUUIDResponse, error)
}

type referralServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferralServiceClient(cc grpc.ClientConnInterface) ReferralServiceClient {
	return &referralServiceClient{cc}
}

func (c *referralServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ReferralService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ReferralService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ReferralService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ReferralService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ReferralService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, ReferralService_History_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) CreateMultiple(ctx context.Context, in *CreateMultipleRequest, opts ...grpc.CallOption) (*CreateMultipleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMultipleResponse)
	err := c.cc.Invoke(ctx, ReferralService_CreateMultiple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) GetUserReferrals(ctx context.Context, in *GetUserReferralsRequest, opts ...grpc.CallOption) (*GetUserReferralsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserReferralsResponse)
	err := c.cc.Invoke(ctx, ReferralService_GetUserReferrals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *referralServiceClient) UpdateFeeWithMultiplier(ctx context.Context, in *UpdateFeeWithMultiplierRequest, opts ...grpc.CallOption) (*UpdateFeeWithMultiplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeeWithMultiplierResponse)
	err := c.cc.Invoke(ctx, ReferralService_UpdateFeeWithMultiplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) UpdateFeeToDefault(ctx context.Context, in *UpdateFeeToDefaultRequest, opts ...grpc.CallOption) (*UpdateFeeToDefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeeToDefaultResponse)
	err := c.cc.Invoke(ctx, ReferralService_UpdateFeeToDefault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) UpdateWithPromoCode(ctx context.Context, in *UpdateWithPromoCodeRequest, opts ...grpc.CallOption) (*UpdateWithPromoCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWithPromoCodeResponse)
	err := c.cc.Invoke(ctx, ReferralService_UpdateWithPromoCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) SetFee(ctx context.Context, in *SetFeeRequest, opts ...grpc.CallOption) (*SetFeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFeeResponse)
	err := c.cc.Invoke(ctx, ReferralService_SetFee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) SetReferralUUID(ctx context.Context, in *SetReferralUUIDRequest, opts ...grpc.CallOption) (*SetReferralUUIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetReferralUUIDResponse)
	err := c.cc.Invoke(ctx, ReferralService_SetReferralUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferralServiceServer is the server API for ReferralService service.
// All implementations must embed UnimplementedReferralServiceServer
// for forward compatibility.
type ReferralServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	History(context.Context, *HistoryRequest) (*HistoryResponse, error)
	CreateMultiple(context.Context, *CreateMultipleRequest) (*CreateMultipleResponse, error)
	GetUserReferrals(context.Context, *GetUserReferralsRequest) (*GetUserReferralsResponse, error)
	// Deprecated: Do not use.
	UpdateFeeWithMultiplier(context.Context, *UpdateFeeWithMultiplierRequest) (*UpdateFeeWithMultiplierResponse, error)
	UpdateFeeToDefault(context.Context, *UpdateFeeToDefaultRequest) (*UpdateFeeToDefaultResponse, error)
	UpdateWithPromoCode(context.Context, *UpdateWithPromoCodeRequest) (*UpdateWithPromoCodeResponse, error)
	// SetFee установка комиссии по монетам и продукту вручную.
	SetFee(context.Context, *SetFeeRequest) (*SetFeeResponse, error)
	// SetReferralUUID обновление реферальной связи у пользователя.
	SetReferralUUID(context.Context, *SetReferralUUIDRequest) (*SetReferralUUIDResponse, error)
	mustEmbedUnimplementedReferralServiceServer()
}

// UnimplementedReferralServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReferralServiceServer struct{}

func (UnimplementedReferralServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReferralServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReferralServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReferralServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReferralServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReferralServiceServer) History(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedReferralServiceServer) CreateMultiple(context.Context, *CreateMultipleRequest) (*CreateMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiple not implemented")
}
func (UnimplementedReferralServiceServer) GetUserReferrals(context.Context, *GetUserReferralsRequest) (*GetUserReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReferrals not implemented")
}
func (UnimplementedReferralServiceServer) UpdateFeeWithMultiplier(context.Context, *UpdateFeeWithMultiplierRequest) (*UpdateFeeWithMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeWithMultiplier not implemented")
}
func (UnimplementedReferralServiceServer) UpdateFeeToDefault(context.Context, *UpdateFeeToDefaultRequest) (*UpdateFeeToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeToDefault not implemented")
}
func (UnimplementedReferralServiceServer) UpdateWithPromoCode(context.Context, *UpdateWithPromoCodeRequest) (*UpdateWithPromoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithPromoCode not implemented")
}
func (UnimplementedReferralServiceServer) SetFee(context.Context, *SetFeeRequest) (*SetFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFee not implemented")
}
func (UnimplementedReferralServiceServer) SetReferralUUID(context.Context, *SetReferralUUIDRequest) (*SetReferralUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReferralUUID not implemented")
}
func (UnimplementedReferralServiceServer) mustEmbedUnimplementedReferralServiceServer() {}
func (UnimplementedReferralServiceServer) testEmbeddedByValue()                         {}

// UnsafeReferralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferralServiceServer will
// result in compilation errors.
type UnsafeReferralServiceServer interface {
	mustEmbedUnimplementedReferralServiceServer()
}

func RegisterReferralServiceServer(s grpc.ServiceRegistrar, srv ReferralServiceServer) {
	// If the following call panics, it indicates UnimplementedReferralServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReferralService_ServiceDesc, srv)
}

func _ReferralService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_History_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_CreateMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).CreateMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_CreateMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).CreateMultiple(ctx, req.(*CreateMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_GetUserReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReferralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).GetUserReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_GetUserReferrals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).GetUserReferrals(ctx, req.(*GetUserReferralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_UpdateFeeWithMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeeWithMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).UpdateFeeWithMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_UpdateFeeWithMultiplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).UpdateFeeWithMultiplier(ctx, req.(*UpdateFeeWithMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_UpdateFeeToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeeToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).UpdateFeeToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_UpdateFeeToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).UpdateFeeToDefault(ctx, req.(*UpdateFeeToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_UpdateWithPromoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithPromoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).UpdateWithPromoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_UpdateWithPromoCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).UpdateWithPromoCode(ctx, req.(*UpdateWithPromoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_SetFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).SetFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_SetFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).SetFee(ctx, req.(*SetFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_SetReferralUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReferralUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).SetReferralUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_SetReferralUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).SetReferralUUID(ctx, req.(*SetReferralUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferralService_ServiceDesc is the grpc.ServiceDesc for ReferralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "referral.ReferralService",
	HandlerType: (*ReferralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReferralService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReferralService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReferralService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ReferralService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ReferralService_List_Handler,
		},
		{
			MethodName: "History",
			Handler:    _ReferralService_History_Handler,
		},
		{
			MethodName: "CreateMultiple",
			Handler:    _ReferralService_CreateMultiple_Handler,
		},
		{
			MethodName: "GetUserReferrals",
			Handler:    _ReferralService_GetUserReferrals_Handler,
		},
		{
			MethodName: "UpdateFeeWithMultiplier",
			Handler:    _ReferralService_UpdateFeeWithMultiplier_Handler,
		},
		{
			MethodName: "UpdateFeeToDefault",
			Handler:    _ReferralService_UpdateFeeToDefault_Handler,
		},
		{
			MethodName: "UpdateWithPromoCode",
			Handler:    _ReferralService_UpdateWithPromoCode_Handler,
		},
		{
			MethodName: "SetFee",
			Handler:    _ReferralService_SetFee_Handler,
		},
		{
			MethodName: "SetReferralUUID",
			Handler:    _ReferralService_SetReferralUUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/referral/referral.proto",
}
