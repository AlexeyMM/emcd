// Code generated by mockery v2.46.0. DO NOT EDIT.

package repository

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "code.emcdtech.com/emcd/service/referral/internal/model"

	uuid "github.com/google/uuid"
)

// MockReferral is an autogenerated mock type for the Referral type
type MockReferral struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *MockReferral) Create(ctx context.Context, in *model.Referral) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Referral) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMultiple provides a mock function with given fields: ctx, rs
func (_m *MockReferral) CreateMultiple(ctx context.Context, rs []*model.Referral) error {
	ret := _m.Called(ctx, rs)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Referral) error); ok {
		r0 = rf(ctx, rs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, userID, product, coin
func (_m *MockReferral) Delete(ctx context.Context, userID uuid.UUID, product string, coin string) error {
	ret := _m.Called(ctx, userID, product, coin)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, userID, product, coin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userID, product, coin
func (_m *MockReferral) Get(ctx context.Context, userID uuid.UUID, product string, coin string) (*model.Referral, error) {
	ret := _m.Called(ctx, userID, product, coin)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Referral
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) (*model.Referral, error)); ok {
		return rf(ctx, userID, product, coin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) *model.Referral); ok {
		r0 = rf(ctx, userID, product, coin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Referral)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, userID, product, coin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserReferrals provides a mock function with given fields: ctx, userID, skip, limit
func (_m *MockReferral) GetUserReferrals(ctx context.Context, userID uuid.UUID, skip int32, limit int32) ([]*model.UserReferral, int64, error) {
	ret := _m.Called(ctx, userID, skip, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUserReferrals")
	}

	var r0 []*model.UserReferral
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) ([]*model.UserReferral, int64, error)); ok {
		return rf(ctx, userID, skip, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) []*model.UserReferral); ok {
		r0 = rf(ctx, userID, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserReferral)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int32, int32) int64); ok {
		r1 = rf(ctx, userID, skip, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int32, int32) error); ok {
		r2 = rf(ctx, userID, skip, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// History provides a mock function with given fields: ctx, userID, product, coin
func (_m *MockReferral) History(ctx context.Context, userID uuid.UUID, product string, coin string) ([]*model.Referral, error) {
	ret := _m.Called(ctx, userID, product, coin)

	if len(ret) == 0 {
		panic("no return value specified for History")
	}

	var r0 []*model.Referral
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) ([]*model.Referral, error)); ok {
		return rf(ctx, userID, product, coin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) []*model.Referral); ok {
		r0 = rf(ctx, userID, product, coin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Referral)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, userID, product, coin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, userID, skip, take
func (_m *MockReferral) List(ctx context.Context, userID uuid.UUID, skip int32, take int32) ([]*model.Referral, int, error) {
	ret := _m.Called(ctx, userID, skip, take)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Referral
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) ([]*model.Referral, int, error)); ok {
		return rf(ctx, userID, skip, take)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) []*model.Referral); ok {
		r0 = rf(ctx, userID, skip, take)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Referral)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int32, int32) int); ok {
		r1 = rf(ctx, userID, skip, take)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int32, int32) error); ok {
		r2 = rf(ctx, userID, skip, take)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, in
func (_m *MockReferral) Update(ctx context.Context, in *model.Referral) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Referral) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFee provides a mock function with given fields: ctx, userID, product, fees
func (_m *MockReferral) UpdateFee(ctx context.Context, userID uuid.UUID, product string, fees map[string]decimal.Decimal) error {
	ret := _m.Called(ctx, userID, product, fees)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, map[string]decimal.Decimal) error); ok {
		r0 = rf(ctx, userID, product, fees)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFeeByCoinAndProduct provides a mock function with given fields: ctx, userUUID, fees
func (_m *MockReferral) UpdateFeeByCoinAndProduct(ctx context.Context, userUUID []string, fees []model.SettingForCoinAndProduct) error {
	ret := _m.Called(ctx, userUUID, fees)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeeByCoinAndProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, []model.SettingForCoinAndProduct) error); ok {
		r0 = rf(ctx, userUUID, fees)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReferralUUIDByUserUUID provides a mock function with given fields: ctx, userUUID, referralUUID
func (_m *MockReferral) UpdateReferralUUIDByUserUUID(ctx context.Context, userUUID []string, referralUUID string) error {
	ret := _m.Called(ctx, userUUID, referralUUID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReferralUUIDByUserUUID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) error); ok {
		r0 = rf(ctx, userUUID, referralUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithMultiplier provides a mock function with given fields: ctx, userID, product, coins, multiplier
func (_m *MockReferral) UpdateWithMultiplier(ctx context.Context, userID uuid.UUID, product string, coins []string, multiplier decimal.Decimal) error {
	ret := _m.Called(ctx, userID, product, coins, multiplier)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithMultiplier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []string, decimal.Decimal) error); ok {
		r0 = rf(ctx, userID, product, coins, multiplier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWithPromoCodeByCoin provides a mock function with given fields: ctx, cm
func (_m *MockReferral) UpdateWithPromoCodeByCoin(ctx context.Context, cm *model.CoinMultiplier) error {
	ret := _m.Called(ctx, cm)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithPromoCodeByCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CoinMultiplier) error); ok {
		r0 = rf(ctx, cm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockReferral creates a new instance of MockReferral. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReferral(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReferral {
	mock := &MockReferral{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
