// Code generated by mockery v2.46.0. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.emcdtech.com/emcd/service/referral/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockProfile is an autogenerated mock type for the Profile type
type MockProfile struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, userID
func (_m *MockProfile) Get(ctx context.Context, userID uuid.UUID) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSubUsers provides a mock function with given fields: ctx, userUUID
func (_m *MockProfile) GetAllSubUsers(ctx context.Context, userUUID string) ([]string, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSubUsers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockProfile creates a new instance of MockProfile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfile {
	mock := &MockProfile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
